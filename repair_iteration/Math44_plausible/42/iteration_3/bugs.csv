bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(isLastStep)  {  for(EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(isLastStep)  {  for(EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(isLastStep)  {  for(EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
2	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(isLastStep)  {  for(EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(isLastStep)  {  for(EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(isLastStep)  {  for(EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
3	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  statesInitialized.iterator();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  Iterator  <  EventState>  iterator  =  statesInitialized.iterator();  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	Iterator  <  EventState>  iterator  =  statesInitialized.iterator();	  Iterator    <    EventState>    iterator    =    eventsInitialized.iterator();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
4	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  state);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  state);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  state);	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>(),    orderingSign,    state);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
5	[BUG]  [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>(),  orderingSign,  state);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>(),  orderingSign,  state);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>(),  orderingSign,  state);	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>(),    orderingSign,    state);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
6	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>(),  orderingSign,  state.stepStart);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>(),  orderingSign,  state.stepStart);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>(),  orderingSign,  state.stepStart);	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>(),    orderingSign,    state);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
7	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>(),  orderingSign,  state.isLastStep());  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>(),  orderingSign,  state.isLastStep());  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>(),  orderingSign,  state.isLastStep());	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>(),    orderingSign,    state);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
8	[BUG]  [BUGGY]  final  int  orderingSign  =  state.evaluateInt(orderingSign);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  int  orderingSign  =  state.evaluateInt(orderingSign);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  int  orderingSign  =  state.evaluateInt(orderingSign);	  if(orderingSign    ==    0)    {    if(state.evaluateStep(interpolator))    {    orderingSign    +=    state.evaluateInt(orderingSign);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
9	[BUG]  [BUGGY]  orderingSign  +=  state.evaluateInt(orderingSign);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  +=  state.evaluateInt(orderingSign);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  +=  state.evaluateInt(orderingSign);	  if(orderingSign    ==    0)    {    if(state.evaluateStep(interpolator))    {    orderingSign    +=    state.evaluateInt(orderingSign);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
10	[BUG]  [BUGGY]  orderingSign  +=  state.getSteps().size()  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  +=  state.getSteps().size()  -  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  +=  state.getSteps().size()  -  1;	  orderingSign    +=    state.getSteps().size();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
11	[BUG]  [BUGGY]  orderingSign  +=  state.getSteps().size()  -  2;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  +=  state.getSteps().size()  -  2;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  +=  state.getSteps().size()  -  2;	  orderingSign    +=    state.getSteps().size();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
12	[BUG]  [BUGGY]  orderingSign  +=  state.getSteps().size()  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  +=  state.getSteps().size()  +  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  +=  state.getSteps().size()  +  1;	  orderingSign    +=    state.getSteps().size();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
13	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
14	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
15	[BUG]  [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  new  Comparator  <  EventState>());  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  new  Comparator  <  EventState>());  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  new  Comparator  <  EventState>());	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign,    new    Comparator    <    EventState>());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
16	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  new  Comparator  <  EventState>(),  statesInitialized);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  new  Comparator  <  EventState>(),  statesInitialized);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  new  Comparator  <  EventState>(),  statesInitialized);	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign,    new    Comparator    <    EventState>());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
17	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  new  Comparator  <  EventState>(),  state);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  new  Comparator  <  EventState>(),  state);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  new  Comparator  <  EventState>(),  state);	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign,    new    Comparator    <    EventState>());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
18	[BUG]  [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  SortedSet  <  EventState>()  {  [CE]  <anonymous  org.apache.commons.math.ode.AbstractIntegrator$1>  is  not  abstract  and  does  not  override  abstract  method  last()  in  SortedSet  [FE]          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  SortedSet  <  EventState>()  {  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  SortedSet  <  EventState>()  {	  final    SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>()    {    final    SortedSet    <    EventState>    occurs    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>()    {    	non-compiled	[CE]  <anonymous  org.apache.commons.math.ode.AbstractIntegrator$1>  is  not  abstract  and  does  not  override  abstract  method  last()  in  SortedSet	78	None	replace
19	[BUG]  [BUGGY]  final  SortedSet  <  EventState>  occurs  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>()  {  [CE]  cannot  find  symbol  occuringEvents  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  SortedSet  <  EventState>  occurs  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>()  {  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  SortedSet  <  EventState>  occurs  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>()  {	  final    SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>()    {    final    SortedSet    <    EventState>    occurs    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>()    {    	non-compiled	[CE]  cannot  find  symbol  occuringEvents	78	None	replace
20	[BUG]  [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>())  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>())  {  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>())  {	  final    SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>()    {    final    SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>()    {    	non-compiled	[CE]  ';'  expected	12	None	replace
21	[BUG]  [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  order);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  order);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  order);	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign,    order);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
22	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  order.length);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  order.length);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  order.length);	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign,    order);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
23	[BUG]  [BUGGY]  if(orderingSign!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  orderingSign  +=  state.evaluateStep(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  orderingSign  +=  state.evaluateStep(interpolator);  }  }  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  orderingSign  +=  state.evaluateStep(interpolator);  }  }	  if(orderingSign!=    null)    {    for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    orderingSign    +=    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
24	[BUG]  [BUGGY]  if(orderingSign!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateBegin(interpolator))  {  orderingSign  +=  state.evaluateStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateBegin(interpolator))  {  orderingSign  +=  state.evaluateStep(interpolator);  }  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateBegin(interpolator))  {  orderingSign  +=  state.evaluateStep(interpolator);  }	  if(orderingSign!=    null)    {    for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    orderingSign    +=    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
25	[BUG]  [BUGGY]  if(orderingSign!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateBegin(interpolator))  {  orderingSign  +=  state.evaluateStep(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateBegin(interpolator))  {  orderingSign  +=  state.evaluateStep(interpolator);  }  }  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateBegin(interpolator))  {  orderingSign  +=  state.evaluateStep(interpolator);  }  }	  if(orderingSign!=    null)    {    for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    orderingSign    +=    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
26	[BUG]  [BUGGY]  for(EventState  state  :  eventsInitialized)  {  event.resetOccurred();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  for(EventState  state  :  eventsInitialized)  {  event.resetOccurred();  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	for(EventState  state  :  eventsInitialized)  {  event.resetOccurred();  }	  for(EventState    state    :    eventsInitialized)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
27	[BUG]  [BUGGY]  for(EventState  state  :  eventsInitialized)  {  event.resetOccurredStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  for(EventState  state  :  eventsInitialized)  {  event.resetOccurredStep(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	for(EventState  state  :  eventsInitialized)  {  event.resetOccurredStep(interpolator);  }	  for(EventState    state    :    eventsInitialized)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
28	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }	  if(orderingSign!=    null)    {    if(isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
29	[BUG]  [BUGGY]  if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }	  if(orderingSign    ==    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
30	[BUG]  [BUGGY]  if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }	  if(orderingSign    ==    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
31	[BUG]  [BUGGY]  if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventStates)  {  state.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventStates)  {  state.reinitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventStates)  {  state.reinitializeBegin(interpolator);  }  }	  if(orderingSign    ==    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
32	[BUG]  [BUGGY]  if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }  }	  if(orderingSign    ==    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
33	[BUG]  [BUGGY]  if(orderingSign  ==  0)  {  if(isLastStep)  {  for(EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign  ==  0)  {  if(isLastStep)  {  for(EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign  ==  0)  {  if(isLastStep)  {  for(EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }  }	  if(orderingSign    ==    0)    {    if(isLastStep)    {    for(EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
34	[BUG]  [BUGGY]  if(orderingSign  ==  0)  {  if(isLastStep)  {  for(EventState  state  :  eventsStates)  {  state.reInitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign  ==  0)  {  if(isLastStep)  {  for(EventState  state  :  eventsStates)  {  state.reInitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign  ==  0)  {  if(isLastStep)  {  for(EventState  state  :  eventsStates)  {  state.reInitializeBegin(interpolator);  }  }	  if(orderingSign    ==    0)    {    if(isLastStep)    {    for(EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
35	[BUG]  [BUGGY]  if(orderingSign  ==  0)  {  if(isLastStep)  {  for(EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign  ==  0)  {  if(isLastStep)  {  for(EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign  ==  0)  {  if(isLastStep)  {  for(EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }	  if(orderingSign    ==    0)    {    if(isLastStep)    {    for(EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
36	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderY);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderY);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderY);	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign,    orderingSign);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
37	[BUG]  [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderingSign);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderingSign);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderingSign);	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign,    orderingSign);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
38	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderStart);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderStart);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderStart);	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign,    orderingSign);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
39	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  ordery,  new  Comparator  <  EventState>()  {  [CE]  cannot  find  symbol  ordery  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  ordery,  new  Comparator  <  EventState>()  {  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  ordery,  new  Comparator  <  EventState>()  {	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign,    orderedSign,    new    Comparator    <    EventState>()    {    	non-compiled	[CE]  cannot  find  symbol  ordery	51	None	replace
40	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  +  orderingSign,  name);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  +  orderingSign,  name);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  +  orderingSign,  name);	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign    +    orderingSign);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
41	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  +  tEnd);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  +  tEnd);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  +  tEnd);	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign    +    orderingSign);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
42	[BUG]  [BUGGY]  if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }	  if(orderingSign    ==    0)    {    if(!isLastStep)    {    for(EventState    state    :    eventStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
43	[BUG]  [BUGGY]  if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(EventState  state  :  eventStates)  {  state.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(EventState  state  :  eventStates)  {  state.reinitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(EventState  state  :  eventStates)  {  state.reinitializeBegin(interpolator);  }  }	  if(orderingSign    ==    0)    {    if(!isLastStep)    {    for(EventState    state    :    eventStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
44	[BUG]  [BUGGY]  if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }  }	  if(orderingSign    ==    0)    {    if(!isLastStep)    {    for(EventState    state    :    eventStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
45	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  continue;  }	  if(orderingSign!=    null)    {    for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
46	[BUG]  [BUGGY]  if(orderingSign!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateBegin(interpolator))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateBegin(interpolator))  {  continue;  }  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateBegin(interpolator))  {  continue;  }	  if(orderingSign!=    null)    {    for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
47	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateBegin(interpolator))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateBegin(interpolator))  {  continue;  }  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateBegin(interpolator))  {  continue;  }	  if(orderingSign!=    null)    {    for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
48	[BUG]  [BUGGY]  orderingSign  +=  state.getTail();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  +=  state.getTail();  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  +=  state.getTail();	  if(orderingSign    >    0)    {    for(EventState    es1    :    state.getSteps())    {    orderingSign    +=    es1.getTail();    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
49	[BUG]  [BUGGY]  orderingSign  +=  es1.getTail();  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  +=  es1.getTail();  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  +=  es1.getTail();	  if(orderingSign    >    0)    {    for(EventState    es1    :    state.getSteps())    {    orderingSign    +=    es1.getTail();    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
50	[BUG]  [BUGGY]  orderingSign  -=  state.getSteps().getTail();  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  -=  state.getSteps().getTail();  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  -=  state.getSteps().getTail();	  if(orderingSign    >    0)    {    for(EventState    es1    :    state.getSteps())    {    orderingSign    +=    es1.getTail();    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
51	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderDot,  new  Comparator  <  EventState>()  {  [CE]  cannot  find  symbol  orderDot  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderDot,  new  Comparator  <  EventState>()  {  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderDot,  new  Comparator  <  EventState>()  {	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign,    orderY,    new    Comparator    <    EventState>()    {    	non-compiled	[CE]  cannot  find  symbol  orderDot	50	None	replace
52	[BUG]  [BUGGY]  final  SortedSet  <  EventState>  occurredingEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>(),  orderingSign);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  SortedSet  <  EventState>  occurredingEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>(),  orderingSign);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  SortedSet  <  EventState>  occurredingEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>(),  orderingSign);	  final    SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>()    {    final    SortedSet    <    EventState>    occurredingEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
53	[BUG]  [BUGGY]  final  SortedSet  <  EventState>  occurredingEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>());  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  SortedSet  <  EventState>  occurredingEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>());  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  SortedSet  <  EventState>  occurredingEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>());	  final    SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>()    {    final    SortedSet    <    EventState>    occurredingEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
54	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  es1.stepHandlers.iterator();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  Iterator  <  EventState>  iterator  =  es1.stepHandlers.iterator();  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	Iterator  <  EventState>  iterator  =  es1.stepHandlers.iterator();	  Iterator    <    EventState>    iterator    =    state.stepHandlers.iterator();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
55	[BUG]  [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>(),  orderingSign,  isLastStep);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>(),  orderingSign,  isLastStep);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>(),  orderingSign,  isLastStep);	  final    SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>(),    orderingSign);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
56	[BUG]  [BUGGY]  orderingSign  =  state.getEventSigns().size()  -  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  =  state.getEventSigns().size()  -  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  =  state.getEventSigns().size()  -  1;	  orderingSign    =    state.getEventSigns().size();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
57	[BUG]  [BUGGY]  orderingSign  =  state.getEventSigns().size()  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  =  state.getEventSigns().size()  +  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  =  state.getEventSigns().size()  +  1;	  orderingSign    =    state.getEventSigns().size();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
58	[BUG]  [BUGGY]  orderingSign  =  state.getEventSigns().size()  -  2;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  =  state.getEventSigns().size()  -  2;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  =  state.getEventSigns().size()  -  2;	  orderingSign    =    state.getEventSigns().size();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
59	[BUG]  [BUGGY]  orderedSign  =  orderingSign;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderedSign  =  orderingSign;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderedSign  =  orderingSign;	  orderedSign    =    0;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
60	[BUG]  [BUGGY]  orderedSign  -=  0;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderedSign  -=  0;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderedSign  -=  0;	  orderedSign    =    0;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
61	[BUG]  [BUGGY]  orderedSign  =  orderedSign;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderedSign  =  orderedSign;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderedSign  =  orderedSign;	  orderedSign    =    0;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
62	[BUG]  [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  -  orderingSign);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  -  orderingSign);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  -  orderingSign);	  final    SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
63	[BUG]  [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  +  orderingSign);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  +  orderingSign);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  +  orderingSign);	  final    SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
64	[BUG]  [BUGGY]  if(orderingSign  ==  0)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign  ==  0)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign  ==  0)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }	  if(orderingSign    ==    0)    {    if(isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
65	[BUG]  [BUGGY]  if(orderingSign  ==  0)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign  ==  0)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign  ==  0)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }  }	  if(orderingSign    ==    0)    {    if(isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
66	[BUG]  [BUGGY]  final  SortedSet  <  EventState>  occurredingEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>()  {  [CE]  cannot  find  symbol  occuringEvents  [FE]        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  SortedSet  <  EventState>  occurredingEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>()  {  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  SortedSet  <  EventState>  occurredingEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>()  {	  final    SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>()    {    final    SortedSet    <    EventState>    occurredingEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>()    {    	non-compiled	[CE]  cannot  find  symbol  occuringEvents	77	None	replace
67	[BUG]  [BUGGY]  orderingSign  +=  state.getEventSigns().size()  -  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  +=  state.getEventSigns().size()  -  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  +=  state.getEventSigns().size()  -  1;	  orderingSign    +=    state.getEventSigns().size();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
68	[BUG]  [BUGGY]  orderingSign  +=  state.getEventSigns().size()  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  +=  state.getEventSigns().size()  +  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  +=  state.getEventSigns().size()  +  1;	  orderingSign    +=    state.getEventSigns().size();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
69	[BUG]  [BUGGY]  orderingSign  +=  state.getEventSigns().size()  -  2;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  +=  state.getEventSigns().size()  -  2;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  +=  state.getEventSigns().size()  -  2;	  orderingSign    +=    state.getEventSigns().size();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
70	[BUG]  [BUGGY]  orderingSign  +=  state.evaluateBegin(interpolator);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  +=  state.evaluateBegin(interpolator);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  +=  state.evaluateBegin(interpolator);	  if(orderingSign    ==    0)    {    if(state.evaluateStep(interpolator))    {    orderingSign    +=    state.evaluateBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
71	[BUG]  [BUGGY]  final  int  orderingSign  =  state.evaluateBegin(interpolator);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  int  orderingSign  =  state.evaluateBegin(interpolator);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  int  orderingSign  =  state.evaluateBegin(interpolator);	  if(orderingSign    ==    0)    {    if(state.evaluateStep(interpolator))    {    orderingSign    +=    state.evaluateBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
72	[BUG]  [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderingSign,  new  Comparator  <  EventState>()  {  [CE]  no  suitable  constructor  found  for  TreeSet(int,int,<anonymous  Comparator<EventState>>)  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderingSign,  new  Comparator  <  EventState>()  {  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderingSign,  new  Comparator  <  EventState>()  {	  final    SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign,    new    Comparator    <    EventState>()    {    	non-compiled	[CE]  no  suitable  constructor  found  for  TreeSet(int,int,<anonymous  Comparator<EventState>>)	52	None	replace
73	[BUG]  [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderedSign,  new  Comparator  <  EventState>()  {  [CE]  cannot  find  symbol  orderedSign  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderedSign,  new  Comparator  <  EventState>()  {  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderedSign,  new  Comparator  <  EventState>()  {	  final    SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign,    new    Comparator    <    EventState>()    {    	non-compiled	[CE]  cannot  find  symbol  orderedSign	52	None	replace
74	[BUG]  [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderY,  new  Comparator  <  EventState>()  {  [CE]  cannot  find  symbol  orderY  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderY,  new  Comparator  <  EventState>()  {  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderY,  new  Comparator  <  EventState>()  {	  final    SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign,    new    Comparator    <    EventState>()    {    	non-compiled	[CE]  cannot  find  symbol  orderY	52	None	replace
75	[BUG]  [BUGGY]  if(orderingSign!=  null)  {  if(isLastStep)  {  for(EventState  state  =  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  null)  {  if(isLastStep)  {  for(EventState  state  =  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  null)  {  if(isLastStep)  {  for(EventState  state  =  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }	  if(orderingSign!=    null)    {    if(isLastStep)    {    for(EventState    state    :    eventsInitialized)    {    event.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  ';'  expected	3	None	replace
76	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reInitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reInitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reInitializeBegin(interpolator);  }  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    event.reInitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
77	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reInitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reInitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reInitializeBegin(interpolator);  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    event.reInitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
78	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reInitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reInitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reInitializeBegin(interpolator);  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    event.reInitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
79	[BUG]  [BUGGY]  if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(final  EventState  state  =  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(final  EventState  state  =  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(final  EventState  state  =  eventsStates)  {  state.reinitializeBegin(interpolator);  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(final    EventState    state    =    eventsStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  ';'  expected	72	None	replace
80	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  =  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  =  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  =  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(final    EventState    state    =    eventsStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  ';'  expected	72	None	replace
81	[BUG]  [BUGGY]  if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(final  EventState  state  =  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(final  EventState  state  =  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(final  EventState  state  =  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(final    EventState    state    =    eventsStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  ';'  expected	72	None	replace
82	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  event.resetOccurredStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  event.resetOccurredStep(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	for(final  EventState  state  :  eventsStates)  {  event.resetOccurredStep(interpolator);  }	  for(final    EventState    state    :    eventsInitialized)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
83	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  event.resetOccurred();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  event.resetOccurred();  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	for(final  EventState  state  :  eventsInitialized)  {  event.resetOccurred();  }	  for(final    EventState    state    :    eventsInitialized)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
84	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  event.restartBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  event.restartBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	for(final  EventState  state  :  eventsStates)  {  event.restartBegin(interpolator);  }	  for(final    EventState    state    :    eventsInitialized)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
85	[BUG]  [BUGGY]  final  int  orderingSign  =  events.getOrdinal();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  int  orderingSign  =  events.getOrdinal();  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  int  orderingSign  =  events.getOrdinal();	  final    int    orderingSign    =    eventsStates.getOrdinal();    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
86	[BUG]  [BUGGY]  final  int  orderingSign  =  statesInitialized.getOrdinal();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  int  orderingSign  =  statesInitialized.getOrdinal();  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  int  orderingSign  =  statesInitialized.getOrdinal();	  final    int    orderingSign    =    eventsStates.getOrdinal();    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
87	[BUG]  [BUGGY]  final  int  orderingSign  =  eventStates.getOrdinal()  -  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  int  orderingSign  =  eventStates.getOrdinal()  -  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  int  orderingSign  =  eventStates.getOrdinal()  -  1;	  final    int    orderingSign    =    eventsStates.getOrdinal();    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
88	[BUG]  [BUGGY]  if(orderingSign  ==  null)  {  if(isLastStep)  {  for(EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign  ==  null)  {  if(isLastStep)  {  for(EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign  ==  null)  {  if(isLastStep)  {  for(EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }	  if(orderingSign!=    null)    {    if(isLastStep)    {    for(EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
89	[BUG]  [BUGGY]  if(orderingSign!=  null)  {  if(isLastStep)  {  for(EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  null)  {  if(isLastStep)  {  for(EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  null)  {  if(isLastStep)  {  for(EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }	  if(orderingSign!=    null)    {    if(isLastStep)    {    for(EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
90	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  -  2);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  -  2);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  -  2);	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign    -    1);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
91	[BUG]  [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  -  1);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  -  1);	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign    -    1);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
92	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(!isLastStep)  {  for(EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(EventState    state    :    eventStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
93	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(EventState  state  :  eventStates)  {  state.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(EventState  state  :  eventStates)  {  state.reinitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(!isLastStep)  {  for(EventState  state  :  eventStates)  {  state.reinitializeBegin(interpolator);  }  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(EventState    state    :    eventStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
94	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(!isLastStep)  {  for(EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(EventState    state    :    eventStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
95	[BUG]  [BUGGY]  orderingSign  -=  state.getEventSigns().size()  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  -=  state.getEventSigns().size()  +  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  -=  state.getEventSigns().size()  +  1;	  orderingSign    -=    state.getEventSigns().size();    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
96	[BUG]  [BUGGY]  orderingSign  -=  state.getEventSigns().size()  -  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  -=  state.getEventSigns().size()  -  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  -=  state.getEventSigns().size()  -  1;	  orderingSign    -=    state.getEventSigns().size();    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
97	[BUG]  [BUGGY]  orderingSign  -=  state.getEventSigns().size()  +  2;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  -=  state.getEventSigns().size()  +  2;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  -=  state.getEventSigns().size()  +  2;	  orderingSign    -=    state.getEventSigns().size();    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
98	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.itializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.itializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.itializeBegin(interpolator);  }  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    state.itializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
99	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.itializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.itializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.itializeBegin(interpolator);  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    state.itializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
100	[BUG]  [BUGGY]  orderedSign  +=  state.getEventSigns().size()  -  orderingSign;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderedSign  +=  state.getEventSigns().size()  -  orderingSign;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderedSign  +=  state.getEventSigns().size()  -  orderingSign;	  orderedSign    +=    state.getEventSigns().size();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
101	[BUG]  [BUGGY]  orderedSign  +=  state.getEventSigns().size()  -  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderedSign  +=  state.getEventSigns().size()  -  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderedSign  +=  state.getEventSigns().size()  -  1;	  orderedSign    +=    state.getEventSigns().size();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
102	[BUG]  [BUGGY]  orderedSign  +=  state.getEventSigns().size()  +  orderingSign;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderedSign  +=  state.getEventSigns().size()  +  orderingSign;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderedSign  +=  state.getEventSigns().size()  +  orderingSign;	  orderedSign    +=    state.getEventSigns().size();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
103	[BUG]  [BUGGY]  final  int  orderedSign  =  orderingSign.size();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  int  orderedSign  =  orderingSign.size();  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  int  orderedSign  =  orderingSign.size();	  final    int    orderedSign    =    orderedSign.size();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
104	[BUG]  [BUGGY]  final  int  orderedSign  =  orderingSign.size()  -  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  int  orderedSign  =  orderingSign.size()  -  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  int  orderedSign  =  orderingSign.size()  -  1;	  final    int    orderedSign    =    orderedSign.size();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
105	[BUG]  [BUGGY]  final  SortedSet  <  EventState>  occurredEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>(),  orderingSign);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  SortedSet  <  EventState>  occurredEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>(),  orderingSign);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  SortedSet  <  EventState>  occurredEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>(),  orderingSign);	  final    SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>()    {    final    SortedSet    <    EventState>    occurredEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
106	[BUG]  [BUGGY]  final  SortedSet  <  EventState>  occurredEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>());  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  SortedSet  <  EventState>  occurredEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>());  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  SortedSet  <  EventState>  occurredEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>());	  final    SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>()    {    final    SortedSet    <    EventState>    occurredEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
107	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  +  2);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  +  2);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  +  2);	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign    +    1);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
108	[BUG]  [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  +  1);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  +  1);	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign    +    1);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
109	[BUG]  [BUGGY]  final  int  orderedSign  =  orderingSign.compareTo(state.getSteps());  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  int  orderedSign  =  orderingSign.compareTo(state.getSteps());  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  int  orderedSign  =  orderingSign.compareTo(state.getSteps());	  final    int    orderedSign    =    orderedSign.compareTo(state.getSteps());    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
110	[BUG]  [BUGGY]  final  int  orderedSign  =  state.getSteps().compareTo(orderedSign.getSteps());  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  int  orderedSign  =  state.getSteps().compareTo(orderedSign.getSteps());  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  int  orderedSign  =  state.getSteps().compareTo(orderedSign.getSteps());	  final    int    orderedSign    =    orderedSign.compareTo(state.getSteps());    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
111	[BUG]  [BUGGY]  final  int  orderedSign  =  state.compareTo(orderedSign.getSteps());  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  int  orderedSign  =  state.compareTo(orderedSign.getSteps());  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  int  orderedSign  =  state.compareTo(orderedSign.getSteps());	  final    int    orderedSign    =    orderedSign.compareTo(state.getSteps());    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
112	[BUG]  [BUGGY]  orderingSign  +=  state.getEventTime();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  +=  state.getEventTime();  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  +=  state.getEventTime();	  if(orderingSign    >    0)    {    for(EventState    es1    :    state.getEventStates())    {    orderingSign    +=    es1.getEventTime();    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
113	[BUG]  [BUGGY]  orderingSign  +=  es1.getEventTime();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  +=  es1.getEventTime();  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  +=  es1.getEventTime();	  if(orderingSign    >    0)    {    for(EventState    es1    :    state.getEventStates())    {    orderingSign    +=    es1.getEventTime();    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
114	[BUG]  [BUGGY]  orderingSign  -=  es1.getEventTime();  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  -=  es1.getEventTime();  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  -=  es1.getEventTime();	  if(orderingSign    >    0)    {    for(EventState    es1    :    state.getEventStates())    {    orderingSign    +=    es1.getEventTime();    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
115	[BUG]  [BUGGY]  if(orderingSign  ==  0)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign  ==  0)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign  ==  0)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }	  if(orderingSign    ==    0)    {    if(isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
116	[BUG]  [BUGGY]  if(orderingSign  ==  0)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign  ==  0)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign  ==  0)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }	  if(orderingSign    ==    0)    {    if(isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
117	[BUG]  [BUGGY]  orderingSign  +=  state.getEventSign();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  +=  state.getEventSign();  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  +=  state.getEventSign();	  if(orderingSign    >    0)    {    for(EventState    es1    :    state.getEventStates())    {    orderingSign    +=    es1.getEventSign();    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
118	[BUG]  [BUGGY]  orderingSign  +=  es1.getEventSign();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  +=  es1.getEventSign();  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  +=  es1.getEventSign();	  if(orderingSign    >    0)    {    for(EventState    es1    :    state.getEventStates())    {    orderingSign    +=    es1.getEventSign();    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
119	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  state.eventsInitialized.iterator();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  Iterator  <  EventState>  iterator  =  state.eventsInitialized.iterator();  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	Iterator  <  EventState>  iterator  =  state.eventsInitialized.iterator();	  Iterator    <    EventState>    iterator    =    this.eventsInitialized.iterator();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
120	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderingSign,  null,  new  Comparator  <  EventState>()  {  [CE]  no  suitable  constructor  found  for  TreeSet(int,int,<null>,<anonymous  Comparator<EventState>>)  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderingSign,  null,  new  Comparator  <  EventState>()  {  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderingSign,  null,  new  Comparator  <  EventState>()  {	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign,    orderingSign,    new    Comparator    <    EventState>()    {    	non-compiled	[CE]  no  suitable  constructor  found  for  TreeSet(int,int,<null>,<anonymous  Comparator<EventState>>)	49	None	replace
121	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderingSign,  new  Comparator  <  EventState>());  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderingSign,  new  Comparator  <  EventState>());  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderingSign,  new  Comparator  <  EventState>());	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign,    orderingSign,    new    Comparator    <    EventState>()    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
122	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderingSign,  state.reinitializeBegin(interpolator));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderingSign,  state.reinitializeBegin(interpolator));  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderingSign,  state.reinitializeBegin(interpolator));	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign,    orderingSign,    new    Comparator    <    EventState>()    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
123	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =(this.stepHandlers!=  null)?  this.stepHandlers.iterator()  :  orderingSign;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  Iterator  <  EventState>  iterator  =(this.stepHandlers!=  null)?  this.stepHandlers.iterator()  :  orderingSign;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	Iterator  <  EventState>  iterator  =(this.stepHandlers!=  null)?  this.stepHandlers.iterator()  :  orderingSign;	  Iterator    <    EventState>    iterator    =    this.stepHandlers.iterator();    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
124	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =(this.stepHandlers!=  null)?  this.stepHandlers.iterator()  :  null;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  Iterator  <  EventState>  iterator  =(this.stepHandlers!=  null)?  this.stepHandlers.iterator()  :  null;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	Iterator  <  EventState>  iterator  =(this.stepHandlers!=  null)?  this.stepHandlers.iterator()  :  null;	  Iterator    <    EventState>    iterator    =    this.stepHandlers.iterator();    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
125	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =(this.stepHandlers  ==  null)?  this.stepHandlers.iterator()  :  orderingSign;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  Iterator  <  EventState>  iterator  =(this.stepHandlers  ==  null)?  this.stepHandlers.iterator()  :  orderingSign;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	Iterator  <  EventState>  iterator  =(this.stepHandlers  ==  null)?  this.stepHandlers.iterator()  :  orderingSign;	  Iterator    <    EventState>    iterator    =    this.stepHandlers.iterator();    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
126	[BUG]  [BUGGY]  orderingSign  =  state.getSteps().size()  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  =  state.getSteps().size()  -  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  =  state.getSteps().size()  -  1;	  orderingSign    =    state.getSteps().size();    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
127	[BUG]  [BUGGY]  orderingSign  =  state.getSteps().size()  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  =  state.getSteps().size()  +  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  =  state.getSteps().size()  +  1;	  orderingSign    =    state.getSteps().size();    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
128	[BUG]  [BUGGY]  orderingSign  =  state.getSteps().size()  -  2;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  =  state.getSteps().size()  -  2;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  =  state.getSteps().size()  -  2;	  orderingSign    =    state.getSteps().size();    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
129	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
130	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
131	[BUG]  [BUGGY]  final  int  orderingSign  =  state.getOrderingSign()  -  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  int  orderingSign  =  state.getOrderingSign()  -  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  int  orderingSign  =  state.getOrderingSign()  -  1;	  final    int    orderingSign    =    state.getOrderingSign();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
132	[BUG]  [BUGGY]  final  int  orderingSign  =  state.getOrderingSign()  +  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  int  orderingSign  =  state.getOrderingSign()  +  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  int  orderingSign  =  state.getOrderingSign()  +  1;	  final    int    orderingSign    =    state.getOrderingSign();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
133	[BUG]  [BUGGY]  final  int  orderingSign  =  state.getInitializingSign();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  int  orderingSign  =  state.getInitializingSign();  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  int  orderingSign  =  state.getInitializingSign();	  final    int    orderingSign    =    state.getOrderingSign();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
134	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  return  orderingSign  *  state.evaluateBegin(state);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  return  orderingSign  *  state.evaluateBegin(state);  }  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  return  orderingSign  *  state.evaluateBegin(state);  }	  if(orderingSign!=    null)    {    for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    return    orderingSign    *    state.evaluateBegin(state);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
135	[BUG]  [BUGGY]  if(orderingSign  ==  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  return  orderingSign  *  state.evaluateBegin(state);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign  ==  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  return  orderingSign  *  state.evaluateBegin(state);  }  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign  ==  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  return  orderingSign  *  state.evaluateBegin(state);  }	  if(orderingSign!=    null)    {    for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    return    orderingSign    *    state.evaluateBegin(state);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
136	[BUG]  [BUGGY]  if(orderingSign!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  return  orderingSign  *  state.evaluateBegin(state);  }  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  return  orderingSign  *  state.evaluateBegin(state);  }  }  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  return  orderingSign  *  state.evaluateBegin(state);  }  }	  if(orderingSign!=    null)    {    for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    return    orderingSign    *    state.evaluateBegin(state);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
137	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.getStepEnd();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  int  orderingSign  =  interpolator.getStepEnd();  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  int  orderingSign  =  interpolator.getStepEnd();	  final    int    orderingSign    =    state.getStepEnd();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
138	[BUG]  [BUGGY]  final  int  orderingSign  =  state.getStepEnd()  -  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  int  orderingSign  =  state.getStepEnd()  -  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  int  orderingSign  =  state.getStepEnd()  -  1;	  final    int    orderingSign    =    state.getStepEnd();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
139	[BUG]  [BUGGY]  final  int  orderingSign  =  state.getStep();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  int  orderingSign  =  state.getStep();  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  int  orderingSign  =  state.getStep();	  final    int    orderingSign    =    state.getStepEnd();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
140	[BUG]  [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>(),  orderingSign)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>(),  orderingSign)  {  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>(),  orderingSign)  {	  final    SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>()    {    final    SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>())    {    	non-compiled	[CE]  ';'  expected	15	None	replace
141	[BUG]  [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>(),  orderedSign)  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>(),  orderedSign)  {  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>(),  orderedSign)  {	  final    SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>()    {    final    SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>())    {    	non-compiled	[CE]  ';'  expected	15	None	replace
142	[BUG]  [BUGGY]  final  int  orderingSign  =  state.getOrdinal()  -  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  int  orderingSign  =  state.getOrdinal()  -  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  int  orderingSign  =  state.getOrdinal()  -  1;	  final    int    orderingSign    =    state.getOrdinal();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
143	[BUG]  [BUGGY]  final  int  orderingSign  =  state.getOrdinal()  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  int  orderingSign  =  state.getOrdinal()  +  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  int  orderingSign  =  state.getOrdinal()  +  1;	  final    int    orderingSign    =    state.getOrdinal();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
144	[BUG]  [BUGGY]  final  int  orderingSign  =  state.getOrdinal()  -  2;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  int  orderingSign  =  state.getOrdinal()  -  2;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  int  orderingSign  =  state.getOrdinal()  -  2;	  final    int    orderingSign    =    state.getOrdinal();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
145	[BUG]  [BUGGY]  for(final  EventsState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  for(final  EventsState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	for(final  EventsState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }	  for(EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
146	[BUG]  [BUGGY]  for(EventState  state  :  eventsStates)  {  event.resetOccurred();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  for(EventState  state  :  eventsStates)  {  event.resetOccurred();  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	for(EventState  state  :  eventsStates)  {  event.resetOccurred();  }	  for(EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
147	[BUG]  [BUGGY]  orderingSign  -=  state.getSteps().size()  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  -=  state.getSteps().size()  +  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  -=  state.getSteps().size()  +  1;	  orderingSign    -=    state.getSteps().size();    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
148	[BUG]  [BUGGY]  orderingSign  -=  state.getSteps().size()  -  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  -=  state.getSteps().size()  -  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  -=  state.getSteps().size()  -  1;	  orderingSign    -=    state.getSteps().size();    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
149	[BUG]  [BUGGY]  orderingSign  -=  state.getSteps().size()  +  2;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  -=  state.getSteps().size()  +  2;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  -=  state.getSteps().size()  +  2;	  orderingSign    -=    state.getSteps().size();    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
150	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderY,  yDot,  new  Comparator  <  EventState>()  {  [CE]  cannot  find  symbol  orderY  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderY,  yDot,  new  Comparator  <  EventState>()  {  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderY,  yDot,  new  Comparator  <  EventState>()  {	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign,    yDot,    new    Comparator    <    EventState>()    {    	non-compiled	[CE]  cannot  find  symbol  orderY	82	None	replace
151	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  yDot,  tEnd,  new  Comparator  <  EventState>()  {  [CE]  no  suitable  constructor  found  for  TreeSet(int,double[],double,<anonymous  Comparator<EventState>>)  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  yDot,  tEnd,  new  Comparator  <  EventState>()  {  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  yDot,  tEnd,  new  Comparator  <  EventState>()  {	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign,    yDot,    new    Comparator    <    EventState>()    {    	non-compiled	[CE]  no  suitable  constructor  found  for  TreeSet(int,double[],double,<anonymous  Comparator<EventState>>)	82	None	replace
152	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(yDot,  orderingSign,  new  Comparator  <  EventState>()  {  [CE]  no  suitable  constructor  found  for  TreeSet(double[],int,<anonymous  Comparator<EventState>>)  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(yDot,  orderingSign,  new  Comparator  <  EventState>()  {  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(yDot,  orderingSign,  new  Comparator  <  EventState>()  {	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign,    yDot,    new    Comparator    <    EventState>()    {    	non-compiled	[CE]  no  suitable  constructor  found  for  TreeSet(double[],int,<anonymous  Comparator<EventState>>)	82	None	replace
153	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(y,  orderingSign,  new  Comparator  <  EventState>()  {  [CE]  no  suitable  constructor  found  for  TreeSet(double[],int,<anonymous  Comparator<EventState>>)  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(y,  orderingSign,  new  Comparator  <  EventState>()  {  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(y,  orderingSign,  new  Comparator  <  EventState>()  {	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign,    yDot,    new    Comparator    <    EventState>()    {    	non-compiled	[CE]  no  suitable  constructor  found  for  TreeSet(double[],int,<anonymous  Comparator<EventState>>)	82	None	replace
154	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  event);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  event);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  event);	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>(),    orderingSign,    event);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
155	[BUG]  [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>(),  orderingSign,  event);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>(),  orderingSign,  event);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>(),  orderingSign,  event);	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>(),    orderingSign,    event);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
156	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  return  orderingSign  *  Double.compare(state.evaluateBegin(interpolator));  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  return  orderingSign  *  Double.compare(state.evaluateBegin(interpolator));  }  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  return  orderingSign  *  Double.compare(state.evaluateBegin(interpolator));  }	  if(orderingSign!=    null)    {    for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    return    orderingSign    *    Double.compare(state.evaluateBegin(interpolator));    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
157	[BUG]  [BUGGY]  if(orderingSign!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  return  orderingSign  *  Double.compare(state.evaluateBegin(interpolator));  }  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  return  orderingSign  *  Double.compare(state.evaluateBegin(interpolator));  }  }  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  return  orderingSign  *  Double.compare(state.evaluateBegin(interpolator));  }  }	  if(orderingSign!=    null)    {    for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    return    orderingSign    *    Double.compare(state.evaluateBegin(interpolator));    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
158	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateBegin(interpolator))  {  return  orderingSign  *  Double.compare(state.evaluateBegin(interpolator));  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateBegin(interpolator))  {  return  orderingSign  *  Double.compare(state.evaluateBegin(interpolator));  }  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateBegin(interpolator))  {  return  orderingSign  *  Double.compare(state.evaluateBegin(interpolator));  }	  if(orderingSign!=    null)    {    for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    return    orderingSign    *    Double.compare(state.evaluateBegin(interpolator));    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
159	[BUG]  [BUGGY]  if(orderingSign!=  null)  {  if(isLastStep)  {  for(EventState  state  :  instancesInitialized)  {  event.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  null)  {  if(isLastStep)  {  for(EventState  state  :  instancesInitialized)  {  event.reinitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  null)  {  if(isLastStep)  {  for(EventState  state  :  instancesInitialized)  {  event.reinitializeBegin(interpolator);  }  }	  if(orderingSign!=    null)    {    if(isLastStep)    {    for(EventState    state    :    eventsInitialized)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
160	[BUG]  [BUGGY]  final  int  orderingSign  =  state.getStepStart()  -  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  int  orderingSign  =  state.getStepStart()  -  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  int  orderingSign  =  state.getStepStart()  -  1;	  final    int    orderingSign    =    state.getStepStart();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
161	[BUG]  [BUGGY]  final  int  orderingSign  =  state.getStepStart()  +  1;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  int  orderingSign  =  state.getStepStart()  +  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  int  orderingSign  =  state.getStepStart()  +  1;	  final    int    orderingSign    =    state.getStepStart();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
162	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.getStepStart();  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  int  orderingSign  =  interpolator.getStepStart();  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  int  orderingSign  =  interpolator.getStepStart();	  final    int    orderingSign    =    state.getStepStart();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
163	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  state.reinitializeBegin(interpolator);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  state.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  state.reinitializeBegin(interpolator);  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  ')'  expected	96	None	replace
164	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  event.reinitializeBegin(interpolator);  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  event.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  event.reinitializeBegin(interpolator);  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  ')'  expected	96	None	replace
165	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  state.reinitializeBegin(interpolator);  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  state.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  state.reinitializeBegin(interpolator);  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  ')'  expected	96	None	replace
166	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  -  orderStart);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  -  orderStart);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  -  orderStart);	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign    -    orderingSign);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
167	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  -  orderingSign  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  -  orderingSign  +  1);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  -  orderingSign  +  1);	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign    -    orderingSign);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
168	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  *  orderingSign);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  *  orderingSign);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  *  orderingSign);	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign    -    orderingSign);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
169	[BUG]  [BUGGY]  orderedSign  +=  state.getSteps().size()  -  orderingSign;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderedSign  +=  state.getSteps().size()  -  orderingSign;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderedSign  +=  state.getSteps().size()  -  orderingSign;	  orderedSign    +=    state.getSteps().size();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
170	[BUG]  [BUGGY]  orderedSign  +=  state.getSteps().size()  -  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderedSign  +=  state.getSteps().size()  -  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderedSign  +=  state.getSteps().size()  -  1;	  orderedSign    +=    state.getSteps().size();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
171	[BUG]  [BUGGY]  orderingSign  +=  state.getInitializingSign();  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  +=  state.getInitializingSign();  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  +=  state.getInitializingSign();	  if(orderingSign    >    0)    {    for(EventState    es1    :    state.getEventStates())    {    orderingSign    +=    es1.getInitializingSign();    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
172	[BUG]  [BUGGY]  orderingSign  +=  es1.getInitializingSign();  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  +=  es1.getInitializingSign();  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  +=  es1.getInitializingSign();	  if(orderingSign    >    0)    {    for(EventState    es1    :    state.getEventStates())    {    orderingSign    +=    es1.getInitializingSign();    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
173	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
174	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventStates)  {  state.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventStates)  {  state.reinitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventStates)  {  state.reinitializeBegin(interpolator);  }  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
175	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  events)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  events)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  events)  {  state.reinitializeBegin(interpolator);  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
176	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
177	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderingSign  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderingSign  +  1);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderingSign  +  1);	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign,    orderingSign);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
178	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  *  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  *  1);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  *  1);	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign    -    1);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
179	[BUG]  [BUGGY]  if(orderingSign  ==  null)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign  ==  null)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign  ==  null)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }	  if(orderingSign!=    null)    {    if(isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
180	[BUG]  [BUGGY]  if(orderingSign  ==  null)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign  ==  null)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign  ==  null)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }	  if(orderingSign!=    null)    {    if(isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
181	[BUG]  [BUGGY]  if(orderingSign!=  null)  {  if(isLastStep)  {  for(EventState  state  =  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  null)  {  if(isLastStep)  {  for(EventState  state  =  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  null)  {  if(isLastStep)  {  for(EventState  state  =  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }	  if(orderingSign!=    null)    {    if(isLastStep)    {    for(EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  ';'  expected	55	None	replace
182	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(state,  orderingSign);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(state,  orderingSign);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(state,  orderingSign);  }	  for(final    EventState    state    :    eventsInitialized)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
183	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(state);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(state);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(state);  }	  for(final    EventState    state    :    eventsInitialized)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
184	[BUG]  [BUGGY]  if(orderingSign  ==  null)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign  ==  null)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign  ==  null)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }	  if(orderingSign!=    null)    {    if(isLastStep)    {    for(final    EventState    state    :    eventsInitialized)    {    event.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
185	[BUG]  [BUGGY]  if(orderingSign!=  null)  {  if(isLastStep)  {  for(final  EventState  state  =  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  null)  {  if(isLastStep)  {  for(final  EventState  state  =  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  null)  {  if(isLastStep)  {  for(final  EventState  state  =  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }	  if(orderingSign!=    null)    {    if(isLastStep)    {    for(final    EventState    state    :    eventsInitialized)    {    event.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  ';'  expected	6	None	replace
186	[BUG]  [BUGGY]  if(orderingSign  ==  null)  {  if(isLastStep)  {  for(EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign  ==  null)  {  if(isLastStep)  {  for(EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign  ==  null)  {  if(isLastStep)  {  for(EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }	  if(orderingSign!=    null)    {    if(isLastStep)    {    for(EventState    state    :    eventsInitialized)    {    event.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
187	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsInitialized.values().iterator();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsInitialized.values().iterator();  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	Iterator  <  EventState>  iterator  =  this.eventsInitialized.values().iterator();	  Iterator    <    EventState>    iterator    =    this.eventsInitialized.iterator();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
188	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  =  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  =  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  =  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }	  if(orderingSign    ==    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  ';'  expected	30	None	replace
189	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  es1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  es1);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  es1);	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign,    es0,    new    Comparator    <    EventState>()    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
190	[BUG]  [BUGGY]  if(orderingSign!=  null)  {  if(!isFirstStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  null)  {  if(!isFirstStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  null)  {  if(!isFirstStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }	  if(orderingSign    ==    null)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsInitialized)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
191	[BUG]  [BUGGY]  if(orderingSign!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  =  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  =  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  =  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }	  if(orderingSign    ==    null)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsInitialized)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  ';'  expected	79	None	replace
192	[BUG]  [BUGGY]  orderingSign  =  state.getInitializingSign();  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  =  state.getInitializingSign();  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  =  state.getInitializingSign();	  if(orderingSign    >    0)    {    for(EventState    es1    :    state.getEventStates())    {    orderingSign    +=    es1.getInitializingSign();    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
193	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(!isFirstStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(!isFirstStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(!isFirstStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
194	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(EventState  state  :  events)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(EventState  state  :  events)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(!isLastStep)  {  for(EventState  state  :  events)  {  state.reinitializeBegin(interpolator);  }	  if(orderingSign    ==    0)    {    if(!isLastStep)    {    for(EventState    state    :    eventStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
195	[BUG]  [BUGGY]  if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(EventState  state  :  events)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(EventState  state  :  events)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(EventState  state  :  events)  {  state.reinitializeBegin(interpolator);  }	  if(orderingSign    ==    0)    {    if(!isLastStep)    {    for(EventState    state    :    eventStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
196	[BUG]  [BUGGY]  orderingSign  =  state.getSteps();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  =  state.getSteps();  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  =  state.getSteps();	  if(orderingSign    >    0)    {    for(EventState    es1    :    state.getSteps())    {    orderingSign    +=    es1.getTail();    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
197	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  +  3);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  +  3);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  +  3);	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign    +    1);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
198	[BUG]  [BUGGY]  if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reInitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reInitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reInitializeBegin(interpolator);  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    event.reInitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
199	[BUG]  [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>(),  orderedSign);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>(),  orderedSign);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>(),  orderedSign);	  final    SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>()    {    final    SortedSet    <    EventState>    occurredEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
200	[BUG]  [BUGGY]  if(orderingSign  ==  null)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign  ==  null)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign  ==  null)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }	  if(orderingSign!=    null)    {    if(isLastStep)    {    for(final    EventState    state    :    eventsInitialized)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
201	[BUG]  [BUGGY]  if(orderingSign!=  null)  {  if(!isLastStep)  {  for(EventState  state  =  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  null)  {  if(!isLastStep)  {  for(EventState  state  =  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  null)  {  if(!isLastStep)  {  for(EventState  state  =  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }	  if(orderingSign!=    null)    {    if(!isLastStep)    {    for(EventState    state    :    eventsInitialized)    {    event.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  ';'  expected	1	None	replace
202	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  new  Comparator  <  EventState>(),  orderingSign);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  new  Comparator  <  EventState>(),  orderingSign);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  new  Comparator  <  EventState>(),  orderingSign);	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>(),    orderingSign,    event);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
203	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  new  Comparator  <  EventState>(),  event);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  new  Comparator  <  EventState>(),  event);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  new  Comparator  <  EventState>(),  event);	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>(),    orderingSign,    event);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
204	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  new  Comparator  <  EventState>(),  order);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  new  Comparator  <  EventState>(),  order);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  new  Comparator  <  EventState>(),  order);	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>(),    orderingSign,    event);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
205	[BUG]  [BUGGY]  if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  event.reinitializeBegin(interpolator);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  event.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  event.reinitializeBegin(interpolator);  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  ')'  expected	96	None	replace
206	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  events.reinitializeBegin(interpolator);  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  events.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  events.reinitializeBegin(interpolator);  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  ')'  expected	96	None	replace
207	[BUG]  [BUGGY]  if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  events.reinitializeBegin(interpolator);  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  events.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  events.reinitializeBegin(interpolator);  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  ')'  expected	96	None	replace
208	[BUG]  [BUGGY]  for(final  EventsState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  for(final  EventsState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	for(final  EventsState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }	  for(EventState    state    :    eventsInitialized)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
209	[BUG]  [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  es0,  new  Comparator  <  EventState>()  {  [CE]  cannot  find  symbol  es0  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  es0,  new  Comparator  <  EventState>()  {  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  es0,  new  Comparator  <  EventState>()  {	  final    SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign,    new    Comparator    <    EventState>()    {    	non-compiled	[CE]  cannot  find  symbol  es0	52	None	replace
210	[BUG]  [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  es1,  new  Comparator  <  EventState>()  {  [CE]  cannot  find  symbol  es1  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  es1,  new  Comparator  <  EventState>()  {  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  es1,  new  Comparator  <  EventState>()  {	  final    SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign,    new    Comparator    <    EventState>()    {    	non-compiled	[CE]  cannot  find  symbol  es1	52	None	replace
211	[BUG]  [BUGGY]  if(orderingSign!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  orderingSign  +=  state.evaluateBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  orderingSign  +=  state.evaluateBegin(interpolator);  }  }  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  orderingSign  +=  state.evaluateBegin(interpolator);  }  }	  if(orderingSign!=    null)    {    for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    orderingSign    +=    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
212	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.events.values().iterator();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  Iterator  <  EventState>  iterator  =  this.events.values().iterator();  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	Iterator  <  EventState>  iterator  =  this.events.values().iterator();	  Iterator    <    EventState>    iterator    =    this.events.iterator();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
213	[BUG]  [BUGGY]  final  int  orderingSign  =  isLastStep?  0  :  eventsStates.getOrdinal();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  int  orderingSign  =  isLastStep?  0  :  eventsStates.getOrdinal();  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  int  orderingSign  =  isLastStep?  0  :  eventsStates.getOrdinal();	  final    int    orderingSign    =    eventsStates.getOrdinal();    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
214	[BUG]  [BUGGY]  final  int  orderingSign  =  es0.getOrdinal();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  int  orderingSign  =  es0.getOrdinal();  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  int  orderingSign  =  es0.getOrdinal();	  final    int    orderingSign    =    eventsStates.getOrdinal();    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
215	[BUG]  [BUGGY]  final  int  orderingSign  =  this.eventsInitialized.getOrdinal();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  int  orderingSign  =  this.eventsInitialized.getOrdinal();  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  int  orderingSign  =  this.eventsInitialized.getOrdinal();	  final    int    orderingSign    =    eventsStates.getOrdinal();    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
216	[BUG]  [BUGGY]  if(orderingSign  ==  null)  {  if(isLastStep)  {  for(EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign  ==  null)  {  if(isLastStep)  {  for(EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign  ==  null)  {  if(isLastStep)  {  for(EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }	  if(orderingSign!=    null)    {    if(isLastStep)    {    for(EventState    state    :    eventsInitialized)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
217	[BUG]  [BUGGY]  orderingSign  -=  state.getEventSigns().size()  -  2;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  -=  state.getEventSigns().size()  -  2;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  -=  state.getEventSigns().size()  -  2;	  orderingSign    -=    state.getEventSigns().size();    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
218	[BUG]  [BUGGY]  final  int  orderingSign  =  state.getStep()  -  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  int  orderingSign  =  state.getStep()  -  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  int  orderingSign  =  state.getStep()  -  1;	  final    int    orderingSign    =    state.getStepEnd();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
219	[BUG]  [BUGGY]  if(orderingSign!=  null)  {  if(!isFirstStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  null)  {  if(!isFirstStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  null)  {  if(!isFirstStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }	  if(orderingSign    ==    null)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsInitialized)    {    event.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
220	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  order  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  order  +  1);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  order  +  1);	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign,    order);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
221	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  order  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  order  -  1);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  order  -  1);	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign,    order);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
222	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  y1,  new  Comparator  <  EventState>()  {  [CE]  cannot  find  symbol  y1  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  y1,  new  Comparator  <  EventState>()  {  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  y1,  new  Comparator  <  EventState>()  {	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign,    es1,    new    Comparator    <    EventState>()    {    	non-compiled	[CE]  cannot  find  symbol  y1	83	None	replace
223	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  order1,  new  Comparator  <  EventState>()  {  [CE]  cannot  find  symbol  order1  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  order1,  new  Comparator  <  EventState>()  {  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  order1,  new  Comparator  <  EventState>()  {	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign,    orderY,    new    Comparator    <    EventState>()    {    	non-compiled	[CE]  cannot  find  symbol  order1	50	None	replace
224	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  eventStates)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  eventStates)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  eventStates)  {  state.reinitializeBegin(interpolator);  }	  if(orderingSign    ==    0)    {    if(isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
225	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  =  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  =  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  =  eventsStates)  {  state.reinitializeBegin(interpolator);  }	  if(orderingSign    ==    0)    {    if(isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
226	[BUG]  [BUGGY]  orderedSign  +=  state.getSteps().size()  -  2;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderedSign  +=  state.getSteps().size()  -  2;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderedSign  +=  state.getSteps().size()  -  2;	  orderedSign    +=    state.getSteps().size();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
227	[BUG]  [BUGGY]  orderedSign  -=  state.getEventSigns().size();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderedSign  -=  state.getEventSigns().size();  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderedSign  -=  state.getEventSigns().size();	  orderedSign    +=    state.getEventSigns().size();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
228	[BUG]  [BUGGY]  final  int  orderedSign  =  state.orderedSign.size();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  int  orderedSign  =  state.orderedSign.size();  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  int  orderedSign  =  state.orderedSign.size();	  final    int    orderedSign    =    orderedSign.size();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
229	[BUG]  [BUGGY]  final  int  orderedSign  =  this.orderedSign.size();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  int  orderedSign  =  this.orderedSign.size();  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  int  orderedSign  =  this.orderedSign.size();	  final    int    orderedSign    =    orderedSign.size();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
230	[BUG]  [BUGGY]  orderingSign  -=  state.getSteps().size()  -  2;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  -=  state.getSteps().size()  -  2;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  -=  state.getSteps().size()  -  2;	  orderingSign    -=    state.getSteps().size();    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
231	[BUG]  [BUGGY]  if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  events)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  events)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  events)  {  state.reinitializeBegin(interpolator);  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
232	[BUG]  [BUGGY]  final  int  orderedSign  =  state.getSteps().compareTo(orderedSign);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  int  orderedSign  =  state.getSteps().compareTo(orderedSign);  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  int  orderedSign  =  state.getSteps().compareTo(orderedSign);	  final    int    orderedSign    =    orderedSign.compareTo(state.getSteps());    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
233	[BUG]  [BUGGY]  final  int  orderingSign  =  state.getOrderingEventSign();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  int  orderingSign  =  state.getOrderingEventSign();  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  int  orderingSign  =  state.getOrderingEventSign();	  final    int    orderingSign    =    state.getOrderingSign();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
234	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  es2.iterator();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  Iterator  <  EventState>  iterator  =  es2.iterator();  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	Iterator  <  EventState>  iterator  =  es2.iterator();	  Iterator    <    EventState>    iterator    =    es1.iterator();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
235	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderingSign,  es0,  new  Comparator  <  EventState>()  {  [CE]  cannot  find  symbol  es0  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderingSign,  es0,  new  Comparator  <  EventState>()  {  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderingSign,  es0,  new  Comparator  <  EventState>()  {	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign,    orderingSign,    new    Comparator    <    EventState>()    {    	non-compiled	[CE]  cannot  find  symbol  es0	49	None	replace
236	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderingSign,  state.evaluateBegin());  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderingSign,  state.evaluateBegin());  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderingSign,  state.evaluateBegin());	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign,    orderingSign,    new    Comparator    <    EventState>()    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
237	[BUG]  [BUGGY]  if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.itializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.itializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign  ==  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.itializeBegin(interpolator);  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    state.itializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
238	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  entity  =  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  entity  =  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  entity  =  eventsStates)  {  state.reinitializeBegin(interpolator);  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(final    EventState    state    =    eventsStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  ';'  expected	72	None	replace
239	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  eventState  =  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  eventState  =  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  eventState  =  eventsStates)  {  state.reinitializeBegin(interpolator);  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(final    EventState    state    =    eventsStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  ';'  expected	72	None	replace
240	[BUG]  [BUGGY]  orderedSign  =  order;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderedSign  =  order;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderedSign  =  order;	  orderedSign    =    0;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
241	[BUG]  [BUGGY]  orderingSign  =  state.evaluateInt(orderingSign);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  =  state.evaluateInt(orderingSign);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  =  state.evaluateInt(orderingSign);	  if(orderingSign    ==    0)    {    if(state.evaluateStep(interpolator))    {    orderingSign    +=    state.evaluateInt(orderingSign);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
242	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.stepHandlers.values().iterator();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  Iterator  <  EventState>  iterator  =  this.stepHandlers.values().iterator();  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	Iterator  <  EventState>  iterator  =  this.stepHandlers.values().iterator();	  Iterator    <    EventState>    iterator    =    this.stepHandlers.iterator();    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
243	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  es.stepHandlers.iterator();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  Iterator  <  EventState>  iterator  =  es.stepHandlers.iterator();  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	Iterator  <  EventState>  iterator  =  es.stepHandlers.iterator();	  Iterator    <    EventState>    iterator    =    this.stepHandlers.iterator();    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
244	[BUG]  [BUGGY]  if(orderingSign  ==  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  return  orderingSign  *  Double.compare(state.evaluateBegin(interpolator));  }  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign  ==  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  return  orderingSign  *  Double.compare(state.evaluateBegin(interpolator));  }  }  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign  ==  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  return  orderingSign  *  Double.compare(state.evaluateBegin(interpolator));  }  }	  if(orderingSign!=    null)    {    for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    return    orderingSign    *    Double.compare(state.evaluateBegin(interpolator));    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
245	[BUG]  [BUGGY]  orderingSign  +=  state.getSteps().size()  -  4;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  +=  state.getSteps().size()  -  4;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  +=  state.getSteps().size()  -  4;	  orderingSign    +=    state.getSteps().size();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
246	[BUG]  [BUGGY]  orderingSign  =  state.getSteps().size()  -  4;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  =  state.getSteps().size()  -  4;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  =  state.getSteps().size()  -  4;	  orderingSign    =    state.getSteps().size();    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
247	[BUG]  [BUGGY]  orderingSign  =  state.getEventSigns().size()  -  4;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  =  state.getEventSigns().size()  -  4;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  =  state.getEventSigns().size()  -  4;	  orderingSign    =    state.getEventSigns().size();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
248	[BUG]  [BUGGY]  if(orderingSign  ==  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  return  orderingSign  *  state.evaluateBegin(state);  }  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign  ==  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  return  orderingSign  *  state.evaluateBegin(state);  }  }  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign  ==  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  return  orderingSign  *  state.evaluateBegin(state);  }  }	  if(orderingSign!=    null)    {    for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    return    orderingSign    *    state.evaluateBegin(state);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
249	[BUG]  [BUGGY]  for(EventState  state  :  this.events)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  for(EventState  state  :  this.events)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	for(EventState  state  :  this.events)  {  event.reinitializeBegin(interpolator);  }	  for(EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
250	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(!isLastStep)  {  for(EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }	  if(orderingSign    ==    null)    {    if(!isLastStep)    {    for(EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
251	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(!isLastStep)  {  for(EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }	  if(orderingSign    ==    null)    {    if(!isLastStep)    {    for(EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
252	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  event.getEventStates())  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  event.getEventStates())  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  event.getEventStates())  {  event.reinitializeBegin(interpolator);  }	  if(orderingSign    ==    0)    {    if(isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
253	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  event.getStates())  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  event.getStates())  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  event.getStates())  {  event.reinitializeBegin(interpolator);  }	  if(orderingSign    ==    0)    {    if(isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
254	[BUG]  [BUGGY]  if(orderingSign!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  event.reinitializeBegin(interpolator);  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  event.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  event.reinitializeBegin(interpolator);  }	  if(orderingSign    ==    null)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  ')'  expected	75	None	replace
255	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderingSign  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderingSign  -  1);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderingSign  -  1);	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign,    orderingSign);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
256	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(!isLastStep)  {  for(EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }	  if(orderingSign    ==    null)    {    if(!isLastStep)    {    for(EventState    state    :    eventsInitialized)    {    event.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
257	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(!isLastStep)  {  for(EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }	  if(orderingSign    ==    null)    {    if(!isLastStep)    {    for(EventState    state    :    eventsInitialized)    {    event.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
258	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  event.getEventStates())  {  event.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  event.getEventStates())  {  event.reinitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  event.getEventStates())  {  event.reinitializeBegin(interpolator);  }  }	  if(orderingSign    ==    0)    {    if(isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
259	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  event.getStates())  {  event.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  event.getStates())  {  event.reinitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  event.getStates())  {  event.reinitializeBegin(interpolator);  }  }	  if(orderingSign    ==    0)    {    if(isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
260	[BUG]  [BUGGY]  orderedSign  =  orderingSign  -  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderedSign  =  orderingSign  -  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderedSign  =  orderingSign  -  1;	  orderedSign    =    0;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
261	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  eventStates)  {  state.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  eventStates)  {  state.reinitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(isLastStep)  {  for(final  EventState  state  :  eventStates)  {  state.reinitializeBegin(interpolator);  }  }	  if(orderingSign    ==    0)    {    if(isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
262	[BUG]  [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>(),  orderingSign,  interpolator);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>(),  orderingSign,  interpolator);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>(),  orderingSign,  interpolator);	  final    SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>(),    orderingSign);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
263	[BUG]  [BUGGY]  if(orderingSign!=  1)  {  if(!isLastStep)  {  for(final  EventState  state  =  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  1)  {  if(!isLastStep)  {  for(final  EventState  state  =  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  1)  {  if(!isLastStep)  {  for(final  EventState  state  =  eventsStates)  {  state.reinitializeBegin(interpolator);  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(final    EventState    state    =    eventsStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  ';'  expected	72	None	replace
264	[BUG]  [BUGGY]  orderedSign  +=  state.getEventSigns().size()  -  2;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderedSign  +=  state.getEventSigns().size()  -  2;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderedSign  +=  state.getEventSigns().size()  -  2;	  orderedSign    +=    state.getEventSigns().size();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
265	[BUG]  [BUGGY]  if(eventsInitialized!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  return  orderingSign  *  Double.compare(state.evaluateBegin(interpolator));  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(eventsInitialized!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  return  orderingSign  *  Double.compare(state.evaluateBegin(interpolator));  }  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(eventsInitialized!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  return  orderingSign  *  Double.compare(state.evaluateBegin(interpolator));  }	  if(orderingSign!=    null)    {    for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    return    orderingSign    *    Double.compare(state.evaluateBegin(interpolator));    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
266	[BUG]  [BUGGY]  final  int  orderingSign  =  state.getOrderingSign()  -  2;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  int  orderingSign  =  state.getOrderingSign()  -  2;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  int  orderingSign  =  state.getOrderingSign()  -  2;	  final    int    orderingSign    =    state.getOrderingSign();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
267	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderingSign,  null,  null()  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderingSign,  null,  null()  {  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  orderingSign,  null,  null()  {	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign,    orderingSign,    new    Comparator    <    EventState>()    {    	non-compiled	[CE]  ')'  expected	49	None	replace
268	[BUG]  [BUGGY]  if(orderingSign!=  null)  {  if(isLastStep)  {  for(final  EventState  state  :  event.getStates())  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  null)  {  if(isLastStep)  {  for(final  EventState  state  :  event.getStates())  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  null)  {  if(isLastStep)  {  for(final  EventState  state  :  event.getStates())  {  event.reinitializeBegin(interpolator);  }	  if(orderingSign!=    null)    {    if(isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
269	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(requiredSign,  orderingSign,  event);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(requiredSign,  orderingSign,  event);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(requiredSign,  orderingSign,  event);	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>(),    orderingSign,    event);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
270	[BUG]  [BUGGY]  orderingSign  -=  es1.getTail();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  -=  es1.getTail();  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  -=  es1.getTail();	  if(orderingSign    >    0)    {    for(EventState    es1    :    state.getSteps())    {    orderingSign    +=    es1.getTail();    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
271	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  new  Comparator  <  EventState>(2));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  new  Comparator  <  EventState>(2));  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  new  Comparator  <  EventState>(2));	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign,    new    Comparator    <    EventState>());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
272	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }  else  {  return  -1;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }  else  {  return  -1;  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }  else  {  return  -1;  }	  if(orderingSign    ==    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
273	[BUG]  [BUGGY]  if(orderingSign!=  1)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.itializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  1)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.itializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  1)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.itializeBegin(interpolator);  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    state.itializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
274	[BUG]  [BUGGY]  if(orderingSign!=  1)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  1)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  1)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
275	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  *  orderingSign  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  *  orderingSign  -  1);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  *  orderingSign  -  1);	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign    -    1);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
276	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  for(final  EventState  state  :  this.eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	for(final  EventState  state  :  this.eventsInitialized)  {  event.reinitializeBegin(interpolator);  }	  for(final    EventState    state    :    eventsInitialized)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
277	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  for(final  EventState  state  :  eventStates)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	for(final  EventState  state  :  eventStates)  {  event.reinitializeBegin(interpolator);  }	  for(final    EventState    state    :    eventsInitialized)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
278	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(EventState  state  :  this.events)  {  state.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(EventState  state  :  this.events)  {  state.reinitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(!isLastStep)  {  for(EventState  state  :  this.events)  {  state.reinitializeBegin(interpolator);  }  }	  if(orderingSign    ==    0)    {    if(!isLastStep)    {    for(EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
279	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  state.eventsStates.iterator();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  Iterator  <  EventState>  iterator  =  state.eventsStates.iterator();  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	Iterator  <  EventState>  iterator  =  state.eventsStates.iterator();	  Iterator    <    EventState>    iterator    =    this.eventsStates.iterator();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
280	[BUG]  [BUGGY]  orderingSign  -=  es1.getInitializingSign();  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  -=  es1.getInitializingSign();  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  -=  es1.getInitializingSign();	  if(orderingSign    >    0)    {    for(EventState    es1    :    state.getEventStates())    {    orderingSign    +=    es1.getInitializingSign();    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
281	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }	  if(orderingSign    ==    null)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsInitialized)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
282	[BUG]  [BUGGY]  if(orderingSign!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  orderingSign  +=  state.evaluateStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  orderingSign  +=  state.evaluateStep(interpolator);  }  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  orderingSign  +=  state.evaluateStep(interpolator);  }	  if(orderingSign!=    null)    {    for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    orderingSign    +=    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
283	[BUG]  [BUGGY]  if(orderingSign!=  1)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reInitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  1)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reInitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  1)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reInitializeBegin(interpolator);  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    event.reInitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
284	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>(),  orderingSign,  state.reinitializeBegin(interpolator));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>(),  orderingSign,  state.reinitializeBegin(interpolator));  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(new  Comparator  <  EventState>(),  orderingSign,  state.reinitializeBegin(interpolator));	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(new    Comparator    <    EventState>(),    orderingSign,    state);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
285	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  if(isLastStep)  {  for(EventState  state  :  eventStates)  {  state.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  if(isLastStep)  {  for(EventState  state  :  eventStates)  {  state.reinitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  if(isLastStep)  {  for(EventState  state  :  eventStates)  {  state.reinitializeBegin(interpolator);  }  }	  if(orderingSign    ==    0)    {    if(isLastStep)    {    for(EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
286	[BUG]  [BUGGY]  if(orderingSign!=  1)  {  if(!isLastStep)  {  for(EventState  state  :  eventStates)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  1)  {  if(!isLastStep)  {  for(EventState  state  :  eventStates)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  1)  {  if(!isLastStep)  {  for(EventState  state  :  eventStates)  {  state.reinitializeBegin(interpolator);  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(EventState    state    :    eventStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
287	[BUG]  [BUGGY]  if(orderingSign!=  1)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  1)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  1)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
288	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  yDot,  new  Comparator  <  EventState>());  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  yDot,  new  Comparator  <  EventState>());  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign,  yDot,  new  Comparator  <  EventState>());	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign,    yDot,    new    Comparator    <    EventState>()    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
289	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  state.events.iterator();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  Iterator  <  EventState>  iterator  =  state.events.iterator();  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	Iterator  <  EventState>  iterator  =  state.events.iterator();	  Iterator    <    EventState>    iterator    =    this.events.iterator();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
290	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  otherEvents.iterator();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  Iterator  <  EventState>  iterator  =  otherEvents.iterator();  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	Iterator  <  EventState>  iterator  =  otherEvents.iterator();	  Iterator    <    EventState>    iterator    =    this.events.iterator();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
291	[BUG]  [BUGGY]  orderedSign  +=  state.getSteps().size()  -  4;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderedSign  +=  state.getSteps().size()  -  4;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderedSign  +=  state.getSteps().size()  -  4;	  orderedSign    +=    state.getSteps().size();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
292	[BUG]  [BUGGY]  for(EventState  state  :  this.eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  for(EventState  state  :  this.eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	for(EventState  state  :  this.eventsInitialized)  {  event.reinitializeBegin(interpolator);  }	  for(EventState    state    :    eventsInitialized)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
293	[BUG]  [BUGGY]  for(EventState  state  :  eventStates)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  for(EventState  state  :  eventStates)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	for(EventState  state  :  eventStates)  {  event.reinitializeBegin(interpolator);  }	  for(EventState    state    :    eventsInitialized)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
294	[BUG]  [BUGGY]  final  int  orderedSign  =  orderedSign.size()  -  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  int  orderedSign  =  orderedSign.size()  -  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  int  orderedSign  =  orderedSign.size()  -  1;	  final    int    orderedSign    =    orderedSign.size();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
295	[BUG]  [BUGGY]  if(orderingSign!=  1)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  1)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  1)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
296	[BUG]  [BUGGY]  if(orderingSign!=  0)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  return  orderingSign  *  state.evaluateBegin(state);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  0)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  return  orderingSign  *  state.evaluateBegin(state);  }  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  0)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  return  orderingSign  *  state.evaluateBegin(state);  }	  if(orderingSign!=    null)    {    for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    return    orderingSign    *    state.evaluateBegin(state);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
297	[BUG]  [BUGGY]  if(state.evaluateBegin(interpolator))  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  return  orderingSign  *  state.evaluateBegin(state);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(state.evaluateBegin(interpolator))  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  return  orderingSign  *  state.evaluateBegin(state);  }  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(state.evaluateBegin(interpolator))  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  return  orderingSign  *  state.evaluateBegin(state);  }	  if(orderingSign!=    null)    {    for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    return    orderingSign    *    state.evaluateBegin(state);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
298	[BUG]  [BUGGY]  final  int  orderedSign  =  orderedSign.compareTo(state.getSteps()  -  orderingSign);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  int  orderedSign  =  orderedSign.compareTo(state.getSteps()  -  orderingSign);  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  int  orderedSign  =  orderedSign.compareTo(state.getSteps()  -  orderingSign);	  final    int    orderedSign    =    orderedSign.compareTo(state.getSteps());    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
299	[BUG]  [BUGGY]  final  int  orderedSign  =  orderedSign.compareTo(state.getSteps(),  orderingSign);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  int  orderedSign  =  orderedSign.compareTo(state.getSteps(),  orderingSign);  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  int  orderedSign  =  orderedSign.compareTo(state.getSteps(),  orderingSign);	  final    int    orderedSign    =    orderedSign.compareTo(state.getSteps());    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
300	[BUG]  [BUGGY]  if(orderingSign!=  1)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  1)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  1)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
301	[BUG]  [BUGGY]  efectuareSign  +=  state.evaluateBegin(interpolator);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  efectuareSign  +=  state.evaluateBegin(interpolator);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	efectuareSign  +=  state.evaluateBegin(interpolator);	  if(orderingSign    ==    0)    {    if(state.evaluateStep(interpolator))    {    orderingSign    +=    state.evaluateBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
302	[BUG]  [BUGGY]  aughtExceptionHandler.handleEvent(es0,  orderingSign,  state);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  aughtExceptionHandler.handleEvent(es0,  orderingSign,  state);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	aughtExceptionHandler.handleEvent(es0,  orderingSign,  state);	  if(orderingSign    ==    0)    {    if(state.evaluateStep(interpolator))    {    orderingSign    +=    state.evaluateBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
303	[BUG]  [BUGGY]  final  int  orderingSign  =  state.getStepOffset();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  final  int  orderingSign  =  state.getStepOffset();  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	final  int  orderingSign  =  state.getStepOffset();	  final    int    orderingSign    =    state.getStepEnd();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
304	[BUG]  [BUGGY]  aughtExceptionHandler(interpolator,  state.evaluateBegin(orderingSign));  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  aughtExceptionHandler(interpolator,  state.evaluateBegin(orderingSign));  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	aughtExceptionHandler(interpolator,  state.evaluateBegin(orderingSign));	  if(orderingSign    ==    0)    {    if(state.evaluateStep(interpolator))    {    orderingSign    +=    state.evaluateInt(orderingSign);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
305	[BUG]  [BUGGY]  warningSign  =  state.evaluateStep(orderingSign);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  warningSign  =  state.evaluateStep(orderingSign);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	warningSign  =  state.evaluateStep(orderingSign);	  if(orderingSign    ==    0)    {    if(state.evaluateStep(interpolator))    {    orderingSign    +=    state.evaluateInt(orderingSign);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
306	[BUG]  [BUGGY]  orderingSign  -=  es1.getEventSign();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  orderingSign  -=  es1.getEventSign();  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	orderingSign  -=  es1.getEventSign();	  if(orderingSign    >    0)    {    for(EventState    es1    :    state.getEventStates())    {    orderingSign    +=    es1.getEventSign();    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
307	[BUG]  [BUGGY]  if(orderingSign!=  null)  {  if(!isLastStep)  {  for(EventState  state  =  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  null)  {  if(!isLastStep)  {  for(EventState  state  =  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  null)  {  if(!isLastStep)  {  for(EventState  state  =  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }	  if(orderingSign!=    null)    {    if(!isLastStep)    {    for(EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  ';'  expected	53	None	replace
308	[BUG]  [BUGGY]  if(orderingSign!=  1)  {  if(!isLastStep)  {  for(EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  1)  {  if(!isLastStep)  {  for(EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  1)  {  if(!isLastStep)  {  for(EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
309	[BUG]  [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  /  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  /  1);  [BUGGY]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	SortedSet  <  EventState>  occuringEvents  =  new  TreeSet  <  EventState>(orderingSign  /  1);	  SortedSet    <    EventState>    occuringEvents    =    new    TreeSet    <    EventState>(orderingSign    +    1);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
310	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =(this.stepHandlers  ==  null)?  this.stepHandlers.iterator()  :  null;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  Iterator  <  EventState>  iterator  =(this.stepHandlers  ==  null)?  this.stepHandlers.iterator()  :  null;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	Iterator  <  EventState>  iterator  =(this.stepHandlers  ==  null)?  this.stepHandlers.iterator()  :  null;	  Iterator    <    EventState>    iterator    =    this.stepHandlers.iterator();    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
311	[BUG]  [BUGGY]  if(orderingSign!=  1)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.initializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  1)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.initializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  1)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.initializeBegin(interpolator);  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    state.initializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
312	[BUG]  [BUGGY]  if(orderingSign!=  1)  {  if(!isLastStep)  {  for(EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;      [BUGGY]  if(orderingSign!=  1)  {  if(!isLastStep)  {  for(EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	292	292	1	replace	if(orderingSign!=  1)  {  if(!isLastStep)  {  for(EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }	  if(orderingSign!=    0)    {    if(!isLastStep)    {    for(EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
