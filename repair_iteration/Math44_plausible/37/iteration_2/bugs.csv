bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(EventState  state  :  currentT)  {  [CE]  for-each  not  applicable  to  expression  type  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  for(EventState  state  :  currentT)  {  [BUGGY]    state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	for(EventState  state  :  currentT)  {	  for(EventState    state    :    eventsInitialized)    {    	non-compiled	[CE]  for-each  not  applicable  to  expression  type	1	None	replace
2	[BUG]  [BUGGY]  for(EventState  state  :  this.eventsInitialized)  {  [CE]  cannot  find  symbol  eventsInitialized  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  for(EventState  state  :  this.eventsInitialized)  {  [BUGGY]    state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	for(EventState  state  :  this.eventsInitialized)  {	  for(EventState    state    :    eventsInitialized)    {    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	1	None	replace
3	[BUG]  [BUGGY]  for(EventState  state  :  eventStatesInitialized)  {  [CE]  cannot  find  symbol  eventStatesInitialized  [FE]            AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  for(EventState  state  :  eventStatesInitialized)  {  [BUGGY]    state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	for(EventState  state  :  eventStatesInitialized)  {	  for(EventState    state    :    eventsInitialized)    {    	non-compiled	[CE]  cannot  find  symbol  eventStatesInitialized	1	None	replace
4	[BUG]  [BUGGY]  Iterator  <  EventState>  events  =  this.events.iterator();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  Iterator  <  EventState>  events  =  this.events.iterator();  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	Iterator  <  EventState>  events  =  this.events.iterator();	      Iterator    <    EventState>    eventStates    =    events.iterator();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
5	[BUG]  [BUGGY]  Iterator  <  EventState>  eventStates  =  this.events.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  Iterator  <  EventState>  eventStates  =  this.events.iterator();  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	Iterator  <  EventState>  eventStates  =  this.events.iterator();	      Iterator    <    EventState>    eventStates    =    events.iterator();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
6	[BUG]  [BUGGY]  Iterator  <  EventState>  eventStates  =  this.eventsInitialized.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  Iterator  <  EventState>  eventStates  =  this.eventsInitialized.iterator();  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	Iterator  <  EventState>  eventStates  =  this.eventsInitialized.iterator();	      Iterator    <    EventState>    eventStates    =    events.iterator();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
7	[BUG]  [BUGGY]  state.reinitializeBegin(currentT);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  state.reinitializeBegin(currentT);  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	state.reinitializeBegin(currentT);	      state.reinitializeBegin(previousT);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
8	[BUG]  [BUGGY]  state.reinitializeBegin(eventT);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  state.reinitializeBegin(eventT);  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	state.reinitializeBegin(eventT);	      state.reinitializeBegin(previousT);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
9	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  eventsInitialized.iterator();  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  Iterator  <  EventState>  iterator  =  eventsInitialized.iterator();  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	Iterator  <  EventState>  iterator  =  eventsInitialized.iterator();	      Iterator    <    EventState>    iterator    =    eventsStates.iterator();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
10	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsInitialized.iterator();  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsInitialized.iterator();  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	Iterator  <  EventState>  iterator  =  this.eventsInitialized.iterator();	      Iterator    <    EventState>    iterator    =    eventsStates.iterator();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
11	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();	      Iterator    <    EventState>    iterator    =    eventsStates.iterator();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
12	[BUG]  [BUGGY]  for(EventState  state  :  events.values())  {  [CE]  cannot  find  symbol  events  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  for(EventState  state  :  events.values())  {  [BUGGY]    state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	for(EventState  state  :  events.values())  {	  for(EventState    state    :    eventStates.values())    {    	non-compiled	[CE]  cannot  find  symbol  events	2	None	replace
13	[BUG]  [BUGGY]  for(EventState  state  :  currentEvents.values())  {  [CE]  cannot  find  symbol  currentEvents  [FE]            AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  for(EventState  state  :  currentEvents.values())  {  [BUGGY]    state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	for(EventState  state  :  currentEvents.values())  {	  for(EventState    state    :    eventStates.values())    {    	non-compiled	[CE]  cannot  find  symbol  currentEvents	2	None	replace
14	[BUG]  [BUGGY]  for(EventState  state  :  this.events.values())  {  [CE]  cannot  find  symbol  events  [FE]              AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  for(EventState  state  :  this.events.values())  {  [BUGGY]    state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	for(EventState  state  :  this.events.values())  {	  for(EventState    state    :    eventStates.values())    {    	non-compiled	[CE]  cannot  find  symbol  events	2	None	replace
15	[BUG]  [BUGGY]  for(EventState  state  :  currentT.values())  {  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  for(EventState  state  :  currentT.values())  {  [BUGGY]    state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	for(EventState  state  :  currentT.values())  {	  for(EventState    state    :    eventStates.values())    {    	non-compiled	[CE]  double  cannot  be  dereferenced	2	None	replace
16	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  getEventStates().iterator();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  Iterator  <  EventState>  eventsStates  =  getEventStates().iterator();  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	Iterator  <  EventState>  eventsStates  =  getEventStates().iterator();	      Iterator    <    EventState>    eventsStates    =    getEventStates();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
17	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  getEventStates(currentT);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  Iterator  <  EventState>  eventsStates  =  getEventStates(currentT);  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	Iterator  <  EventState>  eventsStates  =  getEventStates(currentT);	      Iterator    <    EventState>    eventsStates    =    getEventStates();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
18	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  getEventStatesInitialized();  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  Iterator  <  EventState>  eventsStates  =  getEventStatesInitialized();  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	Iterator  <  EventState>  eventsStates  =  getEventStatesInitialized();	      Iterator    <    EventState>    eventsStates    =    getEventStates();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
19	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.eventsInitialized.next();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.eventsInitialized.next();  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	Iterator  <  EventState>  eventsStates  =  this.eventsInitialized.next();	      Iterator    <    EventState>    eventsStates    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
20	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  state.eventsInitialized.next();  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  Iterator  <  EventState>  eventsStates  =  state.eventsInitialized.next();  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	Iterator  <  EventState>  eventsStates  =  state.eventsInitialized.next();	      Iterator    <    EventState>    eventsStates    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
21	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  state.next();  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  Iterator  <  EventState>  eventsStates  =  state.next();  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	Iterator  <  EventState>  eventsStates  =  state.next();	      Iterator    <    EventState>    eventsStates    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
22	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  currentT.next();  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  Iterator  <  EventState>  eventsStates  =  currentT.next();  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	Iterator  <  EventState>  eventsStates  =  currentT.next();	      Iterator    <    EventState>    eventsStates    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
23	[BUG]  [BUGGY]  eventsStates.add(interpolator);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  eventsStates.add(interpolator);  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	eventsStates.add(interpolator);	      eventStates.add(interpolator);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
24	[BUG]  [BUGGY]  eventStates.add(previousT);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  eventStates.add(previousT);  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	eventStates.add(previousT);	      eventStates.add(interpolator);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
25	[BUG]  [BUGGY]  eventsInitialized.add(interpolator);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  eventsInitialized.add(interpolator);  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	eventsInitialized.add(interpolator);	      eventStates.add(interpolator);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
26	[BUG]  [BUGGY]  eventStates.add(currentT);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  eventStates.add(currentT);  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	eventStates.add(currentT);	      eventStates.add(interpolator);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
27	[BUG]  [BUGGY]      Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]      Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	        Iterator    <    EventState>    iterator    =    eventsStates.iterator();    Iterator  <  EventState>  iterator  =  eventsStates.iterator();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	6	None	add
28	[BUG]  [BUGGY]      Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Iterator  <  EventState>  iterator  =  eventStates.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]      AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]      Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Iterator  <  EventState>  iterator  =  eventStates.iterator();  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	        Iterator    <    EventState>    iterator    =    eventsStates.iterator();    Iterator  <  EventState>  iterator  =  eventStates.iterator();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	6	None	add
29	[BUG]  [BUGGY]      Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  isLastStep  =  true;  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]      Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  isLastStep  =  true;  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	        Iterator    <    EventState>    iterator    =    eventsStates.iterator();    Iterator  <  EventState>  iterator  =  eventsStates.iterator();  isLastStep  =  true;	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	6	None	add
30	[BUG]  [BUGGY]      Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  isLastStep  =  false;  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]      Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  isLastStep  =  false;  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	        Iterator    <    EventState>    iterator    =    eventsStates.iterator();    Iterator  <  EventState>  iterator  =  eventsStates.iterator();  isLastStep  =  false;	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	6	None	add
31	[BUG]  [BUGGY]  for(EventState  state  :  this.eventsStates)  {  for(EventState  state  :  this.eventsStates)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  for(EventState  state  :  this.eventsStates)  {  for(EventState  state  :  this.eventsStates)  {  [BUGGY]    state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	for(EventState    state    :    this.eventsStates)    {    for(EventState  state  :  this.eventsStates)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
32	[BUG]  [BUGGY]  for(EventState  state  :  this.eventsStates)  {  For(EventState  state  :  this.eventsStates)  {  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  for(EventState  state  :  this.eventsStates)  {  For(EventState  state  :  this.eventsStates)  {  [BUGGY]    state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	for(EventState    state    :    this.eventsStates)    {    For(EventState  state  :  this.eventsStates)  {	  	non-compiled	[CE]  ')'  expected	3	None	add
33	[BUG]  [BUGGY]  for(EventState  state  :  this.eventsStates)  {  for(EventState  state  =  this.eventsStates)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  for(EventState  state  :  this.eventsStates)  {  for(EventState  state  =  this.eventsStates)  {  [BUGGY]    state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	for(EventState    state    :    this.eventsStates)    {    for(EventState  state  =  this.eventsStates)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
34	[BUG]  [BUGGY]  for(EventState  state  :  this.eventsStates)  {  Iterator  <  EventState>  iterator  =  events.iterator();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  for(EventState  state  :  this.eventsStates)  {  Iterator  <  EventState>  iterator  =  events.iterator();  [BUGGY]    state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	for(EventState    state    :    this.eventsStates)    {    Iterator  <  EventState>  iterator  =  events.iterator();	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
35	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.events.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  Iterator  <  EventState>  iterator  =  this.events.iterator();  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	Iterator  <  EventState>  iterator  =  this.events.iterator();	      Iterator    <    EventState>    iterator    =    events.iterator();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
36	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  getEventsStates().iterator();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  Iterator  <  EventState>  eventsStates  =  getEventsStates().iterator();  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	Iterator  <  EventState>  eventsStates  =  getEventsStates().iterator();	      Iterator    <    EventState>    eventsStates    =    getEventsStates();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
37	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.eventsStates;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.eventsStates;  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	Iterator  <  EventState>  eventsStates  =  this.eventsStates;	      Iterator    <    EventState>    eventsStates    =    getEventsStates();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
38	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.eventsStates();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.eventsStates();  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	Iterator  <  EventState>  eventsStates  =  this.eventsStates();	      Iterator    <    EventState>    eventsStates    =    getEventsStates();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
39	[BUG]  [BUGGY]  state.reinitializeBegin(previousT,  interpolator);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  state.reinitializeBegin(previousT,  interpolator);  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	state.reinitializeBegin(previousT,  interpolator);	      state.reinitializeBegin(interpolator);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
40	[BUG]  [BUGGY]  state.reinitializeBegin(eventsInitialized);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  state.reinitializeBegin(eventsInitialized);  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	state.reinitializeBegin(eventsInitialized);	      state.reinitializeBegin(interpolator);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
41	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.eventsInitialized.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.eventsInitialized.iterator();  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	Iterator  <  EventState>  eventsStates  =  this.eventsInitialized.iterator();	      Iterator    <    EventState>    eventsStates    =    events.iterator();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
42	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.eventsStates.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.eventsStates.iterator();  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	Iterator  <  EventState>  eventsStates  =  this.eventsStates.iterator();	      Iterator    <    EventState>    eventsStates    =    events.iterator();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
43	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.eventHandlers.iterator();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.eventHandlers.iterator();  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	Iterator  <  EventState>  eventsStates  =  this.eventHandlers.iterator();	      Iterator    <    EventState>    eventsStates    =    events.iterator();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
44	[BUG]  [BUGGY]  for(EventState  state  :  this.eventsStates.values())  {  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  for(EventState  state  :  this.eventsStates.values())  {  [BUGGY]    state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	for(EventState  state  :  this.eventsStates.values())  {	  for(EventState    state    :    this.eventsStates)    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
45	[BUG]  [BUGGY]  for(EventState  state  :  events.events)  {  [CE]  cannot  find  symbol  events  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  for(EventState  state  :  events.events)  {  [BUGGY]    state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	for(EventState  state  :  events.events)  {	  for(EventState    state    :    this.events)    {    	non-compiled	[CE]  cannot  find  symbol  events	12	None	replace
46	[BUG]  [BUGGY]  for(EventState  state  :  events)  {  [CE]  cannot  find  symbol  events  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  for(EventState  state  :  events)  {  [BUGGY]    state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	for(EventState  state  :  events)  {	  for(EventState    state    :    this.events)    {    	non-compiled	[CE]  cannot  find  symbol  events	12	None	replace
47	[BUG]  [BUGGY]  for(EventState  state  :  this.eventsStates)  {  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  for(EventState  state  :  this.eventsStates)  {  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [BUGGY]    state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	for(EventState    state    :    this.eventsStates)    {    Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
48	[BUG]  [BUGGY]  for(EventState  state  :  this.eventsStates)  {  Iterator  <  EventState>  iterator  =  this.eventsStates.entrySet().iterator();  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  for(EventState  state  :  this.eventsStates)  {  Iterator  <  EventState>  iterator  =  this.eventsStates.entrySet().iterator();  [BUGGY]    state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	for(EventState    state    :    this.eventsStates)    {    Iterator  <  EventState>  iterator  =  this.eventsStates.entrySet().iterator();	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
49	[BUG]  [BUGGY]  for(EventState  state  :  this.eventsStates)  {  Iterator  <  EventState>  iterator  =  this.eventsStates.values().iterator();  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  for(EventState  state  :  this.eventsStates)  {  Iterator  <  EventState>  iterator  =  this.eventsStates.values().iterator();  [BUGGY]    state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	for(EventState    state    :    this.eventsStates)    {    Iterator  <  EventState>  iterator  =  this.eventsStates.values().iterator();	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
50	[BUG]  [BUGGY]  state.reinitializeBegin(currentT,  interpolator);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  state.reinitializeBegin(currentT,  interpolator);  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	state.reinitializeBegin(currentT,  interpolator);	      state.reinitializeBegin(interpolator);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
51	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  stepHandlers.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  Iterator  <  EventState>  eventsStates  =  stepHandlers.iterator();  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	Iterator  <  EventState>  eventsStates  =  stepHandlers.iterator();	      Iterator    <    EventState>    eventsStates    =    events.iterator();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
52	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  state.eventsStates.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  Iterator  <  EventState>  eventsStates  =  state.eventsStates.iterator();  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	Iterator  <  EventState>  eventsStates  =  state.eventsStates.iterator();	      Iterator    <    EventState>    eventsStates    =    events.iterator();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
53	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  currentT.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  Iterator  <  EventState>  iterator  =  currentT.iterator();  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	Iterator  <  EventState>  iterator  =  currentT.iterator();	      Iterator    <    EventState>    iterator    =    events.iterator();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
54	[BUG]  [BUGGY]  Iterator  <  EventState>  eventStates  =  stepHandlers.iterator();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  Iterator  <  EventState>  eventStates  =  stepHandlers.iterator();  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	Iterator  <  EventState>  eventStates  =  stepHandlers.iterator();	      Iterator    <    EventState>    eventStates    =    events.iterator();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
55	[BUG]  [BUGGY]  for(EventState  state  :  eventStates)  {  [CE]  cannot  find  symbol  eventStates  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  for(EventState  state  :  eventStates)  {  [BUGGY]    state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	for(EventState  state  :  eventStates)  {	  for(EventState    state    :    eventsInitialized)    {    	non-compiled	[CE]  cannot  find  symbol  eventStates	1	None	replace
56	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.events.values().iterator();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.events.values().iterator();  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	Iterator  <  EventState>  eventsStates  =  this.events.values().iterator();	      Iterator    <    EventState>    eventsStates    =    this.events.iterator();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
57	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.stepHandlers.iterator();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.stepHandlers.iterator();  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	Iterator  <  EventState>  eventsStates  =  this.stepHandlers.iterator();	      Iterator    <    EventState>    eventsStates    =    this.events.iterator();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
58	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  allEvents.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  Iterator  <  EventState>  eventsStates  =  allEvents.iterator();  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	Iterator  <  EventState>  eventsStates  =  allEvents.iterator();	      Iterator    <    EventState>    eventsStates    =    this.events.iterator();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
59	[BUG]  [BUGGY]  state.reinitializeBegin(expandableODE);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  state.reinitializeBegin(expandableODE);  [BUGGY]    state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	state.reinitializeBegin(expandableODE);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
60	[BUG]  [BUGGY]      Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  this.eventsStates.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]      Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Iterator  <  EventState>  iterator  =  eventsStates.iterator();  this.eventsStates.iterator();  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	        Iterator    <    EventState>    iterator    =    eventsStates.iterator();    Iterator  <  EventState>  iterator  =  eventsStates.iterator();  this.eventsStates.iterator();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	6	None	add
61	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  getEventsStates(currentT);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  Iterator  <  EventState>  eventsStates  =  getEventsStates(currentT);  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	Iterator  <  EventState>  eventsStates  =  getEventsStates(currentT);	      Iterator    <    EventState>    eventsStates    =    getEventsStates();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
62	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  getEventStates(events);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  Iterator  <  EventState>  eventsStates  =  getEventStates(events);  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	Iterator  <  EventState>  eventsStates  =  getEventStates(events);	      Iterator    <    EventState>    eventsStates    =    getEventStates();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
63	[BUG]  [BUGGY]  eventsStates.add(previousT);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  eventsStates.add(previousT);  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	eventsStates.add(previousT);	      eventStates.add(interpolator);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
64	[BUG]  [BUGGY]  for(EventState  state  :  this.eventsInitializer)  {  [CE]  cannot  find  symbol  eventsInitializer  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  for(EventState  state  :  this.eventsInitializer)  {  [BUGGY]    state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	for(EventState  state  :  this.eventsInitializer)  {	  for(EventState    state    :    this.eventsStates)    {    	non-compiled	[CE]  cannot  find  symbol  eventsInitializer	4	None	replace
65	[BUG]  [BUGGY]  Iterator  <  EventState>  events  =  this.eventStates.iterator();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  Iterator  <  EventState>  events  =  this.eventStates.iterator();  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	Iterator  <  EventState>  events  =  this.eventStates.iterator();	      Iterator    <    EventState>    eventStates    =    events.iterator();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
66	[BUG]  [BUGGY]  Iterator  <  EventState>  eventStates  =  this.eventStates.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  Iterator  <  EventState>  eventStates  =  this.eventStates.iterator();  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	Iterator  <  EventState>  eventStates  =  this.eventStates.iterator();	      Iterator    <    EventState>    eventStates    =    events.iterator();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
67	[BUG]  [BUGGY]  for(EventState  state  :  this.eventsStates)  {  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  state.reinitializeBegin(interpolator);  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  for(EventState  state  :  this.eventsStates)  {  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  state.reinitializeBegin(interpolator);  [BUGGY]    state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	for(EventState    state    :    this.eventsStates)    {    Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  state.reinitializeBegin(interpolator);	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
68	[BUG]  [BUGGY]  for(EventState  state  :  this.eventsStates)  {  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  isLastStep  =  iterator.hasNext();  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  for(EventState  state  :  this.eventsStates)  {  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  isLastStep  =  iterator.hasNext();  [BUGGY]    state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	for(EventState    state    :    this.eventsStates)    {    Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  isLastStep  =  iterator.hasNext();	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
69	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  getEventsStatesInitialized();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  Iterator  <  EventState>  eventsStates  =  getEventsStatesInitialized();  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	Iterator  <  EventState>  eventsStates  =  getEventsStatesInitialized();	      Iterator    <    EventState>    eventsStates    =    getEventsStates();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
70	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  currentEvents.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  Iterator  <  EventState>  iterator  =  currentEvents.iterator();  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	Iterator  <  EventState>  iterator  =  currentEvents.iterator();	      Iterator    <    EventState>    iterator    =    events.iterator();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
71	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsInitializer.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsInitializer.iterator();  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	Iterator  <  EventState>  iterator  =  this.eventsInitializer.iterator();	      Iterator    <    EventState>    iterator    =    events.iterator();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
72	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.events.next();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.events.next();  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	Iterator  <  EventState>  eventsStates  =  this.events.next();	      Iterator    <    EventState>    eventsStates    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
73	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.eventsInitializer.next();  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.eventsInitializer.next();  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	Iterator  <  EventState>  eventsStates  =  this.eventsInitializer.next();	      Iterator    <    EventState>    eventsStates    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
74	[BUG]  [BUGGY]      Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Ilerator  <  EventState>  iterator  =  eventsStates.iterator();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]      Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Ilerator  <  EventState>  iterator  =  eventsStates.iterator();  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	        Iterator    <    EventState>    iterator    =    eventsStates.iterator();    Ilerator  <  EventState>  iterator  =  eventsStates.iterator();	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
75	[BUG]  [BUGGY]      Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Iterator  <  EventsState>  iterator  =  eventsStates.iterator();  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]      Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Iterator  <  EventsState>  iterator  =  eventsStates.iterator();  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	        Iterator    <    EventState>    iterator    =    eventsStates.iterator();    Iterator  <  EventsState>  iterator  =  eventsStates.iterator();	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
76	[BUG]  [BUGGY]      Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Iterator  <  EventState>  iterator  =  eventsStates.iterator());  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]      Iterator  <  EventState>  iterator  =  eventsStates.iterator();  Iterator  <  EventState>  iterator  =  eventsStates.iterator());  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	        Iterator    <    EventState>    iterator    =    eventsStates.iterator();    Iterator  <  EventState>  iterator  =  eventsStates.iterator());	  	non-compiled	[CE]  ';'  expected	6	None	add
77	[BUG]  [BUGGY]  state.reinitializeBegin(expT);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;  if  (!  statesInitialized)  {    [BUGGY]  state.reinitializeBegin(expT);  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	284	284	1	replace	state.reinitializeBegin(expT);	      state.reinitializeBegin(interpolator);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
