bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  resetOccurred  =  previousT  >>  currentT;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  previousT  >>  currentT;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >>  currentT;	  resetOccurred    =    currentT!=    currentT;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	20	None	replace
2	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  previousT  >=  currentT;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  =  previousT  >=  currentT;	  resetOccurred    =    currentT!=    currentT;    	compilable	  [FE]  AssertionError  	20	1	replace
3	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  currentT;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  previousT  >=  currentT;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >=  currentT;	  resetOccurred    =    currentT!=    currentT;    	compilable	  [FE]  AssertionError  	20	1	replace
4	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  previousT!=  currentT;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  =  previousT!=  currentT;	  resetOccurred    =    currentT!=    currentT;    	compilable	  [FE]  AssertionError  	20	1	replace
5	[BUG]  [BUGGY]  resetOccurred  =  previousT!=  currentT;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  previousT!=  currentT;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT!=  currentT;	  resetOccurred    =    currentT!=    currentT;    	compilable	  [FE]  AssertionError  	20	1	replace
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  previousT  ==  currentT;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  =  previousT  ==  currentT;	  resetOccurred    =    currentT!=    currentT;    	compilable	  [FE]  AssertionError  	20	1	replace
7	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  currentT;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  previousT  ==  currentT;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  currentT;	  resetOccurred    =    currentT!=    currentT;    	compilable	  [FE]  AssertionError  	20	1	replace
8	[BUG]  [BUGGY]  Preconditions.checkState(currentT  >=  previousT);  [CE]  cannot  find  symbol  Preconditions  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  Preconditions.checkState(currentT  >=  previousT);  [BUGGY]    resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(currentT  >=  previousT);	      Preconditions.checkState(previousT    >=    currentT);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	13	None	replace
9	[BUG]  [BUGGY]  Preconditions.checkState(previousT  >  currentT);  [CE]  cannot  find  symbol  Preconditions  [FE]            AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  Preconditions.checkState(previousT  >  currentT);  [BUGGY]    resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(previousT  >  currentT);	      Preconditions.checkState(previousT    >=    currentT);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	13	None	replace
10	[BUG]  [BUGGY]  Preconditions.checkState(previousT  >=  currentT  -  1);  [CE]  cannot  find  symbol  Preconditions  [FE]              AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  Preconditions.checkState(previousT  >=  currentT  -  1);  [BUGGY]    resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(previousT  >=  currentT  -  1);	      Preconditions.checkState(previousT    >=    currentT);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	13	None	replace
11	[BUG]  [BUGGY]  Preconditions.checkState(previousT  >=  currentT  +  1);  [CE]  cannot  find  symbol  Preconditions  [FE]                AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  Preconditions.checkState(previousT  >=  currentT  +  1);  [BUGGY]    resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(previousT  >=  currentT  +  1);	      Preconditions.checkState(previousT    >=    currentT);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	13	None	replace
12	[BUG]  [BUGGY]  Iterator  iterator  =  events.iterator();  [CE]  cannot  find  symbol  events  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  Iterator  iterator  =  events.iterator();  [BUGGY]    resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  iterator  =  events.iterator();	      Iterator    iterator    =    this.events.iterator();    	non-compiled	[CE]  cannot  find  symbol  events	21	None	replace
13	[BUG]  [BUGGY]  Iterator  iterator  =  currentT.iterator();  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  Iterator  iterator  =  currentT.iterator();  [BUGGY]    resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  iterator  =  currentT.iterator();	      Iterator    iterator    =    this.events.iterator();    	non-compiled	[CE]  double  cannot  be  dereferenced	21	None	replace
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT!=  currentT;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT!=  currentT;	  	compilable	  [FE]  AssertionError  	19	1	add
15	[BUG]  [BUGGY]  resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT!=  currentT;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT!=  currentT;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT!=  currentT;	  	compilable	  [FE]  AssertionError  	19	1	add
16	[BUG]  [BUGGY]  resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  >>  currentT;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]      AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  >>  currentT;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT  >>  currentT;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	19	None	add
17	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  >=  currentT;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT  >=  currentT;	  	compilable	  [FE]  AssertionError  	19	1	add
18	[BUG]  [BUGGY]  resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  >=  currentT;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  >=  currentT;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT  >=  currentT;	  	compilable	  [FE]  AssertionError  	19	1	add
19	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  ==  currentT;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT  ==  currentT;	  	compilable	  [FE]  AssertionError  	19	1	add
20	[BUG]  [BUGGY]  resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  ==  currentT;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT!=  currentT;  resetOccurred  =  currentT  ==  currentT;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT!=    currentT;    resetOccurred  =  currentT  ==  currentT;	  	compilable	  [FE]  AssertionError  	19	1	add
21	[BUG]  [BUGGY]  resetOccurred  =  currentT!=  currentT;  currentT  >=  currentT;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT!=  currentT;  currentT  >=  currentT;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT!=    currentT;    currentT  >=  currentT;	  	non-compiled	[CE]  not  a  statement	19	None	add
22	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.eventsStates.iterator();  [CE]  for-each  not  applicable  to  expression  type  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.eventsStates.iterator();  [BUGGY]    resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  <  EventState>  eventsStates  =  this.eventsStates.iterator();	      Iterator    <    EventState>    eventsStates    =    currentEvents.iterator();    	non-compiled	[CE]  for-each  not  applicable  to  expression  type	22	None	replace
23	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  eventStates.iterator();  [CE]  cannot  find  symbol  eventStates  [FE]            AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  Iterator  <  EventState>  eventsStates  =  eventStates.iterator();  [BUGGY]    resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  <  EventState>  eventsStates  =  eventStates.iterator();	      Iterator    <    EventState>    eventsStates    =    currentEvents.iterator();    	non-compiled	[CE]  cannot  find  symbol  eventStates	22	None	replace
24	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.events.iterator();  [CE]  cannot  find  symbol  events  [FE]              AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.events.iterator();  [BUGGY]    resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  <  EventState>  eventsStates  =  this.events.iterator();	      Iterator    <    EventState>    eventsStates    =    currentEvents.iterator();    	non-compiled	[CE]  cannot  find  symbol  events	22	None	replace
25	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.currentT.iterator();  [CE]  cannot  find  symbol  currentT  [FE]            AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.currentT.iterator();  [BUGGY]    resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  <  EventState>  eventsStates  =  this.currentT.iterator();	      Iterator    <    EventState>    eventsStates    =    currentT.iterator();    	non-compiled	[CE]  cannot  find  symbol  currentT	23	None	replace
26	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  ==  currentT;	  	compilable	  [FE]  AssertionError  	17	1	add
27	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  ==  currentT;  resetOccurred  =  currentT  ==  currentT;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    currentT;    resetOccurred  =  currentT  ==  currentT;	  	compilable	  [FE]  AssertionError  	17	1	add
28	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  currentT;  state.reinitializeBegin(previousT);  [CE]  cannot  find  symbol  state  [FE]      AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  ==  currentT;  state.reinitializeBegin(previousT);  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    currentT;    state.reinitializeBegin(previousT);	  	non-compiled	[CE]  cannot  find  symbol  state	17	None	add
29	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  currentT;  state.reinitializeBegin(interpolator);  [CE]  cannot  find  symbol  state  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  ==  currentT;  state.reinitializeBegin(interpolator);  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    currentT;    state.reinitializeBegin(interpolator);	  	non-compiled	[CE]  cannot  find  symbol  state	17	None	add
30	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  currentT;  state.reinitializeBegin(currentT);  [CE]  cannot  find  symbol  state  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  ==  currentT;  state.reinitializeBegin(currentT);  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    currentT;    state.reinitializeBegin(currentT);	  	non-compiled	[CE]  cannot  find  symbol  state	17	None	add
31	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  currentT;  currentT  ==  currentT;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  ==  currentT;  currentT  ==  currentT;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    currentT;    currentT  ==  currentT;	  	non-compiled	[CE]  not  a  statement	17	None	add
32	[BUG]  [BUGGY]  state.reinitializeBegin(previousT,  interpolator);  [CE]  cannot  find  symbol  state  [FE]                AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  state.reinitializeBegin(previousT,  interpolator);  [BUGGY]    resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	state.reinitializeBegin(previousT,  interpolator);	      state.reinitializeBegin(interpolator);    	non-compiled	[CE]  cannot  find  symbol  state	11	None	replace
33	[BUG]  [BUGGY]  state.resetOccurred(previousT);  [CE]  cannot  find  symbol  state  [FE]                  AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  state.resetOccurred(previousT);  [BUGGY]    resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	state.resetOccurred(previousT);	      state.reinitializeBegin(interpolator);    	non-compiled	[CE]  cannot  find  symbol  state	11	None	replace
34	[BUG]  [BUGGY]  state.reinitializeBegin(previousT,  currentT);  [CE]  cannot  find  symbol  state  [FE]              AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  state.reinitializeBegin(previousT,  currentT);  [BUGGY]    resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	state.reinitializeBegin(previousT,  currentT);	      state.reinitializeBegin(previousT);    	non-compiled	[CE]  cannot  find  symbol  state	10	None	replace
35	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  ==  0;  resetOccurred  =  currentT  ==  0;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred    =    currentT    ==    0;    resetOccurred  =  currentT  ==  0;	  	compilable	  [FE]  AssertionError  	15	1	add
36	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  0;  resetOccurred  =  currentT  ==  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  ==  0;  resetOccurred  =  currentT  ==  0;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    0;    resetOccurred  =  currentT  ==  0;	  	compilable	  [FE]  AssertionError  	15	1	add
37	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  0;  if(previousT  ==  0)  {  if(isLastStep)  {  resetOccurred  =  currentT  ==  0;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  ==  0;  if(previousT  ==  0)  {  if(isLastStep)  {  resetOccurred  =  currentT  ==  0;  }  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    0;    if(previousT  ==  0)  {  if(isLastStep)  {  resetOccurred  =  currentT  ==  0;  }	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
38	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  ==  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  return  currentT;  }  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    0;    if(previousT  ==  0)  {  if(!isLastStep)  {  return  currentT;  }	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
39	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  0;  if(previousT  ==  0)  {  if(isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  ==  0;  if(previousT  ==  0)  {  if(isLastStep)  {  return  currentT;  }  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    0;    if(previousT  ==  0)  {  if(isLastStep)  {  return  currentT;  }	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
40	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  0;  if(previousT!=  0)  {  if(!isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  ==  0;  if(previousT!=  0)  {  if(!isLastStep)  {  return  currentT;  }  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    0;    if(previousT!=  0)  {  if(!isLastStep)  {  return  currentT;  }	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
41	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  this.resetOccurred  =  true;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred  =  true;	  this.resetOccurred    =    false;    	compilable	  [FE]  AssertionError  	4	1	replace
42	[BUG]  [BUGGY]  this.resetOccurred  =  true;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  this.resetOccurred  =  true;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred  =  true;	  this.resetOccurred    =    false;    	compilable	  [FE]  AssertionError  	4	1	replace
43	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  previousT  ==  0;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  =  previousT  ==  0;	  resetOccurred    =    currentT    ==    0;    	compilable	  [FE]  AssertionError  	16	1	replace
44	[BUG]  [BUGGY]  resetOccurred  =  previousT  ==  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  previousT  ==  0;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  ==  0;	  resetOccurred    =    currentT    ==    0;    	compilable	  [FE]  AssertionError  	16	1	replace
45	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  >  0;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  =  currentT  >  0;	  resetOccurred    =    currentT    ==    0;    	compilable	  [FE]  AssertionError  	16	1	replace
46	[BUG]  [BUGGY]  resetOccurred  =  currentT  >  0;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  >  0;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  >  0;	  resetOccurred    =    currentT    ==    0;    	compilable	  [FE]  AssertionError  	16	1	replace
47	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  previousT  >=  0;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  =  previousT  >=  0;	  resetOccurred    =    currentT    ==    0;    	compilable	  [FE]  AssertionError  	16	1	replace
48	[BUG]  [BUGGY]  resetOccurred  =  previousT  >=  0;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  previousT  >=  0;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >=  0;	  resetOccurred    =    currentT    ==    0;    	compilable	  [FE]  AssertionError  	16	1	replace
49	[BUG]  [BUGGY]  resetOccurred  =  previousT  >>  0;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  previousT  >>  0;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  previousT  >>  0;	  resetOccurred    =    currentT    ==    0;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	16	None	replace
50	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  true;  resetOccurred  =  true;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred    =    true;    resetOccurred  =  true;	  	compilable	  [FE]  AssertionError  	1	1	add
51	[BUG]  [BUGGY]  resetOccurred  =  true;  resetOccurred  =  true;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  true;  resetOccurred  =  true;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    true;    resetOccurred  =  true;	  	compilable	  [FE]  AssertionError  	1	1	add
52	[BUG]  [BUGGY]  resetOccurred  =  true;  state.reinitializeBegin(previousT);  [CE]  cannot  find  symbol  state  [FE]      AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  true;  state.reinitializeBegin(previousT);  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    true;    state.reinitializeBegin(previousT);	  	non-compiled	[CE]  cannot  find  symbol  state	1	None	add
53	[BUG]  [BUGGY]  resetOccurred  =  true;  state.reinitializeBegin(interpolator);  [CE]  cannot  find  symbol  state  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  true;  state.reinitializeBegin(interpolator);  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    true;    state.reinitializeBegin(interpolator);	  	non-compiled	[CE]  cannot  find  symbol  state	1	None	add
54	[BUG]  [BUGGY]  resetOccurred  =  true;  state.resetOccurred  =  true;  [CE]  cannot  find  symbol  state  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  true;  state.resetOccurred  =  true;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    true;    state.resetOccurred  =  true;	  	non-compiled	[CE]  cannot  find  symbol  state	1	None	add
55	[BUG]  [BUGGY]  resetOccurred  =  true;  state.reinitializeBegin(currentT);  [CE]  cannot  find  symbol  state  [FE]            AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  true;  state.reinitializeBegin(currentT);  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    true;    state.reinitializeBegin(currentT);	  	non-compiled	[CE]  cannot  find  symbol  state	1	None	add
56	[BUG]  [BUGGY]  this.eventsStates.add(currentT,  interpolator);  [CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  this.eventsStates.add(currentT,  interpolator);  [BUGGY]    resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.eventsStates.add(currentT,  interpolator);	      this.eventsStates.add(interpolator);    	non-compiled	[CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;	24	None	replace
57	[BUG]  [BUGGY]  this.eventsStates.add(previousT,  interpolator);  [CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  this.eventsStates.add(previousT,  interpolator);  [BUGGY]    resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.eventsStates.add(previousT,  interpolator);	      this.eventsStates.add(interpolator);    	non-compiled	[CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;	24	None	replace
58	[BUG]  [BUGGY]  this.eventsStates.add(interpolator,  previousT);  [CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]                  AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  this.eventsStates.add(interpolator,  previousT);  [BUGGY]    resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.eventsStates.add(interpolator,  previousT);	      this.eventsStates.add(interpolator);    	non-compiled	[CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;	24	None	replace
59	[BUG]  [BUGGY]  this.eventsStates.add(currentT,  eventS);  [CE]  cannot  find  symbol  eventS  [FE]                    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  this.eventsStates.add(currentT,  eventS);  [BUGGY]    resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.eventsStates.add(currentT,  eventS);	      this.eventsStates.add(interpolator);    	non-compiled	[CE]  cannot  find  symbol  eventS	24	None	replace
60	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  &=  previousT  >  currentT;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  &=  previousT  >  currentT;	  resetOccurred    =    true;    	compilable	  [FE]  AssertionError  	2	1	replace
61	[BUG]  [BUGGY]  resetOccurred  &=  previousT  >  currentT;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  &=  previousT  >  currentT;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  &=  previousT  >  currentT;	  resetOccurred    =    true;    	compilable	  [FE]  AssertionError  	2	1	replace
62	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  &=  currentT  ==  currentT;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  &=  currentT  ==  currentT;	  resetOccurred    =    true;    	compilable	  [FE]  AssertionError  	2	1	replace
63	[BUG]  [BUGGY]  resetOccurred  &=  currentT  ==  currentT;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  &=  currentT  ==  currentT;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  &=  currentT  ==  currentT;	  resetOccurred    =    true;    	compilable	  [FE]  AssertionError  	2	1	replace
64	[BUG]  [BUGGY]  Preconditions.checkNotNull(currentT);  [CE]  cannot  find  symbol  Preconditions  [FE]            AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  Preconditions.checkNotNull(currentT);  [BUGGY]    resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkNotNull(currentT);	      Preconditions.checkNotNull(previousT);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	14	None	replace
65	[BUG]  [BUGGY]  Preconditions.checkState(currentT!=  previousT);  [CE]  cannot  find  symbol  Preconditions  [FE]              AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  Preconditions.checkState(currentT!=  previousT);  [BUGGY]    resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(currentT!=  previousT);	      Preconditions.checkNotNull(previousT);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	14	None	replace
66	[BUG]  [BUGGY]  Preconditions.checkState(previousT!=  currentT);  [CE]  cannot  find  symbol  Preconditions  [FE]                AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  Preconditions.checkState(previousT!=  currentT);  [BUGGY]    resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(previousT!=  currentT);	      Preconditions.checkNotNull(previousT);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	14	None	replace
67	[BUG]  [BUGGY]  Preconditions.checkState(currentT  ==  previousT);  [CE]  cannot  find  symbol  Preconditions  [FE]                  AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  Preconditions.checkState(currentT  ==  previousT);  [BUGGY]    resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(currentT  ==  previousT);	      Preconditions.checkNotNull(previousT);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	14	None	replace
68	[BUG]  [BUGGY]  state.reinitializeBegin(eventT);  [CE]  cannot  find  symbol  eventT  [FE]            AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  state.reinitializeBegin(eventT);  [BUGGY]    resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	state.reinitializeBegin(eventT);	      state.reinitializeBegin(currentT);    	non-compiled	[CE]  cannot  find  symbol  eventT	9	None	replace
69	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  this.resetOccurred  =  false;  this.resetOccurred  =  false;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred    =    false;    this.resetOccurred  =  false;	  	compilable	  [FE]  AssertionError  	3	1	add
70	[BUG]  [BUGGY]  this.resetOccurred  =  false;  this.resetOccurred  =  false;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  this.resetOccurred  =  false;  this.resetOccurred  =  false;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred    =    false;    this.resetOccurred  =  false;	  	compilable	  [FE]  AssertionError  	3	1	add
71	[BUG]  [BUGGY]  this.resetOccurred  =  false;  Iterator  iterator  =  eventsStates.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]      AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  this.resetOccurred  =  false;  Iterator  iterator  =  eventsStates.iterator();  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred    =    false;    Iterator  iterator  =  eventsStates.iterator();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	3	None	add
72	[BUG]  [BUGGY]  this.resetOccurred  =  false;  This.resetOccurred  =  false;  [CE]  cannot  find  symbol  This  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  this.resetOccurred  =  false;  This.resetOccurred  =  false;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred    =    false;    This.resetOccurred  =  false;	  	non-compiled	[CE]  cannot  find  symbol  This	3	None	add
73	[BUG]  [BUGGY]  this.resetOccurred  =  false;  Iterator  iterator  =  this.eventsStates.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  this.resetOccurred  =  false;  Iterator  iterator  =  this.eventsStates.iterator();  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred    =    false;    Iterator  iterator  =  this.eventsStates.iterator();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	3	None	add
74	[BUG]  [BUGGY]  this.resetOccurred  =  false;  iterator.resetOccurred  =  false;  [CE]  cannot  find  symbol  iterator  [FE]            AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  this.resetOccurred  =  false;  iterator.resetOccurred  =  false;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred    =    false;    iterator.resetOccurred  =  false;	  	non-compiled	[CE]  cannot  find  symbol  iterator	3	None	add
75	[BUG]  [BUGGY]  Preconditions.checkState(previousT  ==  currentT  +  1);  [CE]  cannot  find  symbol  Preconditions  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  Preconditions.checkState(previousT  ==  currentT  +  1);  [BUGGY]    resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(previousT  ==  currentT  +  1);	      Preconditions.checkState(previousT    ==    currentT);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	12	None	replace
76	[BUG]  [BUGGY]  Preconditions.checkState(previousT  ==  currentT  -  1);  [CE]  cannot  find  symbol  Preconditions  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  Preconditions.checkState(previousT  ==  currentT  -  1);  [BUGGY]    resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(previousT  ==  currentT  -  1);	      Preconditions.checkState(previousT    ==    currentT);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	12	None	replace
77	[BUG]  [BUGGY]  Preconditions.checkState(previousT  ==  currentT  -  currentT);  [CE]  cannot  find  symbol  Preconditions  [FE]            AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  Preconditions.checkState(previousT  ==  currentT  -  currentT);  [BUGGY]    resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(previousT  ==  currentT  -  currentT);	      Preconditions.checkState(previousT    ==    currentT);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	12	None	replace
78	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  ==  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    0;    if(previousT  ==  0)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
79	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  ==  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    0;    if(previousT  ==  0)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
80	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  state.reinitializeBegin(previousT);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  ==  0;  if(previousT  ==  0)  {  if(!isLastStep)  {  state.reinitializeBegin(previousT);  }  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    0;    if(previousT  ==  0)  {  if(!isLastStep)  {  state.reinitializeBegin(previousT);  }	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
81	[BUG]  [BUGGY]  resetOccurred  =  currentT  >>  previousT;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  >>  previousT;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  >>  previousT;	  resetOccurred    =    currentT!=    currentT;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	20	None	replace
82	[BUG]  [BUGGY]      Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]      Iterator  <  EventState>  iterator  =  eventsStates.iterator();  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	        Iterator  <  EventState>  iterator  =  eventsStates.iterator();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	5	None	add
83	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  currentT;  if(currentT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  ==  currentT;  if(currentT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    currentT;    if(currentT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
84	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  ==  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    currentT;    if(currentT  ==  currentT)  {  if(isLastStep)  {  return  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
85	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  currentT;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  ==  currentT;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    currentT;    if(previousT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
86	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  currentT;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(currentT);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  ==  currentT;  if(previousT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(currentT);  }  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    currentT;    if(previousT  ==  currentT)  {  if(!isLastStep)  {  return  state.reinitializeBegin(currentT);  }	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
87	[BUG]  [BUGGY]  resetOccurred  =  true;  ResetOccurred  =  true;  [CE]  cannot  find  symbol  ResetOccurred  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  true;  ResetOccurred  =  true;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    true;    ResetOccurred  =  true;	  	non-compiled	[CE]  cannot  find  symbol  ResetOccurred	1	None	add
88	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  ==  previousT;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  =  currentT  ==  previousT;	  resetOccurred    =    currentT    ==    currentT;    	compilable	  [FE]  AssertionError  	18	1	replace
89	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  previousT;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  ==  previousT;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  ==  previousT;	  resetOccurred    =    currentT    ==    currentT;    	compilable	  [FE]  AssertionError  	18	1	replace
90	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  >  currentT;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  =  currentT  >  currentT;	  resetOccurred    =    currentT    ==    currentT;    	compilable	  [FE]  AssertionError  	18	1	replace
91	[BUG]  [BUGGY]  resetOccurred  =  currentT  >  currentT;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  >  currentT;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  >  currentT;	  resetOccurred    =    currentT    ==    currentT;    	compilable	  [FE]  AssertionError  	18	1	replace
92	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  >=  previousT;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  =  currentT  >=  previousT;	  resetOccurred    =    currentT    ==    currentT;    	compilable	  [FE]  AssertionError  	18	1	replace
93	[BUG]  [BUGGY]  resetOccurred  =  currentT  >=  previousT;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  >=  previousT;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  >=  previousT;	  resetOccurred    =    currentT    ==    currentT;    	compilable	  [FE]  AssertionError  	18	1	replace
94	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  stepHandlers.iterator();  [CE]  incompatible  types  [FE]            AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  Iterator  <  EventState>  eventsStates  =  stepHandlers.iterator();  [BUGGY]    resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  <  EventState>  eventsStates  =  stepHandlers.iterator();	      Iterator    <    EventState>    eventsStates    =    currentT.iterator();    	non-compiled	[CE]  incompatible  types	23	None	replace
95	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  &=  false;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  &=  false;	  resetOccurred    =    true;    	compilable	  [FE]  AssertionError  	2	1	replace
96	[BUG]  [BUGGY]  resetOccurred  &=  false;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  &=  false;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  &=  false;	  resetOccurred    =    true;    	compilable	  [FE]  AssertionError  	2	1	replace
97	[BUG]  [BUGGY]  resetOccurred  :  false;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  :  false;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  :  false;	  resetOccurred    =    true;    	non-compiled	[CE]  not  a  statement	2	None	replace
98	[BUG]  [BUGGY]  state.reinitializeBegin(currentT,  previousT);  [CE]  cannot  find  symbol  state  [FE]              AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  state.reinitializeBegin(currentT,  previousT);  [BUGGY]    resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	state.reinitializeBegin(currentT,  previousT);	      state.reinitializeBegin(previousT);    	non-compiled	[CE]  cannot  find  symbol  state	10	None	replace
99	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  >=  0;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  =  currentT  >=  0;	  resetOccurred    =    currentT    ==    0;    	compilable	  [FE]  AssertionError  	16	1	replace
100	[BUG]  [BUGGY]  resetOccurred  =  currentT  >=  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  >=  0;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  >=  0;	  resetOccurred    =    currentT    ==    0;    	compilable	  [FE]  AssertionError  	16	1	replace
101	[BUG]  [BUGGY]  this.resetOccurred  =  false;  Iterator  iterator  =  this.events.iterator();  [CE]  cannot  find  symbol  events  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  this.resetOccurred  =  false;  Iterator  iterator  =  this.events.iterator();  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred    =    false;    Iterator  iterator  =  this.events.iterator();	  	non-compiled	[CE]  cannot  find  symbol  events	3	None	add
102	[BUG]  [BUGGY]  Iterator  iterator  =  stepHandlers.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  Iterator  iterator  =  stepHandlers.iterator();  [BUGGY]    resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  iterator  =  stepHandlers.iterator();	      Iterator    iterator    =    eventsStates.iterator();    	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	7	None	replace
103	[BUG]  [BUGGY]  Iterator  iterator  =  this.eventsStates.values().iterator();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  Iterator  iterator  =  this.eventsStates.values().iterator();  [BUGGY]    resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  iterator  =  this.eventsStates.values().iterator();	      Iterator    iterator    =    this.eventsStates.iterator();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
104	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  this.resetOccurred  =  currentT!=  0;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred  =  currentT!=  0;	  this.resetOccurred    =    false;    	compilable	  [FE]  AssertionError  	4	1	replace
105	[BUG]  [BUGGY]  this.resetOccurred  =  currentT!=  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  this.resetOccurred  =  currentT!=  0;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred  =  currentT!=  0;	  this.resetOccurred    =    false;    	compilable	  [FE]  AssertionError  	4	1	replace
106	[BUG]  [BUGGY]  this.eventsStates.add(interpolator,  currentT);  [CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  this.eventsStates.add(interpolator,  currentT);  [BUGGY]    resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.eventsStates.add(interpolator,  currentT);	      this.eventsStates.add(interpolator);    	non-compiled	[CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;	24	None	replace
107	[BUG]  [BUGGY]  this.eventsStates.add(expT,  currentT);  [CE]  cannot  find  symbol  expT  [FE]                AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  this.eventsStates.add(expT,  currentT);  [BUGGY]    resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.eventsStates.add(expT,  currentT);	      this.eventsStates.add(interpolator);    	non-compiled	[CE]  cannot  find  symbol  expT	24	None	replace
108	[BUG]  [BUGGY]  resetOccurred  =  currentT!=  currentT;  if(currentT!=  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT!=  currentT;  if(currentT!=  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT!=    currentT;    if(currentT!=  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
109	[BUG]  [BUGGY]  resetOccurred  =  currentT!=  currentT;  if(currentT!=  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT!=  currentT;  if(currentT!=  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT!=    currentT;    if(currentT!=  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
110	[BUG]  [BUGGY]  Preconditions.checkState(previousT  ==  currentT  +  tEnd);  [CE]  cannot  find  symbol  Preconditions  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  Preconditions.checkState(previousT  ==  currentT  +  tEnd);  [BUGGY]    resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(previousT  ==  currentT  +  tEnd);	      Preconditions.checkState(previousT    ==    currentT);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	12	None	replace
111	[BUG]  [BUGGY]  Preconditions.checkState(previousT  >=  currentT  -  currentT);  [CE]  cannot  find  symbol  Preconditions  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  Preconditions.checkState(previousT  >=  currentT  -  currentT);  [BUGGY]    resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Preconditions.checkState(previousT  >=  currentT  -  currentT);	      Preconditions.checkState(previousT    >=    currentT);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	13	None	replace
112	[BUG]  [BUGGY]  resetOccurred  =  true;  if(previousT  >  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  true;  if(previousT  >  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    true;    if(previousT  >  currentT)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
113	[BUG]  [BUGGY]  resetOccurred  =  true;  if(previousT  >  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  true;  if(previousT  >  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    true;    if(previousT  >  currentT)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
114	[BUG]  [BUGGY]  resetOccurred  =  true;  if(previousT  >  currentT)  {  if(isLastStep)  {  resetOccurred  =  true;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  true;  if(previousT  >  currentT)  {  if(isLastStep)  {  resetOccurred  =  true;  }  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    true;    if(previousT  >  currentT)  {  if(isLastStep)  {  resetOccurred  =  true;  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
115	[BUG]  [BUGGY]  resetOccurred  =  true;  if(previousT  >  currentT)  {  if(!isLastStep)  {  resetOccurred  =  true;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  true;  if(previousT  >  currentT)  {  if(!isLastStep)  {  resetOccurred  =  true;  }  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    true;    if(previousT  >  currentT)  {  if(!isLastStep)  {  resetOccurred  =  true;  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
116	[BUG]  [BUGGY]  Iterator  iterator  =  currentT.events.iterator();  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  Iterator  iterator  =  currentT.events.iterator();  [BUGGY]    resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  iterator  =  currentT.events.iterator();	      Iterator    iterator    =    this.events.iterator();    	non-compiled	[CE]  double  cannot  be  dereferenced	21	None	replace
117	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  &=  currentT  >  tEnd;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  &=  currentT  >  tEnd;	  resetOccurred    =    true;    	compilable	  [FE]  AssertionError  	2	1	replace
118	[BUG]  [BUGGY]  resetOccurred  &=  currentT  >  tEnd;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  &=  currentT  >  tEnd;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  &=  currentT  >  tEnd;	  resetOccurred    =    true;    	compilable	  [FE]  AssertionError  	2	1	replace
119	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  &=  currentT  >  0;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  &=  currentT  >  0;	  resetOccurred    =    true;    	compilable	  [FE]  AssertionError  	2	1	replace
120	[BUG]  [BUGGY]  resetOccurred  &=  currentT  >  0;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  &=  currentT  >  0;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  &=  currentT  >  0;	  resetOccurred    =    true;    	compilable	  [FE]  AssertionError  	2	1	replace
121	[BUG]  [BUGGY]  state.reinitializeBegin(es0,  previousT);  [CE]  cannot  find  symbol  es0  [FE]              AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  state.reinitializeBegin(es0,  previousT);  [BUGGY]    resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	state.reinitializeBegin(es0,  previousT);	      state.reinitializeBegin(previousT);    	non-compiled	[CE]  cannot  find  symbol  es0	10	None	replace
122	[BUG]  [BUGGY]  resetOccurred  =  currentT  >>  currentT;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  >>  currentT;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  >>  currentT;	  resetOccurred    =    currentT!=    currentT;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	20	None	replace
123	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  0;  double  resetOccurred  =  currentT  ==  0;  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  ==  0;  double  resetOccurred  =  currentT  ==  0;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    0;    double  resetOccurred  =  currentT  ==  0;	  	non-compiled	[CE]  incompatible  types	15	None	add
124	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  0;  if(currentT  ==  0)  {  if(!isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  ==  0;  if(currentT  ==  0)  {  if(!isLastStep)  {  return  currentT;  }  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    0;    if(currentT  ==  0)  {  if(!isLastStep)  {  return  currentT;  }	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
125	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  0;  currentT  =  currentT  ==  0;  [CE]  cannot  assign  a  value  to  final  variable  currentT  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  ==  0;  currentT  =  currentT  ==  0;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    0;    currentT  =  currentT  ==  0;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  currentT	15	None	add
126	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  0;  if(currentT  ==  0)  {  if(isLastStep)  {  return  currentT;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  ==  0;  if(currentT  ==  0)  {  if(isLastStep)  {  return  currentT;  }  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    0;    if(currentT  ==  0)  {  if(isLastStep)  {  return  currentT;  }	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
127	[BUG]  [BUGGY]  Iterator  iterator  =  this.eventStates.iterator();  [CE]  cannot  find  symbol  eventStates  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  Iterator  iterator  =  this.eventStates.iterator();  [BUGGY]    resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	Iterator  iterator  =  this.eventStates.iterator();	      Iterator    iterator    =    eventsStates.iterator();    	non-compiled	[CE]  cannot  find  symbol  eventStates	7	None	replace
128	[BUG]  [BUGGY]  state.reinitializeBegin(es0,  currentT);  [CE]  cannot  find  symbol  es0  [FE]            AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  state.reinitializeBegin(es0,  currentT);  [BUGGY]    resetOccurred  =  false;  if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	state.reinitializeBegin(es0,  currentT);	      state.reinitializeBegin(currentT);    	non-compiled	[CE]  cannot  find  symbol  es0	9	None	replace
129	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  this.resetOccurred  =  false;  if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred    =    false;    if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }	  	compilable	  [FE]  AssertionError  	3	1	add
130	[BUG]  [BUGGY]  this.resetOccurred  =  false;  if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  this.resetOccurred  =  false;  if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred    =    false;    if(currentT  >  currentT)  {  this.resetOccurred  =  false;  }	  	compilable	  [FE]  AssertionError  	3	1	add
131	[BUG]  [BUGGY]  resetOccurred  =  currentT!=  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT!=  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT!=    currentT;    if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
132	[BUG]  [BUGGY]  resetOccurred  =  currentT!=  currentT;  if(previousT  >=  t)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT!=  currentT;  if(previousT  >=  t)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT!=    currentT;    if(previousT  >=  t)  {  if(isLastStep)  {  state.reinitializeBegin(interpolator);  }	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
133	[BUG]  [BUGGY]  resetOccurred  =  currentT!=  currentT;  if(previousT  >=  t)  {  if(isLastStep)  {  resetOccurred  =  currentT!=  currentT;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT!=  currentT;  if(previousT  >=  t)  {  if(isLastStep)  {  resetOccurred  =  currentT!=  currentT;  }  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT!=    currentT;    if(previousT  >=  t)  {  if(isLastStep)  {  resetOccurred  =  currentT!=  currentT;  }	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
134	[BUG]  [BUGGY]  resetOccurred  =  currentT!=  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT!=  currentT;  if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT!=    currentT;    if(previousT  >=  t)  {  if(!isLastStep)  {  state.reinitializeBegin(currentT);  }	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
135	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  this.resetOccurred  =  currentT  ==  0?  true  :  false;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred  =  currentT  ==  0?  true  :  false;	  this.resetOccurred    =    false;    	compilable	  [FE]  AssertionError  	4	1	replace
136	[BUG]  [BUGGY]  this.resetOccurred  =  currentT  ==  0?  true  :  false;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  this.resetOccurred  =  currentT  ==  0?  true  :  false;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred  =  currentT  ==  0?  true  :  false;	  this.resetOccurred    =    false;    	compilable	  [FE]  AssertionError  	4	1	replace
137	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  this.resetOccurred  =  currentT  >  0;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	this.resetOccurred  =  currentT  >  0;	  this.resetOccurred    =    false;    	compilable	  [FE]  AssertionError  	4	1	replace
138	[BUG]  [BUGGY]  this.resetOccurred  =  currentT  >  0;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  this.resetOccurred  =  currentT  >  0;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	this.resetOccurred  =  currentT  >  0;	  this.resetOccurred    =    false;    	compilable	  [FE]  AssertionError  	4	1	replace
139	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  ==  1;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	add	resetOccurred  =  currentT  ==  1;	  resetOccurred    =    currentT    ==    0;    	compilable	  [FE]  AssertionError  	16	1	replace
140	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  ==  1;  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred  =  currentT  ==  1;	  resetOccurred    =    currentT    ==    0;    	compilable	  [FE]  AssertionError  	16	1	replace
141	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  ==  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    currentT;    if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalStateException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
142	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  ==  currentT;  if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalArgumentException( " ");  }  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    currentT;    if(currentT  ==  currentT)  {  if(isLastStep)  {  throw  new  MathIllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
143	[BUG]  [BUGGY]  resetOccurred  =  currentT  ==  currentT;  if(currentT  ==  currentT)  {  if(!isLastStep)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();    [BUGGY]  resetOccurred  =  currentT  ==  currentT;  if(currentT  ==  currentT)  {  if(!isLastStep)  {  return  false;  }  [BUGGY]      if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }    [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	280	280	1	replace	resetOccurred    =    currentT    ==    currentT;    if(currentT  ==  currentT)  {  if(!isLastStep)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
