bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  null  :  ExpandableStatefulODE.EMPTY;  [CE]  cannot  find  symbol  EMPTY  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  equations!=  null?  null  :  ExpandableStatefulODE.EMPTY;  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  null  :  ExpandableStatefulODE.EMPTY;	  this.expandable    =    equations!=    null?    equations    :    ExpandableStatefulODE.EMPTY;    	non-compiled	[CE]  cannot  find  symbol  EMPTY	23	None	replace
2	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  null  :  ExpandableStatefulODE.EMPTY;  [CE]  cannot  find  symbol  EMPTY  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  equations  ==  null?  null  :  ExpandableStatefulODE.EMPTY;  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  null?  null  :  ExpandableStatefulODE.EMPTY;	  this.expandable    =    equations!=    null?    equations    :    ExpandableStatefulODE.EMPTY;    	non-compiled	[CE]  cannot  find  symbol  EMPTY	23	None	replace
3	[BUG]  [BUGGY]  for(final  IncrementError  exception  :  equations.values())  {  break;  }  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  for(final  IncrementError  exception  :  equations.values())  {  break;  }  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(final  IncrementError  exception  :  equations.values())  {  break;  }	      if(equations!=    null)    {    for(final    IncrementError    exception    :    equations.values())    {    break;    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
4	[BUG]  [BUGGY]  For(final  IncrementError  exception  :  equations.values())  {  break;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  For(final  IncrementError  exception  :  equations.values())  {  break;  }  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	For(final  IncrementError  exception  :  equations.values())  {  break;  }	      if(equations!=    null)    {    for(final    IncrementError    exception    :    equations.values())    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
5	[BUG]  [BUGGY]  final  IncrementError  exception  :  equations.values())  {  break;  }  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  final  IncrementError  exception  :  equations.values())  {  break;  }  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	final  IncrementError  exception  :  equations.values())  {  break;  }	      if(equations!=    null)    {    for(final    IncrementError    exception    :    equations.values())    {    break;    }    	non-compiled	[CE]  ';'  expected	4	None	replace
6	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  null  :  new  ExpandableStatefulODE(equations.size());  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  equations!=  null?  null  :  new  ExpandableStatefulODE(equations.size());  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  null  :  new  ExpandableStatefulODE(equations.size());	  this.expandable    =    equations!=    null?    equations    :    new    ExpandableStatefulODE(equations.size());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
7	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  equations  :  new  ExpandableStatefulODE(equations.size());  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  equations  ==  null?  equations  :  new  ExpandableStatefulODE(equations.size());  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  null?  equations  :  new  ExpandableStatefulODE(equations.size());	  this.expandable    =    equations!=    null?    equations    :    new    ExpandableStatefulODE(equations.size());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
8	[BUG]  [BUGGY]  this.expandable  =  equations.equations.expandable;  [CE]  cannot  find  symbol  equations  [FE]        AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  equations.equations.expandable;  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equations.expandable;	  this.expandable    =    equations.expandable;    	non-compiled	[CE]  cannot  find  symbol  equations	6	None	replace
9	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equations.expandable);  [CE]  cannot  find  symbol  expandable  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  equations.equals(equations.expandable);  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(equations.expandable);	  this.expandable    =    equations.expandable;    	non-compiled	[CE]  cannot  find  symbol  expandable	6	None	replace
10	[BUG]  [BUGGY]  this.expandable  =  equations.equations;  [CE]  cannot  find  symbol  equations  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  equations.equations;  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equations;	  this.expandable    =    equations.elements;    	non-compiled	[CE]  cannot  find  symbol  equations	8	None	replace
11	[BUG]  [BUGGY]  this.expandable  =  equations.equivalence;  [CE]  cannot  find  symbol  equivalence  [FE]              AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  equations.equivalence;  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equivalence;	  this.expandable    =    equations.elements;    	non-compiled	[CE]  cannot  find  symbol  equivalence	8	None	replace
12	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equations.size);  [CE]  cannot  find  symbol  size  [FE]                AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  equations.equals(equations.size);  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(equations.size);	  this.expandable    =    equations.elements;    	non-compiled	[CE]  cannot  find  symbol  size	8	None	replace
13	[BUG]  [BUGGY]  this.expandable  =  equations.equals(elements);  [CE]  cannot  find  symbol  elements  [FE]                  AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  equations.equals(elements);  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(elements);	  this.expandable    =    equations.elements;    	non-compiled	[CE]  cannot  find  symbol  elements	8	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if(  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if(  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if(	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equinoxes.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
15	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if(  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if(  }  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if(  }	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equinoxes.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if(  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if(  }  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if(  }	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equinoxes.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
17	[BUG]  [BUGGY]  if(equivalents!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(expan  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  if(equivalents!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(expan  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equivalents!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(expan	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalents.get(i);    if(expan    	non-compiled	[CE]  ')'  expected	13	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(expan!=  this.expandable  [CE]  ')'  expected  [FE]                  AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(expan!=  this.expandable  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(expan!=  this.expandable	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalents.get(i);    if(expan    	non-compiled	[CE]  ')'  expected	13	None	replace
19	[BUG]  [BUGGY]  if(equivalents!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(expand  [CE]  ')'  expected  [FE]                    AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  if(equivalents!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(expand  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equivalents!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(expand	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalents.get(i);    if(expan    	non-compiled	[CE]  ')'  expected	13	None	replace
20	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equivalences.size());  [CE]  cannot  find  symbol  equivalences  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  equations.equals(equivalences.size());  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(equivalences.size());	  this.expandable    =    equations.equals(equations.size());    	non-compiled	[CE]  cannot  find  symbol  equivalences	7	None	replace
21	[BUG]  [BUGGY]  this.expandable  =  Equations.equals(equations.size());  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  Equations.equals(equations.size());  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  Equations.equals(equations.size());	  this.expandable    =    equations.equals(equations.size());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
22	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equivalents.size());  [CE]  cannot  find  symbol  equivalents  [FE]              AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  equations.equals(equivalents.size());  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(equivalents.size());	  this.expandable    =    equations.equals(equations.size());    	non-compiled	[CE]  cannot  find  symbol  equivalents	7	None	replace
23	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(ex  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(ex  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(ex	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expand    	non-compiled	[CE]  ')'  expected	10	None	replace
24	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable!=  this.expandable  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable!=  this.expandable  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable!=  this.expandable	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expand    	non-compiled	[CE]  ')'  expected	10	None	replace
25	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  [CE]  '('  expected  [FE]              AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expand    	non-compiled	[CE]  '('  expected	10	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if(  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if(  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if(	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)this.events.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
27	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if(  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if(  }  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if(  }	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)this.events.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if(  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if(  }  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if(  }	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)this.events.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
29	[BUG]  [BUGGY]  this.expandable  =  EquationState.elements();  [CE]  cannot  find  symbol  EquationState  [FE]                AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  EquationState.elements();  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  EquationState.elements();	      this.expandable    =    equations.elements();    	non-compiled	[CE]  cannot  find  symbol  EquationState	5	None	replace
30	[BUG]  [BUGGY]  this.expandable  =  equations.getElements();  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  equations.getElements();  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.getElements();	      this.expandable    =    equations.elements();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
31	[BUG]  [BUGGY]  if(equiries!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expan  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  if(equiries!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expan  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equiries!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expan	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equiries.get(i);    if(expan    	non-compiled	[CE]  ')'  expected	12	None	replace
32	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expan!=  this.expandable  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expan!=  this.expandable  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expan!=  this.expandable	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equiries.get(i);    if(expan    	non-compiled	[CE]  ')'  expected	12	None	replace
33	[BUG]  [BUGGY]  if(equiries!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expan  }  [CE]  ')'  expected  [FE]                  AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  if(equiries!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expan  }  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equiries!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expan  }	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equiries.get(i);    if(expan    	non-compiled	[CE]  ')'  expected	12	None	replace
34	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  null  :  equations.expandableStatements;  [CE]  cannot  find  symbol  expandableStatements  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  equations  ==  null?  null  :  equations.expandableStatements;  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  null?  null  :  equations.expandableStatements;	  this.expandable    =    equations    ==    null?    null    :    equations.expandable;    	non-compiled	[CE]  cannot  find  symbol  expandableStatements	15	None	replace
35	[BUG]  [BUGGY]  for(final  IncrementError  exception  :  equations.values())  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  for(final  IncrementError  exception  :  equations.values())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(final  IncrementError  exception  :  equations.values())  {  throw  new  IllegalStateException( " ");  }	      if(equations!=    null)    {    for(final    IncrementError    exception    :    equations.values())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
36	[BUG]  [BUGGY]  for(final  IncrementError  exception  :  equations.elements())  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  for(final  IncrementError  exception  :  equations.elements())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(final  IncrementError  exception  :  equations.elements())  {  throw  new  IllegalStateException( " ");  }	      if(equations!=    null)    {    for(final    IncrementError    exception    :    equations.values())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
37	[BUG]  [BUGGY]  for(final  IncrementError  exception  :  equations.values())  {  throw  new  IllegalStateException( " ".);  }  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  for(final  IncrementError  exception  :  equations.values())  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(final  IncrementError  exception  :  equations.values())  {  throw  new  IllegalStateException( " ".);  }	      if(equations!=    null)    {    for(final    IncrementError    exception    :    equations.values())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
38	[BUG]  [BUGGY]  this.expandable  =  equations.values();  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  equations.values();  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.values();	      if(equations!=    null)    {    for(final    IncrementError    exception    :    equations.values())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
39	[BUG]  [BUGGY]  for(final  IncrementError  exception  :  equations.values())  {  throw  new  UnsupportedOccurredException( " ");  }  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  for(final  IncrementError  exception  :  equations.values())  {  throw  new  UnsupportedOccurredException( " ");  }  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(final  IncrementError  exception  :  equations.values())  {  throw  new  UnsupportedOccurredException( " ");  }	      if(equations!=    null)    {    for(final    IncrementError    exception    :    equations.values())    {    throw    new    UnsupportedOccurredException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
40	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan!=  this.expandable  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan!=  this.expandable  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan!=  this.expandable	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    	non-compiled	[CE]  ')'  expected	9	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  ==  this.expandable  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  ==  this.expandable  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  ==  this.expandable	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    	non-compiled	[CE]  ')'  expected	9	None	replace
42	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalents.get(i);  if(  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalents.get(i);  if(  }  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalents.get(i);  if(  }	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equivalents.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
43	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalents.get(i);  if(  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalents.get(i);  if(  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalents.get(i);  if(	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equivalents.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
44	[BUG]  [BUGGY]  if(equivalents!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalents.get(i);  if(  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  if(equivalents!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalents.get(i);  if(  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equivalents!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalents.get(i);  if(	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equivalents.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
45	[BUG]  [BUGGY]  this.expandable  =  equations!=  ExpandableStatefulODE;  [CE]  cannot  find  symbol  ExpandableStatefulODE  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  equations!=  ExpandableStatefulODE;  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  ExpandableStatefulODE;	  this.expandable    =    equations    ==    ExpandableStatefulODE;    	non-compiled	[CE]  cannot  find  symbol  ExpandableStatefulODE	24	None	replace
46	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null;  [CE]  incompatible  types  [FE]              AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  equations  ==  null;  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  null;	  this.expandable    =    equations    ==    ExpandableStatefulODE;    	non-compiled	[CE]  incompatible  types	24	None	replace
47	[BUG]  [BUGGY]  this.expandable  =  equations  ==  expandable;  [CE]  incompatible  types  [FE]                AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  equations  ==  expandable;  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  expandable;	  this.expandable    =    equations    ==    ExpandableStatefulODE;    	non-compiled	[CE]  incompatible  types	24	None	replace
48	[BUG]  [BUGGY]  for(final  IncrementError  exception  :  equations.values())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  for(final  IncrementError  exception  :  equations.values())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(final  IncrementError  exception  :  equations.values())  {  throw  new  IllegalArgumentException( " ");  }	      if(equations!=    null)    {    for(final    IncrementError    exception    :    equations.values())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
49	[BUG]  [BUGGY]  for(final  IncrementError  exception  :  equations.elements())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  for(final  IncrementError  exception  :  equations.elements())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(final  IncrementError  exception  :  equations.elements())  {  throw  new  IllegalArgumentException( " ");  }	      if(equations!=    null)    {    for(final    IncrementError    exception    :    equations.values())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
50	[BUG]  [BUGGY]  for(final  IncrementError  exception  :  equations.values())  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  for(final  IncrementError  exception  :  equations.values())  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(final  IncrementError  exception  :  equations.values())  {  throw  new  IllegalArgumentException( " ".);  }	      if(equations!=    null)    {    for(final    IncrementError    exception    :    equations.values())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
51	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
52	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(  }  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(  }	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
53	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if(  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if(  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if(	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
54	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  null  :  equations.equals(equations);  [CE]  incompatible  types  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  equations  ==  null?  null  :  equations.equals(equations);  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  null?  null  :  equations.equals(equations);	  this.expandable    =    equations    ==    null?    null    :    equations.values();    	non-compiled	[CE]  incompatible  types	16	None	replace
55	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  null  :  equations.equals(equations.values());  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  equations  ==  null?  null  :  equations.equals(equations.values());  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  null?  null  :  equations.equals(equations.values());	  this.expandable    =    equations    ==    null?    null    :    equations.values();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
56	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [CE]  '('  expected  [FE]                AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if  }	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	21	None	replace
57	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if  [CE]  '('  expected  [FE]                  AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	21	None	replace
58	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equixes.get(i);  if  }  [CE]  '('  expected  [FE]                    AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equixes.get(i);  if  }  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equixes.get(i);  if  }	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	21	None	replace
59	[BUG]  [BUGGY]  if(equations  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [CE]  '('  expected  [FE]                      AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  if(equations  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equations  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if  }	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	21	None	replace
60	[BUG]  [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalences.get(i);  if(  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalences.get(i);  if(  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalences.get(i);  if(	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equivalences.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
61	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalences.get(i);  if(  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalences.get(i);  if(  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalences.get(i);  if(	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equivalences.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
62	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalences.get(i);  if(  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalences.get(i);  if(  }  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalences.get(i);  if(  }	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equivalences.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
63	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  equations  :  new  ExpandableStatefulODE(equations.size()  -  1);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  equations!=  null?  equations  :  new  ExpandableStatefulODE(equations.size()  -  1);  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  equations  :  new  ExpandableStatefulODE(equations.size()  -  1);	  this.expandable    =    equations!=    null?    equations    :    new    ExpandableStatefulODE(equations.size());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
64	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  Equations.EMPTY  :  new  ExpandableStatefulODE(equations.size());  [CE]  cannot  find  symbol  Equations  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  equations!=  null?  Equations.EMPTY  :  new  ExpandableStatefulODE(equations.size());  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  Equations.EMPTY  :  new  ExpandableStatefulODE(equations.size());	  this.expandable    =    equations!=    null?    equations    :    new    ExpandableStatefulODE(equations.size());    	non-compiled	[CE]  cannot  find  symbol  Equations	22	None	replace
65	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  equations  :  new  ExpandableStatefulODE(equivalences.size());  [CE]  cannot  find  symbol  equivalences  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  equations!=  null?  equations  :  new  ExpandableStatefulODE(equivalences.size());  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  equations  :  new  ExpandableStatefulODE(equivalences.size());	  this.expandable    =    equations!=    null?    equations    :    new    ExpandableStatefulODE(equations.size());    	non-compiled	[CE]  cannot  find  symbol  equivalences	22	None	replace
66	[BUG]  [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if  [CE]  '('  expected  [FE]                AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	21	None	replace
67	[BUG]  [BUGGY]  this.expandable  =  equations  ==  ExpandableStatefulOLE;  [CE]  cannot  find  symbol  ExpandableStatefulOLE  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  equations  ==  ExpandableStatefulOLE;  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  ExpandableStatefulOLE;	  this.expandable    =    equations    ==    ExpandableStatefulODE;    	non-compiled	[CE]  cannot  find  symbol  ExpandableStatefulOLE	24	None	replace
68	[BUG]  [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  [CE]  '('  expected  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expand    	non-compiled	[CE]  '('  expected	10	None	replace
69	[BUG]  [BUGGY]  if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  [CE]  '('  expected  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expand    	non-compiled	[CE]  '('  expected	10	None	replace
70	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  ExpandableStatefulODE.EMPTY  :  equations;  [CE]  cannot  find  symbol  EMPTY  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  equations!=  null?  ExpandableStatefulODE.EMPTY  :  equations;  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  ExpandableStatefulODE.EMPTY  :  equations;	  this.expandable    =    equations!=    null?    equations    :    ExpandableStatefulODE.EMPTY;    	non-compiled	[CE]  cannot  find  symbol  EMPTY	23	None	replace
71	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  ExpandableStatefulODE.EMPTY  :  equations;  [CE]  cannot  find  symbol  EMPTY  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  equations  ==  null?  ExpandableStatefulODE.EMPTY  :  equations;  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  null?  ExpandableStatefulODE.EMPTY  :  equations;	  this.expandable    =    equations!=    null?    equations    :    ExpandableStatefulODE.EMPTY;    	non-compiled	[CE]  cannot  find  symbol  EMPTY	23	None	replace
72	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equations);  [CE]  incompatible  types  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  equations.equals(equations);  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(equations);	  this.expandable    =    equations.elements;    	non-compiled	[CE]  incompatible  types	8	None	replace
73	[BUG]  [BUGGY]  if(equivalents!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if  [CE]  '('  expected  [FE]                AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  if(equivalents!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equivalents!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalents.get(i);    if(expan    	non-compiled	[CE]  '('  expected	13	None	replace
74	[BUG]  [BUGGY]  if(equivalents!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(ex  [CE]  ')'  expected  [FE]                  AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  if(equivalents!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(ex  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equivalents!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalents.get(i);  if(ex	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalents.get(i);    if(expan    	non-compiled	[CE]  ')'  expected	13	None	replace
75	[BUG]  [BUGGY]  final  IncrementError  exception  :  equations.values())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  final  IncrementError  exception  :  equations.values())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	final  IncrementError  exception  :  equations.values())  {  throw  new  IllegalArgumentException( " ");  }	      if(equations!=    null)    {    for(final    IncrementError    exception    :    equations.values())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	1	None	replace
76	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  null  :  equations.elements();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  equations  ==  null?  null  :  equations.elements();  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  null?  null  :  equations.elements();	  this.expandable    =    equations    ==    null?    null    :    equations.values();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
77	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equations.getEquations());  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  equations.equals(equations.getEquations());  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(equations.getEquations());	  this.expandable    =    equations.equals(equations.size());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
78	[BUG]  [BUGGY]  if(equiries!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expanpan  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  if(equiries!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expanpan  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equiries!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if(expanpan	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equiries.get(i);    if(expan    	non-compiled	[CE]  ')'  expected	12	None	replace
79	[BUG]  [BUGGY]  if(equiries!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if  [CE]  '('  expected  [FE]                AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  if(equiries!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equiries!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equiries.get(i);  if	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equiries.get(i);    if(expan    	non-compiled	[CE]  '('  expected	12	None	replace
80	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  this.events.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if  [CE]  '('  expected  [FE]              AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  this.events.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  this.events.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)this.events.get(i);    if(    	non-compiled	[CE]  '('  expected	20	None	replace
81	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if  [CE]  '('  expected  [FE]                AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)this.events.get(i);  if	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)this.events.get(i);    if(    	non-compiled	[CE]  '('  expected	20	None	replace
82	[BUG]  [BUGGY]  if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if  [CE]  '('  expected  [FE]        AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equinoxes.get(i);  if	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equinoxes.get(i);    if(    	non-compiled	[CE]  '('  expected	17	None	replace
83	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  null  :  equations.equals(equations.expandable);  [CE]  cannot  find  symbol  expandable  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  equations  ==  null?  null  :  equations.equals(equations.expandable);  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  null?  null  :  equations.equals(equations.expandable);	  this.expandable    =    equations    ==    null?    null    :    equations.expandable;    	non-compiled	[CE]  cannot  find  symbol  expandable	15	None	replace
84	[BUG]  [BUGGY]  final  IncrementError  exception  :  equations.values())  {  throw  new  UnsupportedOccurredException( " ");  }  [CE]  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  final  IncrementError  exception  :  equations.values())  {  throw  new  UnsupportedOccurredException( " ");  }  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	final  IncrementError  exception  :  equations.values())  {  throw  new  UnsupportedOccurredException( " ");  }	      if(equations!=    null)    {    for(final    IncrementError    exception    :    equations.values())    {    throw    new    UnsupportedOccurredException(   "   ");    }    	non-compiled	[CE]  	3	None	replace
85	[BUG]  [BUGGY]  if(equivalents!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalents.get(i);  if  [CE]  '('  expected  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  if(equivalents!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalents.get(i);  if  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equivalents!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalents.get(i);  if	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equivalents.get(i);    if(    	non-compiled	[CE]  '('  expected	19	None	replace
86	[BUG]  [BUGGY]  this.expandable  =  Equations.elements(equations);  [CE]  cannot  find  symbol  Equations  [FE]                AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  Equations.elements(equations);  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  Equations.elements(equations);	      this.expandable    =    equations.elements();    	non-compiled	[CE]  cannot  find  symbol  Equations	5	None	replace
87	[BUG]  [BUGGY]  final  IncrementError  exception  :  equations.values())  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  final  IncrementError  exception  :  equations.values())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	final  IncrementError  exception  :  equations.values())  {  throw  new  IllegalStateException( " ");  }	      if(equations!=    null)    {    for(final    IncrementError    exception    :    equations.values())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	2	None	replace
88	[BUG]  [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalences.get(i);  if  [CE]  '('  expected  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalences.get(i);  if  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  equations  =(ExpandableStatefulODE)equivalences.get(i);  if	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    equations    =(ExpandableStatefulODE)equivalences.get(i);    if(    	non-compiled	[CE]  '('  expected	18	None	replace
89	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equations.get(0));  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  equations.equals(equations.get(0));  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(equations.get(0));	  this.expandable    =    equations.equals(equations.size());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
90	[BUG]  [BUGGY]  this.expandable  =  EquationState.EQUIPMENT.elements();  [CE]  package  EquationState  does  not  exist  [FE]                AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  EquationState.EQUIPMENT.elements();  [BUGGY]    this.expandable  =  equations;  }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  EquationState.EQUIPMENT.elements();	      this.expandable    =    equations.elements();    	non-compiled	[CE]  package  EquationState  does  not  exist	5	None	replace
91	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  equations  :  new  ExpandableStatefulODE(equations.size()  -  2);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  equations!=  null?  equations  :  new  ExpandableStatefulODE(equations.size()  -  2);  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  equations  :  new  ExpandableStatefulODE(equations.size()  -  2);	  this.expandable    =    equations!=    null?    equations    :    new    ExpandableStatefulODE(equations.size());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
92	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  equations  :  new  ExpandableStatefulODE(equations,  columns.size());  [CE]  cannot  find  symbol  columns  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  equations!=  null?  equations  :  new  ExpandableStatefulODE(equations,  columns.size());  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  equations  :  new  ExpandableStatefulODE(equations,  columns.size());	  this.expandable    =    equations!=    null?    equations    :    new    ExpandableStatefulODE(equations.size());    	non-compiled	[CE]  cannot  find  symbol  columns	22	None	replace
93	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  null  :  equations.equals(equations.elements);  [CE]  cannot  find  symbol  elements  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  equations  ==  null?  null  :  equations.equals(equations.elements);  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  null?  null  :  equations.equals(equations.elements);	  this.expandable    =    equations    ==    null?    null    :    equations.expandable;    	non-compiled	[CE]  cannot  find  symbol  elements	15	None	replace
94	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  equations.expandable  :  equations.expandable;  [CE]  cannot  find  symbol  expandable  [FE]        AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  equations!=  null?  equations.expandable  :  equations.expandable;  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  equations.expandable  :  equations.expandable;	  this.expandable    =    equations.expandable;    	non-compiled	[CE]  cannot  find  symbol  expandable	6	None	replace
95	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  equations.expandable  :  equations.equals(equations.elements);  [CE]  cannot  find  symbol  expandable  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  equations!=  null?  equations.expandable  :  equations.equals(equations.elements);  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations!=  null?  equations.expandable  :  equations.equals(equations.elements);	  this.expandable    =    equations.expandable;    	non-compiled	[CE]  cannot  find  symbol  expandable	6	None	replace
96	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  equations  :  ExpandableStatefulODE.EMPTY;  [CE]  cannot  find  symbol  EMPTY  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  equations  ==  null?  equations  :  ExpandableStatefulODE.EMPTY;  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations  ==  null?  equations  :  ExpandableStatefulODE.EMPTY;	  this.expandable    =    equations!=    null?    equations    :    ExpandableStatefulODE.EMPTY;    	non-compiled	[CE]  cannot  find  symbol  EMPTY	23	None	replace
97	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equations.elements);  [CE]  cannot  find  symbol  elements  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {    [BUGGY]  this.expandable  =  equations.equals(equations.elements);  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	192	192	1	replace	this.expandable  =  equations.equals(equations.elements);	  this.expandable    =    equations.elements;    	non-compiled	[CE]  cannot  find  symbol  elements	8	None	replace
