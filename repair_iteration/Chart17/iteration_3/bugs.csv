bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	original_buggy	action	patch	execution_result	diagnosis	previous_bug_id	original_failing_test_number
18626	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      public  void  removeAgedItems(boolean  notify)  {    if  (getItemCount()  >  1)  {  long  latest  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();      [BUGGY]  long  maximal  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();  [BUGGY]      boolean  removed  =  false;  while  ((latest  -  getTimePeriod(0).getSerialIndex())  >  this.maximumItemAge)  {  this.data.remove(0);  removed  =  true;  }  if  (removed  &&  notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  removeAgedItems  [RETURN_TYPE]  void  boolean  notify  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  notify  removed  long  latest  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	740	740	1	add	long  maximal  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();	  	compilable	  [FE]  IllegalArgumentException	3105	1
18627	[BUG]  [BUGGY]  long  maximal  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();  [FE]  IllegalArgumentException  [CONTEXT]      public  void  removeAgedItems(boolean  notify)  {    if  (getItemCount()  >  1)  {  long  latest  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();      [BUGGY]  long  maximal  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();  [BUGGY]      boolean  removed  =  false;  while  ((latest  -  getTimePeriod(0).getSerialIndex())  >  this.maximumItemAge)  {  this.data.remove(0);  removed  =  true;  }  if  (removed  &&  notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  removeAgedItems  [RETURN_TYPE]  void  boolean  notify  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  notify  removed  long  latest  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	740	740	1	replace	long  maximal  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();	  	compilable	  [FE]  IllegalArgumentException	3105	1
4616	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  if(this.domain!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  }  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	if(this.domain!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  }	  	compilable	  [FE]  IllegalArgumentException	770	1
4617	[BUG]  [BUGGY]  if(this.domain!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  }  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  if(this.domain!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  }  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	if(this.domain!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  }	  	compilable	  [FE]  IllegalArgumentException	770	1
4117	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);      [BUGGY]  this.maximumItemCount  =  Integer.MAX_VALUE;  [BUGGY]      this.domain  =  domain;  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	add	this.maximumItemCount  =  Integer.MAX_VALUE;	  this.data    =    new    java.util.ArrayList();    	compilable	  [FE]  IllegalArgumentException	687	1
4118	[BUG]  [BUGGY]  this.maximumItemCount  =  Integer.MAX_VALUE;  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);      [BUGGY]  this.maximumItemCount  =  Integer.MAX_VALUE;  [BUGGY]      this.domain  =  domain;  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	replace	this.maximumItemCount  =  Integer.MAX_VALUE;	  this.data    =    new    java.util.ArrayList();    	compilable	  [FE]  IllegalArgumentException	687	1
231	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  System.err.println(   "Requires  start  >>  end.   ");  [BUGGY]      throw  new  IllegalArgumentException(     "Requires  start  <=  end.     ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	System.err.println(   "Requires  start  >>  end.   ");	  	compilable	  [FE]  IllegalArgumentException	39	1
232	[BUG]  [BUGGY]  System.err.println(   "Requires  start  >>  end.   ");  [FE]  IllegalArgumentException  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  System.err.println(   "Requires  start  >>  end.   ");  [BUGGY]      throw  new  IllegalArgumentException(     "Requires  start  <=  end.     ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	System.err.println(   "Requires  start  >>  end.   ");	  	compilable	  [FE]  IllegalArgumentException	39	1
4586	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  this.maximumItemCount  =  1;  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.maximumItemCount  =  1;	  this.maximumItemCount    =    0;    	compilable	  [FE]  IllegalArgumentException	765	1
4587	[BUG]  [BUGGY]  this.maximumItemCount  =  1;  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  this.maximumItemCount  =  1;  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.maximumItemCount  =  1;	  this.maximumItemCount    =    0;    	compilable	  [FE]  IllegalArgumentException	765	1
13873	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }      [BUGGY]  //  removeAgedItems(true);  [BUGGY]        if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	//  removeAgedItems(true);	  	compilable	  [FE]  IllegalArgumentException	2313	1
13874	[BUG]  [BUGGY]  //  removeAgedItems(true);  [FE]  IllegalArgumentException  [CONTEXT]      throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }      [BUGGY]  //  removeAgedItems(true);  [BUGGY]        if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	//  removeAgedItems(true);	  	compilable	  [FE]  IllegalArgumentException	2313	1
13875	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }      [BUGGY]  //  deleteAgedItems(true);  [BUGGY]        if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	//  deleteAgedItems(true);	  	compilable	  [FE]  IllegalArgumentException	2313	1
13876	[BUG]  [BUGGY]  //  deleteAgedItems(true);  [FE]  IllegalArgumentException  [CONTEXT]      throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }      [BUGGY]  //  deleteAgedItems(true);  [BUGGY]        if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	//  deleteAgedItems(true);	  	compilable	  [FE]  IllegalArgumentException	2313	1
4621	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  if(this.range!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  }  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	if(this.range!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  }	  this.domain    =    domain;    	compilable	  [FE]  IllegalArgumentException	771	1
4622	[BUG]  [BUGGY]  if(this.range!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  }  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  if(this.range!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  }  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	if(this.range!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  }	  this.domain    =    domain;    	compilable	  [FE]  IllegalArgumentException	771	1
4622	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  if(this.range!=  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  }  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	if(this.range!=  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  }	  this.domain    =    domain;    	compilable	  [FE]  IllegalArgumentException	771	1
4623	[BUG]  [BUGGY]  if(this.range!=  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  }  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  if(this.range!=  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  }  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	if(this.range!=  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  }	  this.domain    =    domain;    	compilable	  [FE]  IllegalArgumentException	771	1
296	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  if(end  >  start)  {  throw  new  IllegalArgumentException( "   ");  }  else  if(end  >  end)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Requires  start  <=  end.     ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	if(end  >  start)  {  throw  new  IllegalArgumentException( "   ");  }  else  if(end  >  end)  {  throw  new  IllegalArgumentException( "   ");  }	  if(end    >    start)    {    throw    new    IllegalArgumentException(       "       ");    }    else    if(end    >    start)    {    throw    new    IllegalArgumentException(       "       ");    }    	compilable	  [FE]  AssertionFailedError	50	1
297	[BUG]  [BUGGY]  if(end  >  start)  {  throw  new  IllegalArgumentException( "   ");  }  else  if(end  >  end)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  AssertionFailedError  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  if(end  >  start)  {  throw  new  IllegalArgumentException( "   ");  }  else  if(end  >  end)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Requires  start  <=  end.     ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	if(end  >  start)  {  throw  new  IllegalArgumentException( "   ");  }  else  if(end  >  end)  {  throw  new  IllegalArgumentException( "   ");  }	  if(end    >    start)    {    throw    new    IllegalArgumentException(       "       ");    }    else    if(end    >    start)    {    throw    new    IllegalArgumentException(       "       ");    }    	compilable	  [FE]  AssertionFailedError	50	1
13873	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }      [BUGGY]  //  removeAgedItems(false);  [BUGGY]        if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	//  removeAgedItems(false);	  	compilable	  [FE]  IllegalArgumentException	2313	1
13874	[BUG]  [BUGGY]  //  removeAgedItems(false);  [FE]  IllegalArgumentException  [CONTEXT]      throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }      [BUGGY]  //  removeAgedItems(false);  [BUGGY]        if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	//  removeAgedItems(false);	  	compilable	  [FE]  IllegalArgumentException	2313	1
13875	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }      [BUGGY]  //  deleteAgedItems(false);  [BUGGY]        if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	//  deleteAgedItems(false);	  	compilable	  [FE]  IllegalArgumentException	2313	1
13876	[BUG]  [BUGGY]  //  deleteAgedItems(false);  [FE]  IllegalArgumentException  [CONTEXT]      throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }      [BUGGY]  //  deleteAgedItems(false);  [BUGGY]        if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	//  deleteAgedItems(false);	  	compilable	  [FE]  IllegalArgumentException	2313	1
13879	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }      [BUGGY]  removeAgedItems(false);//  remove  old  items  if  required,  //  don't  notify  anyone,  because  that  //  happens  next  anyway...  [BUGGY]        if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	removeAgedItems(false);//  remove  old  items  if  required,  //  don't  notify  anyone,  because  that  //  happens  next  anyway...	  removeAgedItems(false);//    remove    old    items    if    needed,    //    don't    notify    anyone,    because    that    //    happens    next    anyway...    	compilable	  [FE]  IllegalArgumentException	2314	1
13880	[BUG]  [BUGGY]  removeAgedItems(false);//  remove  old  items  if  required,  //  don't  notify  anyone,  because  that  //  happens  next  anyway...  [FE]  IllegalArgumentException  [CONTEXT]      throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }      [BUGGY]  removeAgedItems(false);//  remove  old  items  if  required,  //  don't  notify  anyone,  because  that  //  happens  next  anyway...  [BUGGY]        if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	removeAgedItems(false);//  remove  old  items  if  required,  //  don't  notify  anyone,  because  that  //  happens  next  anyway...	  removeAgedItems(false);//    remove    old    items    if    needed,    //    don't    notify    anyone,    because    that    //    happens    next    anyway...    	compilable	  [FE]  IllegalArgumentException	2314	1
7130	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      public  int  getItemCount()  {      [BUGGY]  long  maximumItemAge  =  this.data.size();  [BUGGY]      return  this.data.size();  }  [CLASS]  TimeSeries  [METHOD]  getItemCount  [RETURN_TYPE]  int  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	238	238	1	add	long  maximumItemAge  =  this.data.size();	  	compilable	  [FE]  IllegalArgumentException	1189	1
7131	[BUG]  [BUGGY]  long  maximumItemAge  =  this.data.size();  [FE]  IllegalArgumentException  [CONTEXT]      public  int  getItemCount()  {      [BUGGY]  long  maximumItemAge  =  this.data.size();  [BUGGY]      return  this.data.size();  }  [CLASS]  TimeSeries  [METHOD]  getItemCount  [RETURN_TYPE]  int  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	238	238	1	replace	long  maximumItemAge  =  this.data.size();	  	compilable	  [FE]  IllegalArgumentException	1189	1
7131	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      public  int  getItemCount()  {      [BUGGY]  int  maximalItemAge  =  this.data.size();  [BUGGY]      return  this.data.size();  }  [CLASS]  TimeSeries  [METHOD]  getItemCount  [RETURN_TYPE]  int  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	238	238	1	add	int  maximalItemAge  =  this.data.size();	  	compilable	  [FE]  IllegalArgumentException	1189	1
7132	[BUG]  [BUGGY]  int  maximalItemAge  =  this.data.size();  [FE]  IllegalArgumentException  [CONTEXT]      public  int  getItemCount()  {      [BUGGY]  int  maximalItemAge  =  this.data.size();  [BUGGY]      return  this.data.size();  }  [CLASS]  TimeSeries  [METHOD]  getItemCount  [RETURN_TYPE]  int  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	238	238	1	replace	int  maximalItemAge  =  this.data.size();	  	compilable	  [FE]  IllegalArgumentException	1189	1
3974	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);      [BUGGY]  this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  2;  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	add	this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  2;	  this.domain    =    domain;    this.timePeriodClass    =    timePeriodClass;    	compilable	  [FE]  IllegalArgumentException	663	1
3975	[BUG]  [BUGGY]  this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  2;  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);      [BUGGY]  this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  2;  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	replace	this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  2;	  this.domain    =    domain;    this.timePeriodClass    =    timePeriodClass;    	compilable	  [FE]  IllegalArgumentException	663	1
11277	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      if  (count  ==  0)  {  this.data.add(item);  added  =  true;  }  else  {      [BUGGY]  RegularTimePeriod  second  =  getTimePeriod(getItemCount()  /  2);  [BUGGY]      if  (item.getPeriod().compareTo(last)  >  0)  {  this.data.add(item);  added  =  true;  }  else  {  int  index  =  Collections.binarySearch(this.data,  item);  if  (index  <  0)  {  this.data.add(-index  -  1,  item);  added  =  true;  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	511	511	1	add	RegularTimePeriod  second  =  getTimePeriod(getItemCount()  /  2);	  	compilable	  [FE]  IllegalArgumentException	1880	1
11278	[BUG]  [BUGGY]  RegularTimePeriod  second  =  getTimePeriod(getItemCount()  /  2);  [FE]  IllegalArgumentException  [CONTEXT]      if  (count  ==  0)  {  this.data.add(item);  added  =  true;  }  else  {      [BUGGY]  RegularTimePeriod  second  =  getTimePeriod(getItemCount()  /  2);  [BUGGY]      if  (item.getPeriod().compareTo(last)  >  0)  {  this.data.add(item);  added  =  true;  }  else  {  int  index  =  Collections.binarySearch(this.data,  item);  if  (index  <  0)  {  this.data.add(-index  -  1,  item);  added  =  true;  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	511	511	1	replace	RegularTimePeriod  second  =  getTimePeriod(getItemCount()  /  2);	  	compilable	  [FE]  IllegalArgumentException	1880	1
18440	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      public  void  removeAgedItems(boolean  notify)  {    if  (getItemCount()  >  1)  {  long  latest  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();      [BUGGY]  boolean  removed  =(this.data!=  null)&&(this.data.size()  >  this.maximumItemAge);  [BUGGY]      while  ((latest  -  getTimePeriod(0).getSerialIndex())  >  this.maximumItemAge)  {  this.data.remove(0);  removed  =  true;  }  if  (removed  &&  notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  removeAgedItems  [RETURN_TYPE]  void  boolean  notify  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  notify  removed  long  latest  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	740	740	1	add	boolean  removed  =(this.data!=  null)&&(this.data.size()  >  this.maximumItemAge);	  boolean    removed    =(latest    >    0)&&(this.data.size()    >    this.maximumItemAge);    	compilable	  [FE]  IllegalArgumentException	3074	1
18441	[BUG]  [BUGGY]  boolean  removed  =(this.data!=  null)&&(this.data.size()  >  this.maximumItemAge);  [FE]  IllegalArgumentException  [CONTEXT]      public  void  removeAgedItems(boolean  notify)  {    if  (getItemCount()  >  1)  {  long  latest  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();      [BUGGY]  boolean  removed  =(this.data!=  null)&&(this.data.size()  >  this.maximumItemAge);  [BUGGY]      while  ((latest  -  getTimePeriod(0).getSerialIndex())  >  this.maximumItemAge)  {  this.data.remove(0);  removed  =  true;  }  if  (removed  &&  notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  removeAgedItems  [RETURN_TYPE]  void  boolean  notify  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  notify  removed  long  latest  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	740	740	1	replace	boolean  removed  =(this.data!=  null)&&(this.data.size()  >  this.maximumItemAge);	  boolean    removed    =(latest    >    0)&&(this.data.size()    >    this.maximumItemAge);    	compilable	  [FE]  IllegalArgumentException	3074	1
13880	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }      [BUGGY]  removeAgedItems(true);//  remove  old  items  if  necessary,  //  don't  notify  anyone,  because  that  //  happens  next  anyway;  [BUGGY]        if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	removeAgedItems(true);//  remove  old  items  if  necessary,  //  don't  notify  anyone,  because  that  //  happens  next  anyway;	  removeAgedItems(false);//    remove    old    items    if    needed,    //    don't    notify    anyone,    because    that    //    happens    next    anyway...    	compilable	  [FE]  IllegalArgumentException	2314	1
13881	[BUG]  [BUGGY]  removeAgedItems(true);//  remove  old  items  if  necessary,  //  don't  notify  anyone,  because  that  //  happens  next  anyway;  [FE]  IllegalArgumentException  [CONTEXT]      throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }      [BUGGY]  removeAgedItems(true);//  remove  old  items  if  necessary,  //  don't  notify  anyone,  because  that  //  happens  next  anyway;  [BUGGY]        if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	removeAgedItems(true);//  remove  old  items  if  necessary,  //  don't  notify  anyone,  because  that  //  happens  next  anyway;	  removeAgedItems(false);//    remove    old    items    if    needed,    //    don't    notify    anyone,    because    that    //    happens    next    anyway...    	compilable	  [FE]  IllegalArgumentException	2314	1
327	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  System.err.println( "Requires  start  <  0   ");  [BUGGY]      throw  new  IllegalArgumentException(     "Requires  start  <=  end.     ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	System.err.println( "Requires  start  <  0   ");	  	compilable	  [FE]  IllegalArgumentException	55	1
328	[BUG]  [BUGGY]  System.err.println( "Requires  start  <  0   ");  [FE]  IllegalArgumentException  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  System.err.println( "Requires  start  <  0   ");  [BUGGY]      throw  new  IllegalArgumentException(     "Requires  start  <=  end.     ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	System.err.println( "Requires  start  <  0   ");	  	compilable	  [FE]  IllegalArgumentException	55	1
260	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  System.err.println( "Requires  start  <=  0.   ");  [BUGGY]      throw  new  IllegalArgumentException(     "Requires  start  <=  end.     ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	System.err.println( "Requires  start  <=  0.   ");	  	compilable	  [FE]  IllegalArgumentException	44	1
261	[BUG]  [BUGGY]  System.err.println( "Requires  start  <=  0.   ");  [FE]  IllegalArgumentException  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  System.err.println( "Requires  start  <=  0.   ");  [BUGGY]      throw  new  IllegalArgumentException(     "Requires  start  <=  end.     ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	System.err.println( "Requires  start  <=  0.   ");	  	compilable	  [FE]  IllegalArgumentException	44	1
4658	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  if(range!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  }  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	if(range!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  }	  if(range!=    null)    {    this.range    =    range;    }    else    {    this.range    =    range;    }    	compilable	  [FE]  IllegalArgumentException	777	1
4659	[BUG]  [BUGGY]  if(range!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  }  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  if(range!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  }  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	if(range!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  }	  if(range!=    null)    {    this.range    =    range;    }    else    {    this.range    =    range;    }    	compilable	  [FE]  IllegalArgumentException	777	1
9081	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      b.append(     "You  are  trying  to  add  data  where  the  time  period  class       ");  b.append(     "is       ");  b.append(item.getPeriod().getClass().getName());  b.append(     ",  but  the  TimeSeries  is  expecting  an  instance  of       ");  b.append(this.timePeriodClass.getName());  b.append(     ".     ");  throw  new  SeriesException(b.toString());  }        [BUGGY]  boolean  addition  =  true;  [BUGGY]      int  count  =  getItemCount();  if  (count  ==  0)  {  this.data.add(item);  added  =  true;  }  else  {  RegularTimePeriod  last  =  getTimePeriod(getItemCount()  -  1);  if  (item.getPeriod().compareTo(last)  >  0)  {  this.data.add(item);  added  =  true;  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	504	504	1	add	boolean  addition  =  true;	  	compilable	  [FE]  IllegalArgumentException	1514	1
9082	[BUG]  [BUGGY]  boolean  addition  =  true;  [FE]  IllegalArgumentException  [CONTEXT]      b.append(     "You  are  trying  to  add  data  where  the  time  period  class       ");  b.append(     "is       ");  b.append(item.getPeriod().getClass().getName());  b.append(     ",  but  the  TimeSeries  is  expecting  an  instance  of       ");  b.append(this.timePeriodClass.getName());  b.append(     ".     ");  throw  new  SeriesException(b.toString());  }        [BUGGY]  boolean  addition  =  true;  [BUGGY]      int  count  =  getItemCount();  if  (count  ==  0)  {  this.data.add(item);  added  =  true;  }  else  {  RegularTimePeriod  last  =  getTimePeriod(getItemCount()  -  1);  if  (item.getPeriod().compareTo(last)  >  0)  {  this.data.add(item);  added  =  true;  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	504	504	1	replace	boolean  addition  =  true;	  	compilable	  [FE]  IllegalArgumentException	1514	1
255	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  System.err.println( "Requires  start  >>  0.   ");  [BUGGY]      throw  new  IllegalArgumentException(     "Requires  start  <=  end.     ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	System.err.println( "Requires  start  >>  0.   ");	  	compilable	  [FE]  IllegalArgumentException	43	1
256	[BUG]  [BUGGY]  System.err.println( "Requires  start  >>  0.   ");  [FE]  IllegalArgumentException  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  System.err.println( "Requires  start  >>  0.   ");  [BUGGY]      throw  new  IllegalArgumentException(     "Requires  start  <=  end.     ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	System.err.println( "Requires  start  >>  0.   ");	  	compilable	  [FE]  IllegalArgumentException	43	1
116	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  System.err.println( ",Failed  to  add  cloned  item. ");  [BUGGY]      }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	System.err.println( ",Failed  to  add  cloned  item. ");	  System.err.println(   "Failed    to    add    cloned    item.   ");    	compilable	  [FE]  AssertionFailedError	20	1
117	[BUG]  [BUGGY]  System.err.println( ",Failed  to  add  cloned  item. ");  [FE]  AssertionFailedError  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  System.err.println( ",Failed  to  add  cloned  item. ");  [BUGGY]      }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	System.err.println( ",Failed  to  add  cloned  item. ");	  System.err.println(   "Failed    to    add    cloned    item.   ");    	compilable	  [FE]  AssertionFailedError	20	1
4621	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  this.maximumItemCount  =  Integer.MAX_VALUE;  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.maximumItemCount  =  Integer.MAX_VALUE;	  this.domain    =    domain;    	compilable	  [FE]  IllegalArgumentException	771	1
4622	[BUG]  [BUGGY]  this.maximumItemCount  =  Integer.MAX_VALUE;  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  this.maximumItemCount  =  Integer.MAX_VALUE;  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.maximumItemCount  =  Integer.MAX_VALUE;	  this.domain    =    domain;    	compilable	  [FE]  IllegalArgumentException	771	1
4622	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  this.maximumItemCount  =  Integer.MIN_VALUE;  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.maximumItemCount  =  Integer.MIN_VALUE;	  this.domain    =    domain;    	compilable	  [FE]  IllegalArgumentException	771	1
4623	[BUG]  [BUGGY]  this.maximumItemCount  =  Integer.MIN_VALUE;  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  this.maximumItemCount  =  Integer.MIN_VALUE;  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.maximumItemCount  =  Integer.MIN_VALUE;	  this.domain    =    domain;    	compilable	  [FE]  IllegalArgumentException	771	1
4585	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  if(domain!=  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  }  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	if(domain!=  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  }	  this.maximumItemCount    =    0;    	compilable	  [FE]  IllegalArgumentException	765	1
4586	[BUG]  [BUGGY]  if(domain!=  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  }  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  if(domain!=  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  }  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	if(domain!=  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  }	  this.maximumItemCount    =    0;    	compilable	  [FE]  IllegalArgumentException	765	1
4586	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  if(this.domain  ==  null)  {  this.data  =  new  java.util.ArrayList();  }  else  {  this.domain  =  domain;  this.timePeriodClass  =  timePeriodClass;  this.maximumItemCount  =  0;  }  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	if(this.domain  ==  null)  {  this.data  =  new  java.util.ArrayList();  }  else  {  this.domain  =  domain;  this.timePeriodClass  =  timePeriodClass;  this.maximumItemCount  =  0;  }	  this.maximumItemCount    =    0;    	compilable	  [FE]  IllegalArgumentException	765	1
4587	[BUG]  [BUGGY]  if(this.domain  ==  null)  {  this.data  =  new  java.util.ArrayList();  }  else  {  this.domain  =  domain;  this.timePeriodClass  =  timePeriodClass;  this.maximumItemCount  =  0;  }  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  if(this.domain  ==  null)  {  this.data  =  new  java.util.ArrayList();  }  else  {  this.domain  =  domain;  this.timePeriodClass  =  timePeriodClass;  this.maximumItemCount  =  0;  }  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	if(this.domain  ==  null)  {  this.data  =  new  java.util.ArrayList();  }  else  {  this.domain  =  domain;  this.timePeriodClass  =  timePeriodClass;  this.maximumItemCount  =  0;  }	  this.maximumItemCount    =    0;    	compilable	  [FE]  IllegalArgumentException	765	1
4622	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  this.domain  = "domain ";  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.domain  = "domain ";	  this.domain    =    domain;    	compilable	  [FE]  IllegalArgumentException	771	1
4623	[BUG]  [BUGGY]  this.domain  = "domain ";  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  this.domain  = "domain ";  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.domain  = "domain ";	  this.domain    =    domain;    	compilable	  [FE]  IllegalArgumentException	771	1
11318	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      if  (count  ==  0)  {  this.data.add(item);  added  =  true;  }  else  {      [BUGGY]  RegularTimePeriod  last  =  getTimePeriod(getItemCount()  /  3);  [BUGGY]      if  (item.getPeriod().compareTo(last)  >  0)  {  this.data.add(item);  added  =  true;  }  else  {  int  index  =  Collections.binarySearch(this.data,  item);  if  (index  <  0)  {  this.data.add(-index  -  1,  item);  added  =  true;  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	511	511	1	add	RegularTimePeriod  last  =  getTimePeriod(getItemCount()  /  3);	  RegularTimePeriod    last    =    getTimePeriod(getItemCount()    /    4);    	compilable	  [FE]  IllegalArgumentException	1887	1
11319	[BUG]  [BUGGY]  RegularTimePeriod  last  =  getTimePeriod(getItemCount()  /  3);  [FE]  IllegalArgumentException  [CONTEXT]      if  (count  ==  0)  {  this.data.add(item);  added  =  true;  }  else  {      [BUGGY]  RegularTimePeriod  last  =  getTimePeriod(getItemCount()  /  3);  [BUGGY]      if  (item.getPeriod().compareTo(last)  >  0)  {  this.data.add(item);  added  =  true;  }  else  {  int  index  =  Collections.binarySearch(this.data,  item);  if  (index  <  0)  {  this.data.add(-index  -  1,  item);  added  =  true;  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	511	511	1	replace	RegularTimePeriod  last  =  getTimePeriod(getItemCount()  /  3);	  RegularTimePeriod    last    =    getTimePeriod(getItemCount()    /    4);    	compilable	  [FE]  IllegalArgumentException	1887	1
4118	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);      [BUGGY]  if(this.domain!=  null)  {  this.domain  =  domain;  this.range  =  range;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [BUGGY]      this.domain  =  domain;  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	add	if(this.domain!=  null)  {  this.domain  =  domain;  this.range  =  range;  this.maximumItemAge  =  Long.MAX_VALUE;  }	  this.data    =    new    java.util.ArrayList();    	compilable	  [FE]  IllegalArgumentException	687	1
4119	[BUG]  [BUGGY]  if(this.domain!=  null)  {  this.domain  =  domain;  this.range  =  range;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);      [BUGGY]  if(this.domain!=  null)  {  this.domain  =  domain;  this.range  =  range;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [BUGGY]      this.domain  =  domain;  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	replace	if(this.domain!=  null)  {  this.domain  =  domain;  this.range  =  range;  this.maximumItemAge  =  Long.MAX_VALUE;  }	  this.data    =    new    java.util.ArrayList();    	compilable	  [FE]  IllegalArgumentException	687	1
13875	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }      [BUGGY]  removeAgedItems(false);  [BUGGY]        if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	removeAgedItems(false);	  	compilable	  [FE]  IllegalArgumentException	2313	1
13876	[BUG]  [BUGGY]  removeAgedItems(false);  [FE]  IllegalArgumentException  [CONTEXT]      throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }      [BUGGY]  removeAgedItems(false);  [BUGGY]        if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	removeAgedItems(false);	  	compilable	  [FE]  IllegalArgumentException	2313	1
7131	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      public  int  getItemCount()  {      [BUGGY]  int  maximumItemAge  =  getMaximumItemCount();  [BUGGY]      return  this.data.size();  }  [CLASS]  TimeSeries  [METHOD]  getItemCount  [RETURN_TYPE]  int  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	238	238	1	add	int  maximumItemAge  =  getMaximumItemCount();	  	compilable	  [FE]  IllegalArgumentException	1189	1
7132	[BUG]  [BUGGY]  int  maximumItemAge  =  getMaximumItemCount();  [FE]  IllegalArgumentException  [CONTEXT]      public  int  getItemCount()  {      [BUGGY]  int  maximumItemAge  =  getMaximumItemCount();  [BUGGY]      return  this.data.size();  }  [CLASS]  TimeSeries  [METHOD]  getItemCount  [RETURN_TYPE]  int  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	238	238	1	replace	int  maximumItemAge  =  getMaximumItemCount();	  	compilable	  [FE]  IllegalArgumentException	1189	1
13910	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }      [BUGGY]  removeAgedItems(false);//  remove  old  items  if  needed,  //  don't  notify  anyone,  because  that  //  happens  next  anyway;  [BUGGY]        if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	removeAgedItems(false);//  remove  old  items  if  needed,  //  don't  notify  anyone,  because  that  //  happens  next  anyway;	  removeAgedItems(false);//    remove    old    items    if    needed,    but    //    don't    notify    anyone,    because    that    //    happens    next    anyway...    	compilable	  [FE]  IllegalArgumentException	2319	1
13911	[BUG]  [BUGGY]  removeAgedItems(false);//  remove  old  items  if  needed,  //  don't  notify  anyone,  because  that  //  happens  next  anyway;  [FE]  IllegalArgumentException  [CONTEXT]      throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }      [BUGGY]  removeAgedItems(false);//  remove  old  items  if  needed,  //  don't  notify  anyone,  because  that  //  happens  next  anyway;  [BUGGY]        if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	removeAgedItems(false);//  remove  old  items  if  needed,  //  don't  notify  anyone,  because  that  //  happens  next  anyway;	  removeAgedItems(false);//    remove    old    items    if    needed,    but    //    don't    notify    anyone,    because    that    //    happens    next    anyway...    	compilable	  [FE]  IllegalArgumentException	2319	1
4622	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION;  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION;	  this.domain    =    domain;    	compilable	  [FE]  IllegalArgumentException	771	1
4623	[BUG]  [BUGGY]  this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION;  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION;  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION;	  this.domain    =    domain;    	compilable	  [FE]  IllegalArgumentException	771	1
79	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  throw  new  IllegalArgumentException( "Requires  end  >=  0.   ");  [BUGGY]      }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	throw  new  IllegalArgumentException( "Requires  end  >=  0.   ");	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalArgumentException	14	1
80	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Requires  end  >=  0.   ");  [FE]  IllegalArgumentException  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  throw  new  IllegalArgumentException( "Requires  end  >=  0.   ");  [BUGGY]      }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	throw  new  IllegalArgumentException( "Requires  end  >=  0.   ");	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalArgumentException	14	1
116	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  System.err.println( "Unable  to  add  cloned  item. ");  [BUGGY]      }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	System.err.println( "Unable  to  add  cloned  item. ");	  System.err.println(   "Failed    to    add    cloned    item.   ");    	compilable	  [FE]  AssertionFailedError	20	1
117	[BUG]  [BUGGY]  System.err.println( "Unable  to  add  cloned  item. ");  [FE]  AssertionFailedError  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  System.err.println( "Unable  to  add  cloned  item. ");  [BUGGY]      }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	System.err.println( "Unable  to  add  cloned  item. ");	  System.err.println(   "Failed    to    add    cloned    item.   ");    	compilable	  [FE]  AssertionFailedError	20	1
4586	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  this.domain  =  domain;  if(this.range!=  null)  {  this.domain  =  domain;  this.range  =  range;  }  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.domain  =  domain;  if(this.range!=  null)  {  this.domain  =  domain;  this.range  =  range;  }	  this.maximumItemCount    =    0;    	compilable	  [FE]  IllegalArgumentException	765	1
4587	[BUG]  [BUGGY]  this.domain  =  domain;  if(this.range!=  null)  {  this.domain  =  domain;  this.range  =  range;  }  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  this.domain  =  domain;  if(this.range!=  null)  {  this.domain  =  domain;  this.range  =  range;  }  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.domain  =  domain;  if(this.range!=  null)  {  this.domain  =  domain;  this.range  =  range;  }	  this.maximumItemCount    =    0;    	compilable	  [FE]  IllegalArgumentException	765	1
4615	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  this.maximumItemCount  =  maximumItemCount  +  1;  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.maximumItemCount  =  maximumItemCount  +  1;	  	compilable	  [FE]  IllegalArgumentException	770	1
4616	[BUG]  [BUGGY]  this.maximumItemCount  =  maximumItemCount  +  1;  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  this.maximumItemCount  =  maximumItemCount  +  1;  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.maximumItemCount  =  maximumItemCount  +  1;	  	compilable	  [FE]  IllegalArgumentException	770	1
4616	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  this.maximumItemCount  =  maximumItemCount  -  1;  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.maximumItemCount  =  maximumItemCount  -  1;	  	compilable	  [FE]  IllegalArgumentException	770	1
4617	[BUG]  [BUGGY]  this.maximumItemCount  =  maximumItemCount  -  1;  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  this.maximumItemCount  =  maximumItemCount  -  1;  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.maximumItemCount  =  maximumItemCount  -  1;	  	compilable	  [FE]  IllegalArgumentException	770	1
3968	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);      [BUGGY]  this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  0;  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	add	this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  0;	  this.domain    =    domain    +    DEFAULT_DOMAIN_DESCRIPTION    +    DEFAULT_RANGE_DESCRIPTION;    	compilable	  [FE]  IllegalArgumentException	662	1
3969	[BUG]  [BUGGY]  this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  0;  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);      [BUGGY]  this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  0;  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	replace	this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  0;	  this.domain    =    domain    +    DEFAULT_DOMAIN_DESCRIPTION    +    DEFAULT_RANGE_DESCRIPTION;    	compilable	  [FE]  IllegalArgumentException	662	1
3974	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);      [BUGGY]  this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  1L;  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	add	this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  1L;	  this.domain    =    domain;    this.timePeriodClass    =    timePeriodClass;    	compilable	  [FE]  IllegalArgumentException	663	1
3975	[BUG]  [BUGGY]  this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  1L;  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);      [BUGGY]  this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  1L;  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	replace	this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  1L;	  this.domain    =    domain;    this.timePeriodClass    =    timePeriodClass;    	compilable	  [FE]  IllegalArgumentException	663	1
4621	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  this.range  =  domain;  if(this.range!=  null)  {  this.range  =  range;  }  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.range  =  domain;  if(this.range!=  null)  {  this.range  =  range;  }	  this.domain    =    domain;    	compilable	  [FE]  IllegalArgumentException	771	1
4622	[BUG]  [BUGGY]  this.range  =  domain;  if(this.range!=  null)  {  this.range  =  range;  }  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  this.range  =  domain;  if(this.range!=  null)  {  this.range  =  range;  }  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.range  =  domain;  if(this.range!=  null)  {  this.range  =  range;  }	  this.domain    =    domain;    	compilable	  [FE]  IllegalArgumentException	771	1
4622	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  this.range  =  range;  if(this.domain!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  }  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.range  =  range;  if(this.domain!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  }	  this.domain    =    domain;    	compilable	  [FE]  IllegalArgumentException	771	1
4623	[BUG]  [BUGGY]  this.range  =  range;  if(this.domain!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  }  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  this.range  =  range;  if(this.domain!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  }  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.range  =  range;  if(this.domain!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  }	  this.domain    =    domain;    	compilable	  [FE]  IllegalArgumentException	771	1
13880	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }      [BUGGY]  removeAgedItems(false);//  remove  old  items  if  required,  //  don't  notify  anyone,  because  that  //  happens  next  anyway;  [BUGGY]        if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	removeAgedItems(false);//  remove  old  items  if  required,  //  don't  notify  anyone,  because  that  //  happens  next  anyway;	  removeAgedItems(false);//    remove    old    items    if    needed,    //    don't    notify    anyone,    because    that    //    happens    next    anyway...    	compilable	  [FE]  IllegalArgumentException	2314	1
13881	[BUG]  [BUGGY]  removeAgedItems(false);//  remove  old  items  if  required,  //  don't  notify  anyone,  because  that  //  happens  next  anyway;  [FE]  IllegalArgumentException  [CONTEXT]      throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }      [BUGGY]  removeAgedItems(false);//  remove  old  items  if  required,  //  don't  notify  anyone,  because  that  //  happens  next  anyway;  [BUGGY]        if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	removeAgedItems(false);//  remove  old  items  if  required,  //  don't  notify  anyone,  because  that  //  happens  next  anyway;	  removeAgedItems(false);//    remove    old    items    if    needed,    //    don't    notify    anyone,    because    that    //    happens    next    anyway...    	compilable	  [FE]  IllegalArgumentException	2314	1
13868	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }      [BUGGY]  removeAgedItems(true);//  removeAgedItems(true);  [BUGGY]        if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	removeAgedItems(true);//  removeAgedItems(true);	  	compilable	  [FE]  IllegalArgumentException	2312	1
13869	[BUG]  [BUGGY]  removeAgedItems(true);//  removeAgedItems(true);  [FE]  IllegalArgumentException  [CONTEXT]      throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }      [BUGGY]  removeAgedItems(true);//  removeAgedItems(true);  [BUGGY]        if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	removeAgedItems(true);//  removeAgedItems(true);	  	compilable	  [FE]  IllegalArgumentException	2312	1
4621	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  this.domain  =  domain;  if(this.range!=  null)  {  this.domain  =  domain;  }  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.domain  =  domain;  if(this.range!=  null)  {  this.domain  =  domain;  }	  this.domain    =    domain;    	compilable	  [FE]  IllegalArgumentException	771	1
4622	[BUG]  [BUGGY]  this.domain  =  domain;  if(this.range!=  null)  {  this.domain  =  domain;  }  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  this.domain  =  domain;  if(this.range!=  null)  {  this.domain  =  domain;  }  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.domain  =  domain;  if(this.range!=  null)  {  this.domain  =  domain;  }	  this.domain    =    domain;    	compilable	  [FE]  IllegalArgumentException	771	1
4622	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  this.domain  =  domain;  if(this.range!=  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  }  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.domain  =  domain;  if(this.range!=  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  }	  this.domain    =    domain;    	compilable	  [FE]  IllegalArgumentException	771	1
4623	[BUG]  [BUGGY]  this.domain  =  domain;  if(this.range!=  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  }  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  this.domain  =  domain;  if(this.range!=  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  }  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.domain  =  domain;  if(this.range!=  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  }	  this.domain    =    domain;    	compilable	  [FE]  IllegalArgumentException	771	1
260	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  System.err.println( "Requires  end  >=  start.   ");  [BUGGY]      throw  new  IllegalArgumentException(     "Requires  start  <=  end.     ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	System.err.println( "Requires  end  >=  start.   ");	  	compilable	  [FE]  IllegalArgumentException	44	1
261	[BUG]  [BUGGY]  System.err.println( "Requires  end  >=  start.   ");  [FE]  IllegalArgumentException  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  System.err.println( "Requires  end  >=  start.   ");  [BUGGY]      throw  new  IllegalArgumentException(     "Requires  start  <=  end.     ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	System.err.println( "Requires  end  >=  start.   ");	  	compilable	  [FE]  IllegalArgumentException	44	1
110	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  System.err.println( "Failed  to  add  cloned  item.... ");  [BUGGY]      }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	System.err.println( "Failed  to  add  cloned  item.... ");	  	compilable	  [FE]  IllegalArgumentException	19	1
111	[BUG]  [BUGGY]  System.err.println( "Failed  to  add  cloned  item.... ");  [FE]  IllegalArgumentException  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  System.err.println( "Failed  to  add  cloned  item.... ");  [BUGGY]      }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	System.err.println( "Failed  to  add  cloned  item.... ");	  	compilable	  [FE]  IllegalArgumentException	19	1
80	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  throw  new  IllegalArgumentException( "Requires  end  -  start  + ");  [BUGGY]      }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	throw  new  IllegalArgumentException( "Requires  end  -  start  + ");	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalArgumentException	14	1
81	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Requires  end  -  start  + ");  [FE]  IllegalArgumentException  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  throw  new  IllegalArgumentException( "Requires  end  -  start  + ");  [BUGGY]      }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	throw  new  IllegalArgumentException( "Requires  end  -  start  + ");	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalArgumentException	14	1
80	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  throw  new  IllegalArgumentException( "Requires  end  >=  0   ");  [BUGGY]      }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	throw  new  IllegalArgumentException( "Requires  end  >=  0   ");	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalArgumentException	14	1
81	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Requires  end  >=  0   ");  [FE]  IllegalArgumentException  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  throw  new  IllegalArgumentException( "Requires  end  >=  0   ");  [BUGGY]      }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	throw  new  IllegalArgumentException( "Requires  end  >=  0   ");	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalArgumentException	14	1
4617	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  this.maximumItemCount  =  Math.max(this.maximumItemCount,  0);  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.maximumItemCount  =  Math.max(this.maximumItemCount,  0);	  	compilable	  [FE]  IllegalArgumentException	770	1
4618	[BUG]  [BUGGY]  this.maximumItemCount  =  Math.max(this.maximumItemCount,  0);  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  this.maximumItemCount  =  Math.max(this.maximumItemCount,  0);  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.maximumItemCount  =  Math.max(this.maximumItemCount,  0);	  	compilable	  [FE]  IllegalArgumentException	770	1
3974	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);      [BUGGY]  this.domain  =  domain  + "DOMAIN_DESCRIPTION ";  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	add	this.domain  =  domain  + "DOMAIN_DESCRIPTION ";	  this.domain    =    domain;    this.timePeriodClass    =    timePeriodClass;    	compilable	  [FE]  IllegalArgumentException	663	1
3975	[BUG]  [BUGGY]  this.domain  =  domain  + "DOMAIN_DESCRIPTION ";  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);      [BUGGY]  this.domain  =  domain  + "DOMAIN_DESCRIPTION ";  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	replace	this.domain  =  domain  + "DOMAIN_DESCRIPTION ";	  this.domain    =    domain;    this.timePeriodClass    =    timePeriodClass;    	compilable	  [FE]  IllegalArgumentException	663	1
86	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  throw  new  IllegalArgumentException( "Requires  end  >>  0   ");  [BUGGY]      }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	throw  new  IllegalArgumentException( "Requires  end  >>  0   ");	  throw    new    IllegalArgumentException(   "Requires    start    >=    0   ");    	compilable	  [FE]  IllegalArgumentException	15	1
87	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Requires  end  >>  0   ");  [FE]  IllegalArgumentException  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  throw  new  IllegalArgumentException( "Requires  end  >>  0   ");  [BUGGY]      }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	throw  new  IllegalArgumentException( "Requires  end  >>  0   ");	  throw    new    IllegalArgumentException(   "Requires    start    >=    0   ");    	compilable	  [FE]  IllegalArgumentException	15	1
11312	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      if  (count  ==  0)  {  this.data.add(item);  added  =  true;  }  else  {      [BUGGY]  RegularTimePeriod  first  =  getTimePeriod(getItemCount()  /  4);  [BUGGY]      if  (item.getPeriod().compareTo(last)  >  0)  {  this.data.add(item);  added  =  true;  }  else  {  int  index  =  Collections.binarySearch(this.data,  item);  if  (index  <  0)  {  this.data.add(-index  -  1,  item);  added  =  true;  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	511	511	1	add	RegularTimePeriod  first  =  getTimePeriod(getItemCount()  /  4);	  	compilable	  [FE]  IllegalArgumentException	1886	1
11313	[BUG]  [BUGGY]  RegularTimePeriod  first  =  getTimePeriod(getItemCount()  /  4);  [FE]  IllegalArgumentException  [CONTEXT]      if  (count  ==  0)  {  this.data.add(item);  added  =  true;  }  else  {      [BUGGY]  RegularTimePeriod  first  =  getTimePeriod(getItemCount()  /  4);  [BUGGY]      if  (item.getPeriod().compareTo(last)  >  0)  {  this.data.add(item);  added  =  true;  }  else  {  int  index  =  Collections.binarySearch(this.data,  item);  if  (index  <  0)  {  this.data.add(-index  -  1,  item);  added  =  true;  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	511	511	1	replace	RegularTimePeriod  first  =  getTimePeriod(getItemCount()  /  4);	  	compilable	  [FE]  IllegalArgumentException	1886	1
18159	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      public  void  removeAgedItems(boolean  notify)  {    if  (getItemCount()  >  1)  {      [BUGGY]  long  last  =  getTimePeriod(getItemCount()  /  2).getSerialIndex();  [BUGGY]      long  latest  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();  boolean  removed  =  false;  while  ((latest  -  getTimePeriod(0).getSerialIndex())  >  this.maximumItemAge)  {  this.data.remove(0);  removed  =  true;  }  if  (removed  &&  notify)  {  fireSeriesChanged();  }  }  [CLASS]  TimeSeries  [METHOD]  removeAgedItems  [RETURN_TYPE]  void  boolean  notify  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  notify  removed  long  latest  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	739	739	1	add	long  last  =  getTimePeriod(getItemCount()  /  2).getSerialIndex();	  	compilable	  [FE]  IllegalArgumentException	3027	1
18160	[BUG]  [BUGGY]  long  last  =  getTimePeriod(getItemCount()  /  2).getSerialIndex();  [FE]  IllegalArgumentException  [CONTEXT]      public  void  removeAgedItems(boolean  notify)  {    if  (getItemCount()  >  1)  {      [BUGGY]  long  last  =  getTimePeriod(getItemCount()  /  2).getSerialIndex();  [BUGGY]      long  latest  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();  boolean  removed  =  false;  while  ((latest  -  getTimePeriod(0).getSerialIndex())  >  this.maximumItemAge)  {  this.data.remove(0);  removed  =  true;  }  if  (removed  &&  notify)  {  fireSeriesChanged();  }  }  [CLASS]  TimeSeries  [METHOD]  removeAgedItems  [RETURN_TYPE]  void  boolean  notify  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  notify  removed  long  latest  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	739	739	1	replace	long  last  =  getTimePeriod(getItemCount()  /  2).getSerialIndex();	  	compilable	  [FE]  IllegalArgumentException	3027	1
4586	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  this.maximumItemCount  =  1000;  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.maximumItemCount  =  1000;	  this.maximumItemCount    =    0;    	compilable	  [FE]  IllegalArgumentException	765	1
4587	[BUG]  [BUGGY]  this.maximumItemCount  =  1000;  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  this.maximumItemCount  =  1000;  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.maximumItemCount  =  1000;	  this.maximumItemCount    =    0;    	compilable	  [FE]  IllegalArgumentException	765	1
13045	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      b.append(     "You  are  attempting  to  add  an  observation  for       ");  b.append(     "the  time  period       ");  b.append(item.getPeriod().toString());  b.append(     "  but  the  series  already  contains  an  observation     ");  b.append(     "  for  that  time  period.  Duplicates  are  not       ");  b.append(     "permitted.Try  using  the  addOrUpdate()  method.     ");  throw  new  SeriesException(b.toString());  }  }  }      [BUGGY]  if(this.data.size()  >  0)  {  [BUGGY]        if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  removeAgedItems(false);//  remove  old  items  if  necessary,  but    if  (notify)  {  fireSeriesChanged();  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	534	534	1	add	if(this.data.size()  >  0)  {	  if(this.data.size()    >    this.maximumItemCount)    {    	compilable	  [FE]  IllegalArgumentException	2175	1
13046	[BUG]  [BUGGY]  if(this.data.size()  >  0)  {  [FE]  IllegalArgumentException  [CONTEXT]      b.append(     "You  are  attempting  to  add  an  observation  for       ");  b.append(     "the  time  period       ");  b.append(item.getPeriod().toString());  b.append(     "  but  the  series  already  contains  an  observation     ");  b.append(     "  for  that  time  period.  Duplicates  are  not       ");  b.append(     "permitted.Try  using  the  addOrUpdate()  method.     ");  throw  new  SeriesException(b.toString());  }  }  }      [BUGGY]  if(this.data.size()  >  0)  {  [BUGGY]        if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  removeAgedItems(false);//  remove  old  items  if  necessary,  but    if  (notify)  {  fireSeriesChanged();  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	534	534	1	replace	if(this.data.size()  >  0)  {	  if(this.data.size()    >    this.maximumItemCount)    {    	compilable	  [FE]  IllegalArgumentException	2175	1
4586	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  if(this.data!=  null)  {  this.data  =  new  java.util.ArrayList();  }  else  {  this.domain  =  domain;  this.timePeriodClass  =  timePeriodClass;  this.maximumItemCount  =  0;  }  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	if(this.data!=  null)  {  this.data  =  new  java.util.ArrayList();  }  else  {  this.domain  =  domain;  this.timePeriodClass  =  timePeriodClass;  this.maximumItemCount  =  0;  }	  this.maximumItemCount    =    0;    	compilable	  [FE]  IllegalArgumentException	765	1
4587	[BUG]  [BUGGY]  if(this.data!=  null)  {  this.data  =  new  java.util.ArrayList();  }  else  {  this.domain  =  domain;  this.timePeriodClass  =  timePeriodClass;  this.maximumItemCount  =  0;  }  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  if(this.data!=  null)  {  this.data  =  new  java.util.ArrayList();  }  else  {  this.domain  =  domain;  this.timePeriodClass  =  timePeriodClass;  this.maximumItemCount  =  0;  }  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	if(this.data!=  null)  {  this.data  =  new  java.util.ArrayList();  }  else  {  this.domain  =  domain;  this.timePeriodClass  =  timePeriodClass;  this.maximumItemCount  =  0;  }	  this.maximumItemCount    =    0;    	compilable	  [FE]  IllegalArgumentException	765	1
289	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  if(end  >  start)  {  throw  new  IllegalArgumentException( "   ");  }  else  if(end  <  start)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Requires  start  <=  end.     ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	if(end  >  start)  {  throw  new  IllegalArgumentException( "   ");  }  else  if(end  <  start)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException	49	1
290	[BUG]  [BUGGY]  if(end  >  start)  {  throw  new  IllegalArgumentException( "   ");  }  else  if(end  <  start)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  if(end  >  start)  {  throw  new  IllegalArgumentException( "   ");  }  else  if(end  <  start)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Requires  start  <=  end.     ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	if(end  >  start)  {  throw  new  IllegalArgumentException( "   ");  }  else  if(end  <  start)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException	49	1
296	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  if(start  >  end)  {  throw  new  IllegalArgumentException( " ");  }  else  if(end  >  start)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Requires  start  <=  end.     ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	if(start  >  end)  {  throw  new  IllegalArgumentException( " ");  }  else  if(end  >  start)  {  throw  new  IllegalArgumentException( " ");  }	  if(end    >    start)    {    throw    new    IllegalArgumentException(       "       ");    }    else    if(end    >    start)    {    throw    new    IllegalArgumentException(       "       ");    }    	compilable	  [FE]  IllegalArgumentException	50	1
297	[BUG]  [BUGGY]  if(start  >  end)  {  throw  new  IllegalArgumentException( " ");  }  else  if(end  >  start)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  if(start  >  end)  {  throw  new  IllegalArgumentException( " ");  }  else  if(end  >  start)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Requires  start  <=  end.     ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	if(start  >  end)  {  throw  new  IllegalArgumentException( " ");  }  else  if(end  >  start)  {  throw  new  IllegalArgumentException( " ");  }	  if(end    >    start)    {    throw    new    IllegalArgumentException(       "       ");    }    else    if(end    >    start)    {    throw    new    IllegalArgumentException(       "       ");    }    	compilable	  [FE]  IllegalArgumentException	50	1
231	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  System.err.println( "Requires  begin  <=  end.   ");  [BUGGY]      throw  new  IllegalArgumentException(     "Requires  start  <=  end.     ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	System.err.println( "Requires  begin  <=  end.   ");	  	compilable	  [FE]  IllegalArgumentException	39	1
232	[BUG]  [BUGGY]  System.err.println( "Requires  begin  <=  end.   ");  [FE]  IllegalArgumentException  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  System.err.println( "Requires  begin  <=  end.   ");  [BUGGY]      throw  new  IllegalArgumentException(     "Requires  start  <=  end.     ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	System.err.println( "Requires  begin  <=  end.   ");	  	compilable	  [FE]  IllegalArgumentException	39	1
326	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  System.err.println( "Requires  start  <=  0   ");System.err.println( "Requires  start  <=  0   ");  [BUGGY]      throw  new  IllegalArgumentException(     "Requires  start  <=  end.     ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	System.err.println( "Requires  start  <=  0   ");System.err.println( "Requires  start  <=  0   ");	  	compilable	  [FE]  IllegalArgumentException	55	1
327	[BUG]  [BUGGY]  System.err.println( "Requires  start  <=  0   ");System.err.println( "Requires  start  <=  0   ");  [FE]  IllegalArgumentException  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  System.err.println( "Requires  start  <=  0   ");System.err.println( "Requires  start  <=  0   ");  [BUGGY]      throw  new  IllegalArgumentException(     "Requires  start  <=  end.     ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	System.err.println( "Requires  start  <=  0   ");System.err.println( "Requires  start  <=  0   ");	  	compilable	  [FE]  IllegalArgumentException	55	1
327	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  System.err.println( "Requires  start  <=  0   ");System.err.println( "Requires  start  <=  0.   ");  [BUGGY]      throw  new  IllegalArgumentException(     "Requires  start  <=  end.     ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	System.err.println( "Requires  start  <=  0   ");System.err.println( "Requires  start  <=  0.   ");	  	compilable	  [FE]  IllegalArgumentException	55	1
328	[BUG]  [BUGGY]  System.err.println( "Requires  start  <=  0   ");System.err.println( "Requires  start  <=  0.   ");  [FE]  IllegalArgumentException  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  System.err.println( "Requires  start  <=  0   ");System.err.println( "Requires  start  <=  0.   ");  [BUGGY]      throw  new  IllegalArgumentException(     "Requires  start  <=  end.     ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	System.err.println( "Requires  start  <=  0   ");System.err.println( "Requires  start  <=  0.   ");	  	compilable	  [FE]  IllegalArgumentException	55	1
13045	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      b.append(     "You  are  attempting  to  add  an  observation  for       ");  b.append(     "the  time  period       ");  b.append(item.getPeriod().toString());  b.append(     "  but  the  series  already  contains  an  observation     ");  b.append(     "  for  that  time  period.  Duplicates  are  not       ");  b.append(     "permitted.Try  using  the  addOrUpdate()  method.     ");  throw  new  SeriesException(b.toString());  }  }  }      [BUGGY]  if(item.getPeriod().equals( " "))  {  [BUGGY]        if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  removeAgedItems(false);//  remove  old  items  if  necessary,  but    if  (notify)  {  fireSeriesChanged();  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	534	534	1	add	if(item.getPeriod().equals( " "))  {	  if(this.data.size()    >    this.maximumItemCount)    {    	compilable	  [FE]  IllegalArgumentException	2175	1
13046	[BUG]  [BUGGY]  if(item.getPeriod().equals( " "))  {  [FE]  IllegalArgumentException  [CONTEXT]      b.append(     "You  are  attempting  to  add  an  observation  for       ");  b.append(     "the  time  period       ");  b.append(item.getPeriod().toString());  b.append(     "  but  the  series  already  contains  an  observation     ");  b.append(     "  for  that  time  period.  Duplicates  are  not       ");  b.append(     "permitted.Try  using  the  addOrUpdate()  method.     ");  throw  new  SeriesException(b.toString());  }  }  }      [BUGGY]  if(item.getPeriod().equals( " "))  {  [BUGGY]        if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  removeAgedItems(false);//  remove  old  items  if  necessary,  but    if  (notify)  {  fireSeriesChanged();  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	534	534	1	replace	if(item.getPeriod().equals( " "))  {	  if(this.data.size()    >    this.maximumItemCount)    {    	compilable	  [FE]  IllegalArgumentException	2175	1
261	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  System.err.println( "Requires  start  >=  0 ".length());  [BUGGY]      throw  new  IllegalArgumentException(     "Requires  start  <=  end.     ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	System.err.println( "Requires  start  >=  0 ".length());	  	compilable	  [FE]  IllegalArgumentException	44	1
262	[BUG]  [BUGGY]  System.err.println( "Requires  start  >=  0 ".length());  [FE]  IllegalArgumentException  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  System.err.println( "Requires  start  >=  0 ".length());  [BUGGY]      throw  new  IllegalArgumentException(     "Requires  start  <=  end.     ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	System.err.println( "Requires  start  >=  0 ".length());	  	compilable	  [FE]  IllegalArgumentException	44	1
116	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  System.err.println( "Failed  to  add  cloned  item. "  +  start  + ":  failed  to  add  cloned  item. ");  [BUGGY]      }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	System.err.println( "Failed  to  add  cloned  item. "  +  start  + ":  failed  to  add  cloned  item. ");	  System.err.println(   "Failed    to    add    cloned    item.   ");    	compilable	  [FE]  AssertionFailedError	20	1
117	[BUG]  [BUGGY]  System.err.println( "Failed  to  add  cloned  item. "  +  start  + ":  failed  to  add  cloned  item. ");  [FE]  AssertionFailedError  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  System.err.println( "Failed  to  add  cloned  item. "  +  start  + ":  failed  to  add  cloned  item. ");  [BUGGY]      }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	System.err.println( "Failed  to  add  cloned  item. "  +  start  + ":  failed  to  add  cloned  item. ");	  System.err.println(   "Failed    to    add    cloned    item.   ");    	compilable	  [FE]  AssertionFailedError	20	1
18189	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      public  void  removeAgedItems(boolean  notify)  {    if  (getItemCount()  >  1)  {      [BUGGY]  long  maximum  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();  [BUGGY]      long  latest  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();  boolean  removed  =  false;  while  ((latest  -  getTimePeriod(0).getSerialIndex())  >  this.maximumItemAge)  {  this.data.remove(0);  removed  =  true;  }  if  (removed  &&  notify)  {  fireSeriesChanged();  }  }  [CLASS]  TimeSeries  [METHOD]  removeAgedItems  [RETURN_TYPE]  void  boolean  notify  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  notify  removed  long  latest  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	739	739	1	add	long  maximum  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();	  	compilable	  [FE]  IllegalArgumentException	3032	1
18190	[BUG]  [BUGGY]  long  maximum  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();  [FE]  IllegalArgumentException  [CONTEXT]      public  void  removeAgedItems(boolean  notify)  {    if  (getItemCount()  >  1)  {      [BUGGY]  long  maximum  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();  [BUGGY]      long  latest  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();  boolean  removed  =  false;  while  ((latest  -  getTimePeriod(0).getSerialIndex())  >  this.maximumItemAge)  {  this.data.remove(0);  removed  =  true;  }  if  (removed  &&  notify)  {  fireSeriesChanged();  }  }  [CLASS]  TimeSeries  [METHOD]  removeAgedItems  [RETURN_TYPE]  void  boolean  notify  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  notify  removed  long  latest  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	739	739	1	replace	long  maximum  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();	  	compilable	  [FE]  IllegalArgumentException	3032	1
13880	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }      [BUGGY]  removeAgedItems(true);//  remove  old  items  if  required,  //  don't  notify  any,  because  that  //  happens  next  anyway...  [BUGGY]        if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	removeAgedItems(true);//  remove  old  items  if  required,  //  don't  notify  any,  because  that  //  happens  next  anyway...	  removeAgedItems(false);//    remove    old    items    if    needed,    //    don't    notify    anyone,    because    that    //    happens    next    anyway...    	compilable	  [FE]  IllegalArgumentException	2314	1
13881	[BUG]  [BUGGY]  removeAgedItems(true);//  remove  old  items  if  required,  //  don't  notify  any,  because  that  //  happens  next  anyway...  [FE]  IllegalArgumentException  [CONTEXT]      throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }      [BUGGY]  removeAgedItems(true);//  remove  old  items  if  required,  //  don't  notify  any,  because  that  //  happens  next  anyway...  [BUGGY]        if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	removeAgedItems(true);//  remove  old  items  if  required,  //  don't  notify  any,  because  that  //  happens  next  anyway...	  removeAgedItems(false);//    remove    old    items    if    needed,    //    don't    notify    anyone,    because    that    //    happens    next    anyway...    	compilable	  [FE]  IllegalArgumentException	2314	1
4580	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  if(domain  ==  null)  {  this.domain  =  domain;  }  else  if(range  ==  null)  {  this.range  =  range;  }  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	if(domain  ==  null)  {  this.domain  =  domain;  }  else  if(range  ==  null)  {  this.range  =  range;  }	  	compilable	  [FE]  IllegalArgumentException	764	1
4581	[BUG]  [BUGGY]  if(domain  ==  null)  {  this.domain  =  domain;  }  else  if(range  ==  null)  {  this.range  =  range;  }  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  if(domain  ==  null)  {  this.domain  =  domain;  }  else  if(range  ==  null)  {  this.range  =  range;  }  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	if(domain  ==  null)  {  this.domain  =  domain;  }  else  if(range  ==  null)  {  this.range  =  range;  }	  	compilable	  [FE]  IllegalArgumentException	764	1
4621	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  this.domain  =  domain;  if(range!=  null)  {  this.range  =  range;  }  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.domain  =  domain;  if(range!=  null)  {  this.range  =  range;  }	  this.domain    =    domain;    	compilable	  [FE]  IllegalArgumentException	771	1
4622	[BUG]  [BUGGY]  this.domain  =  domain;  if(range!=  null)  {  this.range  =  range;  }  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;      [BUGGY]  this.domain  =  domain;  if(range!=  null)  {  this.range  =  range;  }  [BUGGY]      this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.domain  =  domain;  if(range!=  null)  {  this.range  =  range;  }	  this.domain    =    domain;    	compilable	  [FE]  IllegalArgumentException	771	1
13880	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }      [BUGGY]  removeAgedItems(true);//  remove  old  items  if  needed,  //  don't  notify  anyone,  because  that  //  happens  next  anyway;  [BUGGY]        if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	removeAgedItems(true);//  remove  old  items  if  needed,  //  don't  notify  anyone,  because  that  //  happens  next  anyway;	  removeAgedItems(false);//    remove    old    items    if    needed,    //    don't    notify    anyone,    because    that    //    happens    next    anyway...    	compilable	  [FE]  IllegalArgumentException	2314	1
13881	[BUG]  [BUGGY]  removeAgedItems(true);//  remove  old  items  if  needed,  //  don't  notify  anyone,  because  that  //  happens  next  anyway;  [FE]  IllegalArgumentException  [CONTEXT]      throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }      [BUGGY]  removeAgedItems(true);//  remove  old  items  if  needed,  //  don't  notify  anyone,  because  that  //  happens  next  anyway;  [BUGGY]        if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	removeAgedItems(true);//  remove  old  items  if  needed,  //  don't  notify  anyone,  because  that  //  happens  next  anyway;	  removeAgedItems(false);//    remove    old    items    if    needed,    //    don't    notify    anyone,    because    that    //    happens    next    anyway...    	compilable	  [FE]  IllegalArgumentException	2314	1
4118	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);      [BUGGY]  this.data  =  new  java.util.ArrayList(80);  [BUGGY]      this.domain  =  domain;  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	add	this.data  =  new  java.util.ArrayList(80);	  this.data    =    new    java.util.ArrayList();    	compilable	  [FE]  IllegalArgumentException	687	1
4119	[BUG]  [BUGGY]  this.data  =  new  java.util.ArrayList(80);  [FE]  IllegalArgumentException  [CONTEXT]      public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);      [BUGGY]  this.data  =  new  java.util.ArrayList(80);  [BUGGY]      this.domain  =  domain;  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	replace	this.data  =  new  java.util.ArrayList(80);	  this.data    =    new    java.util.ArrayList();    	compilable	  [FE]  IllegalArgumentException	687	1
80	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  throw  new  IllegalArgumentException( "Requires  start  <<  0   ");  [BUGGY]      }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	throw  new  IllegalArgumentException( "Requires  start  <<  0   ");	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalArgumentException	14	1
81	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Requires  start  <<  0   ");  [FE]  IllegalArgumentException  [CONTEXT]      throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(     "Requires  start  >=  0.     ");  }  if  (end  <  start)  {      [BUGGY]  throw  new  IllegalArgumentException( "Requires  start  <<  0   ");  [BUGGY]      }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	throw  new  IllegalArgumentException( "Requires  start  <<  0   ");	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalArgumentException	14	1
14331	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]      }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  removeAgedItems(false);//  remove  old  items  if  necessary,  but        [BUGGY]  if(!added)  {  throw  new  SeriesException( "TimeSeriesDataItem  item  does  not  have  any  data  for  sale ");  }  [BUGGY]      fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	543	543	1	add	if(!added)  {  throw  new  SeriesException( "TimeSeriesDataItem  item  does  not  have  any  data  for  sale ");  }	  	compilable	  [FE]  IllegalArgumentException	2389	1
14332	[BUG]  [BUGGY]  if(!added)  {  throw  new  SeriesException( "TimeSeriesDataItem  item  does  not  have  any  data  for  sale ");  }  [FE]  IllegalArgumentException  [CONTEXT]      }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  removeAgedItems(false);//  remove  old  items  if  necessary,  but        [BUGGY]  if(!added)  {  throw  new  SeriesException( "TimeSeriesDataItem  item  does  not  have  any  data  for  sale ");  }  [BUGGY]      fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	543	543	1	replace	if(!added)  {  throw  new  SeriesException( "TimeSeriesDataItem  item  does  not  have  any  data  for  sale ");  }	  	compilable	  [FE]  IllegalArgumentException	2389	1
