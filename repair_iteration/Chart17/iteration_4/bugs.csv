bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	original_buggy	action	patch	execution_result	diagnosis	previous_bug_id	original_failing_test_number
83252	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  removeAgedItems(true);  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	removeAgedItems(true);	  //    deleteAgedItems(true);    	compilable	  [FE]  IllegalArgumentException	13876	1
83253	[BUG]  [BUGGY]  removeAgedItems(true);  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  removeAgedItems(true);  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	removeAgedItems(true);	  //    deleteAgedItems(true);    	compilable	  [FE]  IllegalArgumentException	13876	1
83234	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  removeAgedItems(false);  if(notify)  {  fireSeriesChanged();  }  ;  }?  b.toString()  :  null;  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	//  removeAgedItems(false);  if(notify)  {  fireSeriesChanged();  }  ;  }?  b.toString()  :  null;	  	compilable	  [FE]  IllegalArgumentException	13873	1
83235	[BUG]  [BUGGY]  //  removeAgedItems(false);  if(notify)  {  fireSeriesChanged();  }  ;  }?  b.toString()  :  null;  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  removeAgedItems(false);  if(notify)  {  fireSeriesChanged();  }  ;  }?  b.toString()  :  null;  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	//  removeAgedItems(false);  if(notify)  {  fireSeriesChanged();  }  ;  }?  b.toString()  :  null;	  	compilable	  [FE]  IllegalArgumentException	13873	1
83235	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  removeAgedItems(false);  if(notify)  {  fireSeriesChanged();  }  ;  }?  b.toString()  :  null;  }  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	//  removeAgedItems(false);  if(notify)  {  fireSeriesChanged();  }  ;  }?  b.toString()  :  null;  }	  	compilable	  [FE]  IllegalArgumentException	13873	1
83236	[BUG]  [BUGGY]  //  removeAgedItems(false);  if(notify)  {  fireSeriesChanged();  }  ;  }?  b.toString()  :  null;  }  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  removeAgedItems(false);  if(notify)  {  fireSeriesChanged();  }  ;  }?  b.toString()  :  null;  }  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	//  removeAgedItems(false);  if(notify)  {  fireSeriesChanged();  }  ;  }?  b.toString()  :  null;  }	  	compilable	  [FE]  IllegalArgumentException	13873	1
27518	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.maximumItemCount  =  2;  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.maximumItemCount  =  2;	  this.maximumItemCount    =    1;    	compilable	  [FE]  IllegalArgumentException	4587	1
27519	[BUG]  [BUGGY]  this.maximumItemCount  =  2;  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.maximumItemCount  =  2;  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.maximumItemCount  =  2;	  this.maximumItemCount    =    1;    	compilable	  [FE]  IllegalArgumentException	4587	1
27703	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.maximumItemCount  =  Math.max(this.maximumItemCount,  1);  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.maximumItemCount  =  Math.max(this.maximumItemCount,  1);	  this.maximumItemCount    =    Math.max(this.maximumItemCount,    0);    	compilable	  [FE]  IllegalArgumentException	4618	1
27704	[BUG]  [BUGGY]  this.maximumItemCount  =  Math.max(this.maximumItemCount,  1);  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.maximumItemCount  =  Math.max(this.maximumItemCount,  1);  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.maximumItemCount  =  Math.max(this.maximumItemCount,  1);	  this.maximumItemCount    =    Math.max(this.maximumItemCount,    0);    	compilable	  [FE]  IllegalArgumentException	4618	1
109131	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  void  removeAgedItems(boolean  notify)  {    if  (getItemCount()  >  1)  {        [BUGGY]  long  maximal  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();  [BUGGY]        long  latest  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();  boolean  removed  =  false;  while  ((latest  -  getTimePeriod(0).getSerialIndex())  >  this.maximumItemAge)  {  this.data.remove(0);  removed  =  true;  }  if  (removed  &&  notify)  {  fireSeriesChanged();  }  }  [CLASS]  TimeSeries  [METHOD]  removeAgedItems  [RETURN_TYPE]  void  boolean  notify  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  notify  removed  long  latest  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	739	739	1	add	long  maximal  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();	  	compilable	  [FE]  IllegalArgumentException	18189	1
109132	[BUG]  [BUGGY]  long  maximal  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();  [FE]  IllegalArgumentException  [CONTEXT]        public  void  removeAgedItems(boolean  notify)  {    if  (getItemCount()  >  1)  {        [BUGGY]  long  maximal  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();  [BUGGY]        long  latest  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();  boolean  removed  =  false;  while  ((latest  -  getTimePeriod(0).getSerialIndex())  >  this.maximumItemAge)  {  this.data.remove(0);  removed  =  true;  }  if  (removed  &&  notify)  {  fireSeriesChanged();  }  }  [CLASS]  TimeSeries  [METHOD]  removeAgedItems  [RETURN_TYPE]  void  boolean  notify  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  notify  removed  long  latest  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	739	739	1	replace	long  maximal  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();	  	compilable	  [FE]  IllegalArgumentException	18189	1
27518	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  if(domain  ==  null)  {  this.data  =  new  java.util.ArrayList();  }  else  {  this.domain  =  domain;  this.timePeriodClass  =  timePeriodClass;  this.maximumItemCount  =  0;  }  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	if(domain  ==  null)  {  this.data  =  new  java.util.ArrayList();  }  else  {  this.domain  =  domain;  this.timePeriodClass  =  timePeriodClass;  this.maximumItemCount  =  0;  }	  this.maximumItemCount    =    1;    	compilable	  [FE]  IllegalArgumentException	4587	1
27519	[BUG]  [BUGGY]  if(domain  ==  null)  {  this.data  =  new  java.util.ArrayList();  }  else  {  this.domain  =  domain;  this.timePeriodClass  =  timePeriodClass;  this.maximumItemCount  =  0;  }  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  if(domain  ==  null)  {  this.data  =  new  java.util.ArrayList();  }  else  {  this.domain  =  domain;  this.timePeriodClass  =  timePeriodClass;  this.maximumItemCount  =  0;  }  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	if(domain  ==  null)  {  this.data  =  new  java.util.ArrayList();  }  else  {  this.domain  =  domain;  this.timePeriodClass  =  timePeriodClass;  this.maximumItemCount  =  0;  }	  this.maximumItemCount    =    1;    	compilable	  [FE]  IllegalArgumentException	4587	1
78272	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        b.append(       "You  are  attempting  to  add  an  observation  for         ");  b.append(       "the  time  period         ");  b.append(item.getPeriod().toString());  b.append(       "  but  the  series  already  contains  an  observation       ");  b.append(       "  for  that  time  period.  Duplicates  are  not         ");  b.append(       "permitted.Try  using  the  addOrUpdate()  method.       ");  throw  new  SeriesException(b.toString());  }  }  }        [BUGGY]  if(item.getPeriod().equals( "/ "))  {  [BUGGY]          if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  removeAgedItems(false);//  remove  old  items  if  necessary,  but    if  (notify)  {  fireSeriesChanged();  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	534	534	1	add	if(item.getPeriod().equals( "/ "))  {	  if(this.data.size()    >    0)    {    	compilable	  [FE]  IllegalArgumentException	13046	1
78273	[BUG]  [BUGGY]  if(item.getPeriod().equals( "/ "))  {  [FE]  IllegalArgumentException  [CONTEXT]        b.append(       "You  are  attempting  to  add  an  observation  for         ");  b.append(       "the  time  period         ");  b.append(item.getPeriod().toString());  b.append(       "  but  the  series  already  contains  an  observation       ");  b.append(       "  for  that  time  period.  Duplicates  are  not         ");  b.append(       "permitted.Try  using  the  addOrUpdate()  method.       ");  throw  new  SeriesException(b.toString());  }  }  }        [BUGGY]  if(item.getPeriod().equals( "/ "))  {  [BUGGY]          if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  removeAgedItems(false);//  remove  old  items  if  necessary,  but    if  (notify)  {  fireSeriesChanged();  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	534	534	1	replace	if(item.getPeriod().equals( "/ "))  {	  if(this.data.size()    >    0)    {    	compilable	  [FE]  IllegalArgumentException	13046	1
67869	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        if  (count  ==  0)  {  this.data.add(item);  added  =  true;  }  else  {        [BUGGY]  RegularTimePeriod  second  =  getTimePeriod(getItemCount()  /  4);  [BUGGY]        if  (item.getPeriod().compareTo(last)  >  0)  {  this.data.add(item);  added  =  true;  }  else  {  int  index  =  Collections.binarySearch(this.data,  item);  if  (index  <  0)  {  this.data.add(-index  -  1,  item);  added  =  true;  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	511	511	1	add	RegularTimePeriod  second  =  getTimePeriod(getItemCount()  /  4);	  	compilable	  [FE]  IllegalArgumentException	11312	1
67870	[BUG]  [BUGGY]  RegularTimePeriod  second  =  getTimePeriod(getItemCount()  /  4);  [FE]  IllegalArgumentException  [CONTEXT]        if  (count  ==  0)  {  this.data.add(item);  added  =  true;  }  else  {        [BUGGY]  RegularTimePeriod  second  =  getTimePeriod(getItemCount()  /  4);  [BUGGY]        if  (item.getPeriod().compareTo(last)  >  0)  {  this.data.add(item);  added  =  true;  }  else  {  int  index  =  Collections.binarySearch(this.data,  item);  if  (index  <  0)  {  this.data.add(-index  -  1,  item);  added  =  true;  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	511	511	1	replace	RegularTimePeriod  second  =  getTimePeriod(getItemCount()  /  4);	  	compilable	  [FE]  IllegalArgumentException	11312	1
54483	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        b.append(       "You  are  trying  to  add  data  where  the  time  period  class         ");  b.append(       "is         ");  b.append(item.getPeriod().getClass().getName());  b.append(       ",  but  the  TimeSeries  is  expecting  an  instance  of         ");  b.append(this.timePeriodClass.getName());  b.append(       ".       ");  throw  new  SeriesException(b.toString());  }          [BUGGY]  boolean  adding  =  true;  [BUGGY]        int  count  =  getItemCount();  if  (count  ==  0)  {  this.data.add(item);  added  =  true;  }  else  {  RegularTimePeriod  last  =  getTimePeriod(getItemCount()  -  1);  if  (item.getPeriod().compareTo(last)  >  0)  {  this.data.add(item);  added  =  true;  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	504	504	1	add	boolean  adding  =  true;	  	compilable	  [FE]  IllegalArgumentException	9081	1
54484	[BUG]  [BUGGY]  boolean  adding  =  true;  [FE]  IllegalArgumentException  [CONTEXT]        b.append(       "You  are  trying  to  add  data  where  the  time  period  class         ");  b.append(       "is         ");  b.append(item.getPeriod().getClass().getName());  b.append(       ",  but  the  TimeSeries  is  expecting  an  instance  of         ");  b.append(this.timePeriodClass.getName());  b.append(       ".       ");  throw  new  SeriesException(b.toString());  }          [BUGGY]  boolean  adding  =  true;  [BUGGY]        int  count  =  getItemCount();  if  (count  ==  0)  {  this.data.add(item);  added  =  true;  }  else  {  RegularTimePeriod  last  =  getTimePeriod(getItemCount()  -  1);  if  (item.getPeriod().compareTo(last)  >  0)  {  this.data.add(item);  added  =  true;  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	504	504	1	replace	boolean  adding  =  true;	  	compilable	  [FE]  IllegalArgumentException	9081	1
662	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  System.err.println( "Failed  to  add  cloned  item...   ");  [BUGGY]        }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	System.err.println( "Failed  to  add  cloned  item...   ");	  System.err.println(   "Failed    to    add    cloned    item....   ");    	compilable	  [FE]  AssertionFailedError	111	1
663	[BUG]  [BUGGY]  System.err.println( "Failed  to  add  cloned  item...   ");  [FE]  AssertionFailedError  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  System.err.println( "Failed  to  add  cloned  item...   ");  [BUGGY]        }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	System.err.println( "Failed  to  add  cloned  item...   ");	  System.err.println(   "Failed    to    add    cloned    item....   ");    	compilable	  [FE]  AssertionFailedError	111	1
27693	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.maximumItemCount  =  maximumItemCount  /  1;  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.maximumItemCount  =  maximumItemCount  /  1;	  	compilable	  [FE]  IllegalArgumentException	4616	1
27694	[BUG]  [BUGGY]  this.maximumItemCount  =  maximumItemCount  /  1;  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.maximumItemCount  =  maximumItemCount  /  1;  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.maximumItemCount  =  maximumItemCount  /  1;	  	compilable	  [FE]  IllegalArgumentException	4616	1
698	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  System.err.println( ",Unable  to  add  cloned  item. ");  [BUGGY]        }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	System.err.println( ",Unable  to  add  cloned  item. ");	  System.err.println(   ",Failed    to    add    cloned    item.   ");    	compilable	  [FE]  AssertionFailedError	117	1
699	[BUG]  [BUGGY]  System.err.println( ",Unable  to  add  cloned  item. ");  [FE]  AssertionFailedError  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  System.err.println( ",Unable  to  add  cloned  item. ");  [BUGGY]        }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	System.err.println( ",Unable  to  add  cloned  item. ");	  System.err.println(   ",Failed    to    add    cloned    item.   ");    	compilable	  [FE]  AssertionFailedError	117	1
27518	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  if(this.domain!=  null)  {  this.domain  =  domain;  this.range  =  range;  }  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	if(this.domain!=  null)  {  this.domain  =  domain;  this.range  =  range;  }	  this.maximumItemCount    =    1;    	compilable	  [FE]  IllegalArgumentException	4587	1
27519	[BUG]  [BUGGY]  if(this.domain!=  null)  {  this.domain  =  domain;  this.range  =  range;  }  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  if(this.domain!=  null)  {  this.domain  =  domain;  this.range  =  range;  }  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	if(this.domain!=  null)  {  this.domain  =  domain;  this.range  =  range;  }	  this.maximumItemCount    =    1;    	compilable	  [FE]  IllegalArgumentException	4587	1
27950	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  if(domain!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  }  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	if(domain!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  }	  if(range!=    null)    {    this.range    =    domain;    }    else    {    this.range    =    range;    }    	compilable	  [FE]  IllegalArgumentException	4659	1
27951	[BUG]  [BUGGY]  if(domain!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  }  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  if(domain!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  }  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	if(domain!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  }	  if(range!=    null)    {    this.range    =    domain;    }    else    {    this.range    =    range;    }    	compilable	  [FE]  IllegalArgumentException	4659	1
27697	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  if(this.range!=  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  }  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	if(this.range!=  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  }	  if(this.domain!=    null)    {    this.range    =    domain;    }    else    {    this.range    =    range;    }    	compilable	  [FE]  IllegalArgumentException	4617	1
27698	[BUG]  [BUGGY]  if(this.range!=  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  }  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  if(this.range!=  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  }  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	if(this.range!=  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  }	  if(this.domain!=    null)    {    this.range    =    domain;    }    else    {    this.range    =    range;    }    	compilable	  [FE]  IllegalArgumentException	4617	1
83234	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  removeAgedItems(true);  if(notify)  {  fireSeriesChanged();  }  ;  }?  boolean  notify  =  b.toString()!=  this.data.get(item);  b.toString();  b.toString();  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	//  removeAgedItems(true);  if(notify)  {  fireSeriesChanged();  }  ;  }?  boolean  notify  =  b.toString()!=  this.data.get(item);  b.toString();  b.toString();	  	compilable	  [FE]  IllegalArgumentException	13873	1
83235	[BUG]  [BUGGY]  //  removeAgedItems(true);  if(notify)  {  fireSeriesChanged();  }  ;  }?  boolean  notify  =  b.toString()!=  this.data.get(item);  b.toString();  b.toString();  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  removeAgedItems(true);  if(notify)  {  fireSeriesChanged();  }  ;  }?  boolean  notify  =  b.toString()!=  this.data.get(item);  b.toString();  b.toString();  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	//  removeAgedItems(true);  if(notify)  {  fireSeriesChanged();  }  ;  }?  boolean  notify  =  b.toString()!=  this.data.get(item);  b.toString();  b.toString();	  	compilable	  [FE]  IllegalArgumentException	13873	1
83282	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  removeAgedItems(true);//  remove  old  items  if  required,  //  don't  notify  anyone,  because  that  //  happens  next  anyway;  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	removeAgedItems(true);//  remove  old  items  if  required,  //  don't  notify  anyone,  because  that  //  happens  next  anyway;	  removeAgedItems(true);//    remove    old    items    if    necessary,    //    don't    notify    anyone,    because    that    //    happens    next    anyway;    	compilable	  [FE]  IllegalArgumentException	13881	1
83283	[BUG]  [BUGGY]  removeAgedItems(true);//  remove  old  items  if  required,  //  don't  notify  anyone,  because  that  //  happens  next  anyway;  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  removeAgedItems(true);//  remove  old  items  if  required,  //  don't  notify  anyone,  because  that  //  happens  next  anyway;  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	removeAgedItems(true);//  remove  old  items  if  required,  //  don't  notify  anyone,  because  that  //  happens  next  anyway;	  removeAgedItems(true);//    remove    old    items    if    necessary,    //    don't    notify    anyone,    because    that    //    happens    next    anyway;    	compilable	  [FE]  IllegalArgumentException	13881	1
24710	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);        [BUGGY]  if(domain!=  null)  {  this.domain  =  domain;  this.range  =  range;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [BUGGY]        this.domain  =  domain;  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	add	if(domain!=  null)  {  this.domain  =  domain;  this.range  =  range;  this.maximumItemAge  =  Long.MAX_VALUE;  }	  if(this.domain!=    null)    {    this.domain    =    domain;    this.range    =    range;    this.maximumItemAge    =    Long.MAX_VALUE;    }    	compilable	  [FE]  IllegalArgumentException	4119	1
24711	[BUG]  [BUGGY]  if(domain!=  null)  {  this.domain  =  domain;  this.range  =  range;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);        [BUGGY]  if(domain!=  null)  {  this.domain  =  domain;  this.range  =  range;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [BUGGY]        this.domain  =  domain;  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	replace	if(domain!=  null)  {  this.domain  =  domain;  this.range  =  range;  this.maximumItemAge  =  Long.MAX_VALUE;  }	  if(this.domain!=    null)    {    this.domain    =    domain;    this.range    =    range;    this.maximumItemAge    =    Long.MAX_VALUE;    }    	compilable	  [FE]  IllegalArgumentException	4119	1
83246	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  removeAgedItems(false);  if(notify)  {  fireSeriesChanged();  }  ;  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	removeAgedItems(false);  if(notify)  {  fireSeriesChanged();  }  ;	  	compilable	  [FE]  IllegalArgumentException	13875	1
83247	[BUG]  [BUGGY]  removeAgedItems(false);  if(notify)  {  fireSeriesChanged();  }  ;  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  removeAgedItems(false);  if(notify)  {  fireSeriesChanged();  }  ;  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	removeAgedItems(false);  if(notify)  {  fireSeriesChanged();  }  ;	  	compilable	  [FE]  IllegalArgumentException	13875	1
27734	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.maximumItemCount  =  Integer.MIN_VALUE  -  1;  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.maximumItemCount  =  Integer.MIN_VALUE  -  1;	  if(this.range!=    null)    {    this.domain    =    domain;    }    else    {    this.range    =    range;    this.timePeriodClass    =    timePeriodClass;    }    	compilable	  [FE]  IllegalArgumentException	4623	1
27735	[BUG]  [BUGGY]  this.maximumItemCount  =  Integer.MIN_VALUE  -  1;  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.maximumItemCount  =  Integer.MIN_VALUE  -  1;  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.maximumItemCount  =  Integer.MIN_VALUE  -  1;	  if(this.range!=    null)    {    this.domain    =    domain;    }    else    {    this.range    =    range;    this.timePeriodClass    =    timePeriodClass;    }    	compilable	  [FE]  IllegalArgumentException	4623	1
517	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  throw  new  IllegalArgumentException(   "Requires  end  <=  0   ");  [BUGGY]        }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	throw  new  IllegalArgumentException(   "Requires  end  <=  0   ");	  throw    new    IllegalArgumentException(   "Requires    end    >>    0       ");    	compilable	  [FE]  IllegalArgumentException	87	1
518	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Requires  end  <=  0   ");  [FE]  IllegalArgumentException  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  throw  new  IllegalArgumentException(   "Requires  end  <=  0   ");  [BUGGY]        }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	throw  new  IllegalArgumentException(   "Requires  end  <=  0   ");	  throw    new    IllegalArgumentException(   "Requires    end    >>    0       ");    	compilable	  [FE]  IllegalArgumentException	87	1
27517	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  if(this.data  ==  null)  {  this.data  =  new  java.util.ArrayList();  }  else  {  this.domain  =  domain;  this.timePeriodClass  =  timePeriodClass;  this.maximumItemCount  =  0;  }  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	if(this.data  ==  null)  {  this.data  =  new  java.util.ArrayList();  }  else  {  this.domain  =  domain;  this.timePeriodClass  =  timePeriodClass;  this.maximumItemCount  =  0;  }	  this.maximumItemCount    =    1;    	compilable	  [FE]  IllegalArgumentException	4587	1
27518	[BUG]  [BUGGY]  if(this.data  ==  null)  {  this.data  =  new  java.util.ArrayList();  }  else  {  this.domain  =  domain;  this.timePeriodClass  =  timePeriodClass;  this.maximumItemCount  =  0;  }  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  if(this.data  ==  null)  {  this.data  =  new  java.util.ArrayList();  }  else  {  this.domain  =  domain;  this.timePeriodClass  =  timePeriodClass;  this.maximumItemCount  =  0;  }  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	if(this.data  ==  null)  {  this.data  =  new  java.util.ArrayList();  }  else  {  this.domain  =  domain;  this.timePeriodClass  =  timePeriodClass;  this.maximumItemCount  =  0;  }	  this.maximumItemCount    =    1;    	compilable	  [FE]  IllegalArgumentException	4587	1
27728	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.range  =  range;  if(this.range!=  null)  {  this.range  =  range;  }  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.range  =  range;  if(this.range!=  null)  {  this.range  =  range;  }	  if(this.range!=    null)    {    this.range    =    domain;    }    else    {    this.range    =    range;    this.timePeriodClass    =    timePeriodClass;    }    	compilable	  [FE]  IllegalArgumentException	4622	1
27729	[BUG]  [BUGGY]  this.range  =  range;  if(this.range!=  null)  {  this.range  =  range;  }  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.range  =  range;  if(this.range!=  null)  {  this.range  =  range;  }  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.range  =  range;  if(this.range!=  null)  {  this.range  =  range;  }	  if(this.range!=    null)    {    this.range    =    domain;    }    else    {    this.range    =    range;    this.timePeriodClass    =    timePeriodClass;    }    	compilable	  [FE]  IllegalArgumentException	4622	1
78272	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        b.append(       "You  are  attempting  to  add  an  observation  for         ");  b.append(       "the  time  period         ");  b.append(item.getPeriod().toString());  b.append(       "  but  the  series  already  contains  an  observation       ");  b.append(       "  for  that  time  period.  Duplicates  are  not         ");  b.append(       "permitted.Try  using  the  addOrUpdate()  method.       ");  throw  new  SeriesException(b.toString());  }  }  }        [BUGGY]  if(this.data.size()  >  1)  {  [BUGGY]          if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  removeAgedItems(false);//  remove  old  items  if  necessary,  but    if  (notify)  {  fireSeriesChanged();  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	534	534	1	add	if(this.data.size()  >  1)  {	  if(this.data.size()    >    0)    {    	compilable	  [FE]  IllegalArgumentException	13046	1
78273	[BUG]  [BUGGY]  if(this.data.size()  >  1)  {  [FE]  IllegalArgumentException  [CONTEXT]        b.append(       "You  are  attempting  to  add  an  observation  for         ");  b.append(       "the  time  period         ");  b.append(item.getPeriod().toString());  b.append(       "  but  the  series  already  contains  an  observation       ");  b.append(       "  for  that  time  period.  Duplicates  are  not         ");  b.append(       "permitted.Try  using  the  addOrUpdate()  method.       ");  throw  new  SeriesException(b.toString());  }  }  }        [BUGGY]  if(this.data.size()  >  1)  {  [BUGGY]          if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  removeAgedItems(false);//  remove  old  items  if  necessary,  but    if  (notify)  {  fireSeriesChanged();  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	534	534	1	replace	if(this.data.size()  >  1)  {	  if(this.data.size()    >    0)    {    	compilable	  [FE]  IllegalArgumentException	13046	1
1383	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  System.err.println(   "Requires  begin  <  end.   ");  [BUGGY]        throw  new  IllegalArgumentException(       "Requires  start  <=  end.       ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	System.err.println(   "Requires  begin  <  end.   ");	  	compilable	  [FE]  IllegalArgumentException	231	1
1384	[BUG]  [BUGGY]  System.err.println(   "Requires  begin  <  end.   ");  [FE]  IllegalArgumentException  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  System.err.println(   "Requires  begin  <  end.   ");  [BUGGY]        throw  new  IllegalArgumentException(       "Requires  start  <=  end.       ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	System.err.println(   "Requires  begin  <  end.   ");	  	compilable	  [FE]  IllegalArgumentException	231	1
1557	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  System.err.println(   "Requires  end  <<  start.   ");  [BUGGY]        throw  new  IllegalArgumentException(       "Requires  start  <=  end.       ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	System.err.println(   "Requires  end  <<  start.   ");	  	compilable	  [FE]  IllegalArgumentException	260	1
1558	[BUG]  [BUGGY]  System.err.println(   "Requires  end  <<  start.   ");  [FE]  IllegalArgumentException  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  System.err.println(   "Requires  end  <<  start.   ");  [BUGGY]        throw  new  IllegalArgumentException(       "Requires  start  <=  end.       ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	System.err.println(   "Requires  end  <<  start.   ");	  	compilable	  [FE]  IllegalArgumentException	260	1
83246	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  deleteAgedItems(false);  if(notify)  {  fireSeriesChanged();  }  &&  item.getPeriod()!=  this.data.get(item.getPeriod()))  {  this.data.remove(0);  }  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	//  deleteAgedItems(false);  if(notify)  {  fireSeriesChanged();  }  &&  item.getPeriod()!=  this.data.get(item.getPeriod()))  {  this.data.remove(0);  }  	  	compilable	  [FE]  IllegalArgumentException	13875	1
83247	[BUG]  [BUGGY]  //  deleteAgedItems(false);  if(notify)  {  fireSeriesChanged();  }  &&  item.getPeriod()!=  this.data.get(item.getPeriod()))  {  this.data.remove(0);  }    [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  deleteAgedItems(false);  if(notify)  {  fireSeriesChanged();  }  &&  item.getPeriod()!=  this.data.get(item.getPeriod()))  {  this.data.remove(0);  }  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	//  deleteAgedItems(false);  if(notify)  {  fireSeriesChanged();  }  &&  item.getPeriod()!=  this.data.get(item.getPeriod()))  {  this.data.remove(0);  }  	  	compilable	  [FE]  IllegalArgumentException	13875	1
83247	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  deleteAgedItems(false);  if(notify)  {  fireSeriesChanged();  }  &&  item.getDataItemCount()  >  this.maximumItemCount);  b.append(item.getPeriod().toString());  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	//  deleteAgedItems(false);  if(notify)  {  fireSeriesChanged();  }  &&  item.getDataItemCount()  >  this.maximumItemCount);  b.append(item.getPeriod().toString());	  	compilable	  [FE]  IllegalArgumentException	13875	1
83248	[BUG]  [BUGGY]  //  deleteAgedItems(false);  if(notify)  {  fireSeriesChanged();  }  &&  item.getDataItemCount()  >  this.maximumItemCount);  b.append(item.getPeriod().toString());  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  deleteAgedItems(false);  if(notify)  {  fireSeriesChanged();  }  &&  item.getDataItemCount()  >  this.maximumItemCount);  b.append(item.getPeriod().toString());  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	//  deleteAgedItems(false);  if(notify)  {  fireSeriesChanged();  }  &&  item.getDataItemCount()  >  this.maximumItemCount);  b.append(item.getPeriod().toString());	  	compilable	  [FE]  IllegalArgumentException	13875	1
27513	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  if(this.timePeriodClass!=  null)  {  this.domain  =  domain;  this.range  =  range;  }  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	if(this.timePeriodClass!=  null)  {  this.domain  =  domain;  this.range  =  range;  }	  	compilable	  [FE]  IllegalArgumentException	4586	1
27514	[BUG]  [BUGGY]  if(this.timePeriodClass!=  null)  {  this.domain  =  domain;  this.range  =  range;  }  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  if(this.timePeriodClass!=  null)  {  this.domain  =  domain;  this.range  =  range;  }  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	if(this.timePeriodClass!=  null)  {  this.domain  =  domain;  this.range  =  range;  }	  	compilable	  [FE]  IllegalArgumentException	4586	1
27733	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.range  =  domain;  if(this.domain!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  }  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.range  =  domain;  if(this.domain!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  }	  if(this.range!=    null)    {    this.domain    =    domain;    }    else    {    this.range    =    range;    this.timePeriodClass    =    timePeriodClass;    }    	compilable	  [FE]  IllegalArgumentException	4623	1
27734	[BUG]  [BUGGY]  this.range  =  domain;  if(this.domain!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  }  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.range  =  domain;  if(this.domain!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  }  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.range  =  domain;  if(this.domain!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  }	  if(this.range!=    null)    {    this.domain    =    domain;    }    else    {    this.range    =    range;    this.timePeriodClass    =    timePeriodClass;    }    	compilable	  [FE]  IllegalArgumentException	4623	1
27733	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  DEFAULT_RANGE_DESCRIPTION;  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  DEFAULT_RANGE_DESCRIPTION;	  if(this.range!=    null)    {    this.domain    =    domain;    }    else    {    this.range    =    range;    this.timePeriodClass    =    timePeriodClass;    }    	compilable	  [FE]  IllegalArgumentException	4623	1
27734	[BUG]  [BUGGY]  this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  DEFAULT_RANGE_DESCRIPTION;  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  DEFAULT_RANGE_DESCRIPTION;  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  DEFAULT_RANGE_DESCRIPTION;	  if(this.range!=    null)    {    this.domain    =    domain;    }    else    {    this.range    =    range;    this.timePeriodClass    =    timePeriodClass;    }    	compilable	  [FE]  IllegalArgumentException	4623	1
27512	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.maximumItemCount  =  2000;  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.maximumItemCount  =  2000;	  	compilable	  [FE]  IllegalArgumentException	4586	1
27513	[BUG]  [BUGGY]  this.maximumItemCount  =  2000;  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.maximumItemCount  =  2000;  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.maximumItemCount  =  2000;	  	compilable	  [FE]  IllegalArgumentException	4586	1
83281	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  removeAgedItems(false);//  remove  old  items  if  required,  //  don't  notify  any,  because  that  //  happens  next  anyway...  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	removeAgedItems(false);//  remove  old  items  if  required,  //  don't  notify  any,  because  that  //  happens  next  anyway...	  removeAgedItems(true);//    remove    old    items    if    necessary,    //    don't    notify    anyone,    because    that    //    happens    next    anyway;    	compilable	  [FE]  IllegalArgumentException	13881	1
83282	[BUG]  [BUGGY]  removeAgedItems(false);//  remove  old  items  if  required,  //  don't  notify  any,  because  that  //  happens  next  anyway...  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  removeAgedItems(false);//  remove  old  items  if  required,  //  don't  notify  any,  because  that  //  happens  next  anyway...  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	removeAgedItems(false);//  remove  old  items  if  required,  //  don't  notify  any,  because  that  //  happens  next  anyway...	  removeAgedItems(true);//    remove    old    items    if    necessary,    //    don't    notify    anyone,    because    that    //    happens    next    anyway;    	compilable	  [FE]  IllegalArgumentException	13881	1
83246	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  deleteAgedItems(true);  if(notify)  {  fireSeriesChanged();  }  &&  item.getPeriod().getTime().equals(this.timePeriodClass.getName()))  {  this.data.remove  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	//  deleteAgedItems(true);  if(notify)  {  fireSeriesChanged();  }  &&  item.getPeriod().getTime().equals(this.timePeriodClass.getName()))  {  this.data.remove	  	compilable	  [FE]  IllegalArgumentException	13875	1
83247	[BUG]  [BUGGY]  //  deleteAgedItems(true);  if(notify)  {  fireSeriesChanged();  }  &&  item.getPeriod().getTime().equals(this.timePeriodClass.getName()))  {  this.data.remove  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  deleteAgedItems(true);  if(notify)  {  fireSeriesChanged();  }  &&  item.getPeriod().getTime().equals(this.timePeriodClass.getName()))  {  this.data.remove  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	//  deleteAgedItems(true);  if(notify)  {  fireSeriesChanged();  }  &&  item.getPeriod().getTime().equals(this.timePeriodClass.getName()))  {  this.data.remove	  	compilable	  [FE]  IllegalArgumentException	13875	1
83247	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  deleteAgedItems(true);  if(notify)  {  fireSeriesChanged();  }  &&  item.getPeriod().getTime().equals(this.data.get(item.getPeriod()))  {  this.data.remove  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	//  deleteAgedItems(true);  if(notify)  {  fireSeriesChanged();  }  &&  item.getPeriod().getTime().equals(this.data.get(item.getPeriod()))  {  this.data.remove	  	compilable	  [FE]  IllegalArgumentException	13875	1
83248	[BUG]  [BUGGY]  //  deleteAgedItems(true);  if(notify)  {  fireSeriesChanged();  }  &&  item.getPeriod().getTime().equals(this.data.get(item.getPeriod()))  {  this.data.remove  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  deleteAgedItems(true);  if(notify)  {  fireSeriesChanged();  }  &&  item.getPeriod().getTime().equals(this.data.get(item.getPeriod()))  {  this.data.remove  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	//  deleteAgedItems(true);  if(notify)  {  fireSeriesChanged();  }  &&  item.getPeriod().getTime().equals(this.data.get(item.getPeriod()))  {  this.data.remove	  	compilable	  [FE]  IllegalArgumentException	13875	1
27733	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  if(this.domain!=  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  }  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	if(this.domain!=  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  }	  if(this.range!=    null)    {    this.domain    =    domain;    }    else    {    this.range    =    range;    this.timePeriodClass    =    timePeriodClass;    }    	compilable	  [FE]  IllegalArgumentException	4623	1
27734	[BUG]  [BUGGY]  if(this.domain!=  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  }  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  if(this.domain!=  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  }  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	if(this.domain!=  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  }	  if(this.range!=    null)    {    this.domain    =    domain;    }    else    {    this.range    =    range;    this.timePeriodClass    =    timePeriodClass;    }    	compilable	  [FE]  IllegalArgumentException	4623	1
698	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  System.err.println( "Failed  to  add  cloned  item.   "  +  start  + ",  failed  to  add  cloned  item. ");  [BUGGY]        }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	System.err.println( "Failed  to  add  cloned  item.   "  +  start  + ",  failed  to  add  cloned  item. ");	  System.err.println(   ",Failed    to    add    cloned    item.   ");    	compilable	  [FE]  AssertionFailedError	117	1
699	[BUG]  [BUGGY]  System.err.println( "Failed  to  add  cloned  item.   "  +  start  + ",  failed  to  add  cloned  item. ");  [FE]  AssertionFailedError  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  System.err.println( "Failed  to  add  cloned  item.   "  +  start  + ",  failed  to  add  cloned  item. ");  [BUGGY]        }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	System.err.println( "Failed  to  add  cloned  item.   "  +  start  + ",  failed  to  add  cloned  item. ");	  System.err.println(   ",Failed    to    add    cloned    item.   ");    	compilable	  [FE]  AssertionFailedError	117	1
24710	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);        [BUGGY]  this.data  =  new  java.util.ArrayList(100);  [BUGGY]        this.domain  =  domain;  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	add	this.data  =  new  java.util.ArrayList(100);	  if(this.domain!=    null)    {    this.domain    =    domain;    this.range    =    range;    this.maximumItemAge    =    Long.MAX_VALUE;    }    	compilable	  [FE]  IllegalArgumentException	4119	1
24711	[BUG]  [BUGGY]  this.data  =  new  java.util.ArrayList(100);  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);        [BUGGY]  this.data  =  new  java.util.ArrayList(100);  [BUGGY]        this.domain  =  domain;  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	replace	this.data  =  new  java.util.ArrayList(100);	  if(this.domain!=    null)    {    this.domain    =    domain;    this.range    =    range;    this.maximumItemAge    =    Long.MAX_VALUE;    }    	compilable	  [FE]  IllegalArgumentException	4119	1
1383	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  System.err.println(   "Requires  start  <  end.   ");  [BUGGY]        throw  new  IllegalArgumentException(       "Requires  start  <=  end.       ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	System.err.println(   "Requires  start  <  end.   ");	  	compilable	  [FE]  IllegalArgumentException	231	1
1384	[BUG]  [BUGGY]  System.err.println(   "Requires  start  <  end.   ");  [FE]  IllegalArgumentException  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  System.err.println(   "Requires  start  <  end.   ");  [BUGGY]        throw  new  IllegalArgumentException(       "Requires  start  <=  end.       ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	System.err.println(   "Requires  start  <  end.   ");	  	compilable	  [FE]  IllegalArgumentException	231	1
24698	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);        [BUGGY]  this.maximumItemCount  =  Integer.MIN_VALUE;  [BUGGY]        this.domain  =  domain;  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	add	this.maximumItemCount  =  Integer.MIN_VALUE;	  	compilable	  [FE]  IllegalArgumentException	4117	1
24699	[BUG]  [BUGGY]  this.maximumItemCount  =  Integer.MIN_VALUE;  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);        [BUGGY]  this.maximumItemCount  =  Integer.MIN_VALUE;  [BUGGY]        this.domain  =  domain;  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	replace	this.maximumItemCount  =  Integer.MIN_VALUE;	  	compilable	  [FE]  IllegalArgumentException	4117	1
23841	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);        [BUGGY]  this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  3;  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	add	this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  3;	  	compilable	  [FE]  IllegalArgumentException	3974	1
23842	[BUG]  [BUGGY]  this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  3;  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);        [BUGGY]  this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  3;  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	replace	this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  3;	  	compilable	  [FE]  IllegalArgumentException	3974	1
27728	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.range  =  range;  if(this.domain!=  null)  {  this.range  =  range;  }  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.range  =  range;  if(this.domain!=  null)  {  this.range  =  range;  }	  if(this.range!=    null)    {    this.range    =    domain;    }    else    {    this.range    =    range;    this.timePeriodClass    =    timePeriodClass;    }    	compilable	  [FE]  IllegalArgumentException	4622	1
27729	[BUG]  [BUGGY]  this.range  =  range;  if(this.domain!=  null)  {  this.range  =  range;  }  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.range  =  range;  if(this.domain!=  null)  {  this.range  =  range;  }  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.range  =  range;  if(this.domain!=  null)  {  this.range  =  range;  }	  if(this.range!=    null)    {    this.range    =    domain;    }    else    {    this.range    =    range;    this.timePeriodClass    =    timePeriodClass;    }    	compilable	  [FE]  IllegalArgumentException	4622	1
27728	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.maximumItemCount  =  Integer.MAX_VALUE  +  1;  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.maximumItemCount  =  Integer.MAX_VALUE  +  1;	  if(this.range!=    null)    {    this.range    =    domain;    }    else    {    this.range    =    range;    this.timePeriodClass    =    timePeriodClass;    }    	compilable	  [FE]  IllegalArgumentException	4622	1
27729	[BUG]  [BUGGY]  this.maximumItemCount  =  Integer.MAX_VALUE  +  1;  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.maximumItemCount  =  Integer.MAX_VALUE  +  1;  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.maximumItemCount  =  Integer.MAX_VALUE  +  1;	  if(this.range!=    null)    {    this.range    =    domain;    }    else    {    this.range    =    range;    this.timePeriodClass    =    timePeriodClass;    }    	compilable	  [FE]  IllegalArgumentException	4622	1
78272	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        b.append(       "You  are  attempting  to  add  an  observation  for         ");  b.append(       "the  time  period         ");  b.append(item.getPeriod().toString());  b.append(       "  but  the  series  already  contains  an  observation       ");  b.append(       "  for  that  time  period.  Duplicates  are  not         ");  b.append(       "permitted.Try  using  the  addOrUpdate()  method.       ");  throw  new  SeriesException(b.toString());  }  }  }        [BUGGY]  if(this.data.isEmpty())  {  [BUGGY]          if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  removeAgedItems(false);//  remove  old  items  if  necessary,  but    if  (notify)  {  fireSeriesChanged();  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	534	534	1	add	if(this.data.isEmpty())  {	  if(this.data.size()    >    0)    {    	compilable	  [FE]  IllegalArgumentException	13046	1
78273	[BUG]  [BUGGY]  if(this.data.isEmpty())  {  [FE]  IllegalArgumentException  [CONTEXT]        b.append(       "You  are  attempting  to  add  an  observation  for         ");  b.append(       "the  time  period         ");  b.append(item.getPeriod().toString());  b.append(       "  but  the  series  already  contains  an  observation       ");  b.append(       "  for  that  time  period.  Duplicates  are  not         ");  b.append(       "permitted.Try  using  the  addOrUpdate()  method.       ");  throw  new  SeriesException(b.toString());  }  }  }        [BUGGY]  if(this.data.isEmpty())  {  [BUGGY]          if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  removeAgedItems(false);//  remove  old  items  if  necessary,  but    if  (notify)  {  fireSeriesChanged();  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	534	534	1	replace	if(this.data.isEmpty())  {	  if(this.data.size()    >    0)    {    	compilable	  [FE]  IllegalArgumentException	13046	1
27733	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.domain  =  domain;  if(this.range!=  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  }  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.domain  =  domain;  if(this.range!=  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  }	  if(this.range!=    null)    {    this.domain    =    domain;    }    else    {    this.range    =    range;    this.timePeriodClass    =    timePeriodClass;    }    	compilable	  [FE]  IllegalArgumentException	4623	1
27734	[BUG]  [BUGGY]  this.domain  =  domain;  if(this.range!=  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  }  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.domain  =  domain;  if(this.range!=  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  }  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.domain  =  domain;  if(this.range!=  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  }	  if(this.range!=    null)    {    this.domain    =    domain;    }    else    {    this.range    =    range;    this.timePeriodClass    =    timePeriodClass;    }    	compilable	  [FE]  IllegalArgumentException	4623	1
27728	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.range  =  range  +  DEFAULT_DOMAIN_DESCRIPTION;  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.range  =  range  +  DEFAULT_DOMAIN_DESCRIPTION;	  if(this.range!=    null)    {    this.range    =    domain;    }    else    {    this.range    =    range;    this.timePeriodClass    =    timePeriodClass;    }    	compilable	  [FE]  IllegalArgumentException	4622	1
27729	[BUG]  [BUGGY]  this.range  =  range  +  DEFAULT_DOMAIN_DESCRIPTION;  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.range  =  range  +  DEFAULT_DOMAIN_DESCRIPTION;  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.range  =  range  +  DEFAULT_DOMAIN_DESCRIPTION;	  if(this.range!=    null)    {    this.range    =    domain;    }    else    {    this.range    =    range;    this.timePeriodClass    =    timePeriodClass;    }    	compilable	  [FE]  IllegalArgumentException	4622	1
698	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  System.err.println( "Unable  to  add  cloned  item. "  +  start  + "  or  cloned  item. ");  [BUGGY]        }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	System.err.println( "Unable  to  add  cloned  item. "  +  start  + "  or  cloned  item. ");	  System.err.println(   ",Failed    to    add    cloned    item.   ");    	compilable	  [FE]  AssertionFailedError	117	1
699	[BUG]  [BUGGY]  System.err.println( "Unable  to  add  cloned  item. "  +  start  + "  or  cloned  item. ");  [FE]  AssertionFailedError  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  System.err.println( "Unable  to  add  cloned  item. "  +  start  + "  or  cloned  item. ");  [BUGGY]        }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	System.err.println( "Unable  to  add  cloned  item. "  +  start  + "  or  cloned  item. ");	  System.err.println(   ",Failed    to    add    cloned    item.   ");    	compilable	  [FE]  AssertionFailedError	117	1
692	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  System.err.println( "Unable  to  add  cloned  item.... ");  [BUGGY]        }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	System.err.println( "Unable  to  add  cloned  item.... ");	  	compilable	  [FE]  IllegalArgumentException	116	1
693	[BUG]  [BUGGY]  System.err.println( "Unable  to  add  cloned  item.... ");  [FE]  IllegalArgumentException  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  System.err.println( "Unable  to  add  cloned  item.... ");  [BUGGY]        }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	System.err.println( "Unable  to  add  cloned  item.... ");	  	compilable	  [FE]  IllegalArgumentException	116	1
83234	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  removeAgedItems(false);  b.addChangeListener(this);  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	//  removeAgedItems(false);  b.addChangeListener(this);	  	compilable	  [FE]  IllegalArgumentException	13873	1
83235	[BUG]  [BUGGY]  //  removeAgedItems(false);  b.addChangeListener(this);  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  removeAgedItems(false);  b.addChangeListener(this);  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	//  removeAgedItems(false);  b.addChangeListener(this);	  	compilable	  [FE]  IllegalArgumentException	13873	1
83235	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  removeAgedItems(false);  this.data.add(item);  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	//  removeAgedItems(false);  this.data.add(item);	  	compilable	  [FE]  IllegalArgumentException	13873	1
83236	[BUG]  [BUGGY]  //  removeAgedItems(false);  this.data.add(item);  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  removeAgedItems(false);  this.data.add(item);  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	//  removeAgedItems(false);  this.data.add(item);	  	compilable	  [FE]  IllegalArgumentException	13873	1
27693	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.maximumItemCount  =  -  1;  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.maximumItemCount  =  -  1;	  	compilable	  [FE]  IllegalArgumentException	4616	1
27694	[BUG]  [BUGGY]  this.maximumItemCount  =  -  1;  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.maximumItemCount  =  -  1;  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.maximumItemCount  =  -  1;	  	compilable	  [FE]  IllegalArgumentException	4616	1
111753	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  void  removeAgedItems(boolean  notify)  {    if  (getItemCount()  >  1)  {  long  latest  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();        [BUGGY]  long  maximal  =  getTimePeriod(getItemCount()  /  2).getSerialIndex();  [BUGGY]        boolean  removed  =  false;  while  ((latest  -  getTimePeriod(0).getSerialIndex())  >  this.maximumItemAge)  {  this.data.remove(0);  removed  =  true;  }  if  (removed  &&  notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  removeAgedItems  [RETURN_TYPE]  void  boolean  notify  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  notify  removed  long  latest  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	740	740	1	add	long  maximal  =  getTimePeriod(getItemCount()  /  2).getSerialIndex();	  	compilable	  [FE]  IllegalArgumentException	18626	1
111754	[BUG]  [BUGGY]  long  maximal  =  getTimePeriod(getItemCount()  /  2).getSerialIndex();  [FE]  IllegalArgumentException  [CONTEXT]        public  void  removeAgedItems(boolean  notify)  {    if  (getItemCount()  >  1)  {  long  latest  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();        [BUGGY]  long  maximal  =  getTimePeriod(getItemCount()  /  2).getSerialIndex();  [BUGGY]        boolean  removed  =  false;  while  ((latest  -  getTimePeriod(0).getSerialIndex())  >  this.maximumItemAge)  {  this.data.remove(0);  removed  =  true;  }  if  (removed  &&  notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  removeAgedItems  [RETURN_TYPE]  void  boolean  notify  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  notify  removed  long  latest  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	740	740	1	replace	long  maximal  =  getTimePeriod(getItemCount()  /  2).getSerialIndex();	  	compilable	  [FE]  IllegalArgumentException	18626	1
24699	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);        [BUGGY]  this.maximumItemAge  =  Long.MAX_VALUE;  [BUGGY]        this.domain  =  domain;  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	add	this.maximumItemAge  =  Long.MAX_VALUE;	  	compilable	  [FE]  IllegalArgumentException	4117	1
24700	[BUG]  [BUGGY]  this.maximumItemAge  =  Long.MAX_VALUE;  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);        [BUGGY]  this.maximumItemAge  =  Long.MAX_VALUE;  [BUGGY]        this.domain  =  domain;  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	replace	this.maximumItemAge  =  Long.MAX_VALUE;	  	compilable	  [FE]  IllegalArgumentException	4117	1
1963	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  System.err.println( "Requires  start  %  2  exceeded  0 ");  [BUGGY]        throw  new  IllegalArgumentException(       "Requires  start  <=  end.       ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	System.err.println( "Requires  start  %  2  exceeded  0 ");	  System.err.println(   "Requires    start    <    0       ");    	compilable	  [FE]  AssertionFailedError	328	1
1964	[BUG]  [BUGGY]  System.err.println( "Requires  start  %  2  exceeded  0 ");  [FE]  AssertionFailedError  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  System.err.println( "Requires  start  %  2  exceeded  0 ");  [BUGGY]        throw  new  IllegalArgumentException(       "Requires  start  <=  end.       ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	System.err.println( "Requires  start  %  2  exceeded  0 ");	  System.err.println(   "Requires    start    <    0       ");    	compilable	  [FE]  AssertionFailedError	328	1
1562	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  System.err.println( "Requires  start  <=  0   ".length());  [BUGGY]        throw  new  IllegalArgumentException(       "Requires  start  <=  end.       ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	System.err.println( "Requires  start  <=  0   ".length());	  System.err.println(   "Requires    start    <=    0.       ");    	compilable	  [FE]  AssertionFailedError	261	1
1563	[BUG]  [BUGGY]  System.err.println( "Requires  start  <=  0   ".length());  [FE]  AssertionFailedError  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  System.err.println( "Requires  start  <=  0   ".length());  [BUGGY]        throw  new  IllegalArgumentException(       "Requires  start  <=  end.       ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	System.err.println( "Requires  start  <=  0   ".length());	  System.err.println(   "Requires    start    <=    0.       ");    	compilable	  [FE]  AssertionFailedError	261	1
1557	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  System.err.println( "Requires  start  <=  0,   ");  [BUGGY]        throw  new  IllegalArgumentException(       "Requires  start  <=  end.       ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	System.err.println( "Requires  start  <=  0,   ");	  	compilable	  [FE]  IllegalArgumentException	260	1
1558	[BUG]  [BUGGY]  System.err.println( "Requires  start  <=  0,   ");  [FE]  IllegalArgumentException  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  System.err.println( "Requires  start  <=  0,   ");  [BUGGY]        throw  new  IllegalArgumentException(       "Requires  start  <=  end.       ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	System.err.println( "Requires  start  <=  0,   ");	  	compilable	  [FE]  IllegalArgumentException	260	1
83240	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  removedAgedItems(false);  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	//  removedAgedItems(false);	  //    removeAgedItems(true);    	compilable	  [FE]  IllegalArgumentException	13874	1
83241	[BUG]  [BUGGY]  //  removedAgedItems(false);  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  removedAgedItems(false);  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	//  removedAgedItems(false);	  //    removeAgedItems(true);    	compilable	  [FE]  IllegalArgumentException	13874	1
27727	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.range  =  domain;  if(this.range!=  null)  {  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  }  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.range  =  domain;  if(this.range!=  null)  {  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  }	  if(this.range!=    null)    {    this.range    =    domain;    }    else    {    this.range    =    range;    this.timePeriodClass    =    timePeriodClass;    }    	compilable	  [FE]  IllegalArgumentException	4622	1
27728	[BUG]  [BUGGY]  this.range  =  domain;  if(this.range!=  null)  {  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  }  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.range  =  domain;  if(this.range!=  null)  {  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  }  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.range  =  domain;  if(this.range!=  null)  {  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  }	  if(this.range!=    null)    {    this.range    =    domain;    }    else    {    this.range    =    range;    this.timePeriodClass    =    timePeriodClass;    }    	compilable	  [FE]  IllegalArgumentException	4622	1
83240	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  removedAllAgedItems(false);  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	//  removedAllAgedItems(false);	  //    removeAgedItems(true);    	compilable	  [FE]  IllegalArgumentException	13874	1
83241	[BUG]  [BUGGY]  //  removedAllAgedItems(false);  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  removedAllAgedItems(false);  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	//  removedAllAgedItems(false);	  //    removeAgedItems(true);    	compilable	  [FE]  IllegalArgumentException	13874	1
67904	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        if  (count  ==  0)  {  this.data.add(item);  added  =  true;  }  else  {        [BUGGY]  RegularTimePeriod  first  =  getTimePeriod(getItemCount()  /  3);  [BUGGY]        if  (item.getPeriod().compareTo(last)  >  0)  {  this.data.add(item);  added  =  true;  }  else  {  int  index  =  Collections.binarySearch(this.data,  item);  if  (index  <  0)  {  this.data.add(-index  -  1,  item);  added  =  true;  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	511	511	1	add	RegularTimePeriod  first  =  getTimePeriod(getItemCount()  /  3);	  	compilable	  [FE]  IllegalArgumentException	11318	1
67905	[BUG]  [BUGGY]  RegularTimePeriod  first  =  getTimePeriod(getItemCount()  /  3);  [FE]  IllegalArgumentException  [CONTEXT]        if  (count  ==  0)  {  this.data.add(item);  added  =  true;  }  else  {        [BUGGY]  RegularTimePeriod  first  =  getTimePeriod(getItemCount()  /  3);  [BUGGY]        if  (item.getPeriod().compareTo(last)  >  0)  {  this.data.add(item);  added  =  true;  }  else  {  int  index  =  Collections.binarySearch(this.data,  item);  if  (index  <  0)  {  this.data.add(-index  -  1,  item);  added  =  true;  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	511	511	1	replace	RegularTimePeriod  first  =  getTimePeriod(getItemCount()  /  3);	  	compilable	  [FE]  IllegalArgumentException	11318	1
24710	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);        [BUGGY]  this.domain  =  domain;  this.range  =  range;  this.maximumItemAge  =  Long.MAX_VALUE;  [BUGGY]        this.domain  =  domain;  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	add	this.domain  =  domain;  this.range  =  range;  this.maximumItemAge  =  Long.MAX_VALUE;	  if(this.domain!=    null)    {    this.domain    =    domain;    this.range    =    range;    this.maximumItemAge    =    Long.MAX_VALUE;    }    	compilable	  [FE]  IllegalArgumentException	4119	1
24711	[BUG]  [BUGGY]  this.domain  =  domain;  this.range  =  range;  this.maximumItemAge  =  Long.MAX_VALUE;  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);        [BUGGY]  this.domain  =  domain;  this.range  =  range;  this.maximumItemAge  =  Long.MAX_VALUE;  [BUGGY]        this.domain  =  domain;  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	replace	this.domain  =  domain;  this.range  =  range;  this.maximumItemAge  =  Long.MAX_VALUE;	  if(this.domain!=    null)    {    this.domain    =    domain;    this.range    =    range;    this.maximumItemAge    =    Long.MAX_VALUE;    }    	compilable	  [FE]  IllegalArgumentException	4119	1
476	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  throw  new  IllegalArgumentException( "Requires  end  <<  0   ");  [BUGGY]        }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	throw  new  IllegalArgumentException( "Requires  end  <<  0   ");	  throw    new    IllegalArgumentException(   "Requires    end    >=    0.       ");    	compilable	  [FE]  IllegalArgumentException	80	1
477	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Requires  end  <<  0   ");  [FE]  IllegalArgumentException  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  throw  new  IllegalArgumentException( "Requires  end  <<  0   ");  [BUGGY]        }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	throw  new  IllegalArgumentException( "Requires  end  <<  0   ");	  throw    new    IllegalArgumentException(   "Requires    end    >=    0.       ");    	compilable	  [FE]  IllegalArgumentException	80	1
27733	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.domain  =  DEFAULT_DOMAIN_DESCRIPTION;  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.domain  =  DEFAULT_DOMAIN_DESCRIPTION;	  if(this.range!=    null)    {    this.domain    =    domain;    }    else    {    this.range    =    range;    this.timePeriodClass    =    timePeriodClass;    }    	compilable	  [FE]  IllegalArgumentException	4623	1
27734	[BUG]  [BUGGY]  this.domain  =  DEFAULT_DOMAIN_DESCRIPTION;  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.domain  =  DEFAULT_DOMAIN_DESCRIPTION;  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.domain  =  DEFAULT_DOMAIN_DESCRIPTION;	  if(this.range!=    null)    {    this.domain    =    domain;    }    else    {    this.range    =    range;    this.timePeriodClass    =    timePeriodClass;    }    	compilable	  [FE]  IllegalArgumentException	4623	1
83282	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  removeAgedItems(false);//  remove  old  items  if  required,  //  don't  notify  any,  because  that  //  happens  next  anyway;  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	removeAgedItems(false);//  remove  old  items  if  required,  //  don't  notify  any,  because  that  //  happens  next  anyway;	  removeAgedItems(true);//    remove    old    items    if    necessary,    //    don't    notify    anyone,    because    that    //    happens    next    anyway;    	compilable	  [FE]  IllegalArgumentException	13881	1
83283	[BUG]  [BUGGY]  removeAgedItems(false);//  remove  old  items  if  required,  //  don't  notify  any,  because  that  //  happens  next  anyway;  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  removeAgedItems(false);//  remove  old  items  if  required,  //  don't  notify  any,  because  that  //  happens  next  anyway;  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	removeAgedItems(false);//  remove  old  items  if  required,  //  don't  notify  any,  because  that  //  happens  next  anyway;	  removeAgedItems(true);//    remove    old    items    if    necessary,    //    don't    notify    anyone,    because    that    //    happens    next    anyway;    	compilable	  [FE]  IllegalArgumentException	13881	1
24704	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);        [BUGGY]  if(this.domain!=  null)  {  this.domain  =  domain;  this.range  =  range;  this.maximumItemCount  =  Integer.MAX_VALUE;  }  [BUGGY]        this.domain  =  domain;  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	add	if(this.domain!=  null)  {  this.domain  =  domain;  this.range  =  range;  this.maximumItemCount  =  Integer.MAX_VALUE;  }	  this.maximumItemCount    =    Integer.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException	4118	1
24705	[BUG]  [BUGGY]  if(this.domain!=  null)  {  this.domain  =  domain;  this.range  =  range;  this.maximumItemCount  =  Integer.MAX_VALUE;  }  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);        [BUGGY]  if(this.domain!=  null)  {  this.domain  =  domain;  this.range  =  range;  this.maximumItemCount  =  Integer.MAX_VALUE;  }  [BUGGY]        this.domain  =  domain;  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	replace	if(this.domain!=  null)  {  this.domain  =  domain;  this.range  =  range;  this.maximumItemCount  =  Integer.MAX_VALUE;  }	  this.maximumItemCount    =    Integer.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException	4118	1
27734	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.maximumItemCount  =  Integer.MIN_VALUE  +  1;  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.maximumItemCount  =  Integer.MIN_VALUE  +  1;	  if(this.range!=    null)    {    this.domain    =    domain;    }    else    {    this.range    =    range;    this.timePeriodClass    =    timePeriodClass;    }    	compilable	  [FE]  IllegalArgumentException	4623	1
27735	[BUG]  [BUGGY]  this.maximumItemCount  =  Integer.MIN_VALUE  +  1;  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.maximumItemCount  =  Integer.MIN_VALUE  +  1;  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.maximumItemCount  =  Integer.MIN_VALUE  +  1;	  if(this.range!=    null)    {    this.domain    =    domain;    }    else    {    this.range    =    range;    this.timePeriodClass    =    timePeriodClass;    }    	compilable	  [FE]  IllegalArgumentException	4623	1
27704	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.maximumItemCount  =  Math.max(this.maximumItemCount,  10);  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.maximumItemCount  =  Math.max(this.maximumItemCount,  10);	  this.maximumItemCount    =    Math.max(this.maximumItemCount,    0);    	compilable	  [FE]  IllegalArgumentException	4618	1
27705	[BUG]  [BUGGY]  this.maximumItemCount  =  Math.max(this.maximumItemCount,  10);  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.maximumItemCount  =  Math.max(this.maximumItemCount,  10);  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.maximumItemCount  =  Math.max(this.maximumItemCount,  10);	  this.maximumItemCount    =    Math.max(this.maximumItemCount,    0);    	compilable	  [FE]  IllegalArgumentException	4618	1
27693	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.maximumItemCount  =  this.maximumItemCount  +  1;  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.maximumItemCount  =  this.maximumItemCount  +  1;	  	compilable	  [FE]  IllegalArgumentException	4616	1
27694	[BUG]  [BUGGY]  this.maximumItemCount  =  this.maximumItemCount  +  1;  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.maximumItemCount  =  this.maximumItemCount  +  1;  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.maximumItemCount  =  this.maximumItemCount  +  1;	  	compilable	  [FE]  IllegalArgumentException	4616	1
83234	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  removeAgedItems(true);  b.addChangeListener(this);  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	//  removeAgedItems(true);  b.addChangeListener(this);	  	compilable	  [FE]  IllegalArgumentException	13873	1
83235	[BUG]  [BUGGY]  //  removeAgedItems(true);  b.addChangeListener(this);  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  removeAgedItems(true);  b.addChangeListener(this);  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	//  removeAgedItems(true);  b.addChangeListener(this);	  	compilable	  [FE]  IllegalArgumentException	13873	1
83235	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  removeAgedItems(true);  this.data.add(item);  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	//  removeAgedItems(true);  this.data.add(item);	  	compilable	  [FE]  IllegalArgumentException	13873	1
83236	[BUG]  [BUGGY]  //  removeAgedItems(true);  this.data.add(item);  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  removeAgedItems(true);  this.data.add(item);  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	//  removeAgedItems(true);  this.data.add(item);	  	compilable	  [FE]  IllegalArgumentException	13873	1
83246	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  deleteAgedItems(true);  b.addChangeListener(this);  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	//  deleteAgedItems(true);  b.addChangeListener(this);	  	compilable	  [FE]  IllegalArgumentException	13875	1
83247	[BUG]  [BUGGY]  //  deleteAgedItems(true);  b.addChangeListener(this);  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  deleteAgedItems(true);  b.addChangeListener(this);  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	//  deleteAgedItems(true);  b.addChangeListener(this);	  	compilable	  [FE]  IllegalArgumentException	13875	1
83247	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  deleteAgedItems(true);  this.data.add(item);  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	//  deleteAgedItems(true);  this.data.add(item);	  	compilable	  [FE]  IllegalArgumentException	13875	1
83248	[BUG]  [BUGGY]  //  deleteAgedItems(true);  this.data.add(item);  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  deleteAgedItems(true);  this.data.add(item);  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	//  deleteAgedItems(true);  this.data.add(item);	  	compilable	  [FE]  IllegalArgumentException	13875	1
27722	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.maximumItemAge  =  Long.MAX_VALUE;  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.maximumItemAge  =  Long.MAX_VALUE;	  	compilable	  [FE]  IllegalArgumentException	4621	1
27723	[BUG]  [BUGGY]  this.maximumItemAge  =  Long.MAX_VALUE;  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.maximumItemAge  =  Long.MAX_VALUE;  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.maximumItemAge  =  Long.MAX_VALUE;	  	compilable	  [FE]  IllegalArgumentException	4621	1
24704	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);        [BUGGY]  this.maximumItemCount  =  Integer.MAX_VALUE  +  1;  [BUGGY]        this.domain  =  domain;  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	add	this.maximumItemCount  =  Integer.MAX_VALUE  +  1;	  this.maximumItemCount    =    Integer.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException	4118	1
24705	[BUG]  [BUGGY]  this.maximumItemCount  =  Integer.MAX_VALUE  +  1;  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);        [BUGGY]  this.maximumItemCount  =  Integer.MAX_VALUE  +  1;  [BUGGY]        this.domain  =  domain;  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	replace	this.maximumItemCount  =  Integer.MAX_VALUE  +  1;	  this.maximumItemCount    =    Integer.MAX_VALUE;    	compilable	  [FE]  IllegalArgumentException	4118	1
482	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  throw  new  IllegalArgumentException( "Requires  end  -  start  +  1 ");  [BUGGY]        }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	throw  new  IllegalArgumentException( "Requires  end  -  start  +  1 ");	  throw    new    IllegalArgumentException(   "Requires    end    -    start    +   ");    	compilable	  [FE]  IllegalArgumentException	81	1
483	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Requires  end  -  start  +  1 ");  [FE]  IllegalArgumentException  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  throw  new  IllegalArgumentException( "Requires  end  -  start  +  1 ");  [BUGGY]        }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	throw  new  IllegalArgumentException( "Requires  end  -  start  +  1 ");	  throw    new    IllegalArgumentException(   "Requires    end    -    start    +   ");    	compilable	  [FE]  IllegalArgumentException	81	1
83246	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  deleteAgedItems(false);  b.addChangeListener(this);  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	//  deleteAgedItems(false);  b.addChangeListener(this);	  	compilable	  [FE]  IllegalArgumentException	13875	1
83247	[BUG]  [BUGGY]  //  deleteAgedItems(false);  b.addChangeListener(this);  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  deleteAgedItems(false);  b.addChangeListener(this);  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	//  deleteAgedItems(false);  b.addChangeListener(this);	  	compilable	  [FE]  IllegalArgumentException	13875	1
27734	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  1;  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  1;	  if(this.range!=    null)    {    this.domain    =    domain;    }    else    {    this.range    =    range;    this.timePeriodClass    =    timePeriodClass;    }    	compilable	  [FE]  IllegalArgumentException	4623	1
27735	[BUG]  [BUGGY]  this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  1;  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  1;  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  1;	  if(this.range!=    null)    {    this.domain    =    domain;    }    else    {    this.range    =    range;    this.timePeriodClass    =    timePeriodClass;    }    	compilable	  [FE]  IllegalArgumentException	4623	1
83247	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  deleteAgedItems(false);  this.data.add(item);  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	//  deleteAgedItems(false);  this.data.add(item);	  	compilable	  [FE]  IllegalArgumentException	13875	1
83248	[BUG]  [BUGGY]  //  deleteAgedItems(false);  this.data.add(item);  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  deleteAgedItems(false);  this.data.add(item);  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	//  deleteAgedItems(false);  this.data.add(item);	  	compilable	  [FE]  IllegalArgumentException	13875	1
27723	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  if(this.domain!=  null)  {  this.domain  =  range;  }  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	if(this.domain!=  null)  {  this.domain  =  range;  }	  	compilable	  [FE]  IllegalArgumentException	4621	1
27724	[BUG]  [BUGGY]  if(this.domain!=  null)  {  this.domain  =  range;  }  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  if(this.domain!=  null)  {  this.domain  =  range;  }  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	if(this.domain!=  null)  {  this.domain  =  range;  }	  	compilable	  [FE]  IllegalArgumentException	4621	1
110642	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  void  removeAgedItems(boolean  notify)  {    if  (getItemCount()  >  1)  {  long  latest  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();        [BUGGY]  boolean  removed  =(this.data!=  null)&&(this.data.size()  >  this.maximumItemAge  +  1);  [BUGGY]        while  ((latest  -  getTimePeriod(0).getSerialIndex())  >  this.maximumItemAge)  {  this.data.remove(0);  removed  =  true;  }  if  (removed  &&  notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  removeAgedItems  [RETURN_TYPE]  void  boolean  notify  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  notify  removed  long  latest  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	740	740	1	add	boolean  removed  =(this.data!=  null)&&(this.data.size()  >  this.maximumItemAge  +  1);	  boolean    removed    =(this.data!=    null)&&(this.data.size()    >    this.maximumItemAge);    	compilable	  [FE]  IllegalArgumentException	18441	1
110643	[BUG]  [BUGGY]  boolean  removed  =(this.data!=  null)&&(this.data.size()  >  this.maximumItemAge  +  1);  [FE]  IllegalArgumentException  [CONTEXT]        public  void  removeAgedItems(boolean  notify)  {    if  (getItemCount()  >  1)  {  long  latest  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();        [BUGGY]  boolean  removed  =(this.data!=  null)&&(this.data.size()  >  this.maximumItemAge  +  1);  [BUGGY]        while  ((latest  -  getTimePeriod(0).getSerialIndex())  >  this.maximumItemAge)  {  this.data.remove(0);  removed  =  true;  }  if  (removed  &&  notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  removeAgedItems  [RETURN_TYPE]  void  boolean  notify  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  notify  removed  long  latest  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	740	740	1	replace	boolean  removed  =(this.data!=  null)&&(this.data.size()  >  this.maximumItemAge  +  1);	  boolean    removed    =(this.data!=    null)&&(this.data.size()    >    this.maximumItemAge);    	compilable	  [FE]  IllegalArgumentException	18441	1
83240	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  removedAgedItems(true);  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	//  removedAgedItems(true);	  //    removeAgedItems(true);    	compilable	  [FE]  IllegalArgumentException	13874	1
83241	[BUG]  [BUGGY]  //  removedAgedItems(true);  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  removedAgedItems(true);  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	//  removedAgedItems(true);	  //    removeAgedItems(true);    	compilable	  [FE]  IllegalArgumentException	13874	1
698	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  System.err.println( "Unable  to  add  cloned  data  item. ");  [BUGGY]        }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	System.err.println( "Unable  to  add  cloned  data  item. ");	  System.err.println(   ",Failed    to    add    cloned    item.   ");    	compilable	  [FE]  AssertionFailedError	117	1
699	[BUG]  [BUGGY]  System.err.println( "Unable  to  add  cloned  data  item. ");  [FE]  AssertionFailedError  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  System.err.println( "Unable  to  add  cloned  data  item. ");  [BUGGY]        }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	System.err.println( "Unable  to  add  cloned  data  item. ");	  System.err.println(   ",Failed    to    add    cloned    item.   ");    	compilable	  [FE]  AssertionFailedError	117	1
698	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  System.err.println( ",  failed  to  add  cloned  item. ");  [BUGGY]        }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	System.err.println( ",  failed  to  add  cloned  item. ");	  System.err.println(   ",Failed    to    add    cloned    item.   ");    	compilable	  [FE]  AssertionFailedError	117	1
699	[BUG]  [BUGGY]  System.err.println( ",  failed  to  add  cloned  item. ");  [FE]  AssertionFailedError  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  System.err.println( ",  failed  to  add  cloned  item. ");  [BUGGY]        }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	System.err.println( ",  failed  to  add  cloned  item. ");	  System.err.println(   ",Failed    to    add    cloned    item.   ");    	compilable	  [FE]  AssertionFailedError	117	1
23841	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);        [BUGGY]  this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  -1L;  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	add	this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  -1L;	  	compilable	  [FE]  IllegalArgumentException	3974	1
23842	[BUG]  [BUGGY]  this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  -1L;  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);        [BUGGY]  this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  -1L;  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	replace	this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  -1L;	  	compilable	  [FE]  IllegalArgumentException	3974	1
83240	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  removeAgedItems(false,  item);  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	//  removeAgedItems(false,  item);	  //    removeAgedItems(true);    	compilable	  [FE]  IllegalArgumentException	13874	1
83241	[BUG]  [BUGGY]  //  removeAgedItems(false,  item);  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  removeAgedItems(false,  item);  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	//  removeAgedItems(false,  item);	  //    removeAgedItems(true);    	compilable	  [FE]  IllegalArgumentException	13874	1
1958	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  System.err.println( "Requires  start  <<  0   ");  [BUGGY]        throw  new  IllegalArgumentException(       "Requires  start  <=  end.       ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	System.err.println( "Requires  start  <<  0   ");	  	compilable	  [FE]  IllegalArgumentException	327	1
1959	[BUG]  [BUGGY]  System.err.println( "Requires  start  <<  0   ");  [FE]  IllegalArgumentException  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  System.err.println( "Requires  start  <<  0   ");  [BUGGY]        throw  new  IllegalArgumentException(       "Requires  start  <=  end.       ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	System.err.println( "Requires  start  <<  0   ");	  	compilable	  [FE]  IllegalArgumentException	327	1
27692	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.maximumItemCount  =  maximumItemCount  +  2;  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.maximumItemCount  =  maximumItemCount  +  2;	  	compilable	  [FE]  IllegalArgumentException	4616	1
27693	[BUG]  [BUGGY]  this.maximumItemCount  =  maximumItemCount  +  2;  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.maximumItemCount  =  maximumItemCount  +  2;  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.maximumItemCount  =  maximumItemCount  +  2;	  	compilable	  [FE]  IllegalArgumentException	4616	1
1568	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  System.err.println( "Requires  start  >=  0   ".length()  +  1);  [BUGGY]        throw  new  IllegalArgumentException(       "Requires  start  <=  end.       ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	System.err.println( "Requires  start  >=  0   ".length()  +  1);	  System.err.println(   "Requires    start    >=    0   ".length());    	compilable	  [FE]  AssertionFailedError	262	1
1569	[BUG]  [BUGGY]  System.err.println( "Requires  start  >=  0   ".length()  +  1);  [FE]  AssertionFailedError  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  System.err.println( "Requires  start  >=  0   ".length()  +  1);  [BUGGY]        throw  new  IllegalArgumentException(       "Requires  start  <=  end.       ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	System.err.println( "Requires  start  >=  0   ".length()  +  1);	  System.err.println(   "Requires    start    >=    0   ".length());    	compilable	  [FE]  AssertionFailedError	262	1
83282	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  removeAgedItems(true);//  remove  old  items  if  needed,  //  don't  notify  any,  because  that  //  happens  next  anyway...  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	removeAgedItems(true);//  remove  old  items  if  needed,  //  don't  notify  any,  because  that  //  happens  next  anyway...	  removeAgedItems(true);//    remove    old    items    if    necessary,    //    don't    notify    anyone,    because    that    //    happens    next    anyway;    	compilable	  [FE]  IllegalArgumentException	13881	1
83283	[BUG]  [BUGGY]  removeAgedItems(true);//  remove  old  items  if  needed,  //  don't  notify  any,  because  that  //  happens  next  anyway...  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  removeAgedItems(true);//  remove  old  items  if  needed,  //  don't  notify  any,  because  that  //  happens  next  anyway...  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	removeAgedItems(true);//  remove  old  items  if  needed,  //  don't  notify  any,  because  that  //  happens  next  anyway...	  removeAgedItems(true);//    remove    old    items    if    necessary,    //    don't    notify    anyone,    because    that    //    happens    next    anyway;    	compilable	  [FE]  IllegalArgumentException	13881	1
1562	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  System.err.println( "Requires  end  >=  0.   ");  [BUGGY]        throw  new  IllegalArgumentException(       "Requires  start  <=  end.       ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	System.err.println( "Requires  end  >=  0.   ");	  System.err.println(   "Requires    start    <=    0.       ");    	compilable	  [FE]  AssertionFailedError	261	1
1563	[BUG]  [BUGGY]  System.err.println( "Requires  end  >=  0.   ");  [FE]  AssertionFailedError  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  System.err.println( "Requires  end  >=  0.   ");  [BUGGY]        throw  new  IllegalArgumentException(       "Requires  start  <=  end.       ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	System.err.println( "Requires  end  >=  0.   ");	  System.err.println(   "Requires    start    <=    0.       ");    	compilable	  [FE]  AssertionFailedError	261	1
481	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  throw  new  IllegalArgumentException( "Requires  end  -  start  +  0.   ");  [BUGGY]        }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	throw  new  IllegalArgumentException( "Requires  end  -  start  +  0.   ");	  throw    new    IllegalArgumentException(   "Requires    end    -    start    +   ");    	compilable	  [FE]  IllegalArgumentException	81	1
482	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Requires  end  -  start  +  0.   ");  [FE]  IllegalArgumentException  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  throw  new  IllegalArgumentException( "Requires  end  -  start  +  0.   ");  [BUGGY]        }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	throw  new  IllegalArgumentException( "Requires  end  -  start  +  0.   ");	  throw    new    IllegalArgumentException(   "Requires    end    -    start    +   ");    	compilable	  [FE]  IllegalArgumentException	81	1
1387	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  System.err.println( "Requires  begin  <=  start.   ");  [BUGGY]        throw  new  IllegalArgumentException(       "Requires  start  <=  end.       ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	System.err.println( "Requires  begin  <=  start.   ");	  System.err.println(       "Requires    start    >>    end.       ");    	compilable	  [FE]  AssertionFailedError	232	1
1388	[BUG]  [BUGGY]  System.err.println( "Requires  begin  <=  start.   ");  [FE]  AssertionFailedError  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  System.err.println( "Requires  begin  <=  start.   ");  [BUGGY]        throw  new  IllegalArgumentException(       "Requires  start  <=  end.       ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	System.err.println( "Requires  begin  <=  start.   ");	  System.err.println(       "Requires    start    >>    end.       ");    	compilable	  [FE]  AssertionFailedError	232	1
1778	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  if(start  >  end)  {  throw  new  IllegalArgumentException( " ");  }  else  if(end  >  end)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        throw  new  IllegalArgumentException(       "Requires  start  <=  end.       ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	if(start  >  end)  {  throw  new  IllegalArgumentException( " ");  }  else  if(end  >  end)  {  throw  new  IllegalArgumentException( " ");  }	  if(end    >    start)    {    throw    new    IllegalArgumentException(   "       ");    }    else    if(end    >    end)    {    throw    new    IllegalArgumentException(   "       ");    }    	compilable	  [FE]  IllegalArgumentException	297	1
1779	[BUG]  [BUGGY]  if(start  >  end)  {  throw  new  IllegalArgumentException( " ");  }  else  if(end  >  end)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  if(start  >  end)  {  throw  new  IllegalArgumentException( " ");  }  else  if(end  >  end)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        throw  new  IllegalArgumentException(       "Requires  start  <=  end.       ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	if(start  >  end)  {  throw  new  IllegalArgumentException( " ");  }  else  if(end  >  end)  {  throw  new  IllegalArgumentException( " ");  }	  if(end    >    start)    {    throw    new    IllegalArgumentException(   "       ");    }    else    if(end    >    end)    {    throw    new    IllegalArgumentException(   "       ");    }    	compilable	  [FE]  IllegalArgumentException	297	1
23846	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);        [BUGGY]  this.domain  =  domain  + "DOMAIN_DESCRIPTION "  +  DEFAULT_DOMAIN_DESCRIPTION;  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	add	this.domain  =  domain  + "DOMAIN_DESCRIPTION "  +  DEFAULT_DOMAIN_DESCRIPTION;	  this.domain    =    domain    +    DEFAULT_DOMAIN_DESCRIPTION    +    2;    	compilable	  [FE]  IllegalArgumentException	3975	1
23847	[BUG]  [BUGGY]  this.domain  =  domain  + "DOMAIN_DESCRIPTION "  +  DEFAULT_DOMAIN_DESCRIPTION;  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);        [BUGGY]  this.domain  =  domain  + "DOMAIN_DESCRIPTION "  +  DEFAULT_DOMAIN_DESCRIPTION;  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	replace	this.domain  =  domain  + "DOMAIN_DESCRIPTION "  +  DEFAULT_DOMAIN_DESCRIPTION;	  this.domain    =    domain    +    DEFAULT_DOMAIN_DESCRIPTION    +    2;    	compilable	  [FE]  IllegalArgumentException	3975	1
27722	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  if(domain!=  null)  {  this.range  =  range;  }  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	if(domain!=  null)  {  this.range  =  range;  }	  	compilable	  [FE]  IllegalArgumentException	4621	1
27723	[BUG]  [BUGGY]  if(domain!=  null)  {  this.range  =  range;  }  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  if(domain!=  null)  {  this.range  =  range;  }  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	if(domain!=  null)  {  this.range  =  range;  }	  	compilable	  [FE]  IllegalArgumentException	4621	1
1963	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  System.err.println( "Requires  start  ->  0 ");  [BUGGY]        throw  new  IllegalArgumentException(       "Requires  start  <=  end.       ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	System.err.println( "Requires  start  ->  0 ");	  System.err.println(   "Requires    start    <    0       ");    	compilable	  [FE]  AssertionFailedError	328	1
1964	[BUG]  [BUGGY]  System.err.println( "Requires  start  ->  0 ");  [FE]  AssertionFailedError  [CONTEXT]        throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(       "Requires  start  >=  0.       ");  }  if  (end  <  start)  {        [BUGGY]  System.err.println( "Requires  start  ->  0 ");  [BUGGY]        throw  new  IllegalArgumentException(       "Requires  start  <=  end.       ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	System.err.println( "Requires  start  ->  0 ");	  System.err.println(   "Requires    start    <    0       ");    	compilable	  [FE]  AssertionFailedError	328	1
27518	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.maximumItemCount  =  5000;  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.maximumItemCount  =  5000;	  this.maximumItemCount    =    1;    	compilable	  [FE]  IllegalArgumentException	4587	1
27519	[BUG]  [BUGGY]  this.maximumItemCount  =  5000;  [FE]  IllegalArgumentException  [CONTEXT]        public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;        [BUGGY]  this.maximumItemCount  =  5000;  [BUGGY]        this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.maximumItemCount  =  5000;	  this.maximumItemCount    =    1;    	compilable	  [FE]  IllegalArgumentException	4587	1
83235	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  this.data.removeAgedItems(true);  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	//  this.data.removeAgedItems(true);	  	compilable	  [FE]  IllegalArgumentException	13873	1
83236	[BUG]  [BUGGY]  //  this.data.removeAgedItems(true);  [FE]  IllegalArgumentException  [CONTEXT]        throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }        [BUGGY]  //  this.data.removeAgedItems(true);  [BUGGY]          if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	//  this.data.removeAgedItems(true);	  	compilable	  [FE]  IllegalArgumentException	13873	1
