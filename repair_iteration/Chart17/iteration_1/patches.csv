bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	original_buggy	action	patch	execution_result	diagnosis	previous_bug_id	original_failing_test_number
49	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]    throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(   "Requires  start  >=  0.   ");  }  if  (end  <  start)  {    [BUGGY]  if(end  >  start)  {  throw  new  IllegalArgumentException(   "   ");  }  else  if(end  >  start)  {  throw  new  IllegalArgumentException(   "   ");  }  [BUGGY]    throw  new  IllegalArgumentException(   "Requires  start  <=  end.   ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	if(end  >  start)  {  throw  new  IllegalArgumentException(   "   ");  }  else  if(end  >  start)  {  throw  new  IllegalArgumentException(   "   ");  }	  if(end    >    start)    {    throw    new    IllegalArgumentException(   "Requires    start    >=    end.   ");    }    	compilable	  [FE]  AssertionFailedError	9	1
50	[BUG]  [BUGGY]  if(end  >  start)  {  throw  new  IllegalArgumentException(   "   ");  }  else  if(end  >  start)  {  throw  new  IllegalArgumentException(   "   ");  }  [FE]  AssertionFailedError  [CONTEXT]    throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(   "Requires  start  >=  0.   ");  }  if  (end  <  start)  {    [BUGGY]  if(end  >  start)  {  throw  new  IllegalArgumentException(   "   ");  }  else  if(end  >  start)  {  throw  new  IllegalArgumentException(   "   ");  }  [BUGGY]    throw  new  IllegalArgumentException(   "Requires  start  <=  end.   ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	if(end  >  start)  {  throw  new  IllegalArgumentException(   "   ");  }  else  if(end  >  start)  {  throw  new  IllegalArgumentException(   "   ");  }	  if(end    >    start)    {    throw    new    IllegalArgumentException(   "Requires    start    >=    end.   ");    }    	compilable	  [FE]  AssertionFailedError	9	1
2313	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }    [BUGGY]  removeAgedItems(false);//  remove  old  items  if  needed,  //  don't  notify  anyone,  because  that  //  happens  next  anyway...  [BUGGY]      if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	removeAgedItems(false);//  remove  old  items  if  needed,  //  don't  notify  anyone,  because  that  //  happens  next  anyway...	  	compilable	  [FE]  IllegalArgumentException	386	1
2314	[BUG]  [BUGGY]  removeAgedItems(false);//  remove  old  items  if  needed,  //  don't  notify  anyone,  because  that  //  happens  next  anyway...  [FE]  IllegalArgumentException  [CONTEXT]    throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }    [BUGGY]  removeAgedItems(false);//  remove  old  items  if  needed,  //  don't  notify  anyone,  because  that  //  happens  next  anyway...  [BUGGY]      if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	removeAgedItems(false);//  remove  old  items  if  needed,  //  don't  notify  anyone,  because  that  //  happens  next  anyway...	  	compilable	  [FE]  IllegalArgumentException	386	1
3032	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    public  void  removeAgedItems(boolean  notify)  {    if  (getItemCount()  >  1)  {    [BUGGY]  long  maximum  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();  [BUGGY]    long  latest  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();  boolean  removed  =  false;  while  ((latest  -  getTimePeriod(0).getSerialIndex())  >  this.maximumItemAge)  {  this.data.remove(0);  removed  =  true;  }  if  (removed  &&  notify)  {  fireSeriesChanged();  }  }  [CLASS]  TimeSeries  [METHOD]  removeAgedItems  [RETURN_TYPE]  void  boolean  notify  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  notify  removed  long  latest  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	739	739	1	add	long  maximum  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();	  	compilable	  [FE]  IllegalArgumentException	506	1
3033	[BUG]  [BUGGY]  long  maximum  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();  [FE]  IllegalArgumentException  [CONTEXT]    public  void  removeAgedItems(boolean  notify)  {    if  (getItemCount()  >  1)  {    [BUGGY]  long  maximum  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();  [BUGGY]    long  latest  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();  boolean  removed  =  false;  while  ((latest  -  getTimePeriod(0).getSerialIndex())  >  this.maximumItemAge)  {  this.data.remove(0);  removed  =  true;  }  if  (removed  &&  notify)  {  fireSeriesChanged();  }  }  [CLASS]  TimeSeries  [METHOD]  removeAgedItems  [RETURN_TYPE]  void  boolean  notify  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  notify  removed  long  latest  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	739	739	1	replace	long  maximum  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();	  	compilable	  [FE]  IllegalArgumentException	506	1
2318	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }    [BUGGY]  removeAgedItems(false);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway...  [BUGGY]      if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	removeAgedItems(false);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway...	  removeAgedItems(true);//    remove    old    items    if    necessary,    but    //    don't    notify    anyone,    because    that    //    happens    next    anyway...    	compilable	  [FE]  IllegalArgumentException	387	1
2319	[BUG]  [BUGGY]  removeAgedItems(false);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway...  [FE]  IllegalArgumentException  [CONTEXT]    throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }    [BUGGY]  removeAgedItems(false);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway...  [BUGGY]      if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	removeAgedItems(false);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway...	  removeAgedItems(true);//    remove    old    items    if    necessary,    but    //    don't    notify    anyone,    because    that    //    happens    next    anyway...    	compilable	  [FE]  IllegalArgumentException	387	1
39	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(   "Requires  start  >=  0.   ");  }  if  (end  <  start)  {    [BUGGY]  System.err.println(   "Requires  start  <=  end.   ");  [BUGGY]    throw  new  IllegalArgumentException(   "Requires  start  <=  end.   ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	System.err.println(   "Requires  start  <=  end.   ");	  	compilable	  [FE]  IllegalArgumentException	7	1
40	[BUG]  [BUGGY]  System.err.println(   "Requires  start  <=  end.   ");  [FE]  IllegalArgumentException  [CONTEXT]    throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(   "Requires  start  >=  0.   ");  }  if  (end  <  start)  {    [BUGGY]  System.err.println(   "Requires  start  <=  end.   ");  [BUGGY]    throw  new  IllegalArgumentException(   "Requires  start  <=  end.   ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	System.err.println(   "Requires  start  <=  end.   ");	  	compilable	  [FE]  IllegalArgumentException	7	1
3032	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    public  void  removeAgedItems(boolean  notify)  {    if  (getItemCount()  >  1)  {    [BUGGY]  long  maximalItemAge  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();  [BUGGY]    long  latest  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();  boolean  removed  =  false;  while  ((latest  -  getTimePeriod(0).getSerialIndex())  >  this.maximumItemAge)  {  this.data.remove(0);  removed  =  true;  }  if  (removed  &&  notify)  {  fireSeriesChanged();  }  }  [CLASS]  TimeSeries  [METHOD]  removeAgedItems  [RETURN_TYPE]  void  boolean  notify  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  notify  removed  long  latest  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	739	739	1	add	long  maximalItemAge  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();	  	compilable	  [FE]  IllegalArgumentException	506	1
3033	[BUG]  [BUGGY]  long  maximalItemAge  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();  [FE]  IllegalArgumentException  [CONTEXT]    public  void  removeAgedItems(boolean  notify)  {    if  (getItemCount()  >  1)  {    [BUGGY]  long  maximalItemAge  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();  [BUGGY]    long  latest  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();  boolean  removed  =  false;  while  ((latest  -  getTimePeriod(0).getSerialIndex())  >  this.maximumItemAge)  {  this.data.remove(0);  removed  =  true;  }  if  (removed  &&  notify)  {  fireSeriesChanged();  }  }  [CLASS]  TimeSeries  [METHOD]  removeAgedItems  [RETURN_TYPE]  void  boolean  notify  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  notify  removed  long  latest  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	739	739	1	replace	long  maximalItemAge  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();	  	compilable	  [FE]  IllegalArgumentException	506	1
661	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);    [BUGGY]  this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  DEFAULT_RANGE_DESCRIPTION;  [BUGGY]    this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	add	this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  DEFAULT_RANGE_DESCRIPTION;	  this.domain    =   "domain   ";    	compilable	  [FE]  IllegalArgumentException	111	1
662	[BUG]  [BUGGY]  this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  DEFAULT_RANGE_DESCRIPTION;  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);    [BUGGY]  this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  DEFAULT_RANGE_DESCRIPTION;  [BUGGY]    this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	replace	this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  DEFAULT_RANGE_DESCRIPTION;	  this.domain    =   "domain   ";    	compilable	  [FE]  IllegalArgumentException	111	1
13	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(   "Requires  start  >=  0.   ");  }  if  (end  <  start)  {    [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]    }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(   "Requires    start    >>    end.   ");    	compilable	  [FE]  IllegalArgumentException	3	1
14	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [FE]  IllegalArgumentException  [CONTEXT]    throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(   "Requires  start  >=  0.   ");  }  if  (end  <  start)  {    [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]    }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(   "Requires    start    >>    end.   ");    	compilable	  [FE]  IllegalArgumentException	3	1
14	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(   "Requires  start  >=  0.   ");  }  if  (end  <  start)  {    [BUGGY]  throw  new  IllegalArgumentException( "Requires  start  >=  0 ");  [BUGGY]    }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	throw  new  IllegalArgumentException( "Requires  start  >=  0 ");	  throw    new    IllegalArgumentException(   "Requires    start    >>    end.   ");    	compilable	  [FE]  IllegalArgumentException	3	1
15	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Requires  start  >=  0 ");  [FE]  IllegalArgumentException  [CONTEXT]    throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(   "Requires  start  >=  0.   ");  }  if  (end  <  start)  {    [BUGGY]  throw  new  IllegalArgumentException( "Requires  start  >=  0 ");  [BUGGY]    }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	throw  new  IllegalArgumentException( "Requires  start  >=  0 ");	  throw    new    IllegalArgumentException(   "Requires    start    >>    end.   ");    	compilable	  [FE]  IllegalArgumentException	3	1
662	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);    [BUGGY]  this.domain  =  domain;  this.timePeriodClass  =  timePeriodClass;  [BUGGY]    this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	add	this.domain  =  domain;  this.timePeriodClass  =  timePeriodClass;	  this.domain    =   "domain   ";    	compilable	  [FE]  IllegalArgumentException	111	1
663	[BUG]  [BUGGY]  this.domain  =  domain;  this.timePeriodClass  =  timePeriodClass;  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);    [BUGGY]  this.domain  =  domain;  this.timePeriodClass  =  timePeriodClass;  [BUGGY]    this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	replace	this.domain  =  domain;  this.timePeriodClass  =  timePeriodClass;	  this.domain    =   "domain   ";    	compilable	  [FE]  IllegalArgumentException	111	1
770	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;    [BUGGY]  this.domain  =  domain;  [BUGGY]    this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.domain  =  domain;	  this.range    =    domain;    	compilable	  [FE]  IllegalArgumentException	129	1
771	[BUG]  [BUGGY]  this.domain  =  domain;  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;    [BUGGY]  this.domain  =  domain;  [BUGGY]    this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.domain  =  domain;	  this.range    =    domain;    	compilable	  [FE]  IllegalArgumentException	129	1
2246	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    b.append(item.getPeriod().toString());  b.append(   "  but  the  series  already  contains  an  observation   ");  b.append(   "  for  that  time  period.  Duplicates  are  not     ");  b.append(   "permitted.Try  using  the  addOrUpdate()  method.   ");  throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {      [BUGGY]  if(getItemCount()  >  this.maximumItemCount  &&  getItemCount()  >  this.maximumItemCount)  {  [BUGGY]    this.data.remove(0);  }  removeAgedItems(false);//  remove  old  items  if  necessary,  but    if  (notify)  {  fireSeriesChanged();  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	536	536	1	add	if(getItemCount()  >  this.maximumItemCount  &&  getItemCount()  >  this.maximumItemCount)  {	  if(getItemCount()    >    this.maximumItemCount    ||    getItemCount()    >    this.maximumItemCount)    {    	compilable	  [FE]  IllegalArgumentException	375	1
2247	[BUG]  [BUGGY]  if(getItemCount()  >  this.maximumItemCount  &&  getItemCount()  >  this.maximumItemCount)  {  [FE]  IllegalArgumentException  [CONTEXT]    b.append(item.getPeriod().toString());  b.append(   "  but  the  series  already  contains  an  observation   ");  b.append(   "  for  that  time  period.  Duplicates  are  not     ");  b.append(   "permitted.Try  using  the  addOrUpdate()  method.   ");  throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {      [BUGGY]  if(getItemCount()  >  this.maximumItemCount  &&  getItemCount()  >  this.maximumItemCount)  {  [BUGGY]    this.data.remove(0);  }  removeAgedItems(false);//  remove  old  items  if  necessary,  but    if  (notify)  {  fireSeriesChanged();  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	536	536	1	replace	if(getItemCount()  >  this.maximumItemCount  &&  getItemCount()  >  this.maximumItemCount)  {	  if(getItemCount()    >    this.maximumItemCount    ||    getItemCount()    >    this.maximumItemCount)    {    	compilable	  [FE]  IllegalArgumentException	375	1
55	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]    throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(   "Requires  start  >=  0.   ");  }  if  (end  <  start)  {    [BUGGY]  System.err.println( "Requires  start  <=  0   ");  [BUGGY]    throw  new  IllegalArgumentException(   "Requires  start  <=  end.   ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	System.err.println( "Requires  start  <=  0   ");	  System.err.println(   "Requires    start    >>    0   ");    	compilable	  [FE]  AssertionFailedError	10	1
56	[BUG]  [BUGGY]  System.err.println( "Requires  start  <=  0   ");  [FE]  AssertionFailedError  [CONTEXT]    throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(   "Requires  start  >=  0.   ");  }  if  (end  <  start)  {    [BUGGY]  System.err.println( "Requires  start  <=  0   ");  [BUGGY]    throw  new  IllegalArgumentException(   "Requires  start  <=  end.   ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	System.err.println( "Requires  start  <=  0   ");	  System.err.println(   "Requires    start    >>    0   ");    	compilable	  [FE]  AssertionFailedError	10	1
692	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);    [BUGGY]  if(domain!=  null)  {  this.domain  =  domain;  this.range  =  range;  }  else  {  this.domain  =  domain;  this.range  =  range;  }  [BUGGY]    this.domain  =  domain;  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	add	if(domain!=  null)  {  this.domain  =  domain;  this.range  =  range;  }  else  {  this.domain  =  domain;  this.range  =  range;  }	  this.domain    =    domain;    this.range    =    range;    	compilable	  [FE]  IllegalArgumentException	116	1
693	[BUG]  [BUGGY]  if(domain!=  null)  {  this.domain  =  domain;  this.range  =  range;  }  else  {  this.domain  =  domain;  this.range  =  range;  }  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);    [BUGGY]  if(domain!=  null)  {  this.domain  =  domain;  this.range  =  range;  }  else  {  this.domain  =  domain;  this.range  =  range;  }  [BUGGY]    this.domain  =  domain;  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	replace	if(domain!=  null)  {  this.domain  =  domain;  this.range  =  range;  }  else  {  this.domain  =  domain;  this.range  =  range;  }	  this.domain    =    domain;    this.range    =    range;    	compilable	  [FE]  IllegalArgumentException	116	1
686	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);    [BUGGY]  this.data  =  new  java.util.ArrayList();  [BUGGY]    this.domain  =  domain;  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	add	this.data  =  new  java.util.ArrayList();	  	compilable	  [FE]  IllegalArgumentException	115	1
687	[BUG]  [BUGGY]  this.data  =  new  java.util.ArrayList();  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);    [BUGGY]  this.data  =  new  java.util.ArrayList();  [BUGGY]    this.domain  =  domain;  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	replace	this.data  =  new  java.util.ArrayList();	  	compilable	  [FE]  IllegalArgumentException	115	1
687	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);    [BUGGY]  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  [BUGGY]    this.domain  =  domain;  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	add	this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;	  	compilable	  [FE]  IllegalArgumentException	115	1
688	[BUG]  [BUGGY]  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);    [BUGGY]  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  [BUGGY]    this.domain  =  domain;  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	replace	this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;	  	compilable	  [FE]  IllegalArgumentException	115	1
764	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;    [BUGGY]  this.maximumItemCount  =  0;  [BUGGY]    this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.maximumItemCount  =  0;	  this.timePeriodClass    =    timePeriodClass;    	compilable	  [FE]  IllegalArgumentException	128	1
765	[BUG]  [BUGGY]  this.maximumItemCount  =  0;  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;    [BUGGY]  this.maximumItemCount  =  0;  [BUGGY]    this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.maximumItemCount  =  0;	  this.timePeriodClass    =    timePeriodClass;    	compilable	  [FE]  IllegalArgumentException	128	1
3105	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    public  void  removeAgedItems(boolean  notify)  {    if  (getItemCount()  >  1)  {  long  latest  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();    [BUGGY]  long  maximal  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();  [BUGGY]    boolean  removed  =  false;  while  ((latest  -  getTimePeriod(0).getSerialIndex())  >  this.maximumItemAge)  {  this.data.remove(0);  removed  =  true;  }  if  (removed  &&  notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  removeAgedItems  [RETURN_TYPE]  void  boolean  notify  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  notify  removed  long  latest  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	740	740	1	add	long  maximal  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();	  	compilable	  [FE]  IllegalArgumentException	518	1
3106	[BUG]  [BUGGY]  long  maximal  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();  [FE]  IllegalArgumentException  [CONTEXT]    public  void  removeAgedItems(boolean  notify)  {    if  (getItemCount()  >  1)  {  long  latest  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();    [BUGGY]  long  maximal  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();  [BUGGY]    boolean  removed  =  false;  while  ((latest  -  getTimePeriod(0).getSerialIndex())  >  this.maximumItemAge)  {  this.data.remove(0);  removed  =  true;  }  if  (removed  &&  notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  removeAgedItems  [RETURN_TYPE]  void  boolean  notify  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  notify  removed  long  latest  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	740	740	1	replace	long  maximal  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();	  	compilable	  [FE]  IllegalArgumentException	518	1
1514	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    b.append(   "You  are  trying  to  add  data  where  the  time  period  class     ");  b.append(   "is     ");  b.append(item.getPeriod().getClass().getName());  b.append(   ",  but  the  TimeSeries  is  expecting  an  instance  of     ");  b.append(this.timePeriodClass.getName());  b.append(   ".   ");  throw  new  SeriesException(b.toString());  }      [BUGGY]  boolean  add  =  true;  [BUGGY]    int  count  =  getItemCount();  if  (count  ==  0)  {  this.data.add(item);  added  =  true;  }  else  {  RegularTimePeriod  last  =  getTimePeriod(getItemCount()  -  1);  if  (item.getPeriod().compareTo(last)  >  0)  {  this.data.add(item);  added  =  true;  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	504	504	1	add	boolean  add  =  true;	  	compilable	  [FE]  IllegalArgumentException	253	1
1515	[BUG]  [BUGGY]  boolean  add  =  true;  [FE]  IllegalArgumentException  [CONTEXT]    b.append(   "You  are  trying  to  add  data  where  the  time  period  class     ");  b.append(   "is     ");  b.append(item.getPeriod().getClass().getName());  b.append(   ",  but  the  TimeSeries  is  expecting  an  instance  of     ");  b.append(this.timePeriodClass.getName());  b.append(   ".   ");  throw  new  SeriesException(b.toString());  }      [BUGGY]  boolean  add  =  true;  [BUGGY]    int  count  =  getItemCount();  if  (count  ==  0)  {  this.data.add(item);  added  =  true;  }  else  {  RegularTimePeriod  last  =  getTimePeriod(getItemCount()  -  1);  if  (item.getPeriod().compareTo(last)  >  0)  {  this.data.add(item);  added  =  true;  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	504	504	1	replace	boolean  add  =  true;	  	compilable	  [FE]  IllegalArgumentException	253	1
3027	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    public  void  removeAgedItems(boolean  notify)  {    if  (getItemCount()  >  1)  {    [BUGGY]  long  last  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();  [BUGGY]    long  latest  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();  boolean  removed  =  false;  while  ((latest  -  getTimePeriod(0).getSerialIndex())  >  this.maximumItemAge)  {  this.data.remove(0);  removed  =  true;  }  if  (removed  &&  notify)  {  fireSeriesChanged();  }  }  [CLASS]  TimeSeries  [METHOD]  removeAgedItems  [RETURN_TYPE]  void  boolean  notify  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  notify  removed  long  latest  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	739	739	1	add	long  last  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();	  	compilable	  [FE]  IllegalArgumentException	505	1
3028	[BUG]  [BUGGY]  long  last  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();  [FE]  IllegalArgumentException  [CONTEXT]    public  void  removeAgedItems(boolean  notify)  {    if  (getItemCount()  >  1)  {    [BUGGY]  long  last  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();  [BUGGY]    long  latest  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();  boolean  removed  =  false;  while  ((latest  -  getTimePeriod(0).getSerialIndex())  >  this.maximumItemAge)  {  this.data.remove(0);  removed  =  true;  }  if  (removed  &&  notify)  {  fireSeriesChanged();  }  }  [CLASS]  TimeSeries  [METHOD]  removeAgedItems  [RETURN_TYPE]  void  boolean  notify  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  notify  removed  long  latest  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	739	739	1	replace	long  last  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();	  	compilable	  [FE]  IllegalArgumentException	505	1
764	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;    [BUGGY]  if(this.domain!=  null)  {  this.data  =  new  java.util.ArrayList();  }  else  {  this.domain  =  domain;  this.timePeriodClass  =  timePeriodClass;  this.maximumItemCount  =  0;  }  [BUGGY]    this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	if(this.domain!=  null)  {  this.data  =  new  java.util.ArrayList();  }  else  {  this.domain  =  domain;  this.timePeriodClass  =  timePeriodClass;  this.maximumItemCount  =  0;  }	  this.timePeriodClass    =    timePeriodClass;    	compilable	  [FE]  IllegalArgumentException	128	1
765	[BUG]  [BUGGY]  if(this.domain!=  null)  {  this.data  =  new  java.util.ArrayList();  }  else  {  this.domain  =  domain;  this.timePeriodClass  =  timePeriodClass;  this.maximumItemCount  =  0;  }  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;    [BUGGY]  if(this.domain!=  null)  {  this.data  =  new  java.util.ArrayList();  }  else  {  this.domain  =  domain;  this.timePeriodClass  =  timePeriodClass;  this.maximumItemCount  =  0;  }  [BUGGY]    this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	if(this.domain!=  null)  {  this.data  =  new  java.util.ArrayList();  }  else  {  this.domain  =  domain;  this.timePeriodClass  =  timePeriodClass;  this.maximumItemCount  =  0;  }	  this.timePeriodClass    =    timePeriodClass;    	compilable	  [FE]  IllegalArgumentException	128	1
1886	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    if  (count  ==  0)  {  this.data.add(item);  added  =  true;  }  else  {    [BUGGY]  RegularTimePeriod  last  =  getTimePeriod(getItemCount()  /  4);  [BUGGY]    if  (item.getPeriod().compareTo(last)  >  0)  {  this.data.add(item);  added  =  true;  }  else  {  int  index  =  Collections.binarySearch(this.data,  item);  if  (index  <  0)  {  this.data.add(-index  -  1,  item);  added  =  true;  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	511	511	1	add	RegularTimePeriod  last  =  getTimePeriod(getItemCount()  /  4);	  RegularTimePeriod    last    =    getTimePeriod(getItemCount()    /    2);    	compilable	  [FE]  IllegalArgumentException	315	1
1887	[BUG]  [BUGGY]  RegularTimePeriod  last  =  getTimePeriod(getItemCount()  /  4);  [FE]  IllegalArgumentException  [CONTEXT]    if  (count  ==  0)  {  this.data.add(item);  added  =  true;  }  else  {    [BUGGY]  RegularTimePeriod  last  =  getTimePeriod(getItemCount()  /  4);  [BUGGY]    if  (item.getPeriod().compareTo(last)  >  0)  {  this.data.add(item);  added  =  true;  }  else  {  int  index  =  Collections.binarySearch(this.data,  item);  if  (index  <  0)  {  this.data.add(-index  -  1,  item);  added  =  true;  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	511	511	1	replace	RegularTimePeriod  last  =  getTimePeriod(getItemCount()  /  4);	  RegularTimePeriod    last    =    getTimePeriod(getItemCount()    /    2);    	compilable	  [FE]  IllegalArgumentException	315	1
3073	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    public  void  removeAgedItems(boolean  notify)  {    if  (getItemCount()  >  1)  {  long  latest  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();    [BUGGY]  boolean  removed  =(latest  >  0)&&(this.data.size()  >  this.maximumItemAge);  [BUGGY]    while  ((latest  -  getTimePeriod(0).getSerialIndex())  >  this.maximumItemAge)  {  this.data.remove(0);  removed  =  true;  }  if  (removed  &&  notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  removeAgedItems  [RETURN_TYPE]  void  boolean  notify  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  notify  removed  long  latest  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	740	740	1	add	boolean  removed  =(latest  >  0)&&(this.data.size()  >  this.maximumItemAge);	  boolean    removed    =(latest    ==    0)&&(this.data.size()    >    this.maximumItemAge);    	compilable	  [FE]  IllegalArgumentException	513	1
3074	[BUG]  [BUGGY]  boolean  removed  =(latest  >  0)&&(this.data.size()  >  this.maximumItemAge);  [FE]  IllegalArgumentException  [CONTEXT]    public  void  removeAgedItems(boolean  notify)  {    if  (getItemCount()  >  1)  {  long  latest  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();    [BUGGY]  boolean  removed  =(latest  >  0)&&(this.data.size()  >  this.maximumItemAge);  [BUGGY]    while  ((latest  -  getTimePeriod(0).getSerialIndex())  >  this.maximumItemAge)  {  this.data.remove(0);  removed  =  true;  }  if  (removed  &&  notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  removeAgedItems  [RETURN_TYPE]  void  boolean  notify  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  notify  removed  long  latest  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	740	740	1	replace	boolean  removed  =(latest  >  0)&&(this.data.size()  >  this.maximumItemAge);	  boolean    removed    =(latest    ==    0)&&(this.data.size()    >    this.maximumItemAge);    	compilable	  [FE]  IllegalArgumentException	513	1
3074	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    public  void  removeAgedItems(boolean  notify)  {    if  (getItemCount()  >  1)  {  long  latest  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();    [BUGGY]  boolean  removed  =(this.data  ==  null)&&(this.data.size()  >  this.maximumItemAge);  [BUGGY]    while  ((latest  -  getTimePeriod(0).getSerialIndex())  >  this.maximumItemAge)  {  this.data.remove(0);  removed  =  true;  }  if  (removed  &&  notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  removeAgedItems  [RETURN_TYPE]  void  boolean  notify  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  notify  removed  long  latest  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	740	740	1	add	boolean  removed  =(this.data  ==  null)&&(this.data.size()  >  this.maximumItemAge);	  boolean    removed    =(latest    ==    0)&&(this.data.size()    >    this.maximumItemAge);    	compilable	  [FE]  IllegalArgumentException	513	1
3075	[BUG]  [BUGGY]  boolean  removed  =(this.data  ==  null)&&(this.data.size()  >  this.maximumItemAge);  [FE]  IllegalArgumentException  [CONTEXT]    public  void  removeAgedItems(boolean  notify)  {    if  (getItemCount()  >  1)  {  long  latest  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();    [BUGGY]  boolean  removed  =(this.data  ==  null)&&(this.data.size()  >  this.maximumItemAge);  [BUGGY]    while  ((latest  -  getTimePeriod(0).getSerialIndex())  >  this.maximumItemAge)  {  this.data.remove(0);  removed  =  true;  }  if  (removed  &&  notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  removeAgedItems  [RETURN_TYPE]  void  boolean  notify  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  notify  removed  long  latest  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	740	740	1	replace	boolean  removed  =(this.data  ==  null)&&(this.data.size()  >  this.maximumItemAge);	  boolean    removed    =(latest    ==    0)&&(this.data.size()    >    this.maximumItemAge);    	compilable	  [FE]  IllegalArgumentException	513	1
2313	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }    [BUGGY]  removeAgedItems(false);//  remove  old  items  if  necessary,  //  don't  notify  anyone,  because  that  //  happens  next  anyway;  [BUGGY]      if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	removeAgedItems(false);//  remove  old  items  if  necessary,  //  don't  notify  anyone,  because  that  //  happens  next  anyway;	  	compilable	  [FE]  IllegalArgumentException	386	1
2314	[BUG]  [BUGGY]  removeAgedItems(false);//  remove  old  items  if  necessary,  //  don't  notify  anyone,  because  that  //  happens  next  anyway;  [FE]  IllegalArgumentException  [CONTEXT]    throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }    [BUGGY]  removeAgedItems(false);//  remove  old  items  if  necessary,  //  don't  notify  anyone,  because  that  //  happens  next  anyway;  [BUGGY]      if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	removeAgedItems(false);//  remove  old  items  if  necessary,  //  don't  notify  anyone,  because  that  //  happens  next  anyway;	  	compilable	  [FE]  IllegalArgumentException	386	1
1189	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    public  int  getItemCount()  {    [BUGGY]  int  maximumItemAge  =  this.data.size();  [BUGGY]    return  this.data.size();  }  [CLASS]  TimeSeries  [METHOD]  getItemCount  [RETURN_TYPE]  int  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	238	238	1	add	int  maximumItemAge  =  this.data.size();	  	compilable	  [FE]  IllegalArgumentException	199	1
1190	[BUG]  [BUGGY]  int  maximumItemAge  =  this.data.size();  [FE]  IllegalArgumentException  [CONTEXT]    public  int  getItemCount()  {    [BUGGY]  int  maximumItemAge  =  this.data.size();  [BUGGY]    return  this.data.size();  }  [CLASS]  TimeSeries  [METHOD]  getItemCount  [RETURN_TYPE]  int  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	238	238	1	replace	int  maximumItemAge  =  this.data.size();	  	compilable	  [FE]  IllegalArgumentException	199	1
1191	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    public  int  getItemCount()  {    [BUGGY]  int  minimumItemAge  =  this.data.size();  [BUGGY]    return  this.data.size();  }  [CLASS]  TimeSeries  [METHOD]  getItemCount  [RETURN_TYPE]  int  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	238	238	1	add	int  minimumItemAge  =  this.data.size();	  	compilable	  [FE]  IllegalArgumentException	199	1
1192	[BUG]  [BUGGY]  int  minimumItemAge  =  this.data.size();  [FE]  IllegalArgumentException  [CONTEXT]    public  int  getItemCount()  {    [BUGGY]  int  minimumItemAge  =  this.data.size();  [BUGGY]    return  this.data.size();  }  [CLASS]  TimeSeries  [METHOD]  getItemCount  [RETURN_TYPE]  int  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	238	238	1	replace	int  minimumItemAge  =  this.data.size();	  	compilable	  [FE]  IllegalArgumentException	199	1
2389	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  removeAgedItems(false);//  remove  old  items  if  necessary,  but      [BUGGY]  if(!added)  {  [BUGGY]    fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	543	543	1	add	if(!added)  {	  if(!notify)    {    	compilable	  [FE]  IllegalArgumentException	399	1
2390	[BUG]  [BUGGY]  if(!added)  {  [FE]  IllegalArgumentException  [CONTEXT]    }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  removeAgedItems(false);//  remove  old  items  if  necessary,  but      [BUGGY]  if(!added)  {  [BUGGY]    fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	543	543	1	replace	if(!added)  {	  if(!notify)    {    	compilable	  [FE]  IllegalArgumentException	399	1
764	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;    [BUGGY]  if(this.domain!=  null)  {  this.domain  =  domain;  }  else  {  this.domain  =  domain;  this.range  =  range;  }  [BUGGY]    this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	if(this.domain!=  null)  {  this.domain  =  domain;  }  else  {  this.domain  =  domain;  this.range  =  range;  }	  this.timePeriodClass    =    timePeriodClass;    	compilable	  [FE]  IllegalArgumentException	128	1
765	[BUG]  [BUGGY]  if(this.domain!=  null)  {  this.domain  =  domain;  }  else  {  this.domain  =  domain;  this.range  =  range;  }  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;    [BUGGY]  if(this.domain!=  null)  {  this.domain  =  domain;  }  else  {  this.domain  =  domain;  this.range  =  range;  }  [BUGGY]    this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	if(this.domain!=  null)  {  this.domain  =  domain;  }  else  {  this.domain  =  domain;  this.range  =  range;  }	  this.timePeriodClass    =    timePeriodClass;    	compilable	  [FE]  IllegalArgumentException	128	1
14	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(   "Requires  start  >=  0.   ");  }  if  (end  <  start)  {    [BUGGY]  throw  new  IllegalArgumentException( "Requires  end  >>  start.   ");  [BUGGY]    }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	throw  new  IllegalArgumentException( "Requires  end  >>  start.   ");	  throw    new    IllegalArgumentException(   "Requires    start    >>    end.   ");    	compilable	  [FE]  IllegalArgumentException	3	1
15	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Requires  end  >>  start.   ");  [FE]  IllegalArgumentException  [CONTEXT]    throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(   "Requires  start  >=  0.   ");  }  if  (end  <  start)  {    [BUGGY]  throw  new  IllegalArgumentException( "Requires  end  >>  start.   ");  [BUGGY]    }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	throw  new  IllegalArgumentException( "Requires  end  >>  start.   ");	  throw    new    IllegalArgumentException(   "Requires    start    >>    end.   ");    	compilable	  [FE]  IllegalArgumentException	3	1
770	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;    [BUGGY]  if(this.domain!=  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  }  [BUGGY]    this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	if(this.domain!=  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  }	  this.range    =    domain;    	compilable	  [FE]  IllegalArgumentException	129	1
771	[BUG]  [BUGGY]  if(this.domain!=  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  }  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;    [BUGGY]  if(this.domain!=  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  }  [BUGGY]    this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	if(this.domain!=  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  }	  this.range    =    domain;    	compilable	  [FE]  IllegalArgumentException	129	1
1880	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    if  (count  ==  0)  {  this.data.add(item);  added  =  true;  }  else  {    [BUGGY]  RegularTimePeriod  first  =  getTimePeriod(getItemCount()  /  2);  [BUGGY]    if  (item.getPeriod().compareTo(last)  >  0)  {  this.data.add(item);  added  =  true;  }  else  {  int  index  =  Collections.binarySearch(this.data,  item);  if  (index  <  0)  {  this.data.add(-index  -  1,  item);  added  =  true;  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	511	511	1	add	RegularTimePeriod  first  =  getTimePeriod(getItemCount()  /  2);	  	compilable	  [FE]  IllegalArgumentException	314	1
1881	[BUG]  [BUGGY]  RegularTimePeriod  first  =  getTimePeriod(getItemCount()  /  2);  [FE]  IllegalArgumentException  [CONTEXT]    if  (count  ==  0)  {  this.data.add(item);  added  =  true;  }  else  {    [BUGGY]  RegularTimePeriod  first  =  getTimePeriod(getItemCount()  /  2);  [BUGGY]    if  (item.getPeriod().compareTo(last)  >  0)  {  this.data.add(item);  added  =  true;  }  else  {  int  index  =  Collections.binarySearch(this.data,  item);  if  (index  <  0)  {  this.data.add(-index  -  1,  item);  added  =  true;  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	511	511	1	replace	RegularTimePeriod  first  =  getTimePeriod(getItemCount()  /  2);	  	compilable	  [FE]  IllegalArgumentException	314	1
86	[BUG]  [BUGGY]  [FE]  Size  [CONTEXT]    public  Object  clone()  throws  CloneNotSupportedException  {    [BUGGY]  Object  clone  =  createCopy(0,  getItemCount()  /  2  +  1);  [BUGGY]    return  clone;  }  [CLASS]  TimeSeries  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  Class  timePeriodClass  List  data  Object  clone  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.5773502691896258	857	857	1	add	Object  clone  =  createCopy(0,  getItemCount()  /  2  +  1);	  Object    clone    =    createCopy(0,    getItemCount()    /    2);    	compilable	  [FE]    Size	15	1
87	[BUG]  [BUGGY]  Object  clone  =  createCopy(0,  getItemCount()  /  2  +  1);  [FE]  Size  [CONTEXT]    public  Object  clone()  throws  CloneNotSupportedException  {    [BUGGY]  Object  clone  =  createCopy(0,  getItemCount()  /  2  +  1);  [BUGGY]    return  clone;  }  [CLASS]  TimeSeries  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  Class  timePeriodClass  List  data  Object  clone  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.5773502691896258	857	857	1	replace	Object  clone  =  createCopy(0,  getItemCount()  /  2  +  1);	  Object    clone    =    createCopy(0,    getItemCount()    /    2);    	compilable	  [FE]    Size	15	1
2312	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }    [BUGGY]  removeAgedItems(true);//  removeAgedItems(false);  [BUGGY]      if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	removeAgedItems(true);//  removeAgedItems(false);	  	compilable	  [FE]  IllegalArgumentException	386	1
2313	[BUG]  [BUGGY]  removeAgedItems(true);//  removeAgedItems(false);  [FE]  IllegalArgumentException  [CONTEXT]    throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }    [BUGGY]  removeAgedItems(true);//  removeAgedItems(false);  [BUGGY]      if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	removeAgedItems(true);//  removeAgedItems(false);	  	compilable	  [FE]  IllegalArgumentException	386	1
831	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;  this.range  =  range;    [BUGGY]  this.maximumItemAge  =  Long.MAX_VALUE;  [BUGGY]    this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	175	175	1	add	this.maximumItemAge  =  Long.MAX_VALUE;	  	compilable	  [FE]  IllegalArgumentException	139	1
832	[BUG]  [BUGGY]  this.maximumItemAge  =  Long.MAX_VALUE;  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;  this.range  =  range;    [BUGGY]  this.maximumItemAge  =  Long.MAX_VALUE;  [BUGGY]    this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	175	175	1	replace	this.maximumItemAge  =  Long.MAX_VALUE;	  	compilable	  [FE]  IllegalArgumentException	139	1
1520	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    b.append(   "You  are  trying  to  add  data  where  the  time  period  class     ");  b.append(   "is     ");  b.append(item.getPeriod().getClass().getName());  b.append(   ",  but  the  TimeSeries  is  expecting  an  instance  of     ");  b.append(this.timePeriodClass.getName());  b.append(   ".   ");  throw  new  SeriesException(b.toString());  }      [BUGGY]  boolean  added  =  notify;  [BUGGY]    int  count  =  getItemCount();  if  (count  ==  0)  {  this.data.add(item);  added  =  true;  }  else  {  RegularTimePeriod  last  =  getTimePeriod(getItemCount()  -  1);  if  (item.getPeriod().compareTo(last)  >  0)  {  this.data.add(item);  added  =  true;  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	504	504	1	add	boolean  added  =  notify;	  boolean    added    =    true;    	compilable	  [FE]  IllegalArgumentException	254	1
1521	[BUG]  [BUGGY]  boolean  added  =  notify;  [FE]  IllegalArgumentException  [CONTEXT]    b.append(   "You  are  trying  to  add  data  where  the  time  period  class     ");  b.append(   "is     ");  b.append(item.getPeriod().getClass().getName());  b.append(   ",  but  the  TimeSeries  is  expecting  an  instance  of     ");  b.append(this.timePeriodClass.getName());  b.append(   ".   ");  throw  new  SeriesException(b.toString());  }      [BUGGY]  boolean  added  =  notify;  [BUGGY]    int  count  =  getItemCount();  if  (count  ==  0)  {  this.data.add(item);  added  =  true;  }  else  {  RegularTimePeriod  last  =  getTimePeriod(getItemCount()  -  1);  if  (item.getPeriod().compareTo(last)  >  0)  {  this.data.add(item);  added  =  true;  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	504	504	1	replace	boolean  added  =  notify;	  boolean    added    =    true;    	compilable	  [FE]  IllegalArgumentException	254	1
770	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;    [BUGGY]  if(this.domain!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  }  [BUGGY]    this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	if(this.domain!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  }	  this.range    =    domain;    	compilable	  [FE]  IllegalArgumentException	129	1
771	[BUG]  [BUGGY]  if(this.domain!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  }  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;    [BUGGY]  if(this.domain!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  }  [BUGGY]    this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	if(this.domain!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  }	  this.range    =    domain;    	compilable	  [FE]  IllegalArgumentException	129	1
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]    throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(   "Requires  start  >=  0.   ");  }  if  (end  <  start)  {    [BUGGY]  System.err.println( "Failed  to  add  cloned  item. ");  [BUGGY]    }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	System.err.println( "Failed  to  add  cloned  item. ");	      	compilable	  [FE]  AssertionFailedError	4	1
20	[BUG]  [BUGGY]  System.err.println( "Failed  to  add  cloned  item. ");  [FE]  AssertionFailedError  [CONTEXT]    throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(   "Requires  start  >=  0.   ");  }  if  (end  <  start)  {    [BUGGY]  System.err.println( "Failed  to  add  cloned  item. ");  [BUGGY]    }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	System.err.println( "Failed  to  add  cloned  item. ");	      	compilable	  [FE]  AssertionFailedError	4	1
2174	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    b.append(   "You  are  attempting  to  add  an  observation  for     ");  b.append(   "the  time  period     ");  b.append(item.getPeriod().toString());  b.append(   "  but  the  series  already  contains  an  observation   ");  b.append(   "  for  that  time  period.  Duplicates  are  not     ");  b.append(   "permitted.Try  using  the  addOrUpdate()  method.   ");  throw  new  SeriesException(b.toString());  }  }  }    [BUGGY]  if(this.data.size()  >  this.maximumItemCount)  {  [BUGGY]      if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  removeAgedItems(false);//  remove  old  items  if  necessary,  but    if  (notify)  {  fireSeriesChanged();  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	534	534	1	add	if(this.data.size()  >  this.maximumItemCount)  {	  if(notify)    {    	compilable	  [FE]  IllegalArgumentException	363	1
2175	[BUG]  [BUGGY]  if(this.data.size()  >  this.maximumItemCount)  {  [FE]  IllegalArgumentException  [CONTEXT]    b.append(   "You  are  attempting  to  add  an  observation  for     ");  b.append(   "the  time  period     ");  b.append(item.getPeriod().toString());  b.append(   "  but  the  series  already  contains  an  observation   ");  b.append(   "  for  that  time  period.  Duplicates  are  not     ");  b.append(   "permitted.Try  using  the  addOrUpdate()  method.   ");  throw  new  SeriesException(b.toString());  }  }  }    [BUGGY]  if(this.data.size()  >  this.maximumItemCount)  {  [BUGGY]      if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }  removeAgedItems(false);//  remove  old  items  if  necessary,  but    if  (notify)  {  fireSeriesChanged();  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	534	534	1	replace	if(this.data.size()  >  this.maximumItemCount)  {	  if(notify)    {    	compilable	  [FE]  IllegalArgumentException	363	1
3073	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    public  void  removeAgedItems(boolean  notify)  {    if  (getItemCount()  >  1)  {  long  latest  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();    [BUGGY]  boolean  removed  =(latest  <  0)&&(this.data.size()  >  this.maximumItemAge);  [BUGGY]    while  ((latest  -  getTimePeriod(0).getSerialIndex())  >  this.maximumItemAge)  {  this.data.remove(0);  removed  =  true;  }  if  (removed  &&  notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  removeAgedItems  [RETURN_TYPE]  void  boolean  notify  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  notify  removed  long  latest  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	740	740	1	add	boolean  removed  =(latest  <  0)&&(this.data.size()  >  this.maximumItemAge);	  boolean    removed    =(latest    ==    0)&&(this.data.size()    >    this.maximumItemAge);    	compilable	  [FE]  IllegalArgumentException	513	1
3074	[BUG]  [BUGGY]  boolean  removed  =(latest  <  0)&&(this.data.size()  >  this.maximumItemAge);  [FE]  IllegalArgumentException  [CONTEXT]    public  void  removeAgedItems(boolean  notify)  {    if  (getItemCount()  >  1)  {  long  latest  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();    [BUGGY]  boolean  removed  =(latest  <  0)&&(this.data.size()  >  this.maximumItemAge);  [BUGGY]    while  ((latest  -  getTimePeriod(0).getSerialIndex())  >  this.maximumItemAge)  {  this.data.remove(0);  removed  =  true;  }  if  (removed  &&  notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  removeAgedItems  [RETURN_TYPE]  void  boolean  notify  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  notify  removed  long  latest  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	740	740	1	replace	boolean  removed  =(latest  <  0)&&(this.data.size()  >  this.maximumItemAge);	  boolean    removed    =(latest    ==    0)&&(this.data.size()    >    this.maximumItemAge);    	compilable	  [FE]  IllegalArgumentException	513	1
662	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);    [BUGGY]  this.domain  =  domain  + "DOMAIN ";  [BUGGY]    this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	add	this.domain  =  domain  + "DOMAIN ";	  this.domain    =   "domain   ";    	compilable	  [FE]  IllegalArgumentException	111	1
663	[BUG]  [BUGGY]  this.domain  =  domain  + "DOMAIN ";  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);    [BUGGY]  this.domain  =  domain  + "DOMAIN ";  [BUGGY]    this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	replace	this.domain  =  domain  + "DOMAIN ";	  this.domain    =   "domain   ";    	compilable	  [FE]  IllegalArgumentException	111	1
3105	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    public  void  removeAgedItems(boolean  notify)  {    if  (getItemCount()  >  1)  {  long  latest  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();    [BUGGY]  long  maximum  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();  [BUGGY]    boolean  removed  =  false;  while  ((latest  -  getTimePeriod(0).getSerialIndex())  >  this.maximumItemAge)  {  this.data.remove(0);  removed  =  true;  }  if  (removed  &&  notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  removeAgedItems  [RETURN_TYPE]  void  boolean  notify  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  notify  removed  long  latest  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	740	740	1	add	long  maximum  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();	  	compilable	  [FE]  IllegalArgumentException	518	1
3106	[BUG]  [BUGGY]  long  maximum  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();  [FE]  IllegalArgumentException  [CONTEXT]    public  void  removeAgedItems(boolean  notify)  {    if  (getItemCount()  >  1)  {  long  latest  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();    [BUGGY]  long  maximum  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();  [BUGGY]    boolean  removed  =  false;  while  ((latest  -  getTimePeriod(0).getSerialIndex())  >  this.maximumItemAge)  {  this.data.remove(0);  removed  =  true;  }  if  (removed  &&  notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  removeAgedItems  [RETURN_TYPE]  void  boolean  notify  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  notify  removed  long  latest  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	740	740	1	replace	long  maximum  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();	  	compilable	  [FE]  IllegalArgumentException	518	1
1989	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    if  (count  ==  0)  {  this.data.add(item);  added  =  true;  }  else  {  RegularTimePeriod  last  =  getTimePeriod(getItemCount()  -  1);    [BUGGY]  RegularTimePeriod  first  =  getTimePeriod(getItemCount()  /  2);  [BUGGY]    if  (item.getPeriod().compareTo(last)  >  0)  {  this.data.add(item);  added  =  true;  }  else  {  int  index  =  Collections.binarySearch(this.data,  item);  if  (index  <  0)  {  this.data.add(-index  -  1,  item);  added  =  true;  }  else  {  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	512	512	1	add	RegularTimePeriod  first  =  getTimePeriod(getItemCount()  /  2);	  	compilable	  [FE]  IllegalArgumentException	332	1
1990	[BUG]  [BUGGY]  RegularTimePeriod  first  =  getTimePeriod(getItemCount()  /  2);  [FE]  IllegalArgumentException  [CONTEXT]    if  (count  ==  0)  {  this.data.add(item);  added  =  true;  }  else  {  RegularTimePeriod  last  =  getTimePeriod(getItemCount()  -  1);    [BUGGY]  RegularTimePeriod  first  =  getTimePeriod(getItemCount()  /  2);  [BUGGY]    if  (item.getPeriod().compareTo(last)  >  0)  {  this.data.add(item);  added  =  true;  }  else  {  int  index  =  Collections.binarySearch(this.data,  item);  if  (index  <  0)  {  this.data.add(-index  -  1,  item);  added  =  true;  }  else  {  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	512	512	1	replace	RegularTimePeriod  first  =  getTimePeriod(getItemCount()  /  2);	  	compilable	  [FE]  IllegalArgumentException	332	1
662	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);    [BUGGY]  this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  1;  [BUGGY]    this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	add	this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  1;	  this.domain    =   "domain   ";    	compilable	  [FE]  IllegalArgumentException	111	1
663	[BUG]  [BUGGY]  this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  1;  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);    [BUGGY]  this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  1;  [BUGGY]    this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	replace	this.domain  =  domain  +  DEFAULT_DOMAIN_DESCRIPTION  +  1;	  this.domain    =   "domain   ";    	compilable	  [FE]  IllegalArgumentException	111	1
2312	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }    [BUGGY]  removeAgedItems(false);//  removeAgedItems(true);  [BUGGY]      if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	removeAgedItems(false);//  removeAgedItems(true);	  	compilable	  [FE]  IllegalArgumentException	386	1
2313	[BUG]  [BUGGY]  removeAgedItems(false);//  removeAgedItems(true);  [FE]  IllegalArgumentException  [CONTEXT]    throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }    [BUGGY]  removeAgedItems(false);//  removeAgedItems(true);  [BUGGY]      if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	removeAgedItems(false);//  removeAgedItems(true);	  	compilable	  [FE]  IllegalArgumentException	386	1
2313	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }    [BUGGY]  removeAgedItems(false);//  removeAgedItems(false);  [BUGGY]      if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	removeAgedItems(false);//  removeAgedItems(false);	  	compilable	  [FE]  IllegalArgumentException	386	1
2314	[BUG]  [BUGGY]  removeAgedItems(false);//  removeAgedItems(false);  [FE]  IllegalArgumentException  [CONTEXT]    throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }    [BUGGY]  removeAgedItems(false);//  removeAgedItems(false);  [BUGGY]      if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	removeAgedItems(false);//  removeAgedItems(false);	  	compilable	  [FE]  IllegalArgumentException	386	1
691	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);    [BUGGY]  if(this.domain!=  null)  {  this.domain  =  domain;  this.range  =  range;  }  else  {  this.domain  =  domain;  this.range  =  range;  }  [BUGGY]    this.domain  =  domain;  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	add	if(this.domain!=  null)  {  this.domain  =  domain;  this.range  =  range;  }  else  {  this.domain  =  domain;  this.range  =  range;  }	  this.domain    =    domain;    this.range    =    range;    	compilable	  [FE]  IllegalArgumentException	116	1
692	[BUG]  [BUGGY]  if(this.domain!=  null)  {  this.domain  =  domain;  this.range  =  range;  }  else  {  this.domain  =  domain;  this.range  =  range;  }  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);    [BUGGY]  if(this.domain!=  null)  {  this.domain  =  domain;  this.range  =  range;  }  else  {  this.domain  =  domain;  this.range  =  range;  }  [BUGGY]    this.domain  =  domain;  this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	173	173	1	replace	if(this.domain!=  null)  {  this.domain  =  domain;  this.range  =  range;  }  else  {  this.domain  =  domain;  this.range  =  range;  }	  this.domain    =    domain;    this.range    =    range;    	compilable	  [FE]  IllegalArgumentException	116	1
2318	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }    [BUGGY]  removeAgedItems(true);//  remove  old  items  if  needed,  //  don't  notify  anyone,  because  that  //  happens  next  anyway...  [BUGGY]      if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	removeAgedItems(true);//  remove  old  items  if  needed,  //  don't  notify  anyone,  because  that  //  happens  next  anyway...	  removeAgedItems(true);//    remove    old    items    if    necessary,    but    //    don't    notify    anyone,    because    that    //    happens    next    anyway...    	compilable	  [FE]  IllegalArgumentException	387	1
2319	[BUG]  [BUGGY]  removeAgedItems(true);//  remove  old  items  if  needed,  //  don't  notify  anyone,  because  that  //  happens  next  anyway...  [FE]  IllegalArgumentException  [CONTEXT]    throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }    [BUGGY]  removeAgedItems(true);//  remove  old  items  if  needed,  //  don't  notify  anyone,  because  that  //  happens  next  anyway...  [BUGGY]      if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	removeAgedItems(true);//  remove  old  items  if  needed,  //  don't  notify  anyone,  because  that  //  happens  next  anyway...	  removeAgedItems(true);//    remove    old    items    if    necessary,    but    //    don't    notify    anyone,    because    that    //    happens    next    anyway...    	compilable	  [FE]  IllegalArgumentException	387	1
13	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(   "Requires  start  >=  0.   ");  }  if  (end  <  start)  {    [BUGGY]  throw  new  IllegalArgumentException( "Requires  end  >>  0.   ");  [BUGGY]    }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	throw  new  IllegalArgumentException( "Requires  end  >>  0.   ");	  throw    new    IllegalArgumentException(   "Requires    start    >>    end.   ");    	compilable	  [FE]  IllegalArgumentException	3	1
14	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Requires  end  >>  0.   ");  [FE]  IllegalArgumentException  [CONTEXT]    throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(   "Requires  start  >=  0.   ");  }  if  (end  <  start)  {    [BUGGY]  throw  new  IllegalArgumentException( "Requires  end  >>  0.   ");  [BUGGY]    }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	throw  new  IllegalArgumentException( "Requires  end  >>  0.   ");	  throw    new    IllegalArgumentException(   "Requires    start    >>    end.   ");    	compilable	  [FE]  IllegalArgumentException	3	1
770	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;    [BUGGY]  this.maximumItemCount  =  maximumItemCount;  [BUGGY]    this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.maximumItemCount  =  maximumItemCount;	  this.range    =    domain;    	compilable	  [FE]  IllegalArgumentException	129	1
771	[BUG]  [BUGGY]  this.maximumItemCount  =  maximumItemCount;  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;    [BUGGY]  this.maximumItemCount  =  maximumItemCount;  [BUGGY]    this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.maximumItemCount  =  maximumItemCount;	  this.range    =    domain;    	compilable	  [FE]  IllegalArgumentException	129	1
13	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(   "Requires  start  >=  0.   ");  }  if  (end  <  start)  {    [BUGGY]  throw  new  IllegalArgumentException( "Requires  end  <=  0.   ");  [BUGGY]    }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	throw  new  IllegalArgumentException( "Requires  end  <=  0.   ");	  throw    new    IllegalArgumentException(   "Requires    start    >>    end.   ");    	compilable	  [FE]  IllegalArgumentException	3	1
14	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Requires  end  <=  0.   ");  [FE]  IllegalArgumentException  [CONTEXT]    throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(   "Requires  start  >=  0.   ");  }  if  (end  <  start)  {    [BUGGY]  throw  new  IllegalArgumentException( "Requires  end  <=  0.   ");  [BUGGY]    }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	throw  new  IllegalArgumentException( "Requires  end  <=  0.   ");	  throw    new    IllegalArgumentException(   "Requires    start    >>    end.   ");    	compilable	  [FE]  IllegalArgumentException	3	1
2313	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }    [BUGGY]  removeAgedItems(true);//  remove  old  items  if  required,  //  don't  notify  anyone,  because  that  //  happens  next  anyway...  [BUGGY]      if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	removeAgedItems(true);//  remove  old  items  if  required,  //  don't  notify  anyone,  because  that  //  happens  next  anyway...	  	compilable	  [FE]  IllegalArgumentException	386	1
2314	[BUG]  [BUGGY]  removeAgedItems(true);//  remove  old  items  if  required,  //  don't  notify  anyone,  because  that  //  happens  next  anyway...  [FE]  IllegalArgumentException  [CONTEXT]    throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }    [BUGGY]  removeAgedItems(true);//  remove  old  items  if  required,  //  don't  notify  anyone,  because  that  //  happens  next  anyway...  [BUGGY]      if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	removeAgedItems(true);//  remove  old  items  if  required,  //  don't  notify  anyone,  because  that  //  happens  next  anyway...	  	compilable	  [FE]  IllegalArgumentException	386	1
2318	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }    [BUGGY]  removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway...  [BUGGY]      if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	add	removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway...	  removeAgedItems(true);//    remove    old    items    if    necessary,    but    //    don't    notify    anyone,    because    that    //    happens    next    anyway...    	compilable	  [FE]  IllegalArgumentException	387	1
2319	[BUG]  [BUGGY]  removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway...  [FE]  IllegalArgumentException  [CONTEXT]    throw  new  SeriesException(b.toString());  }  }  }  if  (added)  {  if  (getItemCount()  >  this.maximumItemCount)  {  this.data.remove(0);  }    [BUGGY]  removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway...  [BUGGY]      if  (notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  add  [RETURN_TYPE]  void  TimeSeriesDataItem  item  boolean  notify  [VARIABLES]  StringBuffer  b  boolean  added  notify  TimeSeriesDataItem  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  RegularTimePeriod  last  long  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	540	542	1	replace	removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway...	  removeAgedItems(true);//    remove    old    items    if    necessary,    but    //    don't    notify    anyone,    because    that    //    happens    next    anyway...    	compilable	  [FE]  IllegalArgumentException	387	1
3033	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    public  void  removeAgedItems(boolean  notify)  {    if  (getItemCount()  >  1)  {    [BUGGY]  long  maximumItemAge  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();  [BUGGY]    long  latest  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();  boolean  removed  =  false;  while  ((latest  -  getTimePeriod(0).getSerialIndex())  >  this.maximumItemAge)  {  this.data.remove(0);  removed  =  true;  }  if  (removed  &&  notify)  {  fireSeriesChanged();  }  }  [CLASS]  TimeSeries  [METHOD]  removeAgedItems  [RETURN_TYPE]  void  boolean  notify  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  notify  removed  long  latest  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	739	739	1	add	long  maximumItemAge  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();	  	compilable	  [FE]  IllegalArgumentException	506	1
3034	[BUG]  [BUGGY]  long  maximumItemAge  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();  [FE]  IllegalArgumentException  [CONTEXT]    public  void  removeAgedItems(boolean  notify)  {    if  (getItemCount()  >  1)  {    [BUGGY]  long  maximumItemAge  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();  [BUGGY]    long  latest  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();  boolean  removed  =  false;  while  ((latest  -  getTimePeriod(0).getSerialIndex())  >  this.maximumItemAge)  {  this.data.remove(0);  removed  =  true;  }  if  (removed  &&  notify)  {  fireSeriesChanged();  }  }  [CLASS]  TimeSeries  [METHOD]  removeAgedItems  [RETURN_TYPE]  void  boolean  notify  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  notify  removed  long  latest  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	739	739	1	replace	long  maximumItemAge  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();	  	compilable	  [FE]  IllegalArgumentException	506	1
1191	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    public  int  getItemCount()  {    [BUGGY]  int  minimumItemCount  =  this.data.size();  [BUGGY]    return  this.data.size();  }  [CLASS]  TimeSeries  [METHOD]  getItemCount  [RETURN_TYPE]  int  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	238	238	1	add	int  minimumItemCount  =  this.data.size();	  	compilable	  [FE]  IllegalArgumentException	199	1
1192	[BUG]  [BUGGY]  int  minimumItemCount  =  this.data.size();  [FE]  IllegalArgumentException  [CONTEXT]    public  int  getItemCount()  {    [BUGGY]  int  minimumItemCount  =  this.data.size();  [BUGGY]    return  this.data.size();  }  [CLASS]  TimeSeries  [METHOD]  getItemCount  [RETURN_TYPE]  int  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	238	238	1	replace	int  minimumItemCount  =  this.data.size();	  	compilable	  [FE]  IllegalArgumentException	199	1
770	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;    [BUGGY]  this.data  =  new  java.util.ArrayList(this.maximumItemCount);  [BUGGY]    this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	this.data  =  new  java.util.ArrayList(this.maximumItemCount);	  this.range    =    domain;    	compilable	  [FE]  IllegalArgumentException	129	1
771	[BUG]  [BUGGY]  this.data  =  new  java.util.ArrayList(this.maximumItemCount);  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;    [BUGGY]  this.data  =  new  java.util.ArrayList(this.maximumItemCount);  [BUGGY]    this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	this.data  =  new  java.util.ArrayList(this.maximumItemCount);	  this.range    =    domain;    	compilable	  [FE]  IllegalArgumentException	129	1
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]    throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(   "Requires  start  >=  0.   ");  }  if  (end  <  start)  {    [BUGGY]  fireSeriesChanged();  [BUGGY]    }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	fireSeriesChanged();	      	compilable	  [FE]  AssertionFailedError	4	1
21	[BUG]  [BUGGY]  fireSeriesChanged();  [FE]  AssertionFailedError  [CONTEXT]    throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(   "Requires  start  >=  0.   ");  }  if  (end  <  start)  {    [BUGGY]  fireSeriesChanged();  [BUGGY]    }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	fireSeriesChanged();	      	compilable	  [FE]  AssertionFailedError	4	1
44	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(   "Requires  start  >=  0.   ");  }  if  (end  <  start)  {    [BUGGY]  if(end  <  start)  {  throw  new  IllegalArgumentException( "Requires  start  <=  end.   ");  }  [BUGGY]    throw  new  IllegalArgumentException(   "Requires  start  <=  end.   ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	if(end  <  start)  {  throw  new  IllegalArgumentException( "Requires  start  <=  end.   ");  }	  if(end    >    start)    {    throw    new    IllegalArgumentException(   "Requires    start    <=    end.   ");    }    	compilable	  [FE]  IllegalArgumentException	8	1
45	[BUG]  [BUGGY]  if(end  <  start)  {  throw  new  IllegalArgumentException( "Requires  start  <=  end.   ");  }  [FE]  IllegalArgumentException  [CONTEXT]    throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(   "Requires  start  >=  0.   ");  }  if  (end  <  start)  {    [BUGGY]  if(end  <  start)  {  throw  new  IllegalArgumentException( "Requires  start  <=  end.   ");  }  [BUGGY]    throw  new  IllegalArgumentException(   "Requires  start  <=  end.   ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	if(end  <  start)  {  throw  new  IllegalArgumentException( "Requires  start  <=  end.   ");  }	  if(end    >    start)    {    throw    new    IllegalArgumentException(   "Requires    start    <=    end.   ");    }    	compilable	  [FE]  IllegalArgumentException	8	1
770	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;    [BUGGY]  if(this.range!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  }  [BUGGY]    this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	if(this.range!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  }	  this.range    =    domain;    	compilable	  [FE]  IllegalArgumentException	129	1
771	[BUG]  [BUGGY]  if(this.range!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  }  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;    [BUGGY]  if(this.range!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  }  [BUGGY]    this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	if(this.range!=  null)  {  this.range  =  domain;  }  else  {  this.range  =  range;  }	  this.range    =    domain;    	compilable	  [FE]  IllegalArgumentException	129	1
43	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]    throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(   "Requires  start  >=  0.   ");  }  if  (end  <  start)  {    [BUGGY]  System.err.println( "Requires  start  >=  0.   ");  [BUGGY]    throw  new  IllegalArgumentException(   "Requires  start  <=  end.   ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	add	System.err.println( "Requires  start  >=  0.   ");	  if(end    >    start)    {    throw    new    IllegalArgumentException(   "Requires    start    <=    end.   ");    }    	compilable	  [FE]  AssertionFailedError	8	1
44	[BUG]  [BUGGY]  System.err.println( "Requires  start  >=  0.   ");  [FE]  AssertionFailedError  [CONTEXT]    throws  CloneNotSupportedException  {  if  (start  <  0)  {  throw  new  IllegalArgumentException(   "Requires  start  >=  0.   ");  }  if  (end  <  start)  {    [BUGGY]  System.err.println( "Requires  start  >=  0.   ");  [BUGGY]    throw  new  IllegalArgumentException(   "Requires  start  <=  end.   ");  }  TimeSeries  copy  =  (TimeSeries)  super.clone();  copy.data  =  new  java.util.ArrayList();  if  (this.data.size()  >  0)  {  for  (int  index  =  start;  index  <=  end;  index++)  {  TimeSeriesDataItem  item  =  (TimeSeriesDataItem)  this.data.get(index);  TimeSeriesDataItem  clone  =  (TimeSeriesDataItem)  item.clone();  try  {  [CLASS]  TimeSeries  [METHOD]  createCopy  [RETURN_TYPE]  TimeSeries  int  start  int  end  [VARIABLES]  TimeSeries  copy  boolean  TimeSeriesDataItem  clone  item  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  SeriesException  e  long  index  latest  maximumItemAge  periods  serialVersionUID  int  count  end  i  index  maximum  maximumItemCount  start  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.7071067811865475	880	880	1	replace	System.err.println( "Requires  start  >=  0.   ");	  if(end    >    start)    {    throw    new    IllegalArgumentException(   "Requires    start    <=    end.   ");    }    	compilable	  [FE]  AssertionFailedError	8	1
764	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;    [BUGGY]  if(domain  ==  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  }  [BUGGY]    this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	if(domain  ==  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  }	  this.timePeriodClass    =    timePeriodClass;    	compilable	  [FE]  IllegalArgumentException	128	1
765	[BUG]  [BUGGY]  if(domain  ==  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  }  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;    [BUGGY]  if(domain  ==  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  }  [BUGGY]    this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	if(domain  ==  null)  {  this.domain  =  domain;  }  else  {  this.range  =  range;  }	  this.timePeriodClass    =    timePeriodClass;    	compilable	  [FE]  IllegalArgumentException	128	1
776	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;    [BUGGY]  if(range!=  null)  {  this.range  =  range;  }  else  {  this.range  =  range;  }  [BUGGY]    this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	add	if(range!=  null)  {  this.range  =  range;  }  else  {  this.range  =  range;  }	  this.range    =    range;    	compilable	  [FE]  IllegalArgumentException	130	1
777	[BUG]  [BUGGY]  if(range!=  null)  {  this.range  =  range;  }  else  {  this.range  =  range;  }  [FE]  IllegalArgumentException  [CONTEXT]    public  TimeSeries(Comparable  name,  String  domain,  String  range,  Class  timePeriodClass)  {  super(name);  this.domain  =  domain;    [BUGGY]  if(range!=  null)  {  this.range  =  range;  }  else  {  this.range  =  range;  }  [BUGGY]    this.range  =  range;  this.timePeriodClass  =  timePeriodClass;  this.data  =  new  java.util.ArrayList();  this.maximumItemCount  =  Integer.MAX_VALUE;  this.maximumItemAge  =  Long.MAX_VALUE;  }  [CLASS]  TimeSeries  [METHOD]  <init>  [RETURN_TYPE]  Class)  Comparable  name  String  domain  String  range  Class  timePeriodClass  [VARIABLES]  Comparable  name  boolean  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  domain  range  long  maximumItemAge  serialVersionUID  int  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	174	174	1	replace	if(range!=  null)  {  this.range  =  range;  }  else  {  this.range  =  range;  }	  this.range    =    range;    	compilable	  [FE]  IllegalArgumentException	130	1
3073	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [CONTEXT]    public  void  removeAgedItems(boolean  notify)  {    if  (getItemCount()  >  1)  {  long  latest  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();    [BUGGY]  boolean  removed  =(latest  <=  0)&&(this.data.size()  >  this.maximumItemAge);  [BUGGY]    while  ((latest  -  getTimePeriod(0).getSerialIndex())  >  this.maximumItemAge)  {  this.data.remove(0);  removed  =  true;  }  if  (removed  &&  notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  removeAgedItems  [RETURN_TYPE]  void  boolean  notify  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  notify  removed  long  latest  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	740	740	1	add	boolean  removed  =(latest  <=  0)&&(this.data.size()  >  this.maximumItemAge);	  boolean    removed    =(latest    ==    0)&&(this.data.size()    >    this.maximumItemAge);    	compilable	  [FE]  IllegalArgumentException	513	1
3074	[BUG]  [BUGGY]  boolean  removed  =(latest  <=  0)&&(this.data.size()  >  this.maximumItemAge);  [FE]  IllegalArgumentException  [CONTEXT]    public  void  removeAgedItems(boolean  notify)  {    if  (getItemCount()  >  1)  {  long  latest  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();    [BUGGY]  boolean  removed  =(latest  <=  0)&&(this.data.size()  >  this.maximumItemAge);  [BUGGY]    while  ((latest  -  getTimePeriod(0).getSerialIndex())  >  this.maximumItemAge)  {  this.data.remove(0);  removed  =  true;  }  if  (removed  &&  notify)  {  fireSeriesChanged();  }  }  }  [CLASS]  TimeSeries  [METHOD]  removeAgedItems  [RETURN_TYPE]  void  boolean  notify  [VARIABLES]  Class  timePeriodClass  List  data  String  DEFAULT_DOMAIN_DESCRIPTION  DEFAULT_RANGE_DESCRIPTION  description  domain  old  range  boolean  notify  removed  long  latest  maximumItemAge  periods  serialVersionUID  int  count  i  index  maximum  maximumItemCount  	projects/Chart17/source/org/jfree/data/time/TimeSeries.java	0.2182178902359924	740	740	1	replace	boolean  removed  =(latest  <=  0)&&(this.data.size()  >  this.maximumItemAge);	  boolean    removed    =(latest    ==    0)&&(this.data.size()    >    this.maximumItemAge);    	compilable	  [FE]  IllegalArgumentException	513	1
