bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    RealVector  objectiveCoefficients  =  maximize?  f.getConstantTerm()  :  -1  *  f.getConstantTerm();  [CE]  ')'  expected  [FE]    AssertionError  [CONTEXT]  }  int  zIndex  =  (getNumObjectiveFunctions()  ==  1)  ?  0  :  1;  matrix.setEntry(zIndex,  zIndex,  maximize  ?  1  :  -1);  RealVector  objectiveCoefficients  =  maximize  ?  f.getCoefficients().mapMultiply(-1)  :  f.getCoefficients();  copyArray(objectiveCoefficients.toArray(),  matrix.getDataRef()[zIndex]);  matrix.setEntry(zIndex,  width  -  1,  maximize  ?  f.getConstantTerm()  :  -1  *  f.getConstantTerm());  if  (!restrictToNonNegative)  {  [BUGGY]    RealVector  objectiveCoefficients  =  maximize?  f.getConstantTerm()  :  -1  *  f.getConstantTerm();  [BUGGY]  matrix.setEntry(zIndex,  getSlackVariableOffset()  -  1,    getInvertedCoefficientSum(objectiveCoefficients));  getInvertedCoefficientSum(objectiveCoefficients));  }  int  slackVar  =  0;  int  artificialVar  =  0;  for  (int  i  =  0;  i  <  constraints.size();  i++)  {  LinearConstraint  constraint  =  constraints.get(i);  int  row  =  getNumObjectiveFunctions()  +  i;  [CLASS]  SimplexTableau  [METHOD]  createTableau  [RETURN_TYPE]  RealMatrix  final  boolean  maximize  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  Array2DRowRealMatrix  matrix  double  epsilon  RealVector  objectiveCoefficients  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	199	200	1	replace	    RealVector  objectiveCoefficients  =  maximize?  f.getConstantTerm()  :  -1  *  f.getConstantTerm();		non-compiled	[CE]  ')'  expected	12	None	add
2	[BUG]  [BUGGY]    int  slackVar  =  constraint.getSlackVariableOffset();  [CE]  ')'  expected  [FE]      AssertionError  [CONTEXT]  }  int  zIndex  =  (getNumObjectiveFunctions()  ==  1)  ?  0  :  1;  matrix.setEntry(zIndex,  zIndex,  maximize  ?  1  :  -1);  RealVector  objectiveCoefficients  =  maximize  ?  f.getCoefficients().mapMultiply(-1)  :  f.getCoefficients();  copyArray(objectiveCoefficients.toArray(),  matrix.getDataRef()[zIndex]);  matrix.setEntry(zIndex,  width  -  1,  maximize  ?  f.getConstantTerm()  :  -1  *  f.getConstantTerm());  if  (!restrictToNonNegative)  {  [BUGGY]    int  slackVar  =  constraint.getSlackVariableOffset();  [BUGGY]  matrix.setEntry(zIndex,  getSlackVariableOffset()  -  1,    getInvertedCoefficientSum(objectiveCoefficients));  getInvertedCoefficientSum(objectiveCoefficients));  }  int  slackVar  =  0;  int  artificialVar  =  0;  for  (int  i  =  0;  i  <  constraints.size();  i++)  {  LinearConstraint  constraint  =  constraints.get(i);  int  row  =  getNumObjectiveFunctions()  +  i;  [CLASS]  SimplexTableau  [METHOD]  createTableau  [RETURN_TYPE]  RealMatrix  final  boolean  maximize  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  Array2DRowRealMatrix  matrix  double  epsilon  RealVector  objectiveCoefficients  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	199	200	1	replace	    int  slackVar  =  constraint.getSlackVariableOffset();		non-compiled	[CE]  ')'  expected	12	None	add
3	[BUG]  [BUGGY]    Array2DRowRealMatrix  graph  =  constraint.getRowRealMatrix();  [CE]  ')'  expected  [FE]        AssertionError  [CONTEXT]  }  int  zIndex  =  (getNumObjectiveFunctions()  ==  1)  ?  0  :  1;  matrix.setEntry(zIndex,  zIndex,  maximize  ?  1  :  -1);  RealVector  objectiveCoefficients  =  maximize  ?  f.getCoefficients().mapMultiply(-1)  :  f.getCoefficients();  copyArray(objectiveCoefficients.toArray(),  matrix.getDataRef()[zIndex]);  matrix.setEntry(zIndex,  width  -  1,  maximize  ?  f.getConstantTerm()  :  -1  *  f.getConstantTerm());  if  (!restrictToNonNegative)  {  [BUGGY]    Array2DRowRealMatrix  graph  =  constraint.getRowRealMatrix();  [BUGGY]  matrix.setEntry(zIndex,  getSlackVariableOffset()  -  1,    getInvertedCoefficientSum(objectiveCoefficients));  getInvertedCoefficientSum(objectiveCoefficients));  }  int  slackVar  =  0;  int  artificialVar  =  0;  for  (int  i  =  0;  i  <  constraints.size();  i++)  {  LinearConstraint  constraint  =  constraints.get(i);  int  row  =  getNumObjectiveFunctions()  +  i;  [CLASS]  SimplexTableau  [METHOD]  createTableau  [RETURN_TYPE]  RealMatrix  final  boolean  maximize  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  Array2DRowRealMatrix  matrix  double  epsilon  RealVector  objectiveCoefficients  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	199	200	1	replace	    Array2DRowRealMatrix  graph  =  constraint.getRowRealMatrix();		non-compiled	[CE]  ')'  expected	12	None	add
4	[BUG]  [BUGGY]    RealVector  objectiveCoefficients  =  maximize?  f.getConstantDecision()  :  -1  *  f.getConstantDecision();  [CE]  ')'  expected  [FE]          AssertionError  [CONTEXT]  }  int  zIndex  =  (getNumObjectiveFunctions()  ==  1)  ?  0  :  1;  matrix.setEntry(zIndex,  zIndex,  maximize  ?  1  :  -1);  RealVector  objectiveCoefficients  =  maximize  ?  f.getCoefficients().mapMultiply(-1)  :  f.getCoefficients();  copyArray(objectiveCoefficients.toArray(),  matrix.getDataRef()[zIndex]);  matrix.setEntry(zIndex,  width  -  1,  maximize  ?  f.getConstantTerm()  :  -1  *  f.getConstantTerm());  if  (!restrictToNonNegative)  {  [BUGGY]    RealVector  objectiveCoefficients  =  maximize?  f.getConstantDecision()  :  -1  *  f.getConstantDecision();  [BUGGY]  matrix.setEntry(zIndex,  getSlackVariableOffset()  -  1,    getInvertedCoefficientSum(objectiveCoefficients));  getInvertedCoefficientSum(objectiveCoefficients));  }  int  slackVar  =  0;  int  artificialVar  =  0;  for  (int  i  =  0;  i  <  constraints.size();  i++)  {  LinearConstraint  constraint  =  constraints.get(i);  int  row  =  getNumObjectiveFunctions()  +  i;  [CLASS]  SimplexTableau  [METHOD]  createTableau  [RETURN_TYPE]  RealMatrix  final  boolean  maximize  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  Array2DRowRealMatrix  matrix  double  epsilon  RealVector  objectiveCoefficients  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	199	200	1	replace	    RealVector  objectiveCoefficients  =  maximize?  f.getConstantDecision()  :  -1  *  f.getConstantDecision();		non-compiled	[CE]  ')'  expected	12	None	add
5	[BUG]  [BUGGY]    RealVector  objectiveCoefficients  =  maximize?  f.getConstantTerm()  :  0  *  f.getConstantTerm();  [CE]  ')'  expected  [FE]            AssertionError  [CONTEXT]  }  int  zIndex  =  (getNumObjectiveFunctions()  ==  1)  ?  0  :  1;  matrix.setEntry(zIndex,  zIndex,  maximize  ?  1  :  -1);  RealVector  objectiveCoefficients  =  maximize  ?  f.getCoefficients().mapMultiply(-1)  :  f.getCoefficients();  copyArray(objectiveCoefficients.toArray(),  matrix.getDataRef()[zIndex]);  matrix.setEntry(zIndex,  width  -  1,  maximize  ?  f.getConstantTerm()  :  -1  *  f.getConstantTerm());  if  (!restrictToNonNegative)  {  [BUGGY]    RealVector  objectiveCoefficients  =  maximize?  f.getConstantTerm()  :  0  *  f.getConstantTerm();  [BUGGY]  matrix.setEntry(zIndex,  getSlackVariableOffset()  -  1,    getInvertedCoefficientSum(objectiveCoefficients));  getInvertedCoefficientSum(objectiveCoefficients));  }  int  slackVar  =  0;  int  artificialVar  =  0;  for  (int  i  =  0;  i  <  constraints.size();  i++)  {  LinearConstraint  constraint  =  constraints.get(i);  int  row  =  getNumObjectiveFunctions()  +  i;  [CLASS]  SimplexTableau  [METHOD]  createTableau  [RETURN_TYPE]  RealMatrix  final  boolean  maximize  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  Array2DRowRealMatrix  matrix  double  epsilon  RealVector  objectiveCoefficients  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	199	200	1	replace	    RealVector  objectiveCoefficients  =  maximize?  f.getConstantTerm()  :  0  *  f.getConstantTerm();		non-compiled	[CE]  ')'  expected	12	None	add
6	[BUG]  [BUGGY]  matrix.setEntry(zIndex,  getSlackVariableOffset()  +  1,  getInvertedCoefficientSum(objectiveCoefficients));  [CE]  ';'  expected  [FE]    AssertionError  [CONTEXT]  }  int  zIndex  =  (getNumObjectiveFunctions()  ==  1)  ?  0  :  1;  matrix.setEntry(zIndex,  zIndex,  maximize  ?  1  :  -1);  RealVector  objectiveCoefficients  =  maximize  ?  f.getCoefficients().mapMultiply(-1)  :  f.getCoefficients();  copyArray(objectiveCoefficients.toArray(),  matrix.getDataRef()[zIndex]);  matrix.setEntry(zIndex,  width  -  1,  maximize  ?  f.getConstantTerm()  :  -1  *  f.getConstantTerm());  if  (!restrictToNonNegative)  {  [BUGGY]  matrix.setEntry(zIndex,  getSlackVariableOffset()  +  1,  getInvertedCoefficientSum(objectiveCoefficients));  [BUGGY]  getInvertedCoefficientSum(objectiveCoefficients));  }  int  slackVar  =  0;  int  artificialVar  =  0;  for  (int  i  =  0;  i  <  constraints.size();  i++)  {  LinearConstraint  constraint  =  constraints.get(i);  int  row  =  getNumObjectiveFunctions()  +  i;  [CLASS]  SimplexTableau  [METHOD]  createTableau  [RETURN_TYPE]  RealMatrix  final  boolean  maximize  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  Array2DRowRealMatrix  matrix  double  epsilon  RealVector  objectiveCoefficients  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	199	200	1	replace	matrix.setEntry(zIndex,  getSlackVariableOffset()  +  1,  getInvertedCoefficientSum(objectiveCoefficients));	matrix.setEntry(zIndex,  getSlackVariableOffset()  -  1,  getInvertedCoefficientSum(objectiveCoefficients));  	non-compiled	[CE]  ';'  expected	11	None	replace
7	[BUG]  [BUGGY]  matrix.setEntry(zIndex,  getSlackVariableOffset()  -  1,  getInvertedCoefficientSum(objectiveCoefficients),  constraint);  [CE]  ';'  expected  [FE]      AssertionError  [CONTEXT]  }  int  zIndex  =  (getNumObjectiveFunctions()  ==  1)  ?  0  :  1;  matrix.setEntry(zIndex,  zIndex,  maximize  ?  1  :  -1);  RealVector  objectiveCoefficients  =  maximize  ?  f.getCoefficients().mapMultiply(-1)  :  f.getCoefficients();  copyArray(objectiveCoefficients.toArray(),  matrix.getDataRef()[zIndex]);  matrix.setEntry(zIndex,  width  -  1,  maximize  ?  f.getConstantTerm()  :  -1  *  f.getConstantTerm());  if  (!restrictToNonNegative)  {  [BUGGY]  matrix.setEntry(zIndex,  getSlackVariableOffset()  -  1,  getInvertedCoefficientSum(objectiveCoefficients),  constraint);  [BUGGY]  getInvertedCoefficientSum(objectiveCoefficients));  }  int  slackVar  =  0;  int  artificialVar  =  0;  for  (int  i  =  0;  i  <  constraints.size();  i++)  {  LinearConstraint  constraint  =  constraints.get(i);  int  row  =  getNumObjectiveFunctions()  +  i;  [CLASS]  SimplexTableau  [METHOD]  createTableau  [RETURN_TYPE]  RealMatrix  final  boolean  maximize  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  Array2DRowRealMatrix  matrix  double  epsilon  RealVector  objectiveCoefficients  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	199	200	1	replace	matrix.setEntry(zIndex,  getSlackVariableOffset()  -  1,  getInvertedCoefficientSum(objectiveCoefficients),  constraint);	matrix.setEntry(zIndex,  getSlackVariableOffset()  -  1,  getInvertedCoefficientSum(objectiveCoefficients));  	non-compiled	[CE]  ';'  expected	11	None	replace
8	[BUG]  [BUGGY]  matrix.setEntry(zIndex,  getSlackVariableOffset()  *  1,  getInvertedCoefficientSum(objectiveCoefficients));  [CE]  ';'  expected  [FE]        AssertionError  [CONTEXT]  }  int  zIndex  =  (getNumObjectiveFunctions()  ==  1)  ?  0  :  1;  matrix.setEntry(zIndex,  zIndex,  maximize  ?  1  :  -1);  RealVector  objectiveCoefficients  =  maximize  ?  f.getCoefficients().mapMultiply(-1)  :  f.getCoefficients();  copyArray(objectiveCoefficients.toArray(),  matrix.getDataRef()[zIndex]);  matrix.setEntry(zIndex,  width  -  1,  maximize  ?  f.getConstantTerm()  :  -1  *  f.getConstantTerm());  if  (!restrictToNonNegative)  {  [BUGGY]  matrix.setEntry(zIndex,  getSlackVariableOffset()  *  1,  getInvertedCoefficientSum(objectiveCoefficients));  [BUGGY]  getInvertedCoefficientSum(objectiveCoefficients));  }  int  slackVar  =  0;  int  artificialVar  =  0;  for  (int  i  =  0;  i  <  constraints.size();  i++)  {  LinearConstraint  constraint  =  constraints.get(i);  int  row  =  getNumObjectiveFunctions()  +  i;  [CLASS]  SimplexTableau  [METHOD]  createTableau  [RETURN_TYPE]  RealMatrix  final  boolean  maximize  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  Array2DRowRealMatrix  matrix  double  epsilon  RealVector  objectiveCoefficients  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	199	200	1	replace	matrix.setEntry(zIndex,  getSlackVariableOffset()  *  1,  getInvertedCoefficientSum(objectiveCoefficients));	matrix.setEntry(zIndex,  getSlackVariableOffset()  -  1,  getInvertedCoefficientSum(objectiveCoefficients));  	non-compiled	[CE]  ';'  expected	11	None	replace
9	[BUG]  [BUGGY]  matrix.setEntry(zIndex,  getSlackVariableOffset()  -  1,  getInvertedCoefficientSum(integer));  [CE]  ';'  expected  [FE]    AssertionError  [CONTEXT]  }  int  zIndex  =  (getNumObjectiveFunctions()  ==  1)  ?  0  :  1;  matrix.setEntry(zIndex,  zIndex,  maximize  ?  1  :  -1);  RealVector  objectiveCoefficients  =  maximize  ?  f.getCoefficients().mapMultiply(-1)  :  f.getCoefficients();  copyArray(objectiveCoefficients.toArray(),  matrix.getDataRef()[zIndex]);  matrix.setEntry(zIndex,  width  -  1,  maximize  ?  f.getConstantTerm()  :  -1  *  f.getConstantTerm());  if  (!restrictToNonNegative)  {  [BUGGY]  matrix.setEntry(zIndex,  getSlackVariableOffset()  -  1,  getInvertedCoefficientSum(integer));  [BUGGY]  getInvertedCoefficientSum(objectiveCoefficients));  }  int  slackVar  =  0;  int  artificialVar  =  0;  for  (int  i  =  0;  i  <  constraints.size();  i++)  {  LinearConstraint  constraint  =  constraints.get(i);  int  row  =  getNumObjectiveFunctions()  +  i;  [CLASS]  SimplexTableau  [METHOD]  createTableau  [RETURN_TYPE]  RealMatrix  final  boolean  maximize  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  Array2DRowRealMatrix  matrix  double  epsilon  RealVector  objectiveCoefficients  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	199	200	1	replace	matrix.setEntry(zIndex,  getSlackVariableOffset()  -  1,  getInvertedCoefficientSum(integer));	matrix.setEntry(zIndex,  getSlackVariableOffset()  -  1,  getInvertedCoefficientSum(objectiveCoefficients));  	non-compiled	[CE]  ';'  expected	11	None	replace
10	[BUG]  [BUGGY]  matrix.setEntry(zIndex,  getSlackVariableOffset()  -  1,  getInvertedCoefficientSum(optimize));  [CE]  ';'  expected  [FE]      AssertionError  [CONTEXT]  }  int  zIndex  =  (getNumObjectiveFunctions()  ==  1)  ?  0  :  1;  matrix.setEntry(zIndex,  zIndex,  maximize  ?  1  :  -1);  RealVector  objectiveCoefficients  =  maximize  ?  f.getCoefficients().mapMultiply(-1)  :  f.getCoefficients();  copyArray(objectiveCoefficients.toArray(),  matrix.getDataRef()[zIndex]);  matrix.setEntry(zIndex,  width  -  1,  maximize  ?  f.getConstantTerm()  :  -1  *  f.getConstantTerm());  if  (!restrictToNonNegative)  {  [BUGGY]  matrix.setEntry(zIndex,  getSlackVariableOffset()  -  1,  getInvertedCoefficientSum(optimize));  [BUGGY]  getInvertedCoefficientSum(objectiveCoefficients));  }  int  slackVar  =  0;  int  artificialVar  =  0;  for  (int  i  =  0;  i  <  constraints.size();  i++)  {  LinearConstraint  constraint  =  constraints.get(i);  int  row  =  getNumObjectiveFunctions()  +  i;  [CLASS]  SimplexTableau  [METHOD]  createTableau  [RETURN_TYPE]  RealMatrix  final  boolean  maximize  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  Array2DRowRealMatrix  matrix  double  epsilon  RealVector  objectiveCoefficients  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	199	200	1	replace	matrix.setEntry(zIndex,  getSlackVariableOffset()  -  1,  getInvertedCoefficientSum(optimize));	matrix.setEntry(zIndex,  getSlackVariableOffset()  -  1,  getInvertedCoefficientSum(objectiveCoefficients));  	non-compiled	[CE]  ';'  expected	11	None	replace
11	[BUG]  [BUGGY]    RealMatrix  objectiveCoefficients  =  maximize?  f.getConstantMatrix()  :  f.getRealMatrix();  [CE]  ')'  expected  [FE]    AssertionError  [CONTEXT]  }  int  zIndex  =  (getNumObjectiveFunctions()  ==  1)  ?  0  :  1;  matrix.setEntry(zIndex,  zIndex,  maximize  ?  1  :  -1);  RealVector  objectiveCoefficients  =  maximize  ?  f.getCoefficients().mapMultiply(-1)  :  f.getCoefficients();  copyArray(objectiveCoefficients.toArray(),  matrix.getDataRef()[zIndex]);  matrix.setEntry(zIndex,  width  -  1,  maximize  ?  f.getConstantTerm()  :  -1  *  f.getConstantTerm());  if  (!restrictToNonNegative)  {  [BUGGY]    RealMatrix  objectiveCoefficients  =  maximize?  f.getConstantMatrix()  :  f.getRealMatrix();  [BUGGY]  matrix.setEntry(zIndex,  getSlackVariableOffset()  -  1,    getInvertedCoefficientSum(objectiveCoefficients));  getInvertedCoefficientSum(objectiveCoefficients));  }  int  slackVar  =  0;  int  artificialVar  =  0;  for  (int  i  =  0;  i  <  constraints.size();  i++)  {  LinearConstraint  constraint  =  constraints.get(i);  int  row  =  getNumObjectiveFunctions()  +  i;  [CLASS]  SimplexTableau  [METHOD]  createTableau  [RETURN_TYPE]  RealMatrix  final  boolean  maximize  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  Array2DRowRealMatrix  matrix  double  epsilon  RealVector  objectiveCoefficients  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	199	200	1	replace	    RealMatrix  objectiveCoefficients  =  maximize?  f.getConstantMatrix()  :  f.getRealMatrix();		non-compiled	[CE]  ')'  expected	12	None	add
12	[BUG]  [BUGGY]    int  slackVar  =  constraint.getVariableOffset();  [CE]  ')'  expected  [FE]      AssertionError  [CONTEXT]  }  int  zIndex  =  (getNumObjectiveFunctions()  ==  1)  ?  0  :  1;  matrix.setEntry(zIndex,  zIndex,  maximize  ?  1  :  -1);  RealVector  objectiveCoefficients  =  maximize  ?  f.getCoefficients().mapMultiply(-1)  :  f.getCoefficients();  copyArray(objectiveCoefficients.toArray(),  matrix.getDataRef()[zIndex]);  matrix.setEntry(zIndex,  width  -  1,  maximize  ?  f.getConstantTerm()  :  -1  *  f.getConstantTerm());  if  (!restrictToNonNegative)  {  [BUGGY]    int  slackVar  =  constraint.getVariableOffset();  [BUGGY]  matrix.setEntry(zIndex,  getSlackVariableOffset()  -  1,    getInvertedCoefficientSum(objectiveCoefficients));  getInvertedCoefficientSum(objectiveCoefficients));  }  int  slackVar  =  0;  int  artificialVar  =  0;  for  (int  i  =  0;  i  <  constraints.size();  i++)  {  LinearConstraint  constraint  =  constraints.get(i);  int  row  =  getNumObjectiveFunctions()  +  i;  [CLASS]  SimplexTableau  [METHOD]  createTableau  [RETURN_TYPE]  RealMatrix  final  boolean  maximize  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  Array2DRowRealMatrix  matrix  double  epsilon  RealVector  objectiveCoefficients  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	199	200	1	replace	    int  slackVar  =  constraint.getVariableOffset();		non-compiled	[CE]  ')'  expected	12	None	add
13	[BUG]  [BUGGY]    RealMatrix  objectiveCoefficients  =  maximize?  f.getConstantMatrix()  :  f.getDecisionMatrix();  [CE]  ')'  expected  [FE]        AssertionError  [CONTEXT]  }  int  zIndex  =  (getNumObjectiveFunctions()  ==  1)  ?  0  :  1;  matrix.setEntry(zIndex,  zIndex,  maximize  ?  1  :  -1);  RealVector  objectiveCoefficients  =  maximize  ?  f.getCoefficients().mapMultiply(-1)  :  f.getCoefficients();  copyArray(objectiveCoefficients.toArray(),  matrix.getDataRef()[zIndex]);  matrix.setEntry(zIndex,  width  -  1,  maximize  ?  f.getConstantTerm()  :  -1  *  f.getConstantTerm());  if  (!restrictToNonNegative)  {  [BUGGY]    RealMatrix  objectiveCoefficients  =  maximize?  f.getConstantMatrix()  :  f.getDecisionMatrix();  [BUGGY]  matrix.setEntry(zIndex,  getSlackVariableOffset()  -  1,    getInvertedCoefficientSum(objectiveCoefficients));  getInvertedCoefficientSum(objectiveCoefficients));  }  int  slackVar  =  0;  int  artificialVar  =  0;  for  (int  i  =  0;  i  <  constraints.size();  i++)  {  LinearConstraint  constraint  =  constraints.get(i);  int  row  =  getNumObjectiveFunctions()  +  i;  [CLASS]  SimplexTableau  [METHOD]  createTableau  [RETURN_TYPE]  RealMatrix  final  boolean  maximize  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  Array2DRowRealMatrix  matrix  double  epsilon  RealVector  objectiveCoefficients  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	199	200	1	replace	    RealMatrix  objectiveCoefficients  =  maximize?  f.getConstantMatrix()  :  f.getDecisionMatrix();		non-compiled	[CE]  ')'  expected	12	None	add
14	[BUG]  [BUGGY]    int  maxUlps  =  constraint.getMaxUlps();  [CE]  ')'  expected  [FE]          AssertionError  [CONTEXT]  }  int  zIndex  =  (getNumObjectiveFunctions()  ==  1)  ?  0  :  1;  matrix.setEntry(zIndex,  zIndex,  maximize  ?  1  :  -1);  RealVector  objectiveCoefficients  =  maximize  ?  f.getCoefficients().mapMultiply(-1)  :  f.getCoefficients();  copyArray(objectiveCoefficients.toArray(),  matrix.getDataRef()[zIndex]);  matrix.setEntry(zIndex,  width  -  1,  maximize  ?  f.getConstantTerm()  :  -1  *  f.getConstantTerm());  if  (!restrictToNonNegative)  {  [BUGGY]    int  maxUlps  =  constraint.getMaxUlps();  [BUGGY]  matrix.setEntry(zIndex,  getSlackVariableOffset()  -  1,    getInvertedCoefficientSum(objectiveCoefficients));  getInvertedCoefficientSum(objectiveCoefficients));  }  int  slackVar  =  0;  int  artificialVar  =  0;  for  (int  i  =  0;  i  <  constraints.size();  i++)  {  LinearConstraint  constraint  =  constraints.get(i);  int  row  =  getNumObjectiveFunctions()  +  i;  [CLASS]  SimplexTableau  [METHOD]  createTableau  [RETURN_TYPE]  RealMatrix  final  boolean  maximize  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  Array2DRowRealMatrix  matrix  double  epsilon  RealVector  objectiveCoefficients  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	199	200	1	replace	    int  maxUlps  =  constraint.getMaxUlps();		non-compiled	[CE]  ')'  expected	12	None	add
15	[BUG]  [BUGGY]  matrix.setEntry(zIndex,  getSlackVariableOffset()  -  1,  getInvertedCoefficientSum(integerCoefficients));  [CE]  ';'  expected  [FE]    AssertionError  [CONTEXT]  }  int  zIndex  =  (getNumObjectiveFunctions()  ==  1)  ?  0  :  1;  matrix.setEntry(zIndex,  zIndex,  maximize  ?  1  :  -1);  RealVector  objectiveCoefficients  =  maximize  ?  f.getCoefficients().mapMultiply(-1)  :  f.getCoefficients();  copyArray(objectiveCoefficients.toArray(),  matrix.getDataRef()[zIndex]);  matrix.setEntry(zIndex,  width  -  1,  maximize  ?  f.getConstantTerm()  :  -1  *  f.getConstantTerm());  if  (!restrictToNonNegative)  {  [BUGGY]  matrix.setEntry(zIndex,  getSlackVariableOffset()  -  1,  getInvertedCoefficientSum(integerCoefficients));  [BUGGY]  getInvertedCoefficientSum(objectiveCoefficients));  }  int  slackVar  =  0;  int  artificialVar  =  0;  for  (int  i  =  0;  i  <  constraints.size();  i++)  {  LinearConstraint  constraint  =  constraints.get(i);  int  row  =  getNumObjectiveFunctions()  +  i;  [CLASS]  SimplexTableau  [METHOD]  createTableau  [RETURN_TYPE]  RealMatrix  final  boolean  maximize  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  Array2DRowRealMatrix  matrix  double  epsilon  RealVector  objectiveCoefficients  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	199	200	1	replace	matrix.setEntry(zIndex,  getSlackVariableOffset()  -  1,  getInvertedCoefficientSum(integerCoefficients));	matrix.setEntry(zIndex,  getSlackVariableOffset()  -  1,  getInvertedCoefficientSum(objectiveCoefficients));  	non-compiled	[CE]  ';'  expected	11	None	replace
16	[BUG]  [BUGGY]  matrix.setEntry(zIndex,  getSlackVariableOffset()  -  1,  getInvertedCoefficientSum(objectiveCoefficients),  maximize);  [CE]  ';'  expected  [FE]      AssertionError  [CONTEXT]  }  int  zIndex  =  (getNumObjectiveFunctions()  ==  1)  ?  0  :  1;  matrix.setEntry(zIndex,  zIndex,  maximize  ?  1  :  -1);  RealVector  objectiveCoefficients  =  maximize  ?  f.getCoefficients().mapMultiply(-1)  :  f.getCoefficients();  copyArray(objectiveCoefficients.toArray(),  matrix.getDataRef()[zIndex]);  matrix.setEntry(zIndex,  width  -  1,  maximize  ?  f.getConstantTerm()  :  -1  *  f.getConstantTerm());  if  (!restrictToNonNegative)  {  [BUGGY]  matrix.setEntry(zIndex,  getSlackVariableOffset()  -  1,  getInvertedCoefficientSum(objectiveCoefficients),  maximize);  [BUGGY]  getInvertedCoefficientSum(objectiveCoefficients));  }  int  slackVar  =  0;  int  artificialVar  =  0;  for  (int  i  =  0;  i  <  constraints.size();  i++)  {  LinearConstraint  constraint  =  constraints.get(i);  int  row  =  getNumObjectiveFunctions()  +  i;  [CLASS]  SimplexTableau  [METHOD]  createTableau  [RETURN_TYPE]  RealMatrix  final  boolean  maximize  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  Array2DRowRealMatrix  matrix  double  epsilon  RealVector  objectiveCoefficients  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	199	200	1	replace	matrix.setEntry(zIndex,  getSlackVariableOffset()  -  1,  getInvertedCoefficientSum(objectiveCoefficients),  maximize);	matrix.setEntry(zIndex,  getSlackVariableOffset()  -  1,  getInvertedCoefficientSum(objectiveCoefficients));  	non-compiled	[CE]  ';'  expected	11	None	replace
17	[BUG]  [BUGGY]    int  slackVar  =  getSlackVariableOffset();  [CE]  ')'  expected  [FE]    AssertionError  [CONTEXT]  }  int  zIndex  =  (getNumObjectiveFunctions()  ==  1)  ?  0  :  1;  matrix.setEntry(zIndex,  zIndex,  maximize  ?  1  :  -1);  RealVector  objectiveCoefficients  =  maximize  ?  f.getCoefficients().mapMultiply(-1)  :  f.getCoefficients();  copyArray(objectiveCoefficients.toArray(),  matrix.getDataRef()[zIndex]);  matrix.setEntry(zIndex,  width  -  1,  maximize  ?  f.getConstantTerm()  :  -1  *  f.getConstantTerm());  if  (!restrictToNonNegative)  {  [BUGGY]    int  slackVar  =  getSlackVariableOffset();  [BUGGY]  matrix.setEntry(zIndex,  getSlackVariableOffset()  -  1,    getInvertedCoefficientSum(objectiveCoefficients));  getInvertedCoefficientSum(objectiveCoefficients));  }  int  slackVar  =  0;  int  artificialVar  =  0;  for  (int  i  =  0;  i  <  constraints.size();  i++)  {  LinearConstraint  constraint  =  constraints.get(i);  int  row  =  getNumObjectiveFunctions()  +  i;  [CLASS]  SimplexTableau  [METHOD]  createTableau  [RETURN_TYPE]  RealMatrix  final  boolean  maximize  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  Array2DRowRealMatrix  matrix  double  epsilon  RealVector  objectiveCoefficients  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	199	200	1	replace	    int  slackVar  =  getSlackVariableOffset();		non-compiled	[CE]  ')'  expected	12	None	add
18	[BUG]  [BUGGY]    Integer  slackVar  =  constraint.getSlackVariableOffset();  [CE]  ')'  expected  [FE]      AssertionError  [CONTEXT]  }  int  zIndex  =  (getNumObjectiveFunctions()  ==  1)  ?  0  :  1;  matrix.setEntry(zIndex,  zIndex,  maximize  ?  1  :  -1);  RealVector  objectiveCoefficients  =  maximize  ?  f.getCoefficients().mapMultiply(-1)  :  f.getCoefficients();  copyArray(objectiveCoefficients.toArray(),  matrix.getDataRef()[zIndex]);  matrix.setEntry(zIndex,  width  -  1,  maximize  ?  f.getConstantTerm()  :  -1  *  f.getConstantTerm());  if  (!restrictToNonNegative)  {  [BUGGY]    Integer  slackVar  =  constraint.getSlackVariableOffset();  [BUGGY]  matrix.setEntry(zIndex,  getSlackVariableOffset()  -  1,    getInvertedCoefficientSum(objectiveCoefficients));  getInvertedCoefficientSum(objectiveCoefficients));  }  int  slackVar  =  0;  int  artificialVar  =  0;  for  (int  i  =  0;  i  <  constraints.size();  i++)  {  LinearConstraint  constraint  =  constraints.get(i);  int  row  =  getNumObjectiveFunctions()  +  i;  [CLASS]  SimplexTableau  [METHOD]  createTableau  [RETURN_TYPE]  RealMatrix  final  boolean  maximize  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  Array2DRowRealMatrix  matrix  double  epsilon  RealVector  objectiveCoefficients  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	199	200	1	replace	    Integer  slackVar  =  constraint.getSlackVariableOffset();		non-compiled	[CE]  ')'  expected	12	None	add
19	[BUG]  [BUGGY]    Integer  slackVar  =  getSlackVariableOffset();  [CE]  ')'  expected  [FE]        AssertionError  [CONTEXT]  }  int  zIndex  =  (getNumObjectiveFunctions()  ==  1)  ?  0  :  1;  matrix.setEntry(zIndex,  zIndex,  maximize  ?  1  :  -1);  RealVector  objectiveCoefficients  =  maximize  ?  f.getCoefficients().mapMultiply(-1)  :  f.getCoefficients();  copyArray(objectiveCoefficients.toArray(),  matrix.getDataRef()[zIndex]);  matrix.setEntry(zIndex,  width  -  1,  maximize  ?  f.getConstantTerm()  :  -1  *  f.getConstantTerm());  if  (!restrictToNonNegative)  {  [BUGGY]    Integer  slackVar  =  getSlackVariableOffset();  [BUGGY]  matrix.setEntry(zIndex,  getSlackVariableOffset()  -  1,    getInvertedCoefficientSum(objectiveCoefficients));  getInvertedCoefficientSum(objectiveCoefficients));  }  int  slackVar  =  0;  int  artificialVar  =  0;  for  (int  i  =  0;  i  <  constraints.size();  i++)  {  LinearConstraint  constraint  =  constraints.get(i);  int  row  =  getNumObjectiveFunctions()  +  i;  [CLASS]  SimplexTableau  [METHOD]  createTableau  [RETURN_TYPE]  RealMatrix  final  boolean  maximize  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  Array2DRowRealMatrix  matrix  double  epsilon  RealVector  objectiveCoefficients  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	199	200	1	replace	    Integer  slackVar  =  getSlackVariableOffset();		non-compiled	[CE]  ')'  expected	12	None	add
20	[BUG]  [BUGGY]    int  slackVar  =  getSlackVariableOffset()  +  1;  [CE]  ')'  expected  [FE]          AssertionError  [CONTEXT]  }  int  zIndex  =  (getNumObjectiveFunctions()  ==  1)  ?  0  :  1;  matrix.setEntry(zIndex,  zIndex,  maximize  ?  1  :  -1);  RealVector  objectiveCoefficients  =  maximize  ?  f.getCoefficients().mapMultiply(-1)  :  f.getCoefficients();  copyArray(objectiveCoefficients.toArray(),  matrix.getDataRef()[zIndex]);  matrix.setEntry(zIndex,  width  -  1,  maximize  ?  f.getConstantTerm()  :  -1  *  f.getConstantTerm());  if  (!restrictToNonNegative)  {  [BUGGY]    int  slackVar  =  getSlackVariableOffset()  +  1;  [BUGGY]  matrix.setEntry(zIndex,  getSlackVariableOffset()  -  1,    getInvertedCoefficientSum(objectiveCoefficients));  getInvertedCoefficientSum(objectiveCoefficients));  }  int  slackVar  =  0;  int  artificialVar  =  0;  for  (int  i  =  0;  i  <  constraints.size();  i++)  {  LinearConstraint  constraint  =  constraints.get(i);  int  row  =  getNumObjectiveFunctions()  +  i;  [CLASS]  SimplexTableau  [METHOD]  createTableau  [RETURN_TYPE]  RealMatrix  final  boolean  maximize  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  Array2DRowRealMatrix  matrix  double  epsilon  RealVector  objectiveCoefficients  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	199	200	1	replace	    int  slackVar  =  getSlackVariableOffset()  +  1;		non-compiled	[CE]  ')'  expected	12	None	add
