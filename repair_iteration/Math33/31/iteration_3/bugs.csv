bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnsToDrop.size();  i--)  {  matrix[i][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  for(int  i  =  0;  i  <  columnsToDrop.size();  i--)  {  matrix[i][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	for(int  i  =  0;  i  <  columnsToDrop.size();  i--)  {  matrix[i][col++]  =  table.getEntry(i,  col);  }	  for(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    matrix[i][col++]    =    table.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  columnLabels.size();  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  for(int  i  =  columnLabels.size();  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	for(int  i  =  columnLabels.size();  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  col);  }	  for(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    matrix[i][col++]    =    table.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
3	[BUG]  [BUGGY]  for(int  i  =  col.size();  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  for(int  i  =  col.size();  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	for(int  i  =  col.size();  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  col);  }	  for(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    matrix[i][col++]    =    table.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
4	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnsToDrop,  column);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnsToDrop,  column);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(columnsToDrop,  column);	  this.tableau    =    new    Array2DRowRealMatrix(columnsToDrop,    col);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
5	[BUG]  [BUGGY]  colLabels[i][col++]  =  table.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  colLabels[i][col++]  =  table.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	colLabels[i][col++]  =  table.getEntry(i,  j);	  if(columnLabels!=    null)    {    for(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    columnLabels[i][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
6	[BUG]  [BUGGY]  this.tableau  =  new  LinkedList2DRowRealMatrix(col,  column);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  LinkedList2DRowRealMatrix(col,  column);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  LinkedList2DRowRealMatrix(col,  column);	  this.tableau    =    new    LinkedList2DRowRealMatrix(col,    matrix);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
7	[BUG]  [BUGGY]  this.tableau  =  new  LinkedList2DRowRealMatrix(matrix,  col);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  LinkedList2DRowRealMatrix(matrix,  col);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  LinkedList2DRowRealMatrix(matrix,  col);	  this.tableau    =    new    LinkedList2DRowRealMatrix(col,    matrix);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
8	[BUG]  [BUGGY]  this.tableau  =  new  LinkedList2DRowRealMatrix(col,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  LinkedList2DRowRealMatrix(col,  columnsToDrop);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  LinkedList2DRowRealMatrix(col,  columnsToDrop);	  this.tableau    =    new    LinkedList2DRowRealMatrix(col,    matrix);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
9	[BUG]  [BUGGY]  this.tableau  =  new  ArrayList2DRowRealMatrix(col,  matrix);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  ArrayList2DRowRealMatrix(col,  matrix);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  ArrayList2DRowRealMatrix(col,  matrix);	  this.tableau    =    new    LinkedList2DRowRealMatrix(col,    matrix);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
10	[BUG]  [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col,  columnsToDrop,  columnLabels);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col,  columnsToDrop,  columnLabels);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DowRealMatrix(col,  columnsToDrop,  columnLabels);	  this.tableau    =    new    Array2DowRealMatrix(col,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
11	[BUG]  [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(columnsToDrop,  columnLabels);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(columnsToDrop,  columnLabels);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DowRealMatrix(columnsToDrop,  columnLabels);	  this.tableau    =    new    Array2DowRealMatrix(col,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
12	[BUG]  [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col,  0,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col,  0,  columnsToDrop);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DowRealMatrix(col,  0,  columnsToDrop);	  this.tableau    =    new    Array2DowRealMatrix(col,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
13	[BUG]  [BUGGY]  this.tableau  =  new  ArrayList2DRowRealMatrix(col);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  ArrayList2DRowRealMatrix(col);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  ArrayList2DRowRealMatrix(col);	  this.tableau    =    new    ArrayList2DRowRealMatrix(matrix);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
14	[BUG]  [BUGGY]  this.tableau  =  new  ArrayList2DRowRealMatrix(col++);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  ArrayList2DRowRealMatrix(col++);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  ArrayList2DRowRealMatrix(col++);	  this.tableau    =    new    ArrayList2DRowRealMatrix(matrix);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
15	[BUG]  [BUGGY]  this.tableau  =  new  ArrayList2DRowRealMatrix(columnLabels);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  ArrayList2DRowRealMatrix(columnLabels);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  ArrayList2DRowRealMatrix(columnLabels);	  this.tableau    =    new    LinkedList2DRowRealMatrix(columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
16	[BUG]  [BUGGY]  this.tableau  =  new  LinkedList2DRowRealMatrix(columnLabels,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  LinkedList2DRowRealMatrix(columnLabels,  columnsToDrop);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  LinkedList2DRowRealMatrix(columnLabels,  columnsToDrop);	  this.tableau    =    new    LinkedList2DRowRealMatrix(columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
17	[BUG]  [BUGGY]  this.tableau  =  new  LinkedList2DRowRealMatrix(columnLabels,  column);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  LinkedList2DRowRealMatrix(columnLabels,  column);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  LinkedList2DRowRealMatrix(columnLabels,  column);	  this.tableau    =    new    LinkedList2DRowRealMatrix(columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
18	[BUG]  [BUGGY]  this.tableau  =  new  LinkedList2DRowRealMatrix(this.columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  LinkedList2DRowRealMatrix(this.columnsToDrop);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  LinkedList2DRowRealMatrix(this.columnsToDrop);	  this.tableau    =    new    LinkedList2DRowRealMatrix(columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
19	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  columnLabels.getEntry(i,  i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  columnLabels.getEntry(i,  i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  columnLabels.getEntry(i,  i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	  LinearObjectiveFunction    f    =    table.getEntry(i,    i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
20	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  table.getEntry(i,  i  +  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  table.getEntry(i,  i  +  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  table.getEntry(i,  i  +  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	  LinearObjectiveFunction    f    =    table.getEntry(i,    i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
21	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  columnLength  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  columnLength  +  1);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col++,  columnLength  +  1);	  this.tableau    =    new    Array2DRowRealMatrix(col++,    columnLength);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
22	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  columnsToDrop.length);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  columnsToDrop.length);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col++,  columnsToDrop.length);	  this.tableau    =    new    Array2DRowRealMatrix(col++,    columnLength);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
23	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  columnLabels.length);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  columnLabels.length);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col++,  columnLabels.length);	  this.tableau    =    new    Array2DRowRealMatrix(col++,    columnLength);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
24	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  DEFAULT_ULPS,  columnLabels);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  DEFAULT_ULPS,  columnLabels);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col,  DEFAULT_ULPS,  columnLabels);	  this.tableau    =    new    Array2DRowRealMatrix(col,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
25	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  DEFAULT_ULPS,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  DEFAULT_ULPS,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col,  DEFAULT_ULPS,  NEGATIVE_VAR_COLUMN_LABEL);	  this.tableau    =    new    Array2DRowRealMatrix(col,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
26	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  DEFAULT_ULPS,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  DEFAULT_ULPS,  columnsToDrop);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col,  DEFAULT_ULPS,  columnsToDrop);	  this.tableau    =    new    Array2DRowRealMatrix(col,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
27	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels,  j);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels,  j);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j,    columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
28	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  col,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  col,  columnLabels);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  col,  columnLabels);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j,    columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
29	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  0,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  0,  columnLabels);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  0,  columnLabels);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j,    columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
30	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnLabels);  matrix[i  -  1][col++]  =  f.getEntry(i,  j,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnLabels);  matrix[i  -  1][col++]  =  f.getEntry(i,  j,  columnLabels);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnLabels);  matrix[i  -  1][col++]  =  f.getEntry(i,  j,  columnLabels);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j,    columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
31	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  i);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  i);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  i);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(columnsToDrop,    column);    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
32	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  column);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  column);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  column);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(columnsToDrop,    column);    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
33	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  j);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  j);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  j);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(columnsToDrop,    column);    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
34	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(column,  column);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(column,  column);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(column,  column);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(columnsToDrop,    column);    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
35	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnLabels,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnLabels,  columnsToDrop);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnLabels,  columnsToDrop);	  this.tableau    =    new    Array2DRowRealMatrix(col    +    1,    columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
36	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columns);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columns);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columns);	  this.tableau    =    new    Array2DRowRealMatrix(col    +    1,    columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
37	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  col);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  col);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  col);	  this.tableau    =    new    Array2DRowRealMatrix(col    +    1,    columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
38	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getPhase1ObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getPhase1ObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getPhase1ObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);	  LinearObjectiveFunction    f    =    getPhase1ObjectiveFunction(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
39	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getPhase1ObjectiveFunction(i,  columnLabels);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getPhase1ObjectiveFunction(i,  columnLabels);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getPhase1ObjectiveFunction(i,  columnLabels);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	  LinearObjectiveFunction    f    =    getPhase1ObjectiveFunction(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
40	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getPhase2ObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getPhase2ObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getPhase2ObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	  LinearObjectiveFunction    f    =    getPhase1ObjectiveFunction(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
41	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getPhase1ObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels[j]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getPhase1ObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels[j]);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getPhase1ObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels[j]);	  LinearObjectiveFunction    f    =    getPhase1ObjectiveFunction(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
42	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col++,  NEGATIVE_VAR_COLUMN_LABEL);	  this.tableau    =    new    Array2DRowRealMatrix(col++,    col);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
43	[BUG]  [BUGGY]  For(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  matrix[i++][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  For(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  matrix[i++][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	For(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  matrix[i++][col++]  =  matrix.getEntry(i,  j);  }	  For(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    matrix[i++][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
44	[BUG]  [BUGGY]  For(int  i  =  columnLabels.size();  i  >=  0;  i--)  {  matrix[i++][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  For(int  i  =  columnLabels.size();  i  >=  0;  i--)  {  matrix[i++][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	For(int  i  =  columnLabels.size();  i  >=  0;  i--)  {  matrix[i++][col++]  =  matrix.getEntry(i,  j);  }	  For(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    matrix[i++][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
45	[BUG]  [BUGGY]  for(int  i  =  columnLabels.size();  i  >=  0;  i--)  {  matrix[i++][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  for(int  i  =  columnLabels.size();  i  >=  0;  i--)  {  matrix[i++][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	for(int  i  =  columnLabels.size();  i  >=  0;  i--)  {  matrix[i++][col++]  =  matrix.getEntry(i,  j);  }	  For(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    matrix[i++][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
46	[BUG]  [BUGGY]  matrix[i  -  1][col++]  =  columnLabels.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  matrix[i  -  1][col++]  =  columnLabels.getEntry(i,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	matrix[i  -  1][col++]  =  columnLabels.getEntry(i,  col);	  matrix[i    -    1][col++]    =    table.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
47	[BUG]  [BUGGY]  matrix[i  -  1][col++]  =  column.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  matrix[i  -  1][col++]  =  column.getEntry(i,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	matrix[i  -  1][col++]  =  column.getEntry(i,  col);	  matrix[i    -    1][col++]    =    table.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
48	[BUG]  [BUGGY]  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);	  matrix[i    -    1][col++]    =    table.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
49	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  column,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  column,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  column,  NEGATIVE_VAR_COLUMN_LABEL);	  this.tableau    =    new    Array2DRowRealMatrix(col    +    1,    column);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
50	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  column,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  column,  columnsToDrop);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  column,  columnsToDrop);	  this.tableau    =    new    Array2DRowRealMatrix(col    +    1,    column);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
51	[BUG]  [BUGGY]  ColumnsToDrop  columnLabels[i  -  1][col++]  =  table.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  ColumnsToDrop  columnLabels[i  -  1][col++]  =  table.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	ColumnsToDrop  columnLabels[i  -  1][col++]  =  table.getEntry(i,  j);	  ColumnsToDrop    columnLabels[i    -    1][col++]    =    table.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
52	[BUG]  [BUGGY]  ColumnsToDrop  columnLabels[i  -  1][col++]  =  matrix.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  ColumnsToDrop  columnLabels[i  -  1][col++]  =  matrix.getEntry(i,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	ColumnsToDrop  columnLabels[i  -  1][col++]  =  matrix.getEntry(i,  col);	  ColumnsToDrop    columnLabels[i    -    1][col++]    =    table.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
53	[BUG]  [BUGGY]  ColumnsToDrop  columnLabels[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  ColumnsToDrop  columnLabels[i  -  1][col++]  =  tableau.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	ColumnsToDrop  columnLabels[i  -  1][col++]  =  tableau.getEntry(i,  j);	  ColumnsToDrop    columnLabels[i    -    1][col++]    =    table.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
54	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnLabels.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    column);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
55	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  column  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  column  +  1);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  column  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnLabels.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    column);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
56	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  columns);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  columns);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  columns);	  this.tableau    =    new    Array2DRowRealMatrix(columnLabels,    column);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
57	[BUG]  [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col,  DEFAULT_ULPS,  columnLabels);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col,  DEFAULT_ULPS,  columnLabels);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DowRealMatrix(col,  DEFAULT_ULPS,  columnLabels);	  this.tableau    =    new    Array2DowRealMatrix(col,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
58	[BUG]  [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col,  DEFAULT_ULPS,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col,  DEFAULT_ULPS,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DowRealMatrix(col,  DEFAULT_ULPS,  NEGATIVE_VAR_COLUMN_LABEL);	  this.tableau    =    new    Array2DowRealMatrix(col,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
59	[BUG]  [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DowRealMatrix(col,  NEGATIVE_VAR_COLUMN_LABEL);	  this.tableau    =    new    Array2DowRealMatrix(col,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
60	[BUG]  [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col,  0,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col,  0,  DEFAULT_ULPS);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DowRealMatrix(col,  0,  DEFAULT_ULPS);	  this.tableau    =    new    Array2DowRealMatrix(col,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
61	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  col);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  col);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  col);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(col);    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
62	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  col);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  col);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  col);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i,    columnLabels);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
63	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnLabels.length);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnLabels.length);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnLabels.length);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i,    columnLabels);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
64	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnLabels,  col);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnLabels,  col);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnLabels,  col);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i,    columnLabels);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
65	[BUG]  [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col,  column,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col,  column,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DowRealMatrix(col,  column,  NEGATIVE_VAR_COLUMN_LABEL);	  this.tableau    =    new    Array2DowRealMatrix(col,    column);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
66	[BUG]  [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col,  col);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col,  col);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DowRealMatrix(col,  col);	  this.tableau    =    new    Array2DowRealMatrix(col,    column);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
67	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnsToDrop.size();  i--)  {  matrix[i++][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  for(int  i  =  0;  i  <  columnsToDrop.size();  i--)  {  matrix[i++][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	for(int  i  =  0;  i  <  columnsToDrop.size();  i--)  {  matrix[i++][col++]  =  matrix.getEntry(i,  j);  }	  for(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    matrix[i++][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
68	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnsToDrop.size();  i--)  {  matrix[i][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  for(int  i  =  0;  i  <  columnsToDrop.size();  i--)  {  matrix[i][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	for(int  i  =  0;  i  <  columnsToDrop.size();  i--)  {  matrix[i][col++]  =  table.getEntry(i,  j);  }	  for(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    matrix[i][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
69	[BUG]  [BUGGY]  for(int  i  =  0;  i  >=  columnsToDrop.size();  i--)  {  matrix[i][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  for(int  i  =  0;  i  >=  columnsToDrop.size();  i--)  {  matrix[i][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	for(int  i  =  0;  i  >=  columnsToDrop.size();  i--)  {  matrix[i][col++]  =  table.getEntry(i,  j);  }	  for(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    matrix[i][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
70	[BUG]  [BUGGY]  for(int  i  =  columnLabels.size();  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  for(int  i  =  columnLabels.size();  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	for(int  i  =  columnLabels.size();  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  j);  }	  for(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    matrix[i][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
71	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  columnLabels.getEntry(i,  col);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  columnLabels.getEntry(i,  col);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  columnLabels.getEntry(i,  col);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);	  LinearObjectiveFunction    f    =    table.getEntry(i,    col);    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
72	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  matrix[i  -  1][col++]  =  f.getEntry(i,  col);	  LinearObjectiveFunction    f    =    table.getEntry(i,    col);    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
73	[BUG]  [BUGGY]  LinearObjectiveFunction  matrix  =(LinearObjectiveFunction)this.columnsToDrop.get(i  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  matrix  =(LinearObjectiveFunction)this.columnsToDrop.get(i  -  1);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  matrix  =(LinearObjectiveFunction)this.columnsToDrop.get(i  -  1);	  LinearObjectiveFunction    matrix    =(LinearObjectiveFunction)this.columnsToDrop.get(i);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
74	[BUG]  [BUGGY]  ColumnLabels[i][col++]  =  table.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  ColumnLabels[i][col++]  =  table.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	ColumnLabels[i][col++]  =  table.getEntry(i,  j);	  if(columnLabels!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
75	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  DEFAULT_ULPS,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  DEFAULT_ULPS,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  DEFAULT_ULPS,  NEGATIVE_VAR_COLUMN_LABEL);	  this.tableau    =    new    Array2DRowRealMatrix(columnLabels,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
76	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  NEGATIVE_VAR_COLUMN_LABEL);	  this.tableau    =    new    Array2DRowRealMatrix(columnLabels,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
77	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  DEFAULT_ULPS,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  DEFAULT_ULPS,  columnLabels);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  DEFAULT_ULPS,  columnLabels);	  this.tableau    =    new    Array2DRowRealMatrix(columnLabels,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
78	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  DEFAULT_ULPS,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  DEFAULT_ULPS,  columnsToDrop);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  DEFAULT_ULPS,  columnsToDrop);	  this.tableau    =    new    Array2DRowRealMatrix(columnLabels,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
79	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i  +  1);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnLabels.get(i);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
80	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i  -  1);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i  -  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnLabels.get(i);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
81	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  columnLabels.getEntry(i,  col);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  columnLabels.getEntry(i,  col);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  columnLabels.getEntry(i,  col);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	  LinearObjectiveFunction    f    =    table.getEntry(i,    col);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
82	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(i,  j);  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(i,  j);  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(i,  j);  matrix[i  -  1][col++]  =  table.getEntry(i,  col);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
83	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(i,  j);  matrix[i  -  1][col++]  =  table.getEntry(i,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(i,  j);  matrix[i  -  1][col++]  =  table.getEntry(i,  columnLabels);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(i,  j);  matrix[i  -  1][col++]  =  table.getEntry(i,  columnLabels);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
84	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  table.getEntry(i,  j  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  table.getEntry(i,  j  +  1);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  table.getEntry(i,  j  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
85	[BUG]  [BUGGY]  For(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  For(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	For(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  j);  }	  for(int    i    =    columnLabels.size()    -    1;    i    >=    0;    i--)    {    matrix[i][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
86	[BUG]  [BUGGY]  matrix[i][col++]  =  table.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  matrix[i][col++]  =  table.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	matrix[i][col++]  =  table.getEntry(i,  j);	  for(int    i    =    columnLabels.size()    -    1;    i    >=    0;    i--)    {    matrix[i][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
87	[BUG]  [BUGGY]  this.tableau  =  new  LinkedList2DRowRealMatrix(col,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  LinkedList2DRowRealMatrix(col,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  LinkedList2DRowRealMatrix(col,  NEGATIVE_VAR_COLUMN_LABEL);	  this.tableau    =    new    LinkedList2DRowRealMatrix(col);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
88	[BUG]  [BUGGY]  int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  col);  }	  for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    matrix[i][col++]    =    table.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
89	[BUG]  [BUGGY]  LinearObjectiveFunction  matrix  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  matrix  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1  -  1);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  matrix  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1  -  1);	  LinearObjectiveFunction    matrix    =(LinearObjectiveFunction)columnsToDrop.get(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
90	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  columnsToDrop.getEntry(i,  j);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  columnsToDrop.getEntry(i,  j);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  columnsToDrop.getEntry(i,  j);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	  LinearObjectiveFunction    f    =    columnLabels.getEntry(i,    j);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
91	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	  LinearObjectiveFunction    f    =    columnLabels.getEntry(i,    j);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
92	[BUG]  [BUGGY]  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	matrix[i  -  1][col++]  =  f.getEntry(i,  j);	  LinearObjectiveFunction    f    =    columnLabels.getEntry(i,    j);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
93	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnLabelsToDrop);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnLabelsToDrop);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnLabelsToDrop);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(columnsToDrop,    columnsToDrop);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
94	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(NEGATIVE_VAR_COLUMN_LABEL,  column);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(NEGATIVE_VAR_COLUMN_LABEL,  column);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(NEGATIVE_VAR_COLUMN_LABEL,  column);	  this.tableau    =    new    Array2DRowRealMatrix(col,    NEGATIVE_VAR_COLUMN_LABEL);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
95	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(NEGATIVE_VAR_COLUMN_LABEL,  col);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(NEGATIVE_VAR_COLUMN_LABEL,  col);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(NEGATIVE_VAR_COLUMN_LABEL,  col);	  this.tableau    =    new    Array2DRowRealMatrix(col,    NEGATIVE_VAR_COLUMN_LABEL);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
96	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(negatIVE_VAR_COLUMN_LABEL,  col);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(negatIVE_VAR_COLUMN_LABEL,  col);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(negatIVE_VAR_COLUMN_LABEL,  col);	  this.tableau    =    new    Array2DRowRealMatrix(col,    NEGATIVE_VAR_COLUMN_LABEL);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
97	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  columnLabels,  col);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  columnLabels,  col);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  columnLabels,  col);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(columnsToDrop,    columnLabels);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
98	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i    -    1);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
99	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels[j]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels[j]);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels[j]);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i    -    1);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
100	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  j  +  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  j  +  1);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  j  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i    -    1);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
101	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i  -  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i  -  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i  -  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i    -    1);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
102	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columns.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columns.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columns.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)list.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
103	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)list.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)list.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)list.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)list.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
104	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  columns);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  columns);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col++,  columns);	  this.tableau    =    new    Array2DRowRealMatrix(col++,    columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
105	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  columnLabels,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  columnLabels,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col++,  columnLabels,  NEGATIVE_VAR_COLUMN_LABEL);	  this.tableau    =    new    Array2DRowRealMatrix(col++,    columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
106	[BUG]  [BUGGY]  for(int  i  =  columnLabels.size();  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  for(int  i  =  columnLabels.size();  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	for(int  i  =  columnLabels.size();  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }	  for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i++][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
107	[BUG]  [BUGGY]  int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }	  for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i++][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
108	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnsToDrop,  columnLabels.length);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnsToDrop,  columnLabels.length);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(columnsToDrop,  columnLabels.length);	  this.tableau    =    new    Array2DRowRealMatrix(columnsToDrop,    columnLength);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
109	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnsToDrop,  columnLength  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnsToDrop,  columnLength  +  1);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(columnsToDrop,  columnLength  +  1);	  this.tableau    =    new    Array2DRowRealMatrix(columnsToDrop,    columnLength);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
110	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  columnsToDrop.getEntry(i,  j);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  columnsToDrop.getEntry(i,  j);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  columnsToDrop.getEntry(i,  j);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);	  LinearObjectiveFunction    f    =    columnLabels.getEntry(i,    j);    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
111	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  col.getEntry(i,  j);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  col.getEntry(i,  j);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  col.getEntry(i,  j);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);	  LinearObjectiveFunction    f    =    columnLabels.getEntry(i,    j);    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
112	[BUG]  [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col,  columnLabels,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col,  columnLabels,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DowRealMatrix(col,  columnLabels,  NEGATIVE_VAR_COLUMN_LABEL);	  this.tableau    =    new    Array2DowRealMatrix(col,    columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
113	[BUG]  [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col,  columnLabels,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col,  columnLabels,  columnsToDrop);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DowRealMatrix(col,  columnLabels,  columnsToDrop);	  this.tableau    =    new    Array2DowRealMatrix(col,    columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
114	[BUG]  [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col,  columns);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col,  columns);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DowRealMatrix(col,  columns);	  this.tableau    =    new    Array2DowRealMatrix(col,    columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
115	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(columnsToDrop,    col);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
116	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  columnToDrop);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  columnToDrop);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  columnToDrop);	  this.tableau    =    new    Array2DRowRealMatrix(columnsToDrop,    columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
117	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnsToDrop,  columns);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnsToDrop,  columns);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(columnsToDrop,  columns);	  this.tableau    =    new    Array2DRowRealMatrix(columnsToDrop,    columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
118	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnsToDrop,  columnLabels,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnsToDrop,  columnLabels,  columnsToDrop);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(columnsToDrop,  columnLabels,  columnsToDrop);	  this.tableau    =    new    Array2DRowRealMatrix(columnsToDrop,    columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
119	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnsToDrop,  columnsToDrop,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnsToDrop,  columnsToDrop,  columnLabels);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(columnsToDrop,  columnsToDrop,  columnLabels);	  this.tableau    =    new    Array2DRowRealMatrix(columnsToDrop,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
120	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  columnLength  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  columnLength  +  1);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  columnLength  +  1);	  this.tableau    =    new    Array2DRowRealMatrix(columnLabels,    columnLength);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
121	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  0,  columnLength);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  0,  columnLength);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  0,  columnLength);	  this.tableau    =    new    Array2DRowRealMatrix(columnLabels,    columnLength);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
122	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  columnsToDrop.length);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  columnsToDrop.length);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  columnsToDrop.length);	  this.tableau    =    new    Array2DRowRealMatrix(columnLabels,    columnLength);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
123	[BUG]  [BUGGY]  colLabels[i++][col++]  =  matrix.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  colLabels[i++][col++]  =  matrix.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	colLabels[i++][col++]  =  matrix.getEntry(i,  j);	  if(columnLabels!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i++][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
124	[BUG]  [BUGGY]  colLabels[i  -  1][col++]  =  matrix.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  colLabels[i  -  1][col++]  =  matrix.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	colLabels[i  -  1][col++]  =  matrix.getEntry(i,  j);	  if(columnLabels!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i++][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
125	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  column,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  column,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col,  column,  NEGATIVE_VAR_COLUMN_LABEL);	  this.tableau    =    new    Array2DRowRealMatrix(col,    column);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
126	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  col);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  col);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col,  col);	  this.tableau    =    new    Array2DRowRealMatrix(col,    column);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
127	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
128	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels[j]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels[j]);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels[j]);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
129	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels[i],  j);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels[i],  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels[i],  j);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
130	[BUG]  [BUGGY]  for(int  i  =  columnLabels.size();  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  for(int  i  =  columnLabels.size();  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	for(int  i  =  columnLabels.size();  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  col);  }	  for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i][col++]    =    table.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
131	[BUG]  [BUGGY]  for(int  i  =  col.size();  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  for(int  i  =  col.size();  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	for(int  i  =  col.size();  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  col);  }	  for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i][col++]    =    table.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
132	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j,  columnLabels[j]);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j,  columnLabels[j]);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j,  columnLabels[j]);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    columnLabels[j]);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
133	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columns[j]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columns[j]);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columns[j]);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    columnLabels[j]);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
134	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels[j],  col);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels[j],  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels[j],  col);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    columnLabels[j]);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
135	[BUG]  [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col  +  1,  columnLabels);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col  +  1,  columnLabels);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DowRealMatrix(col  +  1,  columnLabels);	  this.tableau    =    new    Array2DowRealMatrix(col    +    1);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
136	[BUG]  [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col  +  2);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col  +  2);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DowRealMatrix(col  +  2);	  this.tableau    =    new    Array2DowRealMatrix(col    +    1);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
137	[BUG]  [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col  +  1,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col  +  1,  columnsToDrop);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DowRealMatrix(col  +  1,  columnsToDrop);	  this.tableau    =    new    Array2DowRealMatrix(col    +    1);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
138	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnsToDrop.size();  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  for(int  i  =  0;  i  <  columnsToDrop.size();  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	for(int  i  =  0;  i  <  columnsToDrop.size();  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }	  for(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    columnLabels[i++][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
139	[BUG]  [BUGGY]  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }	  for(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    columnLabels[i++][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
140	[BUG]  [BUGGY]  for(int  i  =  0;  i  >=  columnsToDrop.size();  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  for(int  i  =  0;  i  >=  columnsToDrop.size();  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	for(int  i  =  0;  i  >=  columnsToDrop.size();  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }	  for(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    columnLabels[i++][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
141	[BUG]  [BUGGY]  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  table[i][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  table[i][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  table[i][col++]  =  table.getEntry(i,  j);  }	  for(int    i    =    columnLabels.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
142	[BUG]  [BUGGY]  this.tableau  =  new  RealMatrix(col);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  RealMatrix(col);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  RealMatrix(col);	  this.tableau    =    new    RealMatrix(matrix);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
143	[BUG]  [BUGGY]  this.tableau  =  new  RealMatrix(col,  matrix);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  RealMatrix(col,  matrix);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  RealMatrix(col,  matrix);	  this.tableau    =    new    RealMatrix(matrix);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
144	[BUG]  [BUGGY]  this.tableau  =  new  RealMatrix(col++);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  RealMatrix(col++);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  RealMatrix(col++);	  this.tableau    =    new    RealMatrix(matrix);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
145	[BUG]  [BUGGY]  this.tableau  =  new  RealMatrix(col++,  matrix);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  RealMatrix(col++,  matrix);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  RealMatrix(col++,  matrix);	  this.tableau    =    new    RealMatrix(matrix);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
146	[BUG]  [BUGGY]  for(int  i  =  colsToDrop.size();  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  for(int  i  =  colsToDrop.size();  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	for(int  i  =  colsToDrop.size();  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  j);  }	  for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    matrix[i][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
147	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1  +  1);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i    -    1);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
148	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(matrix,  column);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(matrix,  column);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(matrix,  column);	  this.tableau    =    new    Array2DRowRealMatrix(matrix,    col);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
149	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(numSlackVariables,  col);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(numSlackVariables,  col);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(numSlackVariables,  col);	  this.tableau    =    new    Array2DRowRealMatrix(matrix,    col);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
150	[BUG]  [BUGGY]  col[i][col++]  =  table.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  col[i][col++]  =  table.getEntry(i,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	col[i][col++]  =  table.getEntry(i,  col);	  for(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    col[i][col++]    =    table.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
151	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnsToDrop.size();  i--)  {  col[i][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  for(int  i  =  0;  i  <  columnsToDrop.size();  i--)  {  col[i][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	for(int  i  =  0;  i  <  columnsToDrop.size();  i--)  {  col[i][col++]  =  table.getEntry(i,  col);  }	  for(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    col[i][col++]    =    table.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
152	[BUG]  [BUGGY]  for(int  i  =  columnLabels.size();  i  >=  0;  i--)  {  col[i][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  for(int  i  =  columnLabels.size();  i  >=  0;  i--)  {  col[i][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	for(int  i  =  columnLabels.size();  i  >=  0;  i--)  {  col[i][col++]  =  table.getEntry(i,  col);  }	  for(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    col[i][col++]    =    table.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
153	[BUG]  [BUGGY]  for(int  i  =  col.size();  i  >=  0;  i--)  {  col[i][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  for(int  i  =  col.size();  i  >=  0;  i--)  {  col[i][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	for(int  i  =  col.size();  i  >=  0;  i--)  {  col[i][col++]  =  table.getEntry(i,  col);  }	  for(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    col[i][col++]    =    table.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
154	[BUG]  [BUGGY]  For(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  For(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	For(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }	  For(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    columnLabels[i++][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
155	[BUG]  [BUGGY]  For(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  For(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	For(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }	  For(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    columnLabels[i++][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
156	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  DEFAULT_ULPS,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  DEFAULT_ULPS,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col++,  DEFAULT_ULPS,  NEGATIVE_VAR_COLUMN_LABEL);	  this.tableau    =    new    Array2DRowRealMatrix(col++,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
157	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  DEFAULT_ULPS,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  DEFAULT_ULPS,  columnLabels);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col++,  DEFAULT_ULPS,  columnLabels);	  this.tableau    =    new    Array2DRowRealMatrix(col++,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
158	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  NEGATIVE_VAR_COLUMN_LABEL  +  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  NEGATIVE_VAR_COLUMN_LABEL  +  DEFAULT_ULPS);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col++,  NEGATIVE_VAR_COLUMN_LABEL  +  DEFAULT_ULPS);	  this.tableau    =    new    Array2DRowRealMatrix(col++,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
159	[BUG]  [BUGGY]  matrix[i  -  1][col++]  =  table.getEntry(i,  j,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  matrix[i  -  1][col++]  =  table.getEntry(i,  j,  columnLabels);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	matrix[i  -  1][col++]  =  table.getEntry(i,  j,  columnLabels);	  matrix[i    -    1][col++]    =    table.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
160	[BUG]  [BUGGY]  matrix[i  -  1][col++]  =  table.getEntry(i,  i);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  matrix[i  -  1][col++]  =  table.getEntry(i,  i);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	matrix[i  -  1][col++]  =  table.getEntry(i,  i);	  matrix[i    -    1][col++]    =    table.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
161	[BUG]  [BUGGY]  matrix[i  -  1][col++]  =  columnLabels.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  matrix[i  -  1][col++]  =  columnLabels.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	matrix[i  -  1][col++]  =  columnLabels.getEntry(i,  j);	  matrix[i    -    1][col++]    =    table.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
162	[BUG]  [BUGGY]  col  <  =  columnsToDrop.size()  -  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  col  <  =  columnsToDrop.size()  -  1;  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	col  <  =  columnsToDrop.size()  -  1;	  col    <    =    columnsToDrop.size();    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
163	[BUG]  [BUGGY]  col  <  =  columnLabels.size();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  col  <  =  columnLabels.size();  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	col  <  =  columnLabels.size();	  col    <    =    columnsToDrop.size();    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
164	[BUG]  [BUGGY]  col  <  =  columnsToDrop.size()  +  1;  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  col  <  =  columnsToDrop.size()  +  1;  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	col  <  =  columnsToDrop.size()  +  1;	  col    <    =    columnsToDrop.size();    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
165	[BUG]  [BUGGY]  for(int  i  =  columnLabels.size();  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  for(int  i  =  columnLabels.size();  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	for(int  i  =  columnLabels.size();  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }	  for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
166	[BUG]  [BUGGY]  for(int  i  =  colsToDrop.size();  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  for(int  i  =  colsToDrop.size();  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	for(int  i  =  colsToDrop.size();  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }	  for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
167	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j,  columnLabels[j]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j,  columnLabels[j]);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j,  columnLabels[j]);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    columnLabels[j]);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
168	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnLabels);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels[j]);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnLabels);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels[j]);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnLabels);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels[j]);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    columnLabels[j]);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
169	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnLabels);  matrix[i  -  1][col++]  =  f.getEntry(i,  columns[j]);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnLabels);  matrix[i  -  1][col++]  =  f.getEntry(i,  columns[j]);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnLabels);  matrix[i  -  1][col++]  =  f.getEntry(i,  columns[j]);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    columnLabels[j]);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
170	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  col,  columnLabels[j]);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  col,  columnLabels[j]);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  col,  columnLabels[j]);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    columnLabels[j]);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
171	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  column);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  column);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  column);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i,    column);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
172	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  column);  matrix[i  -  1][col++]  =  f.getEntry(i,  j  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  column);  matrix[i  -  1][col++]  =  f.getEntry(i,  j  +  1);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  column);  matrix[i  -  1][col++]  =  f.getEntry(i,  j  +  1);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i,    column);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
173	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  column);  matrix[i  -  1][col++]  =  f.getEntry(i,  j,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  column);  matrix[i  -  1][col++]  =  f.getEntry(i,  j,  columnsToDrop);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  column);  matrix[i  -  1][col++]  =  f.getEntry(i,  j,  columnsToDrop);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i,    column);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
174	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnLabels.length);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnLabels.length);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnLabels.length);	  this.tableau    =    new    Array2DRowRealMatrix(col    +    1,    columnLength);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
175	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnsToDrop.length);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnsToDrop.length);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnsToDrop.length);	  this.tableau    =    new    Array2DRowRealMatrix(col    +    1,    columnLength);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
176	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnLength,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnLength,  columnLabels);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnLength,  columnLabels);	  this.tableau    =    new    Array2DRowRealMatrix(col    +    1,    columnLength);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
177	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnsToDrop.size());  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnsToDrop.size());  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnsToDrop.size());	  this.tableau    =    new    Array2DRowRealMatrix(col    +    1,    columnLength);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
178	[BUG]  [BUGGY]  LinearObjectiveFunction  matrix  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  matrix  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1  +  1);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  matrix  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1  +  1);	  LinearObjectiveFunction    matrix    =(LinearObjectiveFunction)columnsToDrop.get(i    -    1);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
179	[BUG]  [BUGGY]  LinearObjectiveFunction  matrix  =(LinearObjectiveFunction)columnLabels.get(i  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  matrix  =(LinearObjectiveFunction)columnLabels.get(i  -  1);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  matrix  =(LinearObjectiveFunction)columnLabels.get(i  -  1);	  LinearObjectiveFunction    matrix    =(LinearObjectiveFunction)columnsToDrop.get(i    -    1);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
180	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(0);  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(0);  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(0);  matrix[i  -  1][col++]  =  table.getEntry(i,  j);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    table.getEntry(i,    column);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
181	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(i,  column);  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(i,  column);  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(i,  column);  matrix[i  -  1][col++]  =  table.getEntry(i,  j);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    table.getEntry(i,    column);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
182	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  j);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  j);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnsToDrop);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  j);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnsToDrop);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i,    columnsToDrop);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
183	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnsToDrop);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnsToDrop);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnsToDrop);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
184	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnLabels);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnLabels);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnLabels);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
185	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  columnLabels.getEntry(i,  i);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  columnLabels.getEntry(i,  i);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  columnLabels.getEntry(i,  i);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);	  LinearObjectiveFunction    f    =    table.getEntry(i,    i);    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
186	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  matrix[i  -  1][col++]  =  table.getEntry(i,  col);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(columnsToDrop,    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
187	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(columnsToDrop,    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
188	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  column[i  -  1][col++]  =  f.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  column[i  -  1][col++]  =  f.getEntry(i,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  column[i  -  1][col++]  =  f.getEntry(i,  col);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(columnsToDrop,    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
189	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  matrix[i  -  1][col++]  =  column.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  matrix[i  -  1][col++]  =  column.getEntry(i,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  matrix[i  -  1][col++]  =  column.getEntry(i,  col);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(columnsToDrop,    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
190	[BUG]  [BUGGY]  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  col);  }	  for(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    columnLabels[i][col++]    =    table.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
191	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnsToDrop.size();  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  for(int  i  =  0;  i  <  columnsToDrop.size();  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	for(int  i  =  0;  i  <  columnsToDrop.size();  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  col);  }	  for(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    columnLabels[i][col++]    =    table.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
192	[BUG]  [BUGGY]  ColumnsToDrop  columnLabels[i][col++]  =  table.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  ColumnsToDrop  columnLabels[i][col++]  =  table.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	ColumnsToDrop  columnLabels[i][col++]  =  table.getEntry(i,  j);	  ColumnsToDrop    columnLabels[i][col++]    =    table.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
193	[BUG]  [BUGGY]  ColumnsToDrop  columnLabels[i][col++]  =  table.getEntry(i,  col  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  ColumnsToDrop  columnLabels[i][col++]  =  table.getEntry(i,  col  -  1);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	ColumnsToDrop  columnLabels[i][col++]  =  table.getEntry(i,  col  -  1);	  ColumnsToDrop    columnLabels[i][col++]    =    table.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
194	[BUG]  [BUGGY]  ColumnsToDrop  columnLabels[i][col++]  =  table.getEntry(i,  col  +  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  ColumnsToDrop  columnLabels[i][col++]  =  table.getEntry(i,  col  +  1);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	ColumnsToDrop  columnLabels[i][col++]  =  table.getEntry(i,  col  +  1);	  ColumnsToDrop    columnLabels[i][col++]    =    table.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
195	[BUG]  [BUGGY]  this.tableau  =  new  LinkedList2DRowRealMatrix(this.numSlackVariables);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  LinkedList2DRowRealMatrix(this.numSlackVariables);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  LinkedList2DRowRealMatrix(this.numSlackVariables);	  this.tableau    =    new    LinkedList2DRowRealMatrix(numSlackVariables);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
196	[BUG]  [BUGGY]  this.tableau  =  new  LinkedList2DRowRealMatrix(numSlackVariables,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  LinkedList2DRowRealMatrix(numSlackVariables,  columnLabels);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  LinkedList2DRowRealMatrix(numSlackVariables,  columnLabels);	  this.tableau    =    new    LinkedList2DRowRealMatrix(numSlackVariables);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
197	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(this.columnsToDrop,  columnLabels);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(this.columnsToDrop,  columnLabels);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(this.columnsToDrop,  columnLabels);	  this.tableau    =    new    Array2DRowRealMatrix(this.columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
198	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(this.columnsToDrop,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(this.columnsToDrop,  columnsToDrop);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(this.columnsToDrop,  columnsToDrop);	  this.tableau    =    new    Array2DRowRealMatrix(this.columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
199	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(this.columnsToDrop,  col);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(this.columnsToDrop,  col);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(this.columnsToDrop,  col);	  this.tableau    =    new    Array2DRowRealMatrix(this.columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
200	[BUG]  [BUGGY]  col  =  columnLabels[i  -  1][col++]  =  table.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  col  =  columnLabels[i  -  1][col++]  =  table.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	col  =  columnLabels[i  -  1][col++]  =  table.getEntry(i,  j);	  col    =    columnLabels[i    -    1][col++]    =    table.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
201	[BUG]  [BUGGY]  col  =  columnsToDrop[i  -  1][col++]  =  table.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  col  =  columnsToDrop[i  -  1][col++]  =  table.getEntry(i,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	col  =  columnsToDrop[i  -  1][col++]  =  table.getEntry(i,  col);	  col    =    columnLabels[i    -    1][col++]    =    table.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
202	[BUG]  [BUGGY]  col  =  columns[i  -  1][col++]  =  table.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  col  =  columns[i  -  1][col++]  =  table.getEntry(i,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	col  =  columns[i  -  1][col++]  =  table.getEntry(i,  col);	  col    =    columnLabels[i    -    1][col++]    =    table.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
203	[BUG]  [BUGGY]  col  =  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  col  =  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	col  =  matrix[i  -  1][col++]  =  table.getEntry(i,  col);	  col    =    columnLabels[i    -    1][col++]    =    table.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
204	[BUG]  [BUGGY]  ColumnsToDrop  columnLabels[i  -  1][col++]  =  matrix.getEntry(i,  j  +  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  ColumnsToDrop  columnLabels[i  -  1][col++]  =  matrix.getEntry(i,  j  +  1);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	ColumnsToDrop  columnLabels[i  -  1][col++]  =  matrix.getEntry(i,  j  +  1);	  ColumnsToDrop    columnLabels[i    -    1][col++]    =    matrix.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
205	[BUG]  [BUGGY]  int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  matrix[i++][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  matrix[i++][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  matrix[i++][col++]  =  matrix.getEntry(i,  j);  }	  for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    matrix[i++][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
206	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  f.getEntry(j,  column);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  f.getEntry(j,  column);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  f.getEntry(j,  column);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    f.getEntry(j,    col);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
207	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  f.getEntry(j,  i);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  f.getEntry(j,  i);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  f.getEntry(j,  i);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    f.getEntry(j,    col);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
208	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(0);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(0);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(0);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(0);    matrix[i    -    1][col++]    =    f.getEntry(i,    column);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
209	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  column,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  column,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col++,  column,  NEGATIVE_VAR_COLUMN_LABEL);	  this.tableau    =    new    Array2DRowRealMatrix(col++,    column);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
210	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  column  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  column  +  1);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col++,  column  +  1);	  this.tableau    =    new    Array2DRowRealMatrix(col++,    column);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
211	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  columnLabels,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  columnLabels,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col,  columnLabels,  NEGATIVE_VAR_COLUMN_LABEL);	  this.tableau    =    new    Array2DRowRealMatrix(col,    columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
212	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  columnLabels,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  columnLabels,  columnsToDrop);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col,  columnLabels,  columnsToDrop);	  this.tableau    =    new    Array2DRowRealMatrix(col,    columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
213	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  columns);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  columns);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col,  columns);	  this.tableau    =    new    Array2DRowRealMatrix(col,    columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
214	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  columnsToDrop,  columnLabels);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  columnsToDrop,  columnLabels);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col,  columnsToDrop,  columnLabels);	  this.tableau    =    new    Array2DRowRealMatrix(col,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
215	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  0,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  0,  columnsToDrop);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col,  0,  columnsToDrop);	  this.tableau    =    new    Array2DRowRealMatrix(col,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
216	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  table.getEntry(i,  col);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    table.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
217	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnsToDrop,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnsToDrop,  columnLabels);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnsToDrop,  columnLabels);	  this.tableau    =    new    Array2DRowRealMatrix(col    +    1,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
218	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(i  +  1,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(i  +  1,  columnsToDrop);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(i  +  1,  columnsToDrop);	  this.tableau    =    new    Array2DRowRealMatrix(col    +    1,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
219	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels[j]);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels[j]);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels[j]);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i    +    1);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
220	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels[i]);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels[i]);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels[i]);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i    +    1);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
221	[BUG]  [BUGGY]  LinearObjectiveFunction  matrix  =(LinearObjectiveFunction)columnLabels.get(i  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  matrix  =(LinearObjectiveFunction)columnLabels.get(i  +  1);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  matrix  =(LinearObjectiveFunction)columnLabels.get(i  +  1);	  LinearObjectiveFunction    matrix    =(LinearObjectiveFunction)columnLabels.get(i);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
222	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(array,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(array,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(array,  NEGATIVE_VAR_COLUMN_LABEL);	  this.tableau    =    new    Array2DRowRealMatrix(array,    col);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
223	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(array,  col,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(array,  col,  DEFAULT_ULPS);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(array,  col,  DEFAULT_ULPS);	  this.tableau    =    new    Array2DRowRealMatrix(array,    col);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
224	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(array,  column);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(array,  column);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(array,  column);	  this.tableau    =    new    Array2DRowRealMatrix(array,    col);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
225	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(array,  col,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(array,  col,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(array,  col,  NEGATIVE_VAR_COLUMN_LABEL);	  this.tableau    =    new    Array2DRowRealMatrix(array,    col);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
226	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnsToDrop.size();  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  for(int  i  =  0;  i  <  columnsToDrop.size();  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	for(int  i  =  0;  i  <  columnsToDrop.size();  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }	  for(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    columnLabels[i][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
227	[BUG]  [BUGGY]  for(int  i  =  0;  i  >=  columnsToDrop.size();  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  for(int  i  =  0;  i  >=  columnsToDrop.size();  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	for(int  i  =  0;  i  >=  columnsToDrop.size();  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }	  for(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    columnLabels[i][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
228	[BUG]  [BUGGY]  ColumnLabels[i++][col++]  =  matrix.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  ColumnLabels[i++][col++]  =  matrix.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	ColumnLabels[i++][col++]  =  matrix.getEntry(i,  j);	  if(columnLabels!=    null)    {    for(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    columnLabels[i++][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
229	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  columnsToDrop,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  columnsToDrop,  columnLabels);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col++,  columnsToDrop,  columnLabels);	  this.tableau    =    new    Array2DRowRealMatrix(col++,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
230	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  table.getEntry(i,  j);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i    +    1);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
231	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i  +  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i  +  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i  +  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i    +    1);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
232	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	if(columnLabels!=  null)  {  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }	  if(columnLabels!=    null)    {    for(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    columnLabels[i++][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
233	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  colsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  colsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	if(columnLabels!=  null)  {  for(int  i  =  colsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }	  if(columnLabels!=    null)    {    for(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    columnLabels[i++][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
234	[BUG]  [BUGGY]  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	matrix[i  -  1][col++]  =  column.getEntry(i,  j);	  matrix[i    -    1][col++]    =    table.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
235	[BUG]  [BUGGY]  matrix[i  -  1][col++]  =  table.getEntry(j,  col);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  matrix[i  -  1][col++]  =  table.getEntry(j,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	matrix[i  -  1][col++]  =  table.getEntry(j,  col);	  matrix[i    -    1][col++]    =    table.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
236	[BUG]  [BUGGY]  matrix[i  -  1][col++]  =  table.getEntry(i,  j  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  matrix[i  -  1][col++]  =  table.getEntry(i,  j  +  1);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	matrix[i  -  1][col++]  =  table.getEntry(i,  j  +  1);	  matrix[i    -    1][col++]    =    table.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
237	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  columnLabels,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  columnLabels,  DEFAULT_ULPS);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col,  columnLabels,  DEFAULT_ULPS);	  this.tableau    =    new    Array2DRowRealMatrix(col,    columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
238	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(column,  column);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(column,  column);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(column,  column);	  this.tableau    =    new    Array2DRowRealMatrix(columnsToDrop,    col);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
239	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(column,  columnsToDrop);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(column,  columnsToDrop);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(column,  columnsToDrop);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(columnsToDrop,    column);    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
240	[BUG]  [BUGGY]  this.tableau  =  new  RealMatrix(columnLabels);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  RealMatrix(columnLabels);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  RealMatrix(columnLabels);	  this.tableau    =    new    RealMatrix(matrix);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
241	[BUG]  [BUGGY]  this.tableau  =  new  RealMatrix(matrix,  column);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  RealMatrix(matrix,  column);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  RealMatrix(matrix,  column);	  this.tableau    =    new    RealMatrix(matrix);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
242	[BUG]  [BUGGY]  this.tableau  =  new  RealMatrix(columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  RealMatrix(columnsToDrop);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  RealMatrix(columnsToDrop);	  this.tableau    =    new    RealMatrix(matrix);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
243	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnsToDrop.size();  i++)  {  matrix[i++][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  for(int  i  =  0;  i  <  columnsToDrop.size();  i++)  {  matrix[i++][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	for(int  i  =  0;  i  <  columnsToDrop.size();  i++)  {  matrix[i++][col++]  =  matrix.getEntry(i,  j);  }	  for(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    matrix[i++][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
244	[BUG]  [BUGGY]  this.tableau  =  new  ArrayList2DRowRealMatrix(columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  ArrayList2DRowRealMatrix(columnsToDrop);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  ArrayList2DRowRealMatrix(columnsToDrop);	  this.tableau    =    new    ArrayList2DRowRealMatrix(matrix);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
245	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(column,  column);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(column,  column);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(column,  column);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(column);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
246	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnsToDrop);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnsToDrop);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnsToDrop);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
247	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i  -  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i  -  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i  -  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
248	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)list.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)list.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)list.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)list.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
249	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getPhase1ObjectiveFunction(i,  columnsToDrop);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getPhase1ObjectiveFunction(i,  columnsToDrop);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getPhase1ObjectiveFunction(i,  columnsToDrop);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	  LinearObjectiveFunction    f    =    getPhase1ObjectiveFunction(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
250	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getPhase1ObjectiveFunction(i,  column);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getPhase1ObjectiveFunction(i,  column);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getPhase1ObjectiveFunction(i,  column);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	  LinearObjectiveFunction    f    =    getPhase1ObjectiveFunction(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
251	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getPhase1ObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  column);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getPhase1ObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  column);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getPhase1ObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  column);	  LinearObjectiveFunction    f    =    getPhase1ObjectiveFunction(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
252	[BUG]  [BUGGY]  int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }	  for(int    i    =    columnLabels.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
253	[BUG]  [BUGGY]  for(int  i  =  col.size();  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  columnsToDrop);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  for(int  i  =  col.size();  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  columnsToDrop);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	for(int  i  =  col.size();  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  columnsToDrop);  }	  for(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    matrix[i][col++]    =    table.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
254	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(column,  i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(column,  i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(column,  i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(columnsToDrop,    col);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
255	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(col,  column);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(col,  column);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(col,  column);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(columnsToDrop,    col);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
256	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnsToDrop);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels[j]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnsToDrop);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels[j]);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnsToDrop);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels[j]);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    columnLabels[j]);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
257	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columns[j]);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columns[j]);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columns[j]);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    columnLabels[j]);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
258	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  *  2);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  *  2);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col  *  2);	  this.tableau    =    new    Array2DRowRealMatrix(col    +    2);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
259	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(i  +  2);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(i  +  2);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(i  +  2);	  this.tableau    =    new    Array2DRowRealMatrix(col    +    2);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
260	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i  +  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  column);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i  +  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  column);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i  +  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  column);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i    +    1);    matrix[i    -    1][col++]    =    f.getEntry(i,    column);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
261	[BUG]  [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col  +  1,  column);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col  +  1,  column);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DowRealMatrix(col  +  1,  column);	  this.tableau    =    new    Array2DowRealMatrix(col    +    1);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
262	[BUG]  [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col  +  1,  columnLength);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col  +  1,  columnLength);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DowRealMatrix(col  +  1,  columnLength);	  this.tableau    =    new    Array2DowRealMatrix(col    +    1);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
263	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);  matrix[i  -  1][col++]  =  table.getEntry(i,  j);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i    -    1);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
264	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  matrix.getEntry(i,  j);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  matrix.getEntry(i,  j);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  matrix.getEntry(i,  j);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);	  LinearObjectiveFunction    f    =    columnLabels.getEntry(i,    j);    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
265	[BUG]  [BUGGY]  int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  j);  }	  for(int    i    =    columnLabels.size()    -    1;    i    >=    0;    i--)    {    matrix[i][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
266	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  NEGATIVE_VAR_COLUMN_LABEL,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  NEGATIVE_VAR_COLUMN_LABEL,  DEFAULT_ULPS);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col,  NEGATIVE_VAR_COLUMN_LABEL,  DEFAULT_ULPS);	  this.tableau    =    new    Array2DRowRealMatrix(col,    NEGATIVE_VAR_COLUMN_LABEL);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
267	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columns);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columns);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columns);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i,    column);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
268	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  f.getEntry(j,  col);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  f.getEntry(j,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  f.getEntry(j,  col);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    f.getEntry(j,    col);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
269	[BUG]  [BUGGY]  for(int  i  =  table.size();  i  >=  0;  i--)  {  matrix[i][col++]  =  columnsToDrop.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  for(int  i  =  table.size();  i  >=  0;  i--)  {  matrix[i][col++]  =  columnsToDrop.getEntry(i,  col);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	for(int  i  =  table.size();  i  >=  0;  i--)  {  matrix[i][col++]  =  columnsToDrop.getEntry(i,  col);  }	  for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    matrix[i][col++]    =    table.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
270	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(column,  columns);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(column,  columns);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(column,  columns);	  this.tableau    =    new    Array2DRowRealMatrix(columnLabels,    column);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
271	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(column,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(column,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(column,  NEGATIVE_VAR_COLUMN_LABEL);	  this.tableau    =    new    Array2DRowRealMatrix(columnLabels,    column);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
272	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  table.getEntry(i,  j);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    table.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
273	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  table.getEntry(i,  col);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    table.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
274	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  columns[j]);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  columns[j]);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  columns[j]);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    columnLabels[j]);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
275	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnsToDrop,  table);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnsToDrop,  table);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnsToDrop,  table);	  this.tableau    =    new    Array2DRowRealMatrix(col    +    1,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
276	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnsToDrop,  columnLength);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnsToDrop,  columnLength);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnsToDrop,  columnLength);	  this.tableau    =    new    Array2DRowRealMatrix(col    +    1,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
277	[BUG]  [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(column,  column);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(column,  column);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DowRealMatrix(column,  column);	  this.tableau    =    new    Array2DowRealMatrix(col,    column);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
278	[BUG]  [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(column,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(column,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DowRealMatrix(column,  NEGATIVE_VAR_COLUMN_LABEL);	  this.tableau    =    new    Array2DowRealMatrix(col,    column);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
279	[BUG]  [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(column,  columns);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(column,  columns);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DowRealMatrix(column,  columns);	  this.tableau    =    new    Array2DowRealMatrix(col,    column);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
280	[BUG]  [BUGGY]  ColumnsToDrop  columnLabels[i][col++]  =  tableau.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  ColumnsToDrop  columnLabels[i][col++]  =  tableau.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	ColumnsToDrop  columnLabels[i][col++]  =  tableau.getEntry(i,  j);	  ColumnsToDrop    columnLabels[i][col++]    =    table.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
281	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(column,  matrix);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(column,  matrix);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(column,  matrix);	  this.tableau    =    new    Array2DRowRealMatrix(matrix,    col);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
282	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnsToDrop,  columnLength  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnsToDrop,  columnLength  -  1);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(columnsToDrop,  columnLength  -  1);	  this.tableau    =    new    Array2DRowRealMatrix(columnsToDrop,    columnLength);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
283	[BUG]  [BUGGY]  int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }	  for(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    columnLabels[i++][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
284	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  table.getEntry(i,  i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  table.getEntry(i,  i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j  +  1);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  table.getEntry(i,  i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j  +  1);	  LinearObjectiveFunction    f    =    table.getEntry(i,    i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
285	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  table.getEntry(i,  i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j,  columnLabels);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  table.getEntry(i,  i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j,  columnLabels);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  table.getEntry(i,  i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j,  columnLabels);	  LinearObjectiveFunction    f    =    table.getEntry(i,    i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
286	[BUG]  [BUGGY]  col  =  columns[i  -  1][col++]  =  table.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  col  =  columns[i  -  1][col++]  =  table.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	col  =  columns[i  -  1][col++]  =  table.getEntry(i,  j);	  col    =    columnLabels[i    -    1][col++]    =    table.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
287	[BUG]  [BUGGY]  col  =  columnLabels[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  col  =  columnLabels[i  -  1][col++]  =  tableau.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	col  =  columnLabels[i  -  1][col++]  =  tableau.getEntry(i,  j);	  col    =    columnLabels[i    -    1][col++]    =    table.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
288	[BUG]  [BUGGY]  ColumnLabels[][col++]  =  table.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  ColumnLabels[][col++]  =  table.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	ColumnLabels[][col++]  =  table.getEntry(i,  j);	  if(columnLabels!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
289	[BUG]  [BUGGY]  col  =  columnLabels.get(columnsToDrop.size()  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  col  =  columnLabels.get(columnsToDrop.size()  -  1);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	col  =  columnLabels.get(columnsToDrop.size()  -  1);	  if(columnLabels!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
290	[BUG]  [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col,  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col,  1);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DowRealMatrix(col,  1);	  this.tableau    =    new    Array2DowRealMatrix(col,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
291	[BUG]  [BUGGY]  this.tableau  =  new  LinkedList2DRowRealMatrix(columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  LinkedList2DRowRealMatrix(columnsToDrop);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  LinkedList2DRowRealMatrix(columnsToDrop);	  this.tableau    =    new    LinkedList2DRowRealMatrix(numSlackVariables);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
292	[BUG]  [BUGGY]  this.tableau  =  new  ArrayList2DRowRealMatrix(numSlackVariables);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  ArrayList2DRowRealMatrix(numSlackVariables);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  ArrayList2DRowRealMatrix(numSlackVariables);	  this.tableau    =    new    LinkedList2DRowRealMatrix(numSlackVariables);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
293	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(column,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(column,  DEFAULT_ULPS);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(column,  DEFAULT_ULPS);	  this.tableau    =    new    Array2DRowRealMatrix(col,    column);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
294	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  columns);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  columns);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  columns);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(columnsToDrop,    columnLabels);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
295	[BUG]  [BUGGY]  ColumnsToDrop  columnLabels[i  -  1][col++]  =  table.getEntry(j,  col);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  ColumnsToDrop  columnLabels[i  -  1][col++]  =  table.getEntry(j,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	ColumnsToDrop  columnLabels[i  -  1][col++]  =  table.getEntry(j,  col);	  ColumnsToDrop    columnLabels[i    -    1][col++]    =    table.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
296	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  matrix.getEntry(i,  j);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  matrix.getEntry(i,  j);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  matrix.getEntry(i,  j);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	  LinearObjectiveFunction    f    =    columnLabels.getEntry(i,    j);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
297	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  columnsToDrop,  columnLength);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  columnsToDrop,  columnLength);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  columnsToDrop,  columnLength);	  this.tableau    =    new    Array2DRowRealMatrix(columnLabels,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
298	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  columnsToDrop,  column);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  columnsToDrop,  column);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  columnsToDrop,  column);	  this.tableau    =    new    Array2DRowRealMatrix(columnLabels,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
299	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(column,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(column,  columnsToDrop);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(column,  columnsToDrop);	  this.tableau    =    new    Array2DRowRealMatrix(columnLabels,    col);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
300	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
301	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnsToDrop);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnsToDrop);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
302	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  columnsToDrop,  columnLength);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  columnsToDrop,  columnLength);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col++,  columnsToDrop,  columnLength);	  this.tableau    =    new    Array2DRowRealMatrix(col++,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
303	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(i,  j);  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(i,  j);  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(i,  j);  matrix[i  -  1][col++]  =  table.getEntry(i,  j);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
304	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(matrix,  columnsToDrop);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(matrix,  columnsToDrop);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(matrix,  columnsToDrop);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(columnsToDrop,    columnsToDrop);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
305	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  columnLabels,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  columnLabels,  DEFAULT_ULPS);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col++,  columnLabels,  DEFAULT_ULPS);	  this.tableau    =    new    Array2DRowRealMatrix(col++,    columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
306	[BUG]  [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col,  columnLabels,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col,  columnLabels,  DEFAULT_ULPS);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DowRealMatrix(col,  columnLabels,  DEFAULT_ULPS);	  this.tableau    =    new    Array2DowRealMatrix(col,    columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
307	[BUG]  [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(columnsToDrop,  column);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(columnsToDrop,  column);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DowRealMatrix(columnsToDrop,  column);	  this.tableau    =    new    Array2DowRealMatrix(col,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
308	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  columnLength  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  columnLength  -  1);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col++,  columnLength  -  1);	  this.tableau    =    new    Array2DRowRealMatrix(col++,    columnLength);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
309	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  0,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  0,  DEFAULT_ULPS);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col,  0,  DEFAULT_ULPS);	  this.tableau    =    new    Array2DRowRealMatrix(col,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
310	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  1);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col,  1);	  this.tableau    =    new    Array2DRowRealMatrix(col,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
311	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnLens);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnLens);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnLens);	  this.tableau    =    new    Array2DRowRealMatrix(col    +    1,    column);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
312	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnLabels,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnLabels,  DEFAULT_ULPS);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnLabels,  DEFAULT_ULPS);	  this.tableau    =    new    Array2DRowRealMatrix(col    +    1,    columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
313	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnsToDrop.size();  i++)  {  matrix[i][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  for(int  i  =  0;  i  <  columnsToDrop.size();  i++)  {  matrix[i][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	for(int  i  =  0;  i  <  columnsToDrop.size();  i++)  {  matrix[i][col++]  =  table.getEntry(i,  j);  }	  for(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    matrix[i][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
314	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnLabels.size();  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnLabels.size();  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	if(columnLabels!=  null)  {  for(int  i  =  columnLabels.size();  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }	  if(columnLabels!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i++][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
315	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(array,  0,  col);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(array,  0,  col);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(array,  0,  col);	  this.tableau    =    new    Array2DRowRealMatrix(array,    col);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
316	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(array,  columns);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(array,  columns);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(array,  columns);	  this.tableau    =    new    Array2DRowRealMatrix(array,    col);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
317	[BUG]  [BUGGY]  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  col[i][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  col[i][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  col[i][col++]  =  table.getEntry(i,  col);  }	  for(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    col[i][col++]    =    table.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
318	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnLength  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnLength  -  1);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnLength  -  1);	  this.tableau    =    new    Array2DRowRealMatrix(col    +    1,    columnLength);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
319	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i  -  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i  -  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i  -  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnLabels.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    column);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
320	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	if(columnLabels!=  null)  {  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }	  if(columnLabels!=    null)    {    for(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    columnLabels[i][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
321	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  colsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  colsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	if(columnLabels!=  null)  {  for(int  i  =  colsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }	  if(columnLabels!=    null)    {    for(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    columnLabels[i][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
322	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(col,  column);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(col,  column);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(col,  column);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(col);    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
323	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  table.getEntry(i,  column);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  table.getEntry(i,  column);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  table.getEntry(i,  column);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    table.getEntry(i,    column);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
324	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(col);  matrix[i  -  1][col++]  =  f.getEntry(i,  column);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(col);  matrix[i  -  1][col++]  =  f.getEntry(i,  column);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(col);  matrix[i  -  1][col++]  =  f.getEntry(i,  column);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(col);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
325	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  columnLength  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  columnLength  -  1);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  columnLength  -  1);	  this.tableau    =    new    Array2DRowRealMatrix(columnLabels,    columnLength);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
326	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLength,  columnLabels);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLength,  columnLabels);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(columnLength,  columnLabels);	  this.tableau    =    new    Array2DRowRealMatrix(columnLabels,    columnLength);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
327	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnsToDrop);  matrix[i  -  1][col++]  =  f.getEntry(i,  j,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnsToDrop);  matrix[i  -  1][col++]  =  f.getEntry(i,  j,  columnLabels);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnsToDrop);  matrix[i  -  1][col++]  =  f.getEntry(i,  j,  columnLabels);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j,    columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
328	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getPhase1ObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getPhase1ObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j,  columnLabels);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getPhase1ObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j,  columnLabels);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j,    columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
329	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  matrix[i  -  1][col++]  =  tableau.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  matrix[i  -  1][col++]  =  tableau.getEntry(i,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  matrix[i  -  1][col++]  =  tableau.getEntry(i,  col);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(columnsToDrop,    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
330	[BUG]  [BUGGY]  For(int  i  =  0;  i  >=  columnsToDrop.size();  i--)  {  matrix[i++][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  For(int  i  =  0;  i  >=  columnsToDrop.size();  i--)  {  matrix[i++][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	For(int  i  =  0;  i  >=  columnsToDrop.size();  i--)  {  matrix[i++][col++]  =  matrix.getEntry(i,  j);  }	  For(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    matrix[i++][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
331	[BUG]  [BUGGY]  For(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  For(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	For(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  matrix[i][col++]  =  table.getEntry(i,  col);  }	  for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    matrix[i][col++]    =    table.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
332	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  column.getEntry(i,  j);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    table.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
333	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  table.getEntry(j,  col);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  table.getEntry(j,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  table.getEntry(j,  col);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    table.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
334	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnsToDrop.size();  i++)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  for(int  i  =  0;  i  <  columnsToDrop.size();  i++)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	for(int  i  =  0;  i  <  columnsToDrop.size();  i++)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }	  For(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    columnLabels[i++][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
335	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(col,  col);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(col,  col);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(col,  col);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(columnsToDrop,    col);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
336	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels[j]);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels[j]);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels[j]);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    columnLabels[j]);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
337	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnLength,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnLength,  DEFAULT_ULPS);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnLength,  DEFAULT_ULPS);	  this.tableau    =    new    Array2DRowRealMatrix(col    +    1,    columnLength);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
338	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(j  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(j  -  1);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(j  -  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i    -    1);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
339	[BUG]  [BUGGY]  matrix[i  -  1][col++]  =  table.getEntry(i,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  matrix[i  -  1][col++]  =  table.getEntry(i,  columnLabels);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	matrix[i  -  1][col++]  =  table.getEntry(i,  columnLabels);	  matrix[i    -    1][col++]    =    table.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
340	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnsToDrop.size();  i++)  {  matrix[i][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  for(int  i  =  0;  i  <  columnsToDrop.size();  i++)  {  matrix[i][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	for(int  i  =  0;  i  <  columnsToDrop.size();  i++)  {  matrix[i][col++]  =  table.getEntry(i,  col);  }	  for(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    matrix[i][col++]    =    table.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
341	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnsToDrop.size()  -  2;  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnsToDrop.size()  -  2;  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	if(columnLabels!=  null)  {  for(int  i  =  columnsToDrop.size()  -  2;  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }	  if(columnLabels!=    null)    {    for(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    columnLabels[i++][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
342	[BUG]  [BUGGY]  this.tableau  =  new  ArrayList2DowRealMatrix(col);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  ArrayList2DowRealMatrix(col);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  ArrayList2DowRealMatrix(col);	  this.tableau    =    new    ArrayList2DRowRealMatrix(matrix);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
343	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  table.getEntry(i,  column);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  table.getEntry(i,  column);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  table.getEntry(i,  column);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i    +    1);    matrix[i    -    1][col++]    =    f.getEntry(i,    column);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
344	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(matrix,  columnLabels);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(matrix,  columnLabels);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(matrix,  columnLabels);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(columnsToDrop,    columnLabels);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
345	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnLabels,  column);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnLabels,  column);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnLabels,  column);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(columnsToDrop,    columnLabels);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
346	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(array,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(array,  DEFAULT_ULPS);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(array,  DEFAULT_ULPS);	  this.tableau    =    new    Array2DRowRealMatrix(array,    col);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
347	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(col);  matrix[i  -  1][col++]  =  f.getEntry(i,  j,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(col);  matrix[i  -  1][col++]  =  f.getEntry(i,  j,  columnLabels);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(col);  matrix[i  -  1][col++]  =  f.getEntry(i,  j,  columnLabels);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(col);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
348	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  DEFAULT_ULPS,  column);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  DEFAULT_ULPS,  column);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col,  DEFAULT_ULPS,  column);	  this.tableau    =    new    Array2DRowRealMatrix(col,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
349	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  j);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  j);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  j);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i,    columnsToDrop);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
350	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getPhase1ObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getPhase1ObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getPhase1ObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels);	  LinearObjectiveFunction    f    =    getPhase1ObjectiveFunction(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
351	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i);  matrix[i  -  1][col++]  =  table.getEntry(i,  column);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i);  matrix[i  -  1][col++]  =  table.getEntry(i,  column);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i);  matrix[i  -  1][col++]  =  table.getEntry(i,  column);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    table.getEntry(i,    column);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
352	[BUG]  [BUGGY]  this.tableau  =  new  LinkedList2DRowRealMatrix(col,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  LinkedList2DRowRealMatrix(col,  DEFAULT_ULPS);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  LinkedList2DRowRealMatrix(col,  DEFAULT_ULPS);	  this.tableau    =    new    LinkedList2DRowRealMatrix(col);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
353	[BUG]  [BUGGY]  LinearObjectiveFunction  matrix  =(LinearObjectiveFunction)this.columnsToDrop.get(i  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  matrix  =(LinearObjectiveFunction)this.columnsToDrop.get(i  +  1);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  matrix  =(LinearObjectiveFunction)this.columnsToDrop.get(i  +  1);	  LinearObjectiveFunction    matrix    =(LinearObjectiveFunction)this.columnsToDrop.get(i);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
354	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(negative_VAR_COLUMN_LABEL,  column);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(negative_VAR_COLUMN_LABEL,  column);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(negative_VAR_COLUMN_LABEL,  column);	  this.tableau    =    new    Array2DRowRealMatrix(col,    NEGATIVE_VAR_COLUMN_LABEL);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
355	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  columnsToDrop,  columnLabels);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  columnsToDrop,  columnLabels);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(columnLabels,  columnsToDrop,  columnLabels);	  this.tableau    =    new    Array2DRowRealMatrix(columnLabels,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
356	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  j);  matrix[i  -  1][col++]  =  f.getEntry(i,  column);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  j);  matrix[i  -  1][col++]  =  f.getEntry(i,  column);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  j);  matrix[i  -  1][col++]  =  f.getEntry(i,  column);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i,    column);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
357	[BUG]  [BUGGY]  for(int  i  =  j.size();  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  for(int  i  =  j.size();  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	for(int  i  =  j.size();  i  >=  0;  i--)  {  columnLabels[i++][col++]  =  matrix.getEntry(i,  j);  }	  for(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    columnLabels[i++][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
358	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnsToDrop[j]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnsToDrop[j]);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnsToDrop[j]);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    columnLabels[j]);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
359	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnsToDrop,  graph);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnsToDrop,  graph);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col  +  1,  columnsToDrop,  graph);	  this.tableau    =    new    Array2DRowRealMatrix(col    +    1,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
360	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  column  +  2);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col,  column  +  2);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col,  column  +  2);	  this.tableau    =    new    Array2DRowRealMatrix(col    +    2);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
361	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnsToDrop.size();  i--)  {  col[i][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  for(int  i  =  0;  i  <  columnsToDrop.size();  i--)  {  col[i][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	for(int  i  =  0;  i  <  columnsToDrop.size();  i--)  {  col[i][col++]  =  table.getEntry(i,  j);  }	  for(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    col[i][col++]    =    table.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
362	[BUG]  [BUGGY]  ColumnsToDrop  columnLabels[i][col++]  =  matrix.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  ColumnsToDrop  columnLabels[i][col++]  =  matrix.getEntry(i,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	ColumnsToDrop  columnLabels[i][col++]  =  matrix.getEntry(i,  col);	  ColumnsToDrop    columnLabels[i][col++]    =    table.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
363	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(matrix,  col,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(matrix,  col,  DEFAULT_ULPS);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(matrix,  col,  DEFAULT_ULPS);	  this.tableau    =    new    Array2DRowRealMatrix(matrix,    col);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
364	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(matrix,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(matrix,  DEFAULT_ULPS);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(matrix,  DEFAULT_ULPS);	  this.tableau    =    new    Array2DRowRealMatrix(matrix,    col);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
365	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  table);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(col++,  table);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(col++,  table);	  this.tableau    =    new    Array2DRowRealMatrix(col++,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
366	[BUG]  [BUGGY]  this.tableau  =  new  LinkedList2DRowRealMatrix(matrix,  column);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  LinkedList2DRowRealMatrix(matrix,  column);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  LinkedList2DRowRealMatrix(matrix,  column);	  this.tableau    =    new    LinkedList2DRowRealMatrix(col,    matrix);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
367	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnsToDrop.size()  -  2;  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnsToDrop.size()  -  2;  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	if(columnLabels!=  null)  {  for(int  i  =  columnsToDrop.size()  -  2;  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }	  if(columnLabels!=    null)    {    for(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    columnLabels[i][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
368	[BUG]  [BUGGY]  LinearObjectiveFunction  matrix  =(LinearObjectiveFunction)columnsToDrop.get(j  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  matrix  =(LinearObjectiveFunction)columnsToDrop.get(j  -  1);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  matrix  =(LinearObjectiveFunction)columnsToDrop.get(j  -  1);	  LinearObjectiveFunction    matrix    =(LinearObjectiveFunction)columnsToDrop.get(i    -    1);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
369	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabelsToDrop,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLabelsToDrop,  columnsToDrop);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(columnLabelsToDrop,  columnsToDrop);	  this.tableau    =    new    Array2DRowRealMatrix(columnsToDrop,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
370	[BUG]  [BUGGY]  this.tableau  =  new  LinkedList2DRowRealMatrix(columnLabels,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  LinkedList2DRowRealMatrix(columnLabels,  DEFAULT_ULPS);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  LinkedList2DRowRealMatrix(columnLabels,  DEFAULT_ULPS);	  this.tableau    =    new    LinkedList2DRowRealMatrix(columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
371	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i    -    1);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
372	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j,  DEFAULT_ULPS);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j,  DEFAULT_ULPS);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j,    columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
373	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j,  table,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j,  table,  columnLabels);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j,  table,  columnLabels);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j,    columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
374	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  columns[i  -  1][col++]  =  f.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  columns[i  -  1][col++]  =  f.getEntry(i,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(columnsToDrop,  columns[i  -  1][col++]  =  f.getEntry(i,  col);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(columnsToDrop,    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
375	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLength,  columnToDrop);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(columnLength,  columnToDrop);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(columnLength,  columnToDrop);	  this.tableau    =    new    Array2DRowRealMatrix(columnsToDrop,    columnLength);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
376	[BUG]  [BUGGY]  for(int  i  =  j.size();  i  >=  0;  i--)  {  matrix[i++][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  for(int  i  =  j.size();  i  >=  0;  i--)  {  matrix[i++][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	for(int  i  =  j.size();  i  >=  0;  i--)  {  matrix[i++][col++]  =  matrix.getEntry(i,  j);  }	  for(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    matrix[i++][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
377	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(col);  matrix[i  -  1][col++]  =  f.getEntry(j,  col);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(col);  matrix[i  -  1][col++]  =  f.getEntry(j,  col);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(col);  matrix[i  -  1][col++]  =  f.getEntry(j,  col);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(col);    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
378	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  2);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  2);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  2);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
379	[BUG]  [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(column,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DRowRealMatrix(column,  columnLabels);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DRowRealMatrix(column,  columnLabels);	  this.tableau    =    new    Array2DRowRealMatrix(columnLabels,    col);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
380	[BUG]  [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col,  DEFAULT_ULPS,  column);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col,  DEFAULT_ULPS,  column);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DowRealMatrix(col,  DEFAULT_ULPS,  column);	  this.tableau    =    new    Array2DowRealMatrix(col,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
381	[BUG]  [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col,  DEFAULT_ULPS,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  Array2DowRealMatrix(col,  DEFAULT_ULPS,  columnsToDrop);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  Array2DowRealMatrix(col,  DEFAULT_ULPS,  columnsToDrop);	  this.tableau    =    new    Array2DowRealMatrix(col,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
382	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  columnLabels);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i    +    1);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
383	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(column,  columnsToDrop);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(column,  columnsToDrop);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(column,  columnsToDrop);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(column);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
384	[BUG]  [BUGGY]  for(int  i  =  j.size();  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  for(int  i  =  j.size();  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	for(int  i  =  j.size();  i  >=  0;  i--)  {  columnLabels[i][col++]  =  table.getEntry(i,  j);  }	  for(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    columnLabels[i][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
385	[BUG]  [BUGGY]  colLabels[i  -  1][col++]  =  table.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  colLabels[i  -  1][col++]  =  table.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	colLabels[i  -  1][col++]  =  table.getEntry(i,  j);	  if(columnLabels!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
386	[BUG]  [BUGGY]  this.tableau  =  new  RealMatrix(matrix,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  this.tableau  =  new  RealMatrix(matrix,  columnsToDrop);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	this.tableau  =  new  RealMatrix(matrix,  columnsToDrop);	  this.tableau    =    new    RealMatrix(matrix);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
387	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  j);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  j);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]      this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  j);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i,    columnLabels);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
