bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  maxUlps  =  Math.min(getMaxUlps(),  columnsToDrop.size()  -  1);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  int  maxUlps  =  Math.min(getMaxUlps(),  columnsToDrop.size()  -  1);  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	int  maxUlps  =  Math.min(getMaxUlps(),  columnsToDrop.size()  -  1);	      int    maxUlps    =    Math.min(getMaxUlps(),    columnsToDrop.size());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
2	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(getMaxUlps(),  columnsToDrop.size()  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  int  maxUlps  =  Math.max(getMaxUlps(),  columnsToDrop.size()  -  1);  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	int  maxUlps  =  Math.max(getMaxUlps(),  columnsToDrop.size()  -  1);	      int    maxUlps    =    Math.min(getMaxUlps(),    columnsToDrop.size());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
3	[BUG]  [BUGGY]  int  maxUlps  =  Math.min(getMaxUlps(),  columnsToDrop.size()  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  int  maxUlps  =  Math.min(getMaxUlps(),  columnsToDrop.size()  +  1);  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	int  maxUlps  =  Math.min(getMaxUlps(),  columnsToDrop.size()  +  1);	      int    maxUlps    =    Math.min(getMaxUlps(),    columnsToDrop.size());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
4	[BUG]  [BUGGY]  Table  <  Integer,  Integer>  table  =  getTable().getTables();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  Table  <  Integer,  Integer>  table  =  getTable().getTables();  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	Table  <  Integer,  Integer>  table  =  getTable().getTables();	      Table    <    Integer,    Integer>    table    =    getTable();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
5	[BUG]  [BUGGY]  Table  <  Integer,  Integer>  table  =  this.getTable();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  Table  <  Integer,  Integer>  table  =  this.getTable();  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	Table  <  Integer,  Integer>  table  =  this.getTable();	      Table    <    Integer,    Integer>    table    =    getTable();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
6	[BUG]  [BUGGY]  Table  <  Integer,  Integer>  table  =  getTable().cloneTree();  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  Table  <  Integer,  Integer>  table  =  getTable().cloneTree();  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	Table  <  Integer,  Integer>  table  =  getTable().cloneTree();	      Table    <    Integer,    Integer>    table    =    getTable();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  columnLabels.size();  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  columnLabels.size();  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  columnLabels.size();  i++)  {	  for(int    i    =    getNumObjectiveFunctions();    i    <    columnsToDrop.size();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  columnsToDrop.size()  -  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  columnsToDrop.size()  -  1;  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  columnsToDrop.size()  -  1;  i++)  {	  for(int    i    =    getNumObjectiveFunctions();    i    <    columnsToDrop.size();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions().length;  i  <  columnsToDrop.size();  i++)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  for(int  i  =  getNumObjectiveFunctions().length;  i  <  columnsToDrop.size();  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	for(int  i  =  getNumObjectiveFunctions().length;  i  <  columnsToDrop.size();  i++)  {	  for(int    i    =    getNumObjectiveFunctions();    i    <    columnsToDrop.size();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
10	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps()  +  1;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  int  maxUlps  =  getMaxUlps()  +  1;  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	int  maxUlps  =  getMaxUlps()  +  1;	      int    maxUlps    =    getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
11	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps()  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  int  maxUlps  =  getMaxUlps()  -  1;  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	int  maxUlps  =  getMaxUlps()  -  1;	      int    maxUlps    =    getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
12	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  +  1;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  int  maxUlps  =  getMaximumUlps()  +  1;  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	int  maxUlps  =  getMaximumUlps()  +  1;	      int    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
13	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  -  1;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  int  maxUlps  =  getMaximumUlps()  -  1;  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	int  maxUlps  =  getMaximumUlps()  -  1;	      int    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
14	[BUG]  [BUGGY]  int  maxUlps  =  getMinimumUlps();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  int  maxUlps  =  getMinimumUlps();  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	int  maxUlps  =  getMinimumUlps();	      int    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
15	[BUG]  [BUGGY]  Collections.sort(columnLabels,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  Collections.sort(columnLabels,  columnsToDrop);  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	Collections.sort(columnLabels,  columnsToDrop);	      Collections.sort(columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
16	[BUG]  [BUGGY]  Collections.sort(columnLabels,  col);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  Collections.sort(columnLabels,  col);  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	Collections.sort(columnLabels,  col);	      Collections.sort(columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
17	[BUG]  [BUGGY]  Collections.sort(columnLabels,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  Collections.sort(columnLabels,  columnLabels);  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	Collections.sort(columnLabels,  columnLabels);	      Collections.sort(columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  getNumDecisionVariables();  i  <  getArtificialVariableOffset();  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  for(int  i  =  getNumDecisionVariables();  i  <  getArtificialVariableOffset();  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	for(int  i  =  getNumDecisionVariables();  i  <  getArtificialVariableOffset();  i++)  {	  for(int    i    =    getNumSlackVariables();    i    <    getArtificialVariableOffset();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  getNumArtificialVariables();  i  <  0;  i++)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  for(int  i  =  getNumArtificialVariables();  i  <  0;  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	for(int  i  =  getNumArtificialVariables();  i  <  0;  i++)  {	  for(int    i    =    getNumSlackVariables();    i    <    getArtificialVariableOffset();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
20	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =  getGraph();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  LinearObjectiveFunction  graph  =  getGraph();  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	LinearObjectiveFunction  graph  =  getGraph();	      LinearObjectiveFunction    graph    =    getBasicTable();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
21	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =  getBasicTable().getGraph();  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  LinearObjectiveFunction  graph  =  getBasicTable().getGraph();  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	LinearObjectiveFunction  graph  =  getBasicTable().getGraph();	      LinearObjectiveFunction    graph    =    getBasicTable();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
22	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =  getTable();  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  LinearObjectiveFunction  graph  =  getTable();  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	LinearObjectiveFunction  graph  =  getTable();	      LinearObjectiveFunction    graph    =    getBasicTable();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
23	[BUG]  [BUGGY]  int  maxUlps  =  matrix.getMaxUlps()  +  1;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  int  maxUlps  =  matrix.getMaxUlps()  +  1;  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	int  maxUlps  =  matrix.getMaxUlps()  +  1;	      int    maxUlps    =    matrix.getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
24	[BUG]  [BUGGY]  int  maxUlps  =  matrix.getMaxUlps()  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  int  maxUlps  =  matrix.getMaxUlps()  -  1;  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	int  maxUlps  =  matrix.getMaxUlps()  -  1;	      int    maxUlps    =    matrix.getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
25	[BUG]  [BUGGY]  int  maxUlps  =  columnLabels.getMaxUlps();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  int  maxUlps  =  columnLabels.getMaxUlps();  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	int  maxUlps  =  columnLabels.getMaxUlps();	      int    maxUlps    =    matrix.getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
26	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  table.getFunction(null,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  LinearObjectiveFunction  f  =  table.getFunction(null,  columnsToDrop);  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	LinearObjectiveFunction  f  =  table.getFunction(null,  columnsToDrop);	      LinearObjectiveFunction    f    =    table.getFunction(null);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
27	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  table.getFunction(this);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  LinearObjectiveFunction  f  =  table.getFunction(this);  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	LinearObjectiveFunction  f  =  table.getFunction(this);	      LinearObjectiveFunction    f    =    table.getFunction(null);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
28	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  table.getFunction(columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  LinearObjectiveFunction  f  =  table.getFunction(columnsToDrop);  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	LinearObjectiveFunction  f  =  table.getFunction(columnsToDrop);	      LinearObjectiveFunction    f    =    table.getFunction(null);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
29	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  table.getFunction(null,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  LinearObjectiveFunction  f  =  table.getFunction(null,  columnLabels);  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	LinearObjectiveFunction  f  =  table.getFunction(null,  columnLabels);	      LinearObjectiveFunction    f    =    table.getFunction(null);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions().length  -  1;  i  <  getArtificialVariableOffset();  i++)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  for(int  i  =  getNumObjectiveFunctions().length  -  1;  i  <  getArtificialVariableOffset();  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	for(int  i  =  getNumObjectiveFunctions().length  -  1;  i  <  getArtificialVariableOffset();  i++)  {	  for(int    i    =    getNumObjectiveFunctions()    -    1;    i    <    getArtificialVariableOffset();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  getNumArtificialVariables()  -  1;  i  <  getArtificialVariableOffset();  i++)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  for(int  i  =  getNumArtificialVariables()  -  1;  i  <  getArtificialVariableOffset();  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	for(int  i  =  getNumArtificialVariables()  -  1;  i  <  getArtificialVariableOffset();  i++)  {	  for(int    i    =    getNumObjectiveFunctions()    -    1;    i    <    getArtificialVariableOffset();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
32	[BUG]  [BUGGY]  int  maxUlps  =  matrix.getMaximumUlps()  +  1;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  int  maxUlps  =  matrix.getMaximumUlps()  +  1;  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	int  maxUlps  =  matrix.getMaximumUlps()  +  1;	      int    maxUlps    =    matrix.getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
33	[BUG]  [BUGGY]  int  maxUlps  =  matrix.getMaximumUlps()  -  1;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  int  maxUlps  =  matrix.getMaximumUlps()  -  1;  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	int  maxUlps  =  matrix.getMaximumUlps()  -  1;	      int    maxUlps    =    matrix.getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
34	[BUG]  [BUGGY]  int  maxUlps  =  columnLabels.getMaximumUlps();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  int  maxUlps  =  columnLabels.getMaximumUlps();  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	int  maxUlps  =  columnLabels.getMaximumUlps();	      int    maxUlps    =    matrix.getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
35	[BUG]  [BUGGY]  int  maxUlps  =  Math.min(getNumArtificialVariables(),  columnsToDrop.size()  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  int  maxUlps  =  Math.min(getNumArtificialVariables(),  columnsToDrop.size()  -  1);  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	int  maxUlps  =  Math.min(getNumArtificialVariables(),  columnsToDrop.size()  -  1);	      int    maxUlps    =    Math.min(getNumArtificialVariables(),    columnsToDrop.size());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
36	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(getNumArtificialVariables(),  columnsToDrop.size()  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  int  maxUlps  =  Math.max(getNumArtificialVariables(),  columnsToDrop.size()  -  1);  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	int  maxUlps  =  Math.max(getNumArtificialVariables(),  columnsToDrop.size()  -  1);	      int    maxUlps    =    Math.min(getNumArtificialVariables(),    columnsToDrop.size());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
37	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	for(int  i  =  0;  i  <  getMaxUlps();  i++)  {	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
38	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumns();  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  for(int  i  =  0;  i  <  getColumns();  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	for(int  i  =  0;  i  <  getColumns();  i++)  {	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
39	[BUG]  [BUGGY]  Collections.reverse(columnLabels,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  Collections.reverse(columnLabels,  columnsToDrop);  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	Collections.reverse(columnLabels,  columnsToDrop);	      Collections.reverse(columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
40	[BUG]  [BUGGY]  Collections.reverse(columnLabels,  columnLabels);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  Collections.reverse(columnLabels,  columnLabels);  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	Collections.reverse(columnLabels,  columnLabels);	      Collections.reverse(columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
41	[BUG]  [BUGGY]  Collections.reverse(columnLabels,  col);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  Collections.reverse(columnLabels,  col);  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	Collections.reverse(columnLabels,  col);	      Collections.reverse(columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
42	[BUG]  [BUGGY]  int  maxUlps  =  Math.min(getMaxUlps(),  getMaxUlps()  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  int  maxUlps  =  Math.min(getMaxUlps(),  getMaxUlps()  +  1);  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	int  maxUlps  =  Math.min(getMaxUlps(),  getMaxUlps()  +  1);	      int    maxUlps    =    Math.min(getMaxUlps(),    getMaxUlps());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
43	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(getMaxUlps(),  getMaxUlps());  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  int  maxUlps  =  Math.max(getMaxUlps(),  getMaxUlps());  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	int  maxUlps  =  Math.max(getMaxUlps(),  getMaxUlps());	      int    maxUlps    =    Math.min(getMaxUlps(),    getMaxUlps());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
44	[BUG]  [BUGGY]  int  maxUlps  =  Math.min(getMaxUlps(),  getMaxUlps()  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  int  maxUlps  =  Math.min(getMaxUlps(),  getMaxUlps()  -  1);  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	int  maxUlps  =  Math.min(getMaxUlps(),  getMaxUlps()  -  1);	      int    maxUlps    =    Math.min(getMaxUlps(),    getMaxUlps());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
45	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(getMaxUlps(),  getMaxUlps()  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  int  maxUlps  =  Math.max(getMaxUlps(),  getMaxUlps()  -  1);  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	int  maxUlps  =  Math.max(getMaxUlps(),  getMaxUlps()  -  1);	      int    maxUlps    =    Math.min(getMaxUlps(),    getMaxUlps());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
46	[BUG]  [BUGGY]  for(int  i  =  getNumColumns()  -  1;  i  <  getArtificialVariableOffset();  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  for(int  i  =  getNumColumns()  -  1;  i  <  getArtificialVariableOffset();  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	for(int  i  =  getNumColumns()  -  1;  i  <  getArtificialVariableOffset();  i++)  {	  for(int    i    =    getNumColumns();    i    <    getArtificialVariableOffset();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
47	[BUG]  [BUGGY]  for(int  i  =  getNumColumns();  i  <  columnsToDrop.size();  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  for(int  i  =  getNumColumns();  i  <  columnsToDrop.size();  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	for(int  i  =  getNumColumns();  i  <  columnsToDrop.size();  i++)  {	  for(int    i    =    getNumColumns();    i    <    getArtificialVariableOffset();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
48	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {	  for(int    i    =    getNumArtificialVariables();    i    <    getArtificialVariableOffset();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
49	[BUG]  [BUGGY]  for(int  i  =  getNumArtificialVariables();  i  <  columnsToDrop.size();  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  for(int  i  =  getNumArtificialVariables();  i  <  columnsToDrop.size();  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	for(int  i  =  getNumArtificialVariables();  i  <  columnsToDrop.size();  i++)  {	  for(int    i    =    getNumArtificialVariables();    i    <    getArtificialVariableOffset();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
50	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getArtificialVariableOffset();  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  for(int  i  =  0;  i  <  getArtificialVariableOffset();  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	for(int  i  =  0;  i  <  getArtificialVariableOffset();  i++)  {	  for(int    i    =    getNumArtificialVariables();    i    <    getArtificialVariableOffset();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
51	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  getMaxUlps();  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  for(int  i  =  1;  i  <  getMaxUlps();  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	for(int  i  =  1;  i  <  getMaxUlps();  i++)  {	  for(int    i    =    1;    i    <    getNumObjectiveFunctions();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
52	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  getColumns();  i++)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  for(int  i  =  1;  i  <  getColumns();  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	for(int  i  =  1;  i  <  getColumns();  i++)  {	  for(int    i    =    1;    i    <    getNumObjectiveFunctions();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
53	[BUG]  [BUGGY]  int  maxUlps  =  Math.min(getNumObjectiveFunctions(),  columnsToDrop.size()  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  int  maxUlps  =  Math.min(getNumObjectiveFunctions(),  columnsToDrop.size()  -  1);  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	int  maxUlps  =  Math.min(getNumObjectiveFunctions(),  columnsToDrop.size()  -  1);	      int    maxUlps    =    Math.min(getNumObjectiveFunctions(),    columnsToDrop.size());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
54	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(getNumObjectiveFunctions(),  columnsToDrop.size()  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  int  maxUlps  =  Math.max(getNumObjectiveFunctions(),  columnsToDrop.size()  -  1);  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	int  maxUlps  =  Math.max(getNumObjectiveFunctions(),  columnsToDrop.size()  -  1);	      int    maxUlps    =    Math.min(getNumObjectiveFunctions(),    columnsToDrop.size());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
55	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumEntryFunctions();  i++)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  for(int  i  =  0;  i  <  getNumEntryFunctions();  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	for(int  i  =  0;  i  <  getNumEntryFunctions();  i++)  {	  for(int    i    =    getNumEntryFunctions();    i    <    getArtificialVariableOffset();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
56	[BUG]  [BUGGY]  for(int  i  =  getNumEntryFunctions();  i  <  columnsToDrop.size();  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  for(int  i  =  getNumEntryFunctions();  i  <  columnsToDrop.size();  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	for(int  i  =  getNumEntryFunctions();  i  <  columnsToDrop.size();  i++)  {	  for(int    i    =    getNumEntryFunctions();    i    <    getArtificialVariableOffset();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
57	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  table.getFunction(null,  null);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  LinearObjectiveFunction  f  =  table.getFunction(null,  null);  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	LinearObjectiveFunction  f  =  table.getFunction(null,  null);	      LinearObjectiveFunction    f    =    table.getFunction(null);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
58	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectives();  i++)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  for(int  i  =  0;  i  <  getNumObjectives();  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	for(int  i  =  0;  i  <  getNumObjectives();  i++)  {	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
59	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  for(int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	for(int  i  =  0;  i  <  getNumSlackVariables();  i++)  {	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
60	[BUG]  [BUGGY]  int  maxUlps  =  table.getMaxUlps();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  int  maxUlps  =  table.getMaxUlps();  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	int  maxUlps  =  table.getMaxUlps();	      int    maxUlps    =    matrix.getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
61	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =  getGraphicTable();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  LinearObjectiveFunction  graph  =  getGraphicTable();  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	LinearObjectiveFunction  graph  =  getGraphicTable();	      LinearObjectiveFunction    graph    =    getBasicTable();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
62	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =  getPhase();  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  LinearObjectiveFunction  graph  =  getPhase();  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	LinearObjectiveFunction  graph  =  getPhase();	      LinearObjectiveFunction    graph    =    getBasicTable();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
63	[BUG]  [BUGGY]  int  maxUlps  =  Math.min(getMaxUlps(),  getMinUlps());  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  int  maxUlps  =  Math.min(getMaxUlps(),  getMinUlps());  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	int  maxUlps  =  Math.min(getMaxUlps(),  getMinUlps());	      int    maxUlps    =    Math.min(getMaxUlps(),    getMaxUlps());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
64	[BUG]  [BUGGY]  for(int  i  =  getNumVariables();  i  <  getArtificialVariableOffset();  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  for(int  i  =  getNumVariables();  i  <  getArtificialVariableOffset();  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	for(int  i  =  getNumVariables();  i  <  getArtificialVariableOffset();  i++)  {	  for(int    i    =    getNumSlackVariables();    i    <    getArtificialVariableOffset();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
65	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  this.columnLabels.size();  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  this.columnLabels.size();  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  this.columnLabels.size();  i++)  {	  for(int    i    =    getNumObjectiveFunctions();    i    <    columnsToDrop.size();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
66	[BUG]  [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  table.size();  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  for(int  i  =  getNumObjectiveFunctions();  i  <  table.size();  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	for(int  i  =  getNumObjectiveFunctions();  i  <  table.size();  i++)  {	  for(int    i    =    getNumObjectiveFunctions();    i    <    columnsToDrop.size();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
67	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getArtificialVariables();  i++)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  for(int  i  =  0;  i  <  getArtificialVariables();  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	for(int  i  =  0;  i  <  getArtificialVariables();  i++)  {	  for(int    i    =    getNumArtificialVariables();    i    <    getArtificialVariableOffset();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
68	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(getNumObjectiveFunctions(),  columnsToDrop.size());  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  int  maxUlps  =  Math.max(getNumObjectiveFunctions(),  columnsToDrop.size());  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	int  maxUlps  =  Math.max(getNumObjectiveFunctions(),  columnsToDrop.size());	      int    maxUlps    =    Math.min(getNumArtificialVariables(),    columnsToDrop.size());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
69	[BUG]  [BUGGY]  Collections.sort(columnLabels,  0);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  Collections.sort(columnLabels,  0);  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	Collections.sort(columnLabels,  0);	      Collections.sort(columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
70	[BUG]  [BUGGY]  Collections.sort(columnsToDrop);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  Collections.sort(columnsToDrop);  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	Collections.sort(columnsToDrop);	      Collections.sort(columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
71	[BUG]  [BUGGY]  Table  <  Integer,  Integer>  table  =  getTable().clone();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  Table  <  Integer,  Integer>  table  =  getTable().clone();  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	Table  <  Integer,  Integer>  table  =  getTable().clone();	      Table    <    Integer,    Integer>    table    =    getTable();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
72	[BUG]  [BUGGY]  for(int  i  =  getNumColumns();  i  <  =  getArtificialVariableOffset();  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  for(int  i  =  getNumColumns();  i  <  =  getArtificialVariableOffset();  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	for(int  i  =  getNumColumns();  i  <  =  getArtificialVariableOffset();  i++)  {	  for(int    i    =    getNumColumns();    i    <    getArtificialVariableOffset();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
73	[BUG]  [BUGGY]  for(int  i  =  getNumObjectives();  i  <  getArtificialVariableOffset();  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  for(int  i  =  getNumObjectives();  i  <  getArtificialVariableOffset();  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	for(int  i  =  getNumObjectives();  i  <  getArtificialVariableOffset();  i++)  {	  for(int    i    =    getNumColumns();    i    <    getArtificialVariableOffset();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
74	[BUG]  [BUGGY]  Collections.reverse(columnLabels,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  Collections.reverse(columnLabels,  DEFAULT_ULPS);  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	Collections.reverse(columnLabels,  DEFAULT_ULPS);	      Collections.reverse(columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
75	[BUG]  [BUGGY]  Collections.reverse(columnLabels,  0);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  Collections.reverse(columnLabels,  0);  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	Collections.reverse(columnLabels,  0);	      Collections.reverse(columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
76	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  /  DEFAULT_ULPS;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  int  maxUlps  =  getMaximumUlps()  /  DEFAULT_ULPS;  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	int  maxUlps  =  getMaximumUlps()  /  DEFAULT_ULPS;	      int    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
77	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  getNumSlackVariables();  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  for(int  i  =  1;  i  <  getNumSlackVariables();  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	for(int  i  =  1;  i  <  getNumSlackVariables();  i++)  {	  for(int    i    =    1;    i    <    getNumObjectiveFunctions();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
78	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  getNumObjectives();  i++)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  for(int  i  =  1;  i  <  getNumObjectives();  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	for(int  i  =  1;  i  <  getNumObjectives();  i++)  {	  for(int    i    =    1;    i    <    getNumObjectiveFunctions();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
79	[BUG]  [BUGGY]  int  maxUlps  =  Math.min(columnsToDrop.size(),  getMaxUlps());  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  int  maxUlps  =  Math.min(columnsToDrop.size(),  getMaxUlps());  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	int  maxUlps  =  Math.min(columnsToDrop.size(),  getMaxUlps());	      int    maxUlps    =    Math.min(getMaxUlps(),    columnsToDrop.size());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
80	[BUG]  [BUGGY]  for(int  i  =  getNumSlackVariables()  -  1;  i  <  getArtificialVariableOffset();  i++)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  for(int  i  =  getNumSlackVariables()  -  1;  i  <  getArtificialVariableOffset();  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	for(int  i  =  getNumSlackVariables()  -  1;  i  <  getArtificialVariableOffset();  i++)  {	  for(int    i    =    getNumObjectiveFunctions()    -    1;    i    <    getArtificialVariableOffset();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
81	[BUG]  [BUGGY]  For(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  For(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	For(int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {	  for(int    i    =    getNumObjectiveFunctions()    -    1;    i    <    getArtificialVariableOffset();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
82	[BUG]  [BUGGY]  int  maxUlps  =  matrix.getMaximumUlps()  /  DEFAULT_ULPS;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  int  maxUlps  =  matrix.getMaximumUlps()  /  DEFAULT_ULPS;  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	int  maxUlps  =  matrix.getMaximumUlps()  /  DEFAULT_ULPS;	      int    maxUlps    =    matrix.getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
83	[BUG]  [BUGGY]  for(int  i  =  getNumEntryCount();  i  <  getArtificialVariableOffset();  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  for(int  i  =  getNumEntryCount();  i  <  getArtificialVariableOffset();  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	for(int  i  =  getNumEntryCount();  i  <  getArtificialVariableOffset();  i++)  {	  for(int    i    =    getNumColumns();    i    <    getArtificialVariableOffset();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
84	[BUG]  [BUGGY]  for(int  i  =  getNumEntrySize();  i  <  getArtificialVariableOffset();  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  for(int  i  =  getNumEntrySize();  i  <  getArtificialVariableOffset();  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	for(int  i  =  getNumEntrySize();  i  <  getArtificialVariableOffset();  i++)  {	  for(int    i    =    getNumColumns();    i    <    getArtificialVariableOffset();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
85	[BUG]  [BUGGY]  for(int  i  =  getNumEntries();  i  <  getArtificialVariableOffset();  i++)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  for(int  i  =  getNumEntries();  i  <  getArtificialVariableOffset();  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	for(int  i  =  getNumEntries();  i  <  getArtificialVariableOffset();  i++)  {	  for(int    i    =    getNumColumns();    i    <    getArtificialVariableOffset();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
86	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  *  DEFAULT_ULPS;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  int  maxUlps  =  getMaximumUlps()  *  DEFAULT_ULPS;  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	int  maxUlps  =  getMaximumUlps()  *  DEFAULT_ULPS;	      int    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
87	[BUG]  [BUGGY]  for(int  i  =  getNumEntryFunctions();  i  <  table.getArtificialVariableOffset();  i++)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  for(int  i  =  getNumEntryFunctions();  i  <  table.getArtificialVariableOffset();  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	for(int  i  =  getNumEntryFunctions();  i  <  table.getArtificialVariableOffset();  i++)  {	  for(int    i    =    getNumEntryFunctions();    i    <    getArtificialVariableOffset();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
88	[BUG]  [BUGGY]  for(int  i  =  getNumEntryFunctions();  i  <  columnLabels.size();  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  for(int  i  =  getNumEntryFunctions();  i  <  columnLabels.size();  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	for(int  i  =  getNumEntryFunctions();  i  <  columnLabels.size();  i++)  {	  for(int    i    =    getNumEntryFunctions();    i    <    getArtificialVariableOffset();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
89	[BUG]  [BUGGY]  Collections.sort(columnLabels,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  Collections.sort(columnLabels,  DEFAULT_ULPS);  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	Collections.sort(columnLabels,  DEFAULT_ULPS);	      Collections.sort(columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
90	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(getNumArtificialVariables(),  columnsToDrop.size());  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  int  maxUlps  =  Math.max(getNumArtificialVariables(),  columnsToDrop.size());  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	int  maxUlps  =  Math.max(getNumArtificialVariables(),  columnsToDrop.size());	      int    maxUlps    =    Math.min(getNumArtificialVariables(),    columnsToDrop.size());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
91	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(columnsToDrop.size(),  getNumArtificialVariables());  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  int  maxUlps  =  Math.max(columnsToDrop.size(),  getNumArtificialVariables());  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	int  maxUlps  =  Math.max(columnsToDrop.size(),  getNumArtificialVariables());	      int    maxUlps    =    Math.min(getNumArtificialVariables(),    columnsToDrop.size());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
92	[BUG]  [BUGGY]  int  maxUlps  =  table.getMaximumUlps();  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  int  maxUlps  =  table.getMaximumUlps();  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	int  maxUlps  =  table.getMaximumUlps();	      int    maxUlps    =    matrix.getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
93	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(columnsToDrop.size(),  getNumObjectiveFunctions());  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  int  maxUlps  =  Math.max(columnsToDrop.size(),  getNumObjectiveFunctions());  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	int  maxUlps  =  Math.max(columnsToDrop.size(),  getNumObjectiveFunctions());	      int    maxUlps    =    Math.min(getNumObjectiveFunctions(),    columnsToDrop.size());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
94	[BUG]  [BUGGY]  Table  <  Integer,  Integer>  table  =  getTable().getTable();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  Table  <  Integer,  Integer>  table  =  getTable().getTable();  [BUGGY]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	Table  <  Integer,  Integer>  table  =  getTable().getTable();	      Table    <    Integer,    Integer>    table    =    getTable();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
95	[BUG]  [BUGGY]  for(int  i  =  getNumEntryVariables();  i  <  getArtificialVariableOffset();  i++)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  for(int  i  =  getNumEntryVariables();  i  <  getArtificialVariableOffset();  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	for(int  i  =  getNumEntryVariables();  i  <  getArtificialVariableOffset();  i++)  {	  for(int    i    =    getNumArtificialVariables();    i    <    getArtificialVariableOffset();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
96	[BUG]  [BUGGY]  for(int  i  =  getPhase();  i  <  columnsToDrop.size();  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  for(int  i  =  getPhase();  i  <  columnsToDrop.size();  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	for(int  i  =  getPhase();  i  <  columnsToDrop.size();  i++)  {	  for(int    i    =    getNumObjectiveFunctions();    i    <    columnsToDrop.size();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
97	[BUG]  [BUGGY]  for(int  i  =  getSize();  i  <  columnsToDrop.size();  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  for(int  i  =  getSize();  i  <  columnsToDrop.size();  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	for(int  i  =  getSize();  i  <  columnsToDrop.size();  i++)  {	  for(int    i    =    getNumObjectiveFunctions();    i    <    columnsToDrop.size();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
98	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  getNumEntryFunctions();  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  for(int  i  =  1;  i  <  getNumEntryFunctions();  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	for(int  i  =  1;  i  <  getNumEntryFunctions();  i++)  {	  for(int    i    =    1;    i    <    getNumObjectiveFunctions();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
99	[BUG]  [BUGGY]  for(int  i  =  getNumEntrySlackVariables();  i  <  getArtificialVariableOffset();  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);      [BUGGY]  for(int  i  =  getNumEntrySlackVariables();  i  <  getArtificialVariableOffset();  i++)  {  [BUGGY]    final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	for(int  i  =  getNumEntrySlackVariables();  i  <  getArtificialVariableOffset();  i++)  {	  for(int    i    =    getNumSlackVariables();    i    <    getArtificialVariableOffset();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
