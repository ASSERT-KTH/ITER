bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(i);  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(i);  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    	non-compiled	[CE]  ';'  expected	2	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(i);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(i);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(i);	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    	non-compiled	[CE]  ';'  expected	2	None	replace
3	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumns();  i++)  {  columnsToDrop.add(i);  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getColumns();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getColumns();  i++)  {  columnsToDrop.add(i);  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    	non-compiled	[CE]  ';'  expected	2	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  1);  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  1);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  1);  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    	non-compiled	[CE]  ';'  expected	2	None	replace
5	[BUG]  [BUGGY]  columnsToDrop.add(entry.toString()  +  1);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(entry.toString()  +  1);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry.toString()  +  1);	  columnsToDrop.add(entry.toString());    	non-compiled	[CE]  ';'  expected	13	None	replace
6	[BUG]  [BUGGY]  columnsToDrop.add(entry.toString(),  col);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(entry.toString(),  col);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry.toString(),  col);	  columnsToDrop.add(entry.toString());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
7	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getNumObjectiveFunctions().length;  i++)  {  columnsToDrop.add(i);  }  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  For(int  i  =  0;  i  <  getNumObjectiveFunctions().length;  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	For(int  i  =  0;  i  <  getNumObjectiveFunctions().length;  i++)  {  columnsToDrop.add(i);  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions().length;    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  '.class'  expected	3	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps().length;  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps().length;  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getMaxUlps().length;  i++)  {  columnsToDrop.add(i);  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions().length;    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicRow().length;  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getBasicRow().length;  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getBasicRow().length;  i++)  {  columnsToDrop.add(i);  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions().length;    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
10	[BUG]  [BUGGY]  int  maxUlps  =  Math.min(entry.length(),  entry.length());  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  maxUlps  =  Math.min(entry.length(),  entry.length());  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.min(entry.length(),  entry.length());	  int    maxUlps    =    Math.min(entry.length()    +    1,    entry.length());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
11	[BUG]  [BUGGY]  int  maxUlps  =  Math.min(entry.length()  +  1,  entry.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  maxUlps  =  Math.min(entry.length()  +  1,  entry.length()  -  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.min(entry.length()  +  1,  entry.length()  -  1);	  int    maxUlps    =    Math.min(entry.length()    +    1,    entry.length());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
12	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(entry.length()  +  1,  entry.length());  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  maxUlps  =  Math.max(entry.length()  +  1,  entry.length());  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.max(entry.length()  +  1,  entry.length());	  int    maxUlps    =    Math.min(entry.length()    +    1,    entry.length());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
13	[BUG]  [BUGGY]  col  =  Math.max(columnsToDrop.size(),  entry.length);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnsToDrop.size(),  entry.length);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnsToDrop.size(),  entry.length);	  if(!precision.compareTo(entry,    0,    col))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
14	[BUG]  [BUGGY]  Columns.add(columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  Columns.add(columnsToDrop);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	Columns.add(columnsToDrop);	  if(!precision.compareTo(entry,    0,    col))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
15	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  For(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	For(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  '.class'  expected	73	None	replace
16	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  For(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	For(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  '.class'  expected	73	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
18	[BUG]  [BUGGY]  ColumnLabels.remove(entry);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.remove(entry);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.remove(entry);	  columnsToDrop.remove(columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
19	[BUG]  [BUGGY]  columnsToDrop.remove(0);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.remove(0);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.remove(0);	  columnsToDrop.remove(columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
20	[BUG]  [BUGGY]  columnsToDrop.add(entry,  i);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(entry,  i);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry,  i);	  columnsToDrop.add(i,    entry);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
21	[BUG]  [BUGGY]  columnsToDrop.add(entry,  col);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(entry,  col);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry,  col);	  columnsToDrop.add(i,    entry);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
22	[BUG]  [BUGGY]  columnsToDrop.add(entry,  height);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(entry,  height);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry,  height);	  columnsToDrop.add(i,    entry);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
23	[BUG]  [BUGGY]  columnsToDrop.add(entry  *  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(entry  *  1);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry  *  1);	  columnsToDrop.add(maxUlps    +    1);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
24	[BUG]  [BUGGY]  Columns.add(columnLabels  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  Columns.add(columnLabels  +  1);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	Columns.add(columnLabels  +  1);	  columnsToDrop.add(maxUlps    +    1);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
25	[BUG]  [BUGGY]  columnsToDrop.add(new  Integer(entry.doubleValue()  +  1));  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(new  Integer(entry.doubleValue()  +  1));  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(new  Integer(entry.doubleValue()  +  1));	  columnsToDrop.add(new    Integer(entry.doubleValue()));    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
26	[BUG]  [BUGGY]  columnsToDrop.add(new  Integer(entry.doubleValue(),  maxUlps));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(new  Integer(entry.doubleValue(),  maxUlps));  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(new  Integer(entry.doubleValue(),  maxUlps));	  columnsToDrop.add(new    Integer(entry.doubleValue()));    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
27	[BUG]  [BUGGY]  columnsToDrop.add(new  Integer(entry.doubleValue()  -  1));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(new  Integer(entry.doubleValue()  -  1));  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(new  Integer(entry.doubleValue()  -  1));	  columnsToDrop.add(new    Integer(entry.doubleValue()));    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
28	[BUG]  [BUGGY]  columnsToDrop.add(new  Integer(entry.doubleValue()  +  2));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(new  Integer(entry.doubleValue()  +  2));  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(new  Integer(entry.doubleValue()  +  2));	  columnsToDrop.add(new    Integer(entry.doubleValue()));    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
29	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  For(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	For(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  '.class'  expected	1	None	replace
30	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(entry.length,  2  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  maxUlps  =  Math.max(entry.length,  2  -  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.max(entry.length,  2  -  1);	  int    maxUlps    =    Math.max(entry.length,    2);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
31	[BUG]  [BUGGY]  columnsToDrop.add(entry.getValue()  /  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(entry.getValue()  /  1);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry.getValue()  /  1);	  columnsToDrop.add(entry.getValue()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
32	[BUG]  [BUGGY]  columnsToDrop.add(entry.getValue(),  maxUlps  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(entry.getValue(),  maxUlps  +  1);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry.getValue(),  maxUlps  +  1);	  columnsToDrop.add(entry.getValue()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
33	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  For(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	For(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  '.class'  expected	94	None	replace
34	[BUG]  [BUGGY]  col  =  Math.max(entry.size(),  col.doubleValue()  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(entry.size(),  col.doubleValue()  +  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(entry.size(),  col.doubleValue()  +  1);	  col    =    Math.max(columnLabels.size(),    entry.doubleValue()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
35	[BUG]  [BUGGY]  col  =  Math.max(entry.size(),  columnLabels.doubleValue()  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(entry.size(),  columnLabels.doubleValue()  +  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(entry.size(),  columnLabels.doubleValue()  +  1);	  col    =    Math.max(columnLabels.size(),    entry.doubleValue()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
36	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow    	non-compiled	[CE]  ')'  expected	86	None	replace
37	[BUG]  [BUGGY]  if(precision!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(precision!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(precision!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow    	non-compiled	[CE]  ')'  expected	86	None	replace
38	[BUG]  [BUGGY]  if(columnsToDrop!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(columnsToDrop!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(columnsToDrop!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow    	non-compiled	[CE]  not  a  statement	86	None	replace
39	[BUG]  [BUGGY]  if(precision!=  null)  {  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(precision!=  null)  {  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(precision!=  null)  {  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow    	non-compiled	[CE]  ')'  expected	86	None	replace
40	[BUG]  [BUGGY]  int  height  =  Math.max(entry.length,  0);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  height  =  Math.max(entry.length,  0);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  height  =  Math.max(entry.length,  0);	  int    height    =    Math.max(entry.length,    1);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
41	[BUG]  [BUGGY]  int  height  =  Math.max(entry.length,  1  -  maxUlps);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  height  =  Math.max(entry.length,  1  -  maxUlps);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  height  =  Math.max(entry.length,  1  -  maxUlps);	  int    height    =    Math.max(entry.length,    1);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
42	[BUG]  [BUGGY]  ColumnLabels.add(entry,  i,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(entry,  i,  columnLabels);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(entry,  i,  columnLabels);	  ColumnLabels.add(columnLabels,    i,    entry);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
43	[BUG]  [BUGGY]  ColumnLabels.add(columnLabels,  entry,  i);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnLabels,  entry,  i);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabels,  entry,  i);	  ColumnLabels.add(columnLabels,    i,    entry);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
44	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(entry.length,  maxUlps  +  1d);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  maxUlps  =  Math.max(entry.length,  maxUlps  +  1d);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.max(entry.length,  maxUlps  +  1d);	  int    maxUlps    =    Math.max(entry.length,    maxUlps    +    1);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
45	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(entry.length,  maxUlps  +  2);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  maxUlps  =  Math.max(entry.length,  maxUlps  +  2);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.max(entry.length,  maxUlps  +  2);	  int    maxUlps    =    Math.max(entry.length,    maxUlps    +    1);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
46	[BUG]  [BUGGY]  double  height  =  Math.abs(entry.doubleValue()  /  DEFAULT_ULPS,  maxUlps);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  double  height  =  Math.abs(entry.doubleValue()  /  DEFAULT_ULPS,  maxUlps);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	double  height  =  Math.abs(entry.doubleValue()  /  DEFAULT_ULPS,  maxUlps);	  double    height    =    Math.abs(entry.doubleValue()    /    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
47	[BUG]  [BUGGY]  columnsToDrop.remove(entry.getValue()  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.remove(entry.getValue()  -  1);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.remove(entry.getValue()  -  1);	  columnsToDrop.remove(entry.getValue());    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
48	[BUG]  [BUGGY]  columnsToDrop.remove(entry.getKey());  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.remove(entry.getKey());  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.remove(entry.getKey());	  columnsToDrop.remove(entry.getValue());    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
49	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnLabelsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnLabelsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnLabelsToDrop.add(i);  }	  if(!precision.compareTo(entry,    0,    columnLabels))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
50	[BUG]  [BUGGY]  double  height  =  Math.abs(entry.doubleValue()  *  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  double  height  =  Math.abs(entry.doubleValue()  *  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	double  height  =  Math.abs(entry.doubleValue()  *  NEGATIVE_VAR_COLUMN_LABEL);	  double    height    =    Math.abs(entry.doubleValue()    *    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
51	[BUG]  [BUGGY]  double  height  =  Math.abs(entry.doubleValue()  *  2);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  double  height  =  Math.abs(entry.doubleValue()  *  2);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	double  height  =  Math.abs(entry.doubleValue()  *  2);	  double    height    =    Math.abs(entry.doubleValue()    *    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
52	[BUG]  [BUGGY]  ColumnLabels.add(entry,  columnLabels,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(entry,  columnLabels,  columnLabels);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(entry,  columnLabels,  columnLabels);	  ColumnLabels.add(columnLabels,    columnLabels,    entry);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
53	[BUG]  [BUGGY]  ColumnLabels.add(entry,  columnLabels,  col);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(entry,  columnLabels,  col);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(entry,  columnLabels,  col);	  ColumnLabels.add(columnLabels,    columnLabels,    entry);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
54	[BUG]  [BUGGY]  ColumnLabels.add(columnLabels,  entry,  matrix);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnLabels,  entry,  matrix);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabels,  entry,  matrix);	  ColumnLabels.add(columnLabels,    columnLabels,    entry);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
55	[BUG]  [BUGGY]  ColumnLabels.add(colonLabelsToDrop,  entry);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(colonLabelsToDrop,  entry);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(colonLabelsToDrop,  entry);	  ColumnLabels.add(entry,    columnLabelsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
56	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicRowCount();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getBasicRowCount();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getBasicRowCount();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    }    	non-compiled	[CE]  ')'  expected	32	None	replace
57	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  }  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    }    	non-compiled	[CE]  ')'  expected	32	None	replace
58	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicRows();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  }  [CE]  ')'  expected  [FE]                            AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getBasicRows();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getBasicRows();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    }    	non-compiled	[CE]  ')'  expected	32	None	replace
59	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicRowCount();  i++)  {  columnsToDrop.add(i  +  getBasicColumn(i)  }  [CE]  ')'  expected  [FE]                              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getBasicRowCount();  i++)  {  columnsToDrop.add(i  +  getBasicColumn(i)  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getBasicRowCount();  i++)  {  columnsToDrop.add(i  +  getBasicColumn(i)  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    }    	non-compiled	[CE]  ')'  expected	32	None	replace
60	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(entry.length(),  height);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  maxUlps  =  Math.max(entry.length(),  height);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.max(entry.length(),  height);	  int    maxUlps    =    Math.min(entry.length(),    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
61	[BUG]  [BUGGY]  int  maxUlps  =  Math.min(maxUlps.length(),  entry);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  maxUlps  =  Math.min(maxUlps.length(),  entry);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.min(maxUlps.length(),  entry);	  int    maxUlps    =    Math.min(entry.length(),    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
62	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(entry.length(),  maxUlps  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  maxUlps  =  Math.max(entry.length(),  maxUlps  +  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.max(entry.length(),  maxUlps  +  1);	  int    maxUlps    =    Math.min(entry.length(),    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
63	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.intValue()  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.intValue()  +  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  entry.intValue()  +  1);	  col    =    Math.max(columnLabels.size(),    entry.intValue());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
64	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.intValue()  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.intValue()  -  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  entry.intValue()  -  1);	  col    =    Math.max(columnLabels.size(),    entry.intValue());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
65	[BUG]  [BUGGY]  if(entry.length  >  0)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(entry.length  >  0)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(entry.length  >  0)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }	  if(!precision.compareTo(entry,    0,    entry.length))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
66	[BUG]  [BUGGY]  if(entry.length  >  0)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(entry.length  >  0)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(entry.length  >  0)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(	  if(!precision.compareTo(entry,    0,    entry.length))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  '.class'  expected	102	None	replace
67	[BUG]  [BUGGY]  if(entry.length  >  0)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(entry.length  >  0)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(entry.length  >  0)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add	  if(!precision.compareTo(entry,    0,    entry.length))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  not  a  statement	102	None	replace
68	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)!=  columnsToDrop.  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)!=  columnsToDrop.  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)!=  columnsToDrop.	  if(!precision.compareTo(entry,    0,    col))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    	non-compiled	[CE]  <identifier>  expected	30	None	replace
69	[BUG]  [BUGGY]  ColumnLabels.add(columnLabels,  entry,  NEGATIVE_VAR_COLUMN_LABEL,  maxUlps);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnLabels,  entry,  NEGATIVE_VAR_COLUMN_LABEL,  maxUlps);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabels,  entry,  NEGATIVE_VAR_COLUMN_LABEL,  maxUlps);	  ColumnLabels.add(columnLabels,    entry,    NEGATIVE_VAR_COLUMN_LABEL);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
70	[BUG]  [BUGGY]  ColumnLabels.add(entry,  columnLabels,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(entry,  columnLabels,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(entry,  columnLabels,  NEGATIVE_VAR_COLUMN_LABEL);	  ColumnLabels.add(columnLabels,    entry,    NEGATIVE_VAR_COLUMN_LABEL);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
71	[BUG]  [BUGGY]  ColumnLabels.add(columnLabels,  entry,  NEGATIVE_VAR_COLUMN_LABEL,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnLabels,  entry,  NEGATIVE_VAR_COLUMN_LABEL,  DEFAULT_ULPS);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabels,  entry,  NEGATIVE_VAR_COLUMN_LABEL,  DEFAULT_ULPS);	  ColumnLabels.add(columnLabels,    entry,    NEGATIVE_VAR_COLUMN_LABEL);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
72	[BUG]  [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  entry))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  entry))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  entry))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }	  if(!precision.compareTo(entry,    0,    entry))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
73	[BUG]  [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  entries))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  entries))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  entries))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }	  if(!precision.compareTo(entry,    0,    entry))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
74	[BUG]  [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  entry))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  entry))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  entry))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(	  if(!precision.compareTo(entry,    0,    entry))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  '.class'  expected	105	None	replace
75	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.getValue()  *  maxUlps  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.getValue()  *  maxUlps  -  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  entry.getValue()  *  maxUlps  -  1);	  col    =    Math.max(columnLabels.size(),    entry.getValue()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
76	[BUG]  [BUGGY]  col  =  Math.max(entry.getValue(),  columnLabels.size()  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(entry.getValue(),  columnLabels.size()  -  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(entry.getValue(),  columnLabels.size()  -  1);	  col    =    Math.max(columnLabels.size(),    entry.getValue()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
77	[BUG]  [BUGGY]  columnsToDrop.add(i  +  getBasicRow(i));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(i  +  getBasicRow(i));  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(i  +  getBasicRow(i));	  if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i));    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
78	[BUG]  [BUGGY]  columnsToDrop.add(entry.intValue());  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(entry.intValue());  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry.intValue());	  columnsToDrop.add(entry.intValue()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
79	[BUG]  [BUGGY]  columnsToDrop.add(entry.intValue()  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(entry.intValue()  +  1);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry.intValue()  +  1);	  columnsToDrop.add(entry.intValue()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
80	[BUG]  [BUGGY]  columnsToDrop.add(entry.doubleValue());  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(entry.doubleValue());  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry.doubleValue());	  columnsToDrop.add(entry.intValue()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
81	[BUG]  [BUGGY]  ColumnLabels.add(columnLabelsToDrop,  i  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnLabelsToDrop,  i  +  1);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabelsToDrop,  i  +  1);	  ColumnLabels.add(columnLabelsToDrop,    i);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
82	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getBasicLeft();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }  [CE]  '.class'  expected  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  For(int  i  =  0;  i  <  getBasicLeft();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	For(int  i  =  0;  i  <  getBasicLeft();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicLeft(i));    }    	non-compiled	[CE]  '.class'  expected	65	None	replace
83	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicLeft();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getBasicLeft();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getBasicLeft();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicLeft(i));    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
84	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }  [CE]  '.class'  expected  [FE]                          AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  For(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	For(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicLeft(i));    }    	non-compiled	[CE]  '.class'  expected	65	None	replace
85	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicLeft(0);  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getBasicLeft(0);  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getBasicLeft(0);  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicLeft(i));    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
86	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicColumns();  i++)  {  columnsToDrop.add(i  +  getBasicColumn(i));  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getBasicColumns();  i++)  {  columnsToDrop.add(i  +  getBasicColumn(i));  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getBasicColumns();  i++)  {  columnsToDrop.add(i  +  getBasicColumn(i));  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicColumn(i));    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
87	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getBasicColumns();  i++)  {  columnsToDrop.add(i  +  getBasicColumn(i));  }  [CE]  '.class'  expected  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  For(int  i  =  0;  i  <  getBasicColumns();  i++)  {  columnsToDrop.add(i  +  getBasicColumn(i));  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	For(int  i  =  0;  i  <  getBasicColumns();  i++)  {  columnsToDrop.add(i  +  getBasicColumn(i));  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicColumn(i));    }    	non-compiled	[CE]  '.class'  expected	63	None	replace
88	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicColumns();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getBasicColumns();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getBasicColumns();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicColumn(i));    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
89	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getBasicColumns();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }  [CE]  '.class'  expected  [FE]                        AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  For(int  i  =  0;  i  <  getBasicColumns();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	For(int  i  =  0;  i  <  getBasicColumns();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicColumn(i));    }    	non-compiled	[CE]  '.class'  expected	63	None	replace
90	[BUG]  [BUGGY]  columnsToDrop.add(entry.getValue(),  col);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(entry.getValue(),  col);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry.getValue(),  col);	  columnsToDrop.add(entry.getValue());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
91	[BUG]  [BUGGY]  ColumnLabels.add(columnLabels,  0,  entry.length);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnLabels,  0,  entry.length);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabels,  0,  entry.length);	  ColumnLabels.add(columnLabels,    0,    entry);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
92	[BUG]  [BUGGY]  ColumnLabels.add(columnLabels,  0,  col);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnLabels,  0,  col);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabels,  0,  col);	  ColumnLabels.add(columnLabels,    0,    entry);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
93	[BUG]  [BUGGY]  ColumnLabels.add(entry,  0,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(entry,  0,  columnLabels);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(entry,  0,  columnLabels);	  ColumnLabels.add(columnLabels,    0,    entry);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
94	[BUG]  [BUGGY]  ColumnLabels.add(columnLabels,  0,  columnLabels.length);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnLabels,  0,  columnLabels.length);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabels,  0,  columnLabels.length);	  ColumnLabels.add(columnLabels,    0,    entry);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
95	[BUG]  [BUGGY]  ColumnLabels.add(columnsToDrop,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnsToDrop,  columnsToDrop);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnsToDrop,  columnsToDrop);	  ColumnLabels.add(columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
96	[BUG]  [BUGGY]  if(entry.length  >  0)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(entry.length  >  0)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(entry.length  >  0)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow	  if(!precision.compareTo(entry,    0,    entry.length))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    	non-compiled	[CE]  ')'  expected	115	None	replace
97	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  }	  if(!precision.compareTo(entry,    0,    entry.length))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    	non-compiled	[CE]  ')'  expected	115	None	replace
98	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    	non-compiled	[CE]  not  a  statement	114	None	replace
99	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    	non-compiled	[CE]  ')'  expected	114	None	replace
100	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    	non-compiled	[CE]  ')'  expected	114	None	replace
101	[BUG]  [BUGGY]  if(entry.length  >  0)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(entry.length  >  0)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(entry.length  >  0)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }	  if(!precision.compareTo(entry,    0,    entry.length))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
102	[BUG]  [BUGGY]  if(entry.length  >  0)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(entry.length  >  0)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(entry.length  >  0)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(	  if(!precision.compareTo(entry,    0,    entry.length))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  '.class'  expected	106	None	replace
103	[BUG]  [BUGGY]  if(entry.length  >  0)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(entry.length  >  0)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(entry.length  >  0)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i	  if(!precision.compareTo(entry,    0,    entry.length))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  ')'  expected	106	None	replace
104	[BUG]  [BUGGY]  int  maxUlps  =  Math.min(entry.length,  maxUlps  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  maxUlps  =  Math.min(entry.length,  maxUlps  -  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.min(entry.length,  maxUlps  -  1);	  int    maxUlps    =    Math.min(maxUlps,    entry.length    -    1);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
105	[BUG]  [BUGGY]  int  maxUlps  =  Math.min(maxUlps,  entry.length  -  1d);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  maxUlps  =  Math.min(maxUlps,  entry.length  -  1d);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.min(maxUlps,  entry.length  -  1d);	  int    maxUlps    =    Math.min(maxUlps,    entry.length    -    1);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
106	[BUG]  [BUGGY]  int  maxUlps  =  Math.min(maxUlps,  entry.length  -  2);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  maxUlps  =  Math.min(maxUlps,  entry.length  -  2);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.min(maxUlps,  entry.length  -  2);	  int    maxUlps    =    Math.min(maxUlps,    entry.length    -    1);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
107	[BUG]  [BUGGY]  double  height  =  Math.abs(entry.doubleValue()  /  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  double  height  =  Math.abs(entry.doubleValue()  /  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	double  height  =  Math.abs(entry.doubleValue()  /  1);	  double    height    =    Math.abs(entry.doubleValue()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
108	[BUG]  [BUGGY]  double  height  =  Math.abs(entry.doubleValue())+  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  double  height  =  Math.abs(entry.doubleValue())+  1;  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	double  height  =  Math.abs(entry.doubleValue())+  1;	  double    height    =    Math.abs(entry.doubleValue()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
109	[BUG]  [BUGGY]  ColumnLabels.set(columnLabels,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.set(columnLabels,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.set(columnLabels,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }	  if(!precision.compareTo(entry,    0,    columnLabels.length))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  ';'  expected	103	None	replace
110	[BUG]  [BUGGY]  ColumnLabels.set(columnLabels,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.set(columnLabels,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.set(columnLabels,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add	  if(!precision.compareTo(entry,    0,    columnLabels.length))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  ';'  expected	103	None	replace
111	[BUG]  [BUGGY]  ColumnLabels.set(columnLabels,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.set(columnLabels,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.set(columnLabels,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i	  if(!precision.compareTo(entry,    0,    columnLabels.length))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  ';'  expected	103	None	replace
112	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(entry.length,  1d);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  maxUlps  =  Math.max(entry.length,  1d);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.max(entry.length,  1d);	  int    maxUlps    =    Math.max(entry.length,    1);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
113	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(entry.length,  0);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  maxUlps  =  Math.max(entry.length,  0);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.max(entry.length,  0);	  int    maxUlps    =    Math.max(entry.length,    1);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
114	[BUG]  [BUGGY]  columnsToDrop.remove(entry.columns  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.remove(entry.columns  -  1);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.remove(entry.columns  -  1);	  columnsToDrop.remove(entry.columns);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
115	[BUG]  [BUGGY]  columnsToDrop.remove(entry.columns  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.remove(entry.columns  +  1);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.remove(entry.columns  +  1);	  columnsToDrop.remove(entry.columns);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
116	[BUG]  [BUGGY]  ColumnsToDrop.add(columnsToDrop,  i);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnsToDrop.add(columnsToDrop,  i);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnsToDrop.add(columnsToDrop,  i);	  ColumnsToDrop.add(columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
117	[BUG]  [BUGGY]  ColumnsToDrop.add(entry);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnsToDrop.add(entry);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnsToDrop.add(entry);	  ColumnsToDrop.add(columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
118	[BUG]  [BUGGY]  ColumnsToDrop.add(columnsToDrop,  entry);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnsToDrop.add(columnsToDrop,  entry);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnsToDrop.add(columnsToDrop,  entry);	  ColumnsToDrop.add(columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
119	[BUG]  [BUGGY]  ColumnsToDrop.add(columnsToDrop,  column);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnsToDrop.add(columnsToDrop,  column);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnsToDrop.add(columnsToDrop,  column);	  ColumnsToDrop.add(columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
120	[BUG]  [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  entry))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  entry))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  entry))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }	  if(!precision.compareTo(entry,    0,    entry))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
121	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(entry.length,  maxUlps  -  1d);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  maxUlps  =  Math.max(entry.length,  maxUlps  -  1d);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.max(entry.length,  maxUlps  -  1d);	  int    maxUlps    =    Math.max(entry.length,    maxUlps    -    1);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
122	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(entry.length,  maxUlps  -  2);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  maxUlps  =  Math.max(entry.length,  maxUlps  -  2);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.max(entry.length,  maxUlps  -  2);	  int    maxUlps    =    Math.max(entry.length,    maxUlps    -    1);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
123	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.length  +  2);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.length  +  2);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  entry.length  +  2);	  col    =    Math.max(columnLabels.size(),    entry.length    +    1);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
124	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.length  +  3);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.length  +  3);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  entry.length  +  3);	  col    =    Math.max(columnLabels.size(),    entry.length    +    1);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
125	[BUG]  [BUGGY]  ColumnLabels.add(columnLabels,  i  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnLabels,  i  +  1);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabels,  i  +  1);	  ColumnLabels.add(columnLabels,    i);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
126	[BUG]  [BUGGY]  ColumnLabels.add(columnLabels,  0,  i);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnLabels,  0,  i);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabels,  0,  i);	  ColumnLabels.add(columnLabels,    i);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
127	[BUG]  [BUGGY]  columnsToDrop.add(new  Integer(0));  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(new  Integer(0));  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(new  Integer(0));	  columnsToDrop.add(new    Integer(i));    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
128	[BUG]  [BUGGY]  columnsToDrop.add(new  Integer(i  +  1));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(new  Integer(i  +  1));  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(new  Integer(i  +  1));	  columnsToDrop.add(new    Integer(i));    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
129	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(entry.length,  4);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  maxUlps  =  Math.max(entry.length,  4);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.max(entry.length,  4);	  int    maxUlps    =    Math.max(entry.length,    3);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
130	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(entry.length,  3  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  maxUlps  =  Math.max(entry.length,  3  -  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.max(entry.length,  3  -  1);	  int    maxUlps    =    Math.max(entry.length,    3);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
131	[BUG]  [BUGGY]  int  height  =  Math.max(entry.length,  2  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  height  =  Math.max(entry.length,  2  -  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  height  =  Math.max(entry.length,  2  -  1);	  int    height    =    Math.max(entry.length,    2);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
132	[BUG]  [BUGGY]  ColumnLabels.add(columnsToDrop,  col);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnsToDrop,  col);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnsToDrop,  col);	  ColumnLabels.add(columnLabelsToDrop,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
133	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicRowCount();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getBasicRowCount();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getBasicRowCount();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i));    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
134	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getBasicRowCount();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  For(int  i  =  0;  i  <  getBasicRowCount();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	For(int  i  =  0;  i  <  getBasicRowCount();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i));    }    	non-compiled	[CE]  '.class'  expected	62	None	replace
135	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicRows();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getBasicRows();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getBasicRows();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i));    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
136	[BUG]  [BUGGY]  ColumnLabels.add(columnLabelsToDrop,  0d);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnLabelsToDrop,  0d);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabelsToDrop,  0d);	  ColumnLabels.add(columnLabelsToDrop,    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
137	[BUG]  [BUGGY]  if(precision!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(precision!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(precision!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(    	non-compiled	[CE]  '.class'  expected	74	None	replace
138	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(    	non-compiled	[CE]  '.class'  expected	74	None	replace
139	[BUG]  [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(  [CE]  '.class'  expected  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(    	non-compiled	[CE]  '.class'  expected	74	None	replace
140	[BUG]  [BUGGY]  columnsToDrop.add(entry.length  +  3);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(entry.length  +  3);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry.length  +  3);	  columnsToDrop.add(entry.length    +    1);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
141	[BUG]  [BUGGY]  columnsToDrop.add(entry.length  +  2);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(entry.length  +  2);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry.length  +  2);	  columnsToDrop.add(entry.length    +    1);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
142	[BUG]  [BUGGY]  columnsToDrop.add(i  +  getBasicRow(i)  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(i  +  getBasicRow(i)  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(i  +  getBasicRow(i)  }	  if(!precision.compareTo(entry,    0,    col))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    }    	non-compiled	[CE]  ')'  expected	31	None	replace
143	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.length  -  1,  maxUlps);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.length  -  1,  maxUlps);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  entry.length  -  1,  maxUlps);	  col    =    Math.max(columnLabels.size(),    entry.length    -    2);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
144	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(entry.length(),  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  maxUlps  =  Math.max(entry.length(),  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.max(entry.length(),  1);	  int    maxUlps    =    Math.max(entry.length(),    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
145	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(entry.length(),  col);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  maxUlps  =  Math.max(entry.length(),  col);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.max(entry.length(),  col);	  int    maxUlps    =    Math.max(entry.length(),    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
146	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(entry.length(),  width);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  maxUlps  =  Math.max(entry.length(),  width);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.max(entry.length(),  width);	  int    maxUlps    =    Math.max(entry.length(),    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
147	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  entry);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnLabels.size(),  entry);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  entry);	  col    =    Math.max(columnLabels.size(),    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
148	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnLabels.size(),  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  1);	  col    =    Math.max(columnLabels.size(),    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
149	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  height);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnLabels.size(),  height);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  height);	  col    =    Math.max(columnLabels.size(),    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
150	[BUG]  [BUGGY]  columnsToDrop.add(new  Integer(entry.getValue()  +  1));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(new  Integer(entry.getValue()  +  1));  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(new  Integer(entry.getValue()  +  1));	  columnsToDrop.add(new    Integer(entry.getValue()));    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
151	[BUG]  [BUGGY]  columnsToDrop.add(new  Integer(entry.getValue(),  maxUlps));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(new  Integer(entry.getValue(),  maxUlps));  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(new  Integer(entry.getValue(),  maxUlps));	  columnsToDrop.add(new    Integer(entry.getValue()));    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
152	[BUG]  [BUGGY]  columnsToDrop.add(new  Integer(entry.getLongValue()));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(new  Integer(entry.getLongValue()));  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(new  Integer(entry.getLongValue()));	  columnsToDrop.add(new    Integer(entry.getValue()));    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
153	[BUG]  [BUGGY]  columnsToDrop.add(new  Integer(entry.getRowValue()));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(new  Integer(entry.getRowValue()));  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(new  Integer(entry.getRowValue()));	  columnsToDrop.add(new    Integer(entry.getValue()));    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
154	[BUG]  [BUGGY]  ColumnLabels.add(columnsToDrop,  i  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnsToDrop,  i  +  1);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnsToDrop,  i  +  1);	  ColumnLabels.add(columnsToDrop,    i);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
155	[BUG]  [BUGGY]  ColumnLabels.add(columnsToDrop,  0,  col);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnsToDrop,  0,  col);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnsToDrop,  0,  col);	  ColumnLabels.add(columnsToDrop,    i);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
156	[BUG]  [BUGGY]  ColumnLabels.add(column,  entry);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(column,  entry);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(column,  entry);	  ColumnLabels.add(columnsToDrop,    column);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
157	[BUG]  [BUGGY]  ColumnLabels.add(columnsToDrop,  entries[i]);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnsToDrop,  entries[i]);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnsToDrop,  entries[i]);	  ColumnLabels.add(columnsToDrop,    column);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
158	[BUG]  [BUGGY]  ColumnLabels.add(column,  column);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(column,  column);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(column,  column);	  ColumnLabels.add(columnsToDrop,    column);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
159	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.getColumnValue()  -  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.getColumnValue()  -  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  entry.getColumnValue()  -  1);	  col    =    Math.max(columnLabels.size(),    entry.getColumnValue());    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
160	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.getColumnValue()  +  1);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.getColumnValue()  +  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  entry.getColumnValue()  +  1);	  col    =    Math.max(columnLabels.size(),    entry.getColumnValue());    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
161	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.getRowValue());  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.getRowValue());  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  entry.getRowValue());	  col    =    Math.max(columnLabels.size(),    entry.getColumnValue());    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
162	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.getUpperValue());  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.getUpperValue());  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  entry.getUpperValue());	  col    =    Math.max(columnLabels.size(),    entry.getColumnValue());    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
163	[BUG]  [BUGGY]  double  height  =  Math.abs(entry.doubleValue()  *  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  double  height  =  Math.abs(entry.doubleValue()  *  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	double  height  =  Math.abs(entry.doubleValue()  *  1);	  double    height    =    Math.abs(entry.doubleValue()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
164	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicRowCount();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)+  ')'  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getBasicRowCount();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)+  ')'  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getBasicRowCount();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)+  ')'	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    >=    ')'    	non-compiled	[CE]  ')'  expected	33	None	replace
165	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  >>  ')'  [CE]  ')'  expected  [FE]                            AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  >>  ')'  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  >>  ')'	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    >=    ')'    	non-compiled	[CE]  ')'  expected	33	None	replace
166	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  >=  ')'  [CE]  ')'  expected  [FE]                              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  >=  ')'  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  >=  ')'	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    >=    ')'    	non-compiled	[CE]  ')'  expected	33	None	replace
167	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)-  ')'  [CE]  ')'  expected  [FE]                                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)-  ')'  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)-  ')'	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    >=    ')'    	non-compiled	[CE]  ')'  expected	33	None	replace
168	[BUG]  [BUGGY]  col  =  Math.max(entry.getValue(),  columnLabels.size()  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(entry.getValue(),  columnLabels.size()  +  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(entry.getValue(),  columnLabels.size()  +  1);	  col    =    Math.max(columnLabels.size(),    entry.getValue()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
169	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.getValue()  +  1d);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.getValue()  +  1d);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  entry.getValue()  +  1d);	  col    =    Math.max(columnLabels.size(),    entry.getValue()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
170	[BUG]  [BUGGY]  ColumnLabels.add(columnsToDrop,  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnsToDrop,  1);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnsToDrop,  1);	  ColumnLabels.add(columnsToDrop,    0);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
171	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.doubleValue()  *  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.doubleValue()  *  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  entry.doubleValue()  *  1);	  col    =    Math.max(columnLabels.size(),    entry.doubleValue()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
172	[BUG]  [BUGGY]  col  =  Math.min(columnLabelsToDrop,  entry.length  -  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.min(columnLabelsToDrop,  entry.length  -  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.min(columnLabelsToDrop,  entry.length  -  1);	  col    =    Math.min(columnLabelsToDrop,    entry.length);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
173	[BUG]  [BUGGY]  col  =  Math.min(columnLabelsToDrop,  entry.length  +  1);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.min(columnLabelsToDrop,  entry.length  +  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.min(columnLabelsToDrop,  entry.length  +  1);	  col    =    Math.min(columnLabelsToDrop,    entry.length);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
174	[BUG]  [BUGGY]  col  =  Math.min(columnLabelsToDrop,  entry.length  -  2);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.min(columnLabelsToDrop,  entry.length  -  2);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.min(columnLabelsToDrop,  entry.length  -  2);	  col    =    Math.min(columnLabelsToDrop,    entry.length);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
175	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  table.getValue()  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnLabels.size(),  table.getValue()  -  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  table.getValue()  -  1);	  col    =    Math.max(columnLabels.size(),    table.getValue());    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
176	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  table.getValue()  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnLabels.size(),  table.getValue()  +  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  table.getValue()  +  1);	  col    =    Math.max(columnLabels.size(),    table.getValue());    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
177	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  table.getColumnValue());  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnLabels.size(),  table.getColumnValue());  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  table.getColumnValue());	  col    =    Math.max(columnLabels.size(),    table.getValue());    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
178	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.length()  -  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  entry.length()  -  1);	  col    =    Math.max(columnLabels.size(),    entry.length());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
179	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.length()  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.length()  +  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  entry.length()  +  1);	  col    =    Math.max(columnLabels.size(),    entry.length());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
180	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.length()  -  2);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.length()  -  2);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  entry.length()  -  2);	  col    =    Math.max(columnLabels.size(),    entry.length());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
181	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.length()  -  3);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.length()  -  3);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  entry.length()  -  3);	  col    =    Math.max(columnLabels.size(),    entry.length());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
182	[BUG]  [BUGGY]  col  =  Math.max(entry.length,  col  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(entry.length,  col  -  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(entry.length,  col  -  1);	  col    =    Math.max(columnLabelsToDrop,    entry.length    -    1);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
183	[BUG]  [BUGGY]  col  =  Math.max(columnLabelsToDrop,  entry.length  -  2);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnLabelsToDrop,  entry.length  -  2);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabelsToDrop,  entry.length  -  2);	  col    =    Math.max(columnLabelsToDrop,    entry.length    -    1);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
184	[BUG]  [BUGGY]  col  =  Math.max(columnLabelsToDrop,  entry.length  -  1,  maxUlps);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnLabelsToDrop,  entry.length  -  1,  maxUlps);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabelsToDrop,  entry.length  -  1,  maxUlps);	  col    =    Math.max(columnLabelsToDrop,    entry.length    -    1);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
185	[BUG]  [BUGGY]  ColumnLabels.add(col,  column);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(col,  column);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(col,  column);	  ColumnLabels.add(columnLabelsToDrop,    col);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
186	[BUG]  [BUGGY]  ColumnLabels.add(col,  columnLabelsToDrop);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(col,  columnLabelsToDrop);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(col,  columnLabelsToDrop);	  ColumnLabels.add(columnLabelsToDrop,    col);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
187	[BUG]  [BUGGY]  ColumnLabels.add(col,  col);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(col,  col);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(col,  col);	  ColumnLabels.add(columnLabelsToDrop,    col);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
188	[BUG]  [BUGGY]  ColumnLabels.add(col,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(col,  columnsToDrop);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(col,  columnsToDrop);	  ColumnLabels.add(columnLabelsToDrop,    col);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
189	[BUG]  [BUGGY]  ColumnLabels.add(entry,  column);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(entry,  column);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(entry,  column);	  ColumnLabels.add(columnsToDrop,    entry);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
190	[BUG]  [BUGGY]  ColumnLabels.add(entry,columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(entry,columnsToDrop);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(entry,columnsToDrop);	  ColumnLabels.add(columnsToDrop,    entry);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
191	[BUG]  [BUGGY]  ColumnLabels.add(columnsToDrop,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnsToDrop,  columnLabels);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnsToDrop,  columnLabels);	  ColumnLabels.add(columnsToDrop,    entry);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
192	[BUG]  [BUGGY]  int  height  =  Math.max(entry.length,  3  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  height  =  Math.max(entry.length,  3  -  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  height  =  Math.max(entry.length,  3  -  1);	  int    height    =    Math.max(entry.length,    3);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
193	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicRows();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getBasicRows();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getBasicRows();  i++)  {  columnsToDrop.add(i);  }	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
194	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicRow();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getBasicRow();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getBasicRow();  i++)  {  columnsToDrop.add(i);  }	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
195	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicRowCount();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getBasicRowCount();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getBasicRowCount();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    	non-compiled	[CE]  ')'  expected	91	None	replace
196	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    	non-compiled	[CE]  ')'  expected	91	None	replace
197	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumns();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getColumns();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getColumns();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    	non-compiled	[CE]  ')'  expected	91	None	replace
198	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)+  1);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)+  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)+  1);	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
199	[BUG]  [BUGGY]  ColumnLabels.add(colonLabels,  entry);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(colonLabels,  entry);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(colonLabels,  entry);	  ColumnLabels.add(entry,    columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
200	[BUG]  [BUGGY]  int  maxUlps  =  Math.min(entry.length(),  maxUlps  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  maxUlps  =  Math.min(entry.length(),  maxUlps  -  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.min(entry.length(),  maxUlps  -  1);	  int    maxUlps    =    Math.min(maxUlps,    entry.length()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
201	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(entry.length(),  maxUlps  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  maxUlps  =  Math.max(entry.length(),  maxUlps  -  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.max(entry.length(),  maxUlps  -  1);	  int    maxUlps    =    Math.min(maxUlps,    entry.length()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
202	[BUG]  [BUGGY]  ColumnLabels.add(columnLabels,  entry,  0d);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnLabels,  entry,  0d);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabels,  entry,  0d);	  ColumnLabels.add(columnLabels,    entry,    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
203	[BUG]  [BUGGY]  ColumnLabels.add(columnLabels,  entry,  0,  maxUlps);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnLabels,  entry,  0,  maxUlps);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabels,  entry,  0,  maxUlps);	  ColumnLabels.add(columnLabels,    entry,    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
204	[BUG]  [BUGGY]  ColumnLabels.add(entry,  columnLabels,  maxUlps);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(entry,  columnLabels,  maxUlps);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(entry,  columnLabels,  maxUlps);	  ColumnLabels.add(columnLabels,    entry,    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
205	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.remove(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.remove(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.remove(i);  }	  if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
206	[BUG]  [BUGGY]  columnsToDrop.add(entry.columns,  col);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(entry.columns,  col);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry.columns,  col);	  columnsToDrop.add(entry.columns);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
207	[BUG]  [BUGGY]  columnsToDrop.add(entry.columns  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(entry.columns  -  1);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry.columns  -  1);	  columnsToDrop.add(entry.columns);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
208	[BUG]  [BUGGY]  columnsToDrop.add(entry.columns,  i);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(entry.columns,  i);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry.columns,  i);	  columnsToDrop.add(entry.columns);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
209	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnLabels.add(i);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnLabels.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnLabels.add(i);  }	  if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
210	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicRowCount();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getBasicRowCount();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getBasicRowCount();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i));    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
211	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i));    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
212	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i));    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
213	[BUG]  [BUGGY]  ColumnLabels.add(table,  columnLabelsToDrop);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(table,  columnLabelsToDrop);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(table,  columnLabelsToDrop);	  ColumnLabels.add(columnLabelsToDrop,    table);    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
214	[BUG]  [BUGGY]  ColumnLabels.add(table,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(table,  columnLabels);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(table,  columnLabels);	  ColumnLabels.add(columnLabelsToDrop,    table);    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
215	[BUG]  [BUGGY]  ColumnLabels.add(table,  column);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(table,  column);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(table,  column);	  ColumnLabels.add(columnLabelsToDrop,    table);    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
216	[BUG]  [BUGGY]  ColumnLabels.add(tab,  columnLabelsToDrop);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(tab,  columnLabelsToDrop);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(tab,  columnLabelsToDrop);	  ColumnLabels.add(columnLabelsToDrop,    table);    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
217	[BUG]  [BUGGY]  columnsToDrop.add(entry.doubleValue()  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(entry.doubleValue()  +  1);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry.doubleValue()  +  1);	  columnsToDrop.add(entry.doubleValue()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
218	[BUG]  [BUGGY]  columnsToDrop.add(entry.doubleValue()  /  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(entry.doubleValue()  /  1);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry.doubleValue()  /  1);	  columnsToDrop.add(entry.doubleValue()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
219	[BUG]  [BUGGY]  ColumnLabels.add(columnLabel,  entry);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnLabel,  entry);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabel,  entry);	  ColumnLabels.add(columnLabelsToDrop,    column);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
220	[BUG]  [BUGGY]  ColumnLabels.add(entry,  columnLabels,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(entry,  columnLabels,  DEFAULT_ULPS);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(entry,  columnLabels,  DEFAULT_ULPS);	  ColumnLabels.add(columnLabels,    entry,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
221	[BUG]  [BUGGY]  ColumnLabels.add(columnLabels,  entry,  DEFAULT_ULPS,  maxUlps);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnLabels,  entry,  DEFAULT_ULPS,  maxUlps);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabels,  entry,  DEFAULT_ULPS,  maxUlps);	  ColumnLabels.add(columnLabels,    entry,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
222	[BUG]  [BUGGY]  columnsToDrop.add(entry.length  -  1,  maxUlps);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(entry.length  -  1,  maxUlps);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry.length  -  1,  maxUlps);	  columnsToDrop.add(entry.length    -    1);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
223	[BUG]  [BUGGY]  columnsToDrop.add(entry.length  -  2);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(entry.length  -  2);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry.length  -  2);	  columnsToDrop.add(entry.length    -    1);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
224	[BUG]  [BUGGY]  columnsToDrop.add(entry.length  -  3);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(entry.length  -  3);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry.length  -  3);	  columnsToDrop.add(entry.length    -    1);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
225	[BUG]  [BUGGY]  col  =  Math.max(entry.getValue(),  columnLabels.size());  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(entry.getValue(),  columnLabels.size());  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(entry.getValue(),  columnLabels.size());	  col    =    Math.max(columnLabels.size(),    entry.getValue()    -    2);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
226	[BUG]  [BUGGY]  col  =  Math.max(entry.getValue(),  columnLabels.size()  -  2);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(entry.getValue(),  columnLabels.size()  -  2);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(entry.getValue(),  columnLabels.size()  -  2);	  col    =    Math.max(columnLabels.size(),    entry.getValue()    -    2);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
227	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  entries.getValue());  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnLabels.size(),  entries.getValue());  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  entries.getValue());	  col    =    Math.max(columnLabels.size(),    entry.getValue()    -    2);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
228	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(  [CE]  '.class'  expected  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(	  if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(    	non-compiled	[CE]  '.class'  expected	47	None	replace
229	[BUG]  [BUGGY]  ||!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ||!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	||!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(	  if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
230	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(  [CE]  '.class'  expected  [FE]                        AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(	  if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(    	non-compiled	[CE]  '.class'  expected	47	None	replace
231	[BUG]  [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow    	non-compiled	[CE]  ')'  expected	87	None	replace
232	[BUG]  [BUGGY]  if(precision!=  null)  {  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(precision!=  null)  {  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(precision!=  null)  {  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow    	non-compiled	[CE]  ')'  expected	87	None	replace
233	[BUG]  [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  columnsToDrop))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  columnsToDrop))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  columnsToDrop))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow    	non-compiled	[CE]  ')'  expected	87	None	replace
234	[BUG]  [BUGGY]  columnsToDrop.add(entry  +  1,  i);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(entry  +  1,  i);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry  +  1,  i);	  columnsToDrop.add(i    +    1,    entry);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
235	[BUG]  [BUGGY]  columnsToDrop.add(i  +  1,  entry,  maxUlps);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(i  +  1,  entry,  maxUlps);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(i  +  1,  entry,  maxUlps);	  columnsToDrop.add(i    +    1,    entry);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
236	[BUG]  [BUGGY]  columnsToDrop.add(i  +  1,  entry.maxUlps);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(i  +  1,  entry.maxUlps);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(i  +  1,  entry.maxUlps);	  columnsToDrop.add(i    +    1,    entry);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
237	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.length  -  4);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.length  -  4);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  entry.length  -  4);	  col    =    Math.max(columnLabels.size(),    entry.length    -    3);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
238	[BUG]  [BUGGY]  columnsToDrop.add(columnsToDrop.size  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(columnsToDrop.size  -  1);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(columnsToDrop.size  -  1);	  columnsToDrop.add(entry.size    -    1);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
239	[BUG]  [BUGGY]  columnsToDrop.add(entry.size  -  2);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(entry.size  -  2);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry.size  -  2);	  columnsToDrop.add(entry.size    -    1);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
240	[BUG]  [BUGGY]  col  =  Math.max(entry.length,  col  +  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(entry.length,  col  +  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(entry.length,  col  +  1);	  col    =    Math.max(columnLabelsToDrop,    entry.length    +    1);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
241	[BUG]  [BUGGY]  col  =  Math.max(columnLabelsToDrop,  entry.length  +  2);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnLabelsToDrop,  entry.length  +  2);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabelsToDrop,  entry.length  +  2);	  col    =    Math.max(columnLabelsToDrop,    entry.length    +    1);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
242	[BUG]  [BUGGY]  ColumnLabels.add(columnLabels,  i,  maxUlps);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnLabels,  i,  maxUlps);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabels,  i,  maxUlps);	  ColumnLabels.add(columnLabels,    i,    entry);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
243	[BUG]  [BUGGY]  ColumnLabels.add(columnLabels,  i,  entry,  maxUlps);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnLabels,  i,  entry,  maxUlps);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabels,  i,  entry,  maxUlps);	  ColumnLabels.add(columnLabels,    i,    entry);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
244	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.remove(i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.remove(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.remove(i);  }	  if(!precision.compareTo(entry,    0,    col))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
245	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  1);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  1);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  1);  }	  if(!precision.compareTo(entry,    0,    col))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
246	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicLength();  i++)  {  columnsToDrop.add(i  +  getBasicLeft(i));  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getBasicLength();  i++)  {  columnsToDrop.add(i  +  getBasicLeft(i));  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getBasicLength();  i++)  {  columnsToDrop.add(i  +  getBasicLeft(i));  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicLeft(i));    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
247	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  0d))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(  [CE]  '.class'  expected  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(!precision.compareTo(entry,  0,  0d))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  0d))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(	  if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(    	non-compiled	[CE]  '.class'  expected	47	None	replace
248	[BUG]  [BUGGY]  if(precision!=  null)  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(  [CE]  '.class'  expected  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(precision!=  null)  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(precision!=  null)  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(	  if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(    	non-compiled	[CE]  '.class'  expected	47	None	replace
249	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  1))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(  [CE]  '.class'  expected  [FE]                        AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(!precision.compareTo(entry,  0,  1))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  1))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(	  if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(    	non-compiled	[CE]  '.class'  expected	47	None	replace
250	[BUG]  [BUGGY]  if(maxUlps  >  0)  {  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(maxUlps  >  0)  {  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(maxUlps  >  0)  {  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow	  if(!precision.compareTo(entry,    0,    col))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    	non-compiled	[CE]  ')'  expected	30	None	replace
251	[BUG]  [BUGGY]  if(columnLabels.contains(entry))  {  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(columnLabels.contains(entry))  {  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(columnLabels.contains(entry))  {  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow	  if(!precision.compareTo(entry,    0,    col))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    	non-compiled	[CE]  ')'  expected	30	None	replace
252	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(!precision.compareTo(entry,  0,  entry))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(entry  ==  null)  {  if(!precision.compareTo(entry,  0,  entry))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(entry  ==  null)  {  if(!precision.compareTo(entry,  0,  entry))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }	  if(!precision.compareTo(entry,    0,    entry))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
253	[BUG]  [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow	  if(!precision.compareTo(entry,    0,    entry.length))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i));    }    	non-compiled	[CE]  ')'  expected	110	None	replace
254	[BUG]  [BUGGY]  ColumnLabels.add(columnsToDrop,  0,  maxUlps);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnsToDrop,  0,  maxUlps);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnsToDrop,  0,  maxUlps);	  ColumnLabels.add(columnsToDrop,    0);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
255	[BUG]  [BUGGY]  ColumnLabels.add(columnsToDrop,  0,  i);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnsToDrop,  0,  i);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnsToDrop,  0,  i);	  ColumnLabels.add(columnsToDrop,    0);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
256	[BUG]  [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)	  if(!precision.compareTo(entry,    0,    entry.length))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    	non-compiled	[CE]  ')'  expected	115	None	replace
257	[BUG]  [BUGGY]  double  height  =  Math.abs(entry.doubleValue()  *  maxUlps);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  double  height  =  Math.abs(entry.doubleValue()  *  maxUlps);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	double  height  =  Math.abs(entry.doubleValue()  *  maxUlps);	  double    height    =    Math.abs(entry.doubleValue()    *    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
258	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  }	  if(!precision.compareTo(entry,    0,    col))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    }    	non-compiled	[CE]  ')'  expected	31	None	replace
259	[BUG]  [BUGGY]  if(precision!=  null)  {  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(precision!=  null)  {  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(precision!=  null)  {  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
260	[BUG]  [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
261	[BUG]  [BUGGY]  if(precision!=  null)  {  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(precision!=  null)  {  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(precision!=  null)  {  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
262	[BUG]  [BUGGY]  columnsToDrop.add(entry.column);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(entry.column);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry.column);	  columnsToDrop.add(entry.columns);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
263	[BUG]  [BUGGY]  ColumnLabels.add(column,  i);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(column,  i);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(column,  i);	  ColumnLabels.add(columnsToDrop,    column);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
264	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(entry.length,  maxUlps  +  3);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  maxUlps  =  Math.max(entry.length,  maxUlps  +  3);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.max(entry.length,  maxUlps  +  3);	  int    maxUlps    =    Math.max(entry.length,    maxUlps    +    1);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
265	[BUG]  [BUGGY]  int  height  =  Math.min(entry.length,  maxUlps);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  height  =  Math.min(entry.length,  maxUlps);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  height  =  Math.min(entry.length,  maxUlps);	  int    height    =    Math.max(entry.length,    i);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
266	[BUG]  [BUGGY]  columnsToDrop.add(0d  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(0d  +  1);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(0d  +  1);	  columnsToDrop.add(maxUlps    +    1);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
267	[BUG]  [BUGGY]  if(precision.compareTo(entry,  0,  maxUlps)>  0)  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(precision.compareTo(entry,  0,  maxUlps)>  0)  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(precision.compareTo(entry,  0,  maxUlps)>  0)  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }	  if(!precision.compareTo(entry,    0,    columnLabels))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
268	[BUG]  [BUGGY]  ColumnLabels.set(columnLabels,  0,  precision))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.set(columnLabels,  0,  precision))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.set(columnLabels,  0,  precision))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }	  if(!precision.compareTo(entry,    0,    columnLabels))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  ';'  expected	104	None	replace
269	[BUG]  [BUGGY]  int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  >  expected	1	None	replace
270	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumVariables();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumVariables();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumVariables();  i++)  {  columnsToDrop.add(i);  }	  if(!precision.compareTo(entry,    0,    col))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
271	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicColumn(i));  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicColumn(i));  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicColumn(i));  }	  if(!precision.compareTo(entry,    0,    col))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i));    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
272	[BUG]  [BUGGY]  int  i  =  0;  i  <  getNumObjectiveFunctions().length;  i++)  {  columnsToDrop.add(i);  }  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  i  =  0;  i  <  getNumObjectiveFunctions().length;  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  i  =  0;  i  <  getNumObjectiveFunctions().length;  i++)  {  columnsToDrop.add(i);  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions().length;    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  >  expected	3	None	replace
273	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions().length;  i++)  {  columnsToDrop.add(i  +  1);  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions().length;  i++)  {  columnsToDrop.add(i  +  1);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions().length;  i++)  {  columnsToDrop.add(i  +  1);  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions().length;    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  ')'  expected	3	None	replace
274	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  entity.getValue());  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnLabels.size(),  entity.getValue());  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  entity.getValue());	  col    =    Math.max(columnLabels.size(),    entry.getValue()    +    1);    	non-compiled	[CE]  ')'  expected	57	None	replace
275	[BUG]  [BUGGY]  columnsToDrop.clear();  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.clear();  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.clear();	  columnsToDrop.remove(i);    	non-compiled	[CE]  ')'  expected	79	None	replace
276	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(!precision.compareTo(entry,  0,  columnsToDrop))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(entry  ==  null)  {  if(!precision.compareTo(entry,  0,  columnsToDrop))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(entry  ==  null)  {  if(!precision.compareTo(entry,  0,  columnsToDrop))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow    	non-compiled	[CE]  ')'  expected	87	None	replace
277	[BUG]  [BUGGY]  if(precision!=  null)  {  if(!precision.compareTo(entry,  0,  columnsToDrop))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(precision!=  null)  {  if(!precision.compareTo(entry,  0,  columnsToDrop))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(precision!=  null)  {  if(!precision.compareTo(entry,  0,  columnsToDrop))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow    	non-compiled	[CE]  ')'  expected	87	None	replace
278	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(entry  ==  null)  {  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(entry  ==  null)  {  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow    	non-compiled	[CE]  ')'  expected	87	None	replace
279	[BUG]  [BUGGY]  ColumnLabels.addAll(columnsToDrop,  entry);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.addAll(columnsToDrop,  entry);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.addAll(columnsToDrop,  entry);	  ColumnLabels.add(entry);    	non-compiled	[CE]  ')'  expected	16	None	replace
280	[BUG]  [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }	  if(!precision.compareTo(entry,    0,    entry.length))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
281	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.getValue()  *  1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.getValue()  *  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  entry.getValue()  *  1);	  col    =    Math.max(columnLabels.size(),    entry.getValue()    -    1);    	non-compiled	[CE]  ')'  expected	56	None	replace
282	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(    	non-compiled	[CE]  not  a  statement	74	None	replace
283	[BUG]  [BUGGY]  int  maxUlps  =  Math.min(entry.length(),  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  maxUlps  =  Math.min(entry.length(),  DEFAULT_ULPS);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.min(entry.length(),  DEFAULT_ULPS);	  int    maxUlps    =    Math.min(entry.length(),    maxUlps);    	non-compiled	[CE]  ')'  expected	49	None	replace
284	[BUG]  [BUGGY]  int  maxUlps  =  Math.min(entry.length(),  height);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  maxUlps  =  Math.min(entry.length(),  height);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.min(entry.length(),  height);	  int    maxUlps    =    Math.min(entry.length(),    maxUlps);    	non-compiled	[CE]  ')'  expected	49	None	replace
285	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  data.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(!precision.compareTo(entry,  0,  data.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  data.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }	  if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i));    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
286	[BUG]  [BUGGY]  if(precision!=  null)  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(precision!=  null)  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(precision!=  null)  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }	  if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i));    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
287	[BUG]  [BUGGY]  col  =  Math.min(columnLabels.size(),  entry);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.min(columnLabels.size(),  entry);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.min(columnLabels.size(),  entry);	  col    =    Math.max(columnLabels.size(),    maxUlps);    	non-compiled	[CE]  ')'  expected	78	None	replace
288	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  2);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnLabels.size(),  2);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  2);	  col    =    Math.max(columnLabels.size(),    maxUlps);    	non-compiled	[CE]  ')'  expected	78	None	replace
289	[BUG]  [BUGGY]  columnsToDrop.add(entry.length  /  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(entry.length  /  1);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry.length  /  1);	  columnsToDrop.add(entry.length    +    1);    	non-compiled	[CE]  ')'  expected	6	None	replace
290	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(entry.length,  3d);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  maxUlps  =  Math.max(entry.length,  3d);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.max(entry.length,  3d);	  int    maxUlps    =    Math.max(entry.length,    3);    	non-compiled	[CE]  ')'  expected	108	None	replace
291	[BUG]  [BUGGY]  int  i  =  0;  i  <  getBasicColumns();  i++)  {  columnsToDrop.add(i  +  getBasicColumn(i));  }  [CE]  >  expected  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  i  =  0;  i  <  getBasicColumns();  i++)  {  columnsToDrop.add(i  +  getBasicColumn(i));  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  i  =  0;  i  <  getBasicColumns();  i++)  {  columnsToDrop.add(i  +  getBasicColumn(i));  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicColumn(i));    }    	non-compiled	[CE]  >  expected	63	None	replace
292	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumColumns();  i++)  {  columnsToDrop.add(i  +  getBasicColumn(i));  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getNumColumns();  i++)  {  columnsToDrop.add(i  +  getBasicColumn(i));  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getNumColumns();  i++)  {  columnsToDrop.add(i  +  getBasicColumn(i));  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicColumn(i));    }    	non-compiled	[CE]  ')'  expected	63	None	replace
293	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  not  a  statement	94	None	replace
294	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  '.class'  expected	94	None	replace
295	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  data.length))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(!precision.compareTo(entry,  0,  data.length))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  data.length))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }	  if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
296	[BUG]  [BUGGY]  if(precision!=  null)  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(precision!=  null)  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(precision!=  null)  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }	  if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
297	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicRows();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getBasicRows();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getBasicRows();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    	non-compiled	[CE]  ')'  expected	91	None	replace
298	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicColumns();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getBasicColumns();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getBasicColumns();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    	non-compiled	[CE]  ')'  expected	91	None	replace
299	[BUG]  [BUGGY]  col  =  Math.min(columnLabels.size(),  entry.getValue());  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.min(columnLabels.size(),  entry.getValue());  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.min(columnLabels.size(),  entry.getValue());	  col    =    Math.max(columnLabels.size(),    entry.getValue()    -    2);    	non-compiled	[CE]  ')'  expected	58	None	replace
300	[BUG]  [BUGGY]  columnsToDrop.add(i,  entry.size  -  1);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(i,  entry.size  -  1);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(i,  entry.size  -  1);	  columnsToDrop.add(entry.size    -    1);    	non-compiled	[CE]  ')'  expected	25	None	replace
301	[BUG]  [BUGGY]  if(precision!=  null)  {  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(precision!=  null)  {  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(precision!=  null)  {  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
302	[BUG]  [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
303	[BUG]  [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  columnsToDrop))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  columnsToDrop))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  columnsToDrop))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
304	[BUG]  [BUGGY]  if(precision!=  null)  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(precision!=  null)  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(precision!=  null)  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)	  if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    	non-compiled	[CE]  ')'  expected	92	None	replace
305	[BUG]  [BUGGY]  if(maxUlps  >  0)  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(maxUlps  >  0)  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(maxUlps  >  0)  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)	  if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    	non-compiled	[CE]  ')'  expected	92	None	replace
306	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  data.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(!precision.compareTo(entry,  0,  data.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  data.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }	  if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
307	[BUG]  [BUGGY]  if(precision!=  null)  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(precision!=  null)  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(precision!=  null)  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }	  if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
308	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicVariables();  i++)  {  columnsToDrop.add(i);  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getBasicVariables();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getBasicVariables();  i++)  {  columnsToDrop.add(i);  }	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  ')'  expected	44	None	replace
309	[BUG]  [BUGGY]  int  maxUlps  =  Math.min(entry.length,  i);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  maxUlps  =  Math.min(entry.length,  i);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.min(entry.length,  i);	  int    maxUlps    =    Math.min(entry.length,    maxUlps);    	non-compiled	[CE]  ')'  expected	66	None	replace
310	[BUG]  [BUGGY]  int  maxUlps  =  Math.min(entry.length,  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  maxUlps  =  Math.min(entry.length,  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.min(entry.length,  1);	  int    maxUlps    =    Math.min(entry.length,    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
311	[BUG]  [BUGGY]  ColumnLabels.add(column,  input);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(column,  input);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(column,  input);	  ColumnLabels.add(columnLabelsToDrop,    column);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
312	[BUG]  [BUGGY]  ColumnLabels.add(column,  col);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(column,  col);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(column,  col);	  ColumnLabels.add(columnLabelsToDrop,    col);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
313	[BUG]  [BUGGY]  ColumnsToDrop.add(columnsToDrop,  0);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnsToDrop.add(columnsToDrop,  0);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnsToDrop.add(columnsToDrop,  0);	  ColumnsToDrop.add(columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
314	[BUG]  [BUGGY]  ColumnsToDrop.add(columnLabelsToDrop);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnsToDrop.add(columnLabelsToDrop);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnsToDrop.add(columnLabelsToDrop);	  ColumnsToDrop.add(columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
315	[BUG]  [BUGGY]  ColumnsToDrop.add(i,  column);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnsToDrop.add(i,  column);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnsToDrop.add(i,  column);	  ColumnsToDrop.add(columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
316	[BUG]  [BUGGY]  ColumnLabels.add(this.columnLabels,  entry);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(this.columnLabels,  entry);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(this.columnLabels,  entry);	  ColumnLabels.add(entry,    columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
317	[BUG]  [BUGGY]  ColumnLabels.add(int,  columnLabels);  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(int,  columnLabels);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(int,  columnLabels);	  ColumnLabels.add(entry,    columnLabels);    	non-compiled	[CE]  '.class'  expected	39	None	replace
318	[BUG]  [BUGGY]  int  maxUlps  =  Math.min(entry.length,  entry.length  -  1);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  maxUlps  =  Math.min(entry.length,  entry.length  -  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.min(entry.length,  entry.length  -  1);	  int    maxUlps    =    Math.min(maxUlps,    entry.length    -    1);    	non-compiled	[CE]  ')'  expected	67	None	replace
319	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  entries.doubleValue());  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnLabels.size(),  entries.doubleValue());  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  entries.doubleValue());	  col    =    Math.max(columnLabels.size(),    entry.doubleValue()    +    1);    	non-compiled	[CE]  ')'  expected	34	None	replace
320	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size()  +  1,  entry.doubleValue());  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnLabels.size()  +  1,  entry.doubleValue());  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size()  +  1,  entry.doubleValue());	  col    =    Math.max(columnLabels.size(),    entry.doubleValue()    +    1);    	non-compiled	[CE]  ')'  expected	34	None	replace
321	[BUG]  [BUGGY]  ColumnLabels.add(columnLabels,  0,  maxUlps);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnLabels,  0,  maxUlps);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabels,  0,  maxUlps);	  ColumnLabels.add(columnLabels,    entry,    maxUlps);    	non-compiled	[CE]  ')'  expected	72	None	replace
322	[BUG]  [BUGGY]  ColumnLabels.add(columnLabels,  0d,  maxUlps);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnLabels,  0d,  maxUlps);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabels,  0d,  maxUlps);	  ColumnLabels.add(columnLabels,    entry,    maxUlps);    	non-compiled	[CE]  ')'  expected	72	None	replace
323	[BUG]  [BUGGY]  ColumnLabels.add(entry,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(entry,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(entry,  NEGATIVE_VAR_COLUMN_LABEL);	  ColumnLabels.add(columnLabels,    entry,    NEGATIVE_VAR_COLUMN_LABEL);    	non-compiled	[CE]  ')'  expected	71	None	replace
324	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(entry.length(),  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  maxUlps  =  Math.max(entry.length(),  DEFAULT_ULPS);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.max(entry.length(),  DEFAULT_ULPS);	  int    maxUlps    =    Math.max(entry.length(),    maxUlps);    	non-compiled	[CE]  ')'  expected	48	None	replace
325	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(entry.length(),  2);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  maxUlps  =  Math.max(entry.length(),  2);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.max(entry.length(),  2);	  int    maxUlps    =    Math.max(entry.length(),    maxUlps);    	non-compiled	[CE]  ')'  expected	48	None	replace
326	[BUG]  [BUGGY]  ColumnLabels.add(columnLabelsToDrop,  0,  maxUlps);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnLabelsToDrop,  0,  maxUlps);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabelsToDrop,  0,  maxUlps);	  ColumnLabels.add(columnLabelsToDrop,    maxUlps);    	non-compiled	[CE]  ')'  expected	96	None	replace
327	[BUG]  [BUGGY]  columnsToDrop.add(i  +  1,  entry  -  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(i  +  1,  entry  -  1);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(i  +  1,  entry  -  1);	  columnsToDrop.add(i    +    1,    entry);    	non-compiled	[CE]  ')'  expected	77	None	replace
328	[BUG]  [BUGGY]  ColumnLabels.add(columnToDrop,  i);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnToDrop,  i);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnToDrop,  i);	  ColumnLabels.add(columnLabelsToDrop,    i);    	non-compiled	[CE]  ')'  expected	95	None	replace
329	[BUG]  [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }	  if(!precision.compareTo(entry,    0,    entry.length))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
330	[BUG]  [BUGGY]  columnsToDrop.remove(entry.column);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.remove(entry.column);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.remove(entry.column);	  columnsToDrop.remove(entry.columns);    	non-compiled	[CE]  ')'  expected	14	None	replace
331	[BUG]  [BUGGY]  columnsToDrop.add(entry,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(entry,  DEFAULT_ULPS);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry,  DEFAULT_ULPS);	  columnsToDrop.add(i,    entry);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
332	[BUG]  [BUGGY]  columnsToDrop.add(entry,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(entry,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry,  NEGATIVE_VAR_COLUMN_LABEL);	  columnsToDrop.add(i,    entry);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
333	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  columns.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(!precision.compareTo(entry,  0,  columns.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  columns.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }	  if(!precision.compareTo(entry,    0,    columnLabels.length))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
334	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0,  columnLabels.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0,  columnLabels.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0,  columnLabels.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }	  if(!precision.compareTo(entry,    0,    columnLabels.length))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
335	[BUG]  [BUGGY]  columnsToDrop.add(entry.getValue(),  i);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(entry.getValue(),  i);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry.getValue(),  i);	  columnsToDrop.add(entry.getValue());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
336	[BUG]  [BUGGY]  ColumnLabels.add(columnLabels,  col,  entry);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnLabels,  col,  entry);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabels,  col,  entry);	  ColumnLabels.add(columnLabels,    columnLabels,    entry);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
337	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicColumns();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getBasicColumns();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getBasicColumns();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    }    	non-compiled	[CE]  ')'  expected	32	None	replace
338	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(!precision.compareTo(entry,  0,  entry))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(entry  ==  null)  {  if(!precision.compareTo(entry,  0,  entry))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(entry  ==  null)  {  if(!precision.compareTo(entry,  0,  entry))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }	  if(!precision.compareTo(entry,    0,    entry))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
339	[BUG]  [BUGGY]  double  height  =  Math.abs(entry.doubleValue()  /  maxUlps);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  double  height  =  Math.abs(entry.doubleValue()  /  maxUlps);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	double  height  =  Math.abs(entry.doubleValue()  /  maxUlps);	  double    height    =    Math.abs(entry.doubleValue()    /    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
340	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  [CE]  '.class'  expected  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow    	non-compiled	[CE]  '.class'  expected	86	None	replace
341	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicColumns();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)+  ')'  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getBasicColumns();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)+  ')'  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getBasicColumns();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)+  ')'	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    >=    ')'    	non-compiled	[CE]  ')'  expected	33	None	replace
342	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)+  ')'  [CE]  ')'  expected  [FE]                            AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)+  ')'  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)+  ')'	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    >=    ')'    	non-compiled	[CE]  ')'  expected	33	None	replace
343	[BUG]  [BUGGY]  double  height  =  Math.abs(entry.doubleValue()  +  maxUlps  /  2);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  double  height  =  Math.abs(entry.doubleValue()  +  maxUlps  /  2);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	double  height  =  Math.abs(entry.doubleValue()  +  maxUlps  /  2);	  double    height    =    Math.abs(entry.doubleValue()    /    2);    	non-compiled	[CE]  ')'  expected	21	None	replace
344	[BUG]  [BUGGY]  double  height  =  Math.abs(entry.doubleValue()  +  maxUlps);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  double  height  =  Math.abs(entry.doubleValue()  +  maxUlps);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	double  height  =  Math.abs(entry.doubleValue()  +  maxUlps);	  double    height    =    Math.abs(entry.doubleValue()    /    2);    	non-compiled	[CE]  ')'  expected	21	None	replace
345	[BUG]  [BUGGY]  columnsToDrop.add(entry.toString(),  i);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(entry.toString(),  i);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry.toString(),  i);	  columnsToDrop.add(entry.toString());    	non-compiled	[CE]  ')'  expected	13	None	replace
346	[BUG]  [BUGGY]  columnsToDrop.add(new  Integer(i  -  1));  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(new  Integer(i  -  1));  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(new  Integer(i  -  1));	  columnsToDrop.add(new    Integer(i));    	non-compiled	[CE]  ')'  expected	98	None	replace
347	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow    	non-compiled	[CE]  ')'  expected	87	None	replace
348	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow    	non-compiled	[CE]  ')'  expected	87	None	replace
349	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0,  entry))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0,  entry))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0,  entry))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow    	non-compiled	[CE]  ')'  expected	87	None	replace
350	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i  +  1);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i  +  1);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i  +  1);  }	  if(!precision.compareTo(entry,    0,    col))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
351	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  columnsToDrop.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(!precision.compareTo(entry,  0,  columnsToDrop.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  columnsToDrop.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }	  if(!precision.compareTo(entry,    0,    columnLabels.length))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
352	[BUG]  [BUGGY]  if(entry.length()  >  0)  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(entry.length()  >  0)  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(entry.length()  >  0)  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }	  if(!precision.compareTo(entry,    0,    entry.length))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
353	[BUG]  [BUGGY]  ColumnLabels.add(columnsToDrop,  table);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnsToDrop,  table);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnsToDrop,  table);	  ColumnLabels.add(columnsToDrop,    entry);    	non-compiled	[CE]  ')'  expected	43	None	replace
354	[BUG]  [BUGGY]  if(columnLabels.contains(entry))  {  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(columnLabels.contains(entry))  {  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(columnLabels.contains(entry))  {  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)	  if(!precision.compareTo(entry,    0,    col))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    	non-compiled	[CE]  ')'  expected	30	None	replace
355	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  columnsToDrop.length());  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnLabels.size(),  columnsToDrop.length());  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  columnsToDrop.length());	  col    =    Math.max(columnLabels.size(),    entry.length());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
356	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  columnLabels.length());  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnLabels.size(),  columnLabels.length());  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  columnLabels.length());	  col    =    Math.max(columnLabels.size(),    entry.length());    	non-compiled	[CE]  ')'  expected	37	None	replace
357	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(!precision.compareTo(entry,  0,  d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }	  if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
358	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(entry.length(),  MAX_ULPS);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  maxUlps  =  Math.max(entry.length(),  MAX_ULPS);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.max(entry.length(),  MAX_ULPS);	  int    maxUlps    =    Math.max(entry.length(),    maxUlps);    	non-compiled	[CE]  ')'  expected	48	None	replace
359	[BUG]  [BUGGY]  ColumnLabels.add(column,  columnsToDrop);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(column,  columnsToDrop);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(column,  columnsToDrop);	  ColumnLabels.add(columnLabelsToDrop,    column);    	non-compiled	[CE]  ')'  expected	42	None	replace
360	[BUG]  [BUGGY]  ColumnLabels.add(column,  entriesToDrop);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(column,  entriesToDrop);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(column,  entriesToDrop);	  ColumnLabels.add(columnLabelsToDrop,    column);    	non-compiled	[CE]  ')'  expected	42	None	replace
361	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  entries.length  -  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnLabels.size(),  entries.length  -  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  entries.length  -  1);	  col    =    Math.max(columnLabels.size(),    entry.length    -    1);    	non-compiled	[CE]  ')'  expected	7	None	replace
362	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicLeft(i));  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getBasicLeft(i));  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getBasicLeft(i));  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicLeft(i));    }    	non-compiled	[CE]  ';'  expected	65	None	replace
363	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(i  +  getBasicLeft(i));  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(i  +  getBasicLeft(i));  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  columnsToDrop.add(i  +  getBasicLeft(i));  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicLeft(i));    }    	non-compiled	[CE]  ')'  expected	65	None	replace
364	[BUG]  [BUGGY]  ColumnLabels.add(columnLabelsToDrop,  entries[i]);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnLabelsToDrop,  entries[i]);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabelsToDrop,  entries[i]);	  ColumnLabels.add(columnLabelsToDrop,    i);    	non-compiled	[CE]  ')'  expected	95	None	replace
365	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(!precision.compareTo(entry,  0,  d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }	  if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
366	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  table.getColumnUpperBound());  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnLabels.size(),  table.getColumnUpperBound());  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  table.getColumnUpperBound());	  col    =    Math.max(columnLabels.size(),    table.getValue());    	non-compiled	[CE]  ')'  expected	116	None	replace
367	[BUG]  [BUGGY]  columnsToDrop.add(new  Integer(entry.getKey()));  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(new  Integer(entry.getKey()));  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(new  Integer(entry.getKey()));	  columnsToDrop.add(new    Integer(entry.getValue()));    	non-compiled	[CE]  ')'  expected	120	None	replace
368	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  table.doubleValue()  -  1);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnLabels.size(),  table.doubleValue()  -  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  table.doubleValue()  -  1);	  col    =    Math.max(columnLabels.size(),    entry.doubleValue()    -    1);    	non-compiled	[CE]  ')'  expected	35	None	replace
369	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  row))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(!precision.compareTo(entry,  0,  row))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  row))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)	  if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    	non-compiled	[CE]  ')'  expected	92	None	replace
370	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnLabels.size(),  DEFAULT_ULPS);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  DEFAULT_ULPS);	  col    =    Math.max(columnLabels.size(),    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
371	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  entries);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(columnLabels.size(),  entries);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  entries);	  col    =    Math.max(columnLabels.size(),    maxUlps);    	non-compiled	[CE]  ')'  expected	78	None	replace
372	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(  [CE]  '.class'  expected  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(!precision.compareTo(entry,  0,  d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(	  if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(    	non-compiled	[CE]  '.class'  expected	47	None	replace
373	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  entry))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(  [CE]  '.class'  expected  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(!precision.compareTo(entry,  0,  entry))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  entry))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(	  if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(    	non-compiled	[CE]  '.class'  expected	47	None	replace
374	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumColumns();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getNumColumns();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getNumColumns();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    }    	non-compiled	[CE]  ')'  expected	32	None	replace
375	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumnsCount();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  }  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getColumnsCount();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getColumnsCount();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    }    	non-compiled	[CE]  ')'  expected	32	None	replace
376	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(entry.length(),  entry.length());  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  maxUlps  =  Math.max(entry.length(),  entry.length());  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.max(entry.length(),  entry.length());	  int    maxUlps    =    Math.min(entry.length()    +    1,    entry.length());    	non-compiled	[CE]  ')'  expected	51	None	replace
377	[BUG]  [BUGGY]  columnsToDrop.add(entry.columns  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(entry.columns  +  1);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry.columns  +  1);	  columnsToDrop.add(entry.columns);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
378	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0,  entry))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0,  entry))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0,  entry))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
379	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
380	[BUG]  [BUGGY]  columnsToDrop.add(columnLabels.size  -  1);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(columnLabels.size  -  1);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(columnLabels.size  -  1);	  columnsToDrop.add(entry.size    -    1);    	non-compiled	[CE]  ')'  expected	25	None	replace
381	[BUG]  [BUGGY]  columnsToDrop.add(entry.size()  -  1);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(entry.size()  -  1);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry.size()  -  1);	  columnsToDrop.add(entry.size    -    1);    	non-compiled	[CE]  ')'  expected	25	None	replace
382	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
383	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
384	[BUG]  [BUGGY]  ColumnLabels.add(col,  columnLabels);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(col,  columnLabels);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(col,  columnLabels);	  ColumnLabels.add(columnLabelsToDrop,    col);    	non-compiled	[CE]  ')'  expected	97	None	replace
385	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicColumn(i)  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicColumn(i)  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicColumn(i)  }	  if(!precision.compareTo(entry,    0,    col))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    }    	non-compiled	[CE]  ')'  expected	31	None	replace
386	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumColumns();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getNumColumns();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getNumColumns();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    	non-compiled	[CE]  ')'  expected	91	None	replace
387	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0,  entry))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0,  entry))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0,  entry))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
388	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(!precision.compareTo(entry,  0,  d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }	  if(!precision.compareTo(entry,    0,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i));    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
389	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicRowCount();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)')'  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getBasicRowCount();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)')'  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getBasicRowCount();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)')'	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    >=    ')'    	non-compiled	[CE]  ')'  expected	33	None	replace
390	[BUG]  [BUGGY]  ColumnLabels.add(columnLabels,  table,  entry,  maxUlps);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnLabels,  table,  entry,  maxUlps);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabels,  table,  entry,  maxUlps);	  ColumnLabels.add(columnLabels,    entry,    maxUlps);    	non-compiled	[CE]  ')'  expected	72	None	replace
391	[BUG]  [BUGGY]  ColumnLabels.add(columnLabels,  columnsToDrop,  entry);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnLabels,  columnsToDrop,  entry);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabels,  columnsToDrop,  entry);	  ColumnLabels.add(columnLabels,    columnLabels,    entry);    	non-compiled	[CE]  ')'  expected	113	None	replace
392	[BUG]  [BUGGY]  ColumnLabels.add(columnLabels,  entry,  columnLabels);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnLabels,  entry,  columnLabels);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabels,  entry,  columnLabels);	  ColumnLabels.add(columnLabels,    columnLabels,    entry);    	non-compiled	[CE]  ')'  expected	113	None	replace
393	[BUG]  [BUGGY]  columnsToDrop.add(i  -  1,  entry);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(i  -  1,  entry);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(i  -  1,  entry);	  columnsToDrop.add(i    +    1,    entry);    	non-compiled	[CE]  ')'  expected	77	None	replace
394	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(entry.length,  i  -  1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  maxUlps  =  Math.max(entry.length,  i  -  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.max(entry.length,  i  -  1);	  int    maxUlps    =    Math.max(entry.length,    maxUlps    -    1);    	non-compiled	[CE]  ')'  expected	29	None	replace
395	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(entry.length,  DEFAULT_ULPS  -  1);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  maxUlps  =  Math.max(entry.length,  DEFAULT_ULPS  -  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.max(entry.length,  DEFAULT_ULPS  -  1);	  int    maxUlps    =    Math.max(entry.length,    maxUlps    -    1);    	non-compiled	[CE]  ')'  expected	29	None	replace
396	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(entry.length,  data.length  -  1);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  maxUlps  =  Math.max(entry.length,  data.length  -  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.max(entry.length,  data.length  -  1);	  int    maxUlps    =    Math.max(entry.length,    maxUlps    -    1);    	non-compiled	[CE]  ')'  expected	29	None	replace
397	[BUG]  [BUGGY]  if(entry.length  <  maxUlps)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(entry.length  <  maxUlps)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(entry.length  <  maxUlps)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)	  if(!precision.compareTo(entry,    0,    entry.length))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    	non-compiled	[CE]  ')'  expected	115	None	replace
398	[BUG]  [BUGGY]  if(entry.length  >  maxUlps)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(entry.length  >  maxUlps)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(entry.length  >  maxUlps)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)	  if(!precision.compareTo(entry,    0,    entry.length))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    	non-compiled	[CE]  ')'  expected	115	None	replace
399	[BUG]  [BUGGY]  if(entry.length  >  0)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(entry.length  >  0)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(entry.length  >  0)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)	  if(!precision.compareTo(entry,    0,    entry.length))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    	non-compiled	[CE]  ')'  expected	115	None	replace
400	[BUG]  [BUGGY]  ColumnLabels.add(columnLabels,  columnsToDrop);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnLabels,  columnsToDrop);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabels,  columnsToDrop);	  ColumnLabels.add(columnLabels,    i);    	non-compiled	[CE]  ')'  expected	90	None	replace
401	[BUG]  [BUGGY]  ColumnLabels.add(columnLabels,  i,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnLabels,  i,  DEFAULT_ULPS);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabels,  i,  DEFAULT_ULPS);	  ColumnLabels.add(columnLabels,    i);    	non-compiled	[CE]  ')'  expected	90	None	replace
402	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumnsCount();  i++)  {  columnsToDrop.add(i);  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getColumnsCount();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getColumnsCount();  i++)  {  columnsToDrop.add(i);  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    	non-compiled	[CE]  ')'  expected	2	None	replace
403	[BUG]  [BUGGY]  ColumnLabels.add(columnLabels,  columnsToDrop,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnLabels,  columnsToDrop,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabels,  columnsToDrop,  NEGATIVE_VAR_COLUMN_LABEL);	  ColumnLabels.add(columnLabels,    entry,    NEGATIVE_VAR_COLUMN_LABEL);    	non-compiled	[CE]  ')'  expected	71	None	replace
404	[BUG]  [BUGGY]  ColumnsToDrop.add(columnLabels[i]);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnsToDrop.add(columnLabels[i]);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnsToDrop.add(columnLabels[i]);	  ColumnsToDrop.add(columnsToDrop);    	non-compiled	[CE]  ')'  expected	4	None	replace
405	[BUG]  [BUGGY]  col  =  Math.max(entry.length,  columnLabelsToDrop.length  -  1);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  col  =  Math.max(entry.length,  columnLabelsToDrop.length  -  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(entry.length,  columnLabelsToDrop.length  -  1);	  col    =    Math.max(columnLabelsToDrop,    entry.length    -    1);    	non-compiled	[CE]  ')'  expected	68	None	replace
406	[BUG]  [BUGGY]  columnsToDrop.add(entry.toString(),  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(entry.toString(),  DEFAULT_ULPS);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry.toString(),  DEFAULT_ULPS);	  columnsToDrop.add(entry.toString());    	non-compiled	[CE]  ')'  expected	13	None	replace
407	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumnsCount();  i++)  {  columnsToDrop.add(i  +  getBasicColumn(i));  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getColumnsCount();  i++)  {  columnsToDrop.add(i  +  getBasicColumn(i));  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getColumnsCount();  i++)  {  columnsToDrop.add(i  +  getBasicColumn(i));  }	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicColumn(i));    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
408	[BUG]  [BUGGY]  double  height  =  Math.abs(entry.doubleValue()  *  DEFAULT_ULPS,  maxUlps);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  double  height  =  Math.abs(entry.doubleValue()  *  DEFAULT_ULPS,  maxUlps);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	double  height  =  Math.abs(entry.doubleValue()  *  DEFAULT_ULPS,  maxUlps);	  double    height    =    Math.abs(entry.doubleValue()    *    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
409	[BUG]  [BUGGY]  double  height  =  Math.abs(entry.doubleValue()  *  DEFAULT_ULPS  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  double  height  =  Math.abs(entry.doubleValue()  *  DEFAULT_ULPS  +  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	double  height  =  Math.abs(entry.doubleValue()  *  DEFAULT_ULPS  +  1);	  double    height    =    Math.abs(entry.doubleValue()    *    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
410	[BUG]  [BUGGY]  columnsToDrop.add(entry.length  /  2);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(entry.length  /  2);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry.length  /  2);	  columnsToDrop.add(entry.length    +    1);    	non-compiled	[CE]  ')'  expected	6	None	replace
411	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(entry.length,  maxUlps  /  1);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  maxUlps  =  Math.max(entry.length,  maxUlps  /  1);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.max(entry.length,  maxUlps  /  1);	  int    maxUlps    =    Math.max(entry.length,    maxUlps    +    1);    	non-compiled	[CE]  ')'  expected	26	None	replace
412	[BUG]  [BUGGY]  ColumnLabels.add(columnLabels,  0,  columnsToDrop);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnLabels,  0,  columnsToDrop);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabels,  0,  columnsToDrop);	  ColumnLabels.add(columnLabels,    0,    entry);    	non-compiled	[CE]  ')'  expected	89	None	replace
413	[BUG]  [BUGGY]  ColumnLabels.add(columnLabels,  0,  columnLabels.size());  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  ColumnLabels.add(columnLabels,  0,  columnLabels.size());  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabels,  0,  columnLabels.size());	  ColumnLabels.add(columnLabels,    0,    entry);    	non-compiled	[CE]  ')'  expected	89	None	replace
414	[BUG]  [BUGGY]  if(entry.length  <  maxUlps)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(entry.length  <  maxUlps)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(entry.length  <  maxUlps)  {  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow	  if(!precision.compareTo(entry,    0,    entry.length))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i));    }    	non-compiled	[CE]  ')'  expected	110	None	replace
415	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(    	non-compiled	[CE]  '.class'  expected	74	None	replace
416	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(columnLabels!=  null)  {  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(	  if(entry!=    null)    {    if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(    	non-compiled	[CE]  '.class'  expected	74	None	replace
417	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnsToDrop.add(i);  }	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
418	[BUG]  [BUGGY]  int  maxUlps  =  Math.min(entry.length,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  int  maxUlps  =  Math.min(entry.length,  DEFAULT_ULPS);  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.min(entry.length,  DEFAULT_ULPS);	  int    maxUlps    =    Math.min(entry.length,    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
419	[BUG]  [BUGGY]  columnsToDrop.add(entry.getKey());  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(entry.getKey());  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry.getKey());	  columnsToDrop.add(entry.getValue());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
420	[BUG]  [BUGGY]  columnsToDrop.add(new  Double(entry.getValue()));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(new  Double(entry.getValue()));  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(new  Double(entry.getValue()));	  columnsToDrop.add(entry.getValue()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
421	[BUG]  [BUGGY]  if(entry.length()  >  0)  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  if(entry.length()  >  0)  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]      columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(entry.length()  >  0)  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }	  if(!precision.compareTo(entry,    0,    entry.length))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
422	[BUG]  [BUGGY]  columnsToDrop.add(entry.getKey()  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.add(entry.getKey()  -  1);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry.getKey()  -  1);	  columnsToDrop.add(entry.getValue()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
423	[BUG]  [BUGGY]  columnsToDrop.addAll(columnLabels);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {      [BUGGY]  columnsToDrop.addAll(columnLabels);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.addAll(columnLabels);	  columnsToDrop.remove(columnLabels);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
