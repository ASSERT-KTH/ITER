bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }	      if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);	      if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
3	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions().length;  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions().length;  i++)  {  columnsToDrop.add(i);  }  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions().length;  i++)  {  columnsToDrop.add(i);  }	      if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
4	[BUG]  [BUGGY]  ColumnsToDrop.add(columnsToDrop);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  ColumnsToDrop.add(columnsToDrop);  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnsToDrop.add(columnsToDrop);	      if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
5	[BUG]  [BUGGY]  columnsToDrop.add(entry.getValue()  +  1);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  columnsToDrop.add(entry.getValue()  +  1);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry.getValue()  +  1);	  columnsToDrop.add(entry    +    1);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
6	[BUG]  [BUGGY]  columnsToDrop.add(entry.length  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  columnsToDrop.add(entry.length  +  1);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry.length  +  1);	  columnsToDrop.add(entry    +    1);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
7	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.length  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.length  -  1);  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  entry.length  -  1);	      col    =    Math.max(columnLabels.size(),    entry.length);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
8	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.length  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.length  +  1);  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  entry.length  +  1);	      col    =    Math.max(columnLabels.size(),    entry.length);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
9	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.length  -  2);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.length  -  2);  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  entry.length  -  2);	      col    =    Math.max(columnLabels.size(),    entry.length);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
10	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.length  -  3);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.length  -  3);  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  entry.length  -  3);	      col    =    Math.max(columnLabels.size(),    entry.length);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
11	[BUG]  [BUGGY]  columnsToDrop.add(entry.columns);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  columnsToDrop.add(entry.columns);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry.columns);	  columnsToDrop.add(entry);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
12	[BUG]  [BUGGY]  columnsToDrop.add(entry.getValue());  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  columnsToDrop.add(entry.getValue());  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry.getValue());	  columnsToDrop.add(entry);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
13	[BUG]  [BUGGY]  columnsToDrop.add(entry.toString());  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  columnsToDrop.add(entry.toString());  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry.toString());	  columnsToDrop.add(entry);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
14	[BUG]  [BUGGY]  columnsToDrop.remove(entry.columns);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  columnsToDrop.remove(entry.columns);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.remove(entry.columns);	  columnsToDrop.remove(entry);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
15	[BUG]  [BUGGY]  columnsToDrop.remove(entry.getValue());  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  columnsToDrop.remove(entry.getValue());  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.remove(entry.getValue());	  columnsToDrop.remove(entry);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
16	[BUG]  [BUGGY]  ColumnLabels.add(entry);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  ColumnLabels.add(entry);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(entry);	  columnsToDrop.add(int);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
17	[BUG]  [BUGGY]  ColumnLabels.add(columnsToDrop);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  ColumnLabels.add(columnsToDrop);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnsToDrop);	  columnsToDrop.add(int);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
18	[BUG]  [BUGGY]  double  height  =  Math.abs(entry.doubleValue()  +  1);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  double  height  =  Math.abs(entry.doubleValue()  +  1);  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	double  height  =  Math.abs(entry.doubleValue()  +  1);	      double    height    =    Math.abs(entry.doubleValue());    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
19	[BUG]  [BUGGY]  double  height  =  Math.abs(entry.doubleValue()  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  double  height  =  Math.abs(entry.doubleValue()  -  1);  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	double  height  =  Math.abs(entry.doubleValue()  -  1);	      double    height    =    Math.abs(entry.doubleValue());    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
20	[BUG]  [BUGGY]  double  height  =  Math.abs(entry.doubleValue()  /  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  double  height  =  Math.abs(entry.doubleValue()  /  DEFAULT_ULPS);  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	double  height  =  Math.abs(entry.doubleValue()  /  DEFAULT_ULPS);	      double    height    =    Math.abs(entry.doubleValue());    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
21	[BUG]  [BUGGY]  double  height  =  Math.abs(entry.doubleValue()  /  2);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  double  height  =  Math.abs(entry.doubleValue()  /  2);  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	double  height  =  Math.abs(entry.doubleValue()  /  2);	      double    height    =    Math.abs(entry.doubleValue());    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
22	[BUG]  [BUGGY]  columnsToDrop.add(entry.getValue()  -  1);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  columnsToDrop.add(entry.getValue()  -  1);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry.getValue()  -  1);	  columnsToDrop.add(i    -    1);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
23	[BUG]  [BUGGY]  columnsToDrop.add(entry.length  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  columnsToDrop.add(entry.length  -  1);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry.length  -  1);	  columnsToDrop.add(i    -    1);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
24	[BUG]  [BUGGY]  columnsToDrop.add(entry.intValue()  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  columnsToDrop.add(entry.intValue()  -  1);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry.intValue()  -  1);	  columnsToDrop.add(i    -    1);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
25	[BUG]  [BUGGY]  columnsToDrop.add(entry.size  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  columnsToDrop.add(entry.size  -  1);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry.size  -  1);	  columnsToDrop.add(i    -    1);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
26	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(entry.length,  maxUlps  +  1);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  int  maxUlps  =  Math.max(entry.length,  maxUlps  +  1);  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.max(entry.length,  maxUlps  +  1);	      int    maxUlps    =    Math.max(entry.length,    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
27	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(entry.length,  1);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  int  maxUlps  =  Math.max(entry.length,  1);  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.max(entry.length,  1);	      int    maxUlps    =    Math.max(entry.length,    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
28	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(entry.length,  height);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  int  maxUlps  =  Math.max(entry.length,  height);  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.max(entry.length,  height);	      int    maxUlps    =    Math.max(entry.length,    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
29	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(entry.length,  maxUlps  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  int  maxUlps  =  Math.max(entry.length,  maxUlps  -  1);  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.max(entry.length,  maxUlps  -  1);	      int    maxUlps    =    Math.max(entry.length,    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
30	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)	      if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    	non-compiled	[CE]  ')'  expected	14	None	replace
31	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  }  [CE]  ')'  expected  [FE]                  AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  }  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  }	      if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    	non-compiled	[CE]  ')'  expected	14	None	replace
32	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  }  [CE]  ')'  expected  [FE]                    AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  }  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  }	      if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    	non-compiled	[CE]  ')'  expected	14	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  >=  ')'  [CE]  ')'  expected  [FE]                      AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  >=  ')'  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  >=  ')'	      if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    	non-compiled	[CE]  ')'  expected	14	None	replace
34	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.doubleValue()  +  1);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.doubleValue()  +  1);  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  entry.doubleValue()  +  1);	      col    =    Math.max(columnLabels.size(),    entry.doubleValue());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
35	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.doubleValue()  -  1);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.doubleValue()  -  1);  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  entry.doubleValue()  -  1);	      col    =    Math.max(columnLabels.size(),    entry.doubleValue());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
36	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.intValue());  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.intValue());  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  entry.intValue());	      col    =    Math.max(columnLabels.size(),    entry.doubleValue());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
37	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.length());  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.length());  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  entry.length());	      col    =    Math.max(columnLabels.size(),    entry.doubleValue());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
38	[BUG]  [BUGGY]  ColumnLabels.add(entry,  columnLabelsToDrop);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  ColumnLabels.add(entry,  columnLabelsToDrop);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(entry,  columnLabelsToDrop);	  ColumnLabels.add(columnLabelsToDrop,    entry);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
39	[BUG]  [BUGGY]  ColumnLabels.add(entry,  columnLabels);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  ColumnLabels.add(entry,  columnLabels);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(entry,  columnLabels);	  ColumnLabels.add(columnLabelsToDrop,    entry);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
40	[BUG]  [BUGGY]  ColumnLabels.add(columnLabelsToDrop,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  ColumnLabels.add(columnLabelsToDrop,  columnsToDrop);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabelsToDrop,  columnsToDrop);	  ColumnLabels.add(columnLabelsToDrop,    entry);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
41	[BUG]  [BUGGY]  ColumnLabels.add(columnLabelsToDrop,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  ColumnLabels.add(columnLabelsToDrop,  columnLabels);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabelsToDrop,  columnLabels);	  ColumnLabels.add(columnLabelsToDrop,    entry);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
42	[BUG]  [BUGGY]  ColumnLabels.add(columnLabelsToDrop,  column);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  ColumnLabels.add(columnLabelsToDrop,  column);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabelsToDrop,  column);	  ColumnLabels.add(columnLabelsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
43	[BUG]  [BUGGY]  ColumnLabels.add(columnsToDrop,  entry);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  ColumnLabels.add(columnsToDrop,  entry);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnsToDrop,  entry);	  ColumnLabels.add(columnLabelsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
44	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }	      if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
45	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }	      if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
46	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }	      if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
47	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(  [CE]  '.class'  expected  [FE]                AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(	      if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  '.class'  expected	11	None	replace
48	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(entry.length(),  maxUlps);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  int  maxUlps  =  Math.max(entry.length(),  maxUlps);  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.max(entry.length(),  maxUlps);	      int    maxUlps    =    Math.min(maxUlps,    entry.length());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
49	[BUG]  [BUGGY]  int  maxUlps  =  Math.min(entry.length(),  maxUlps);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  int  maxUlps  =  Math.min(entry.length(),  maxUlps);  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.min(entry.length(),  maxUlps);	      int    maxUlps    =    Math.min(maxUlps,    entry.length());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
50	[BUG]  [BUGGY]  int  maxUlps  =  Math.min(maxUlps,  entry.length()  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  int  maxUlps  =  Math.min(maxUlps,  entry.length()  -  1);  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.min(maxUlps,  entry.length()  -  1);	      int    maxUlps    =    Math.min(maxUlps,    entry.length());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
51	[BUG]  [BUGGY]  int  maxUlps  =  Math.min(entry.length()  +  1,  entry.length());  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  int  maxUlps  =  Math.min(entry.length()  +  1,  entry.length());  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.min(entry.length()  +  1,  entry.length());	      int    maxUlps    =    Math.min(maxUlps,    entry.length());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
52	[BUG]  [BUGGY]  int  height  =  Math.max(entry.length,  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  int  height  =  Math.max(entry.length,  1);  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  height  =  Math.max(entry.length,  1);	      int    height    =    Math.max(entry.length,    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
53	[BUG]  [BUGGY]  int  height  =  Math.max(entry.length,  2);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  int  height  =  Math.max(entry.length,  2);  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  height  =  Math.max(entry.length,  2);	      int    height    =    Math.max(entry.length,    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
54	[BUG]  [BUGGY]  int  height  =  Math.max(entry.length,  3);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  int  height  =  Math.max(entry.length,  3);  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  height  =  Math.max(entry.length,  3);	      int    height    =    Math.max(entry.length,    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
55	[BUG]  [BUGGY]  int  height  =  Math.max(entry.length,  i);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  int  height  =  Math.max(entry.length,  i);  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  height  =  Math.max(entry.length,  i);	      int    height    =    Math.max(entry.length,    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
56	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.getValue()  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.getValue()  -  1);  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  entry.getValue()  -  1);	      col    =    Math.max(columnLabels.size(),    entry.getValue());    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
57	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.getValue()  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.getValue()  +  1);  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  entry.getValue()  +  1);	      col    =    Math.max(columnLabels.size(),    entry.getValue());    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
58	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.getValue()  -  2);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.getValue()  -  2);  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  entry.getValue()  -  2);	      col    =    Math.max(columnLabels.size(),    entry.getValue());    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
59	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.getColumnValue());  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  col  =  Math.max(columnLabels.size(),  entry.getColumnValue());  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  entry.getColumnValue());	      col    =    Math.max(columnLabels.size(),    entry.getValue());    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
60	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }	      if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnLabels.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
61	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }	      if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnLabels.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
62	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }	      if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i));    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
63	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicColumn(i));  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicColumn(i));  }  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicColumn(i));  }	      if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i));    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
64	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));	      if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i));    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
65	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicLeft(i));  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicLeft(i));  }  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicLeft(i));  }	      if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i));    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
66	[BUG]  [BUGGY]  int  maxUlps  =  Math.min(entry.length,  maxUlps);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  int  maxUlps  =  Math.min(entry.length,  maxUlps);  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.min(entry.length,  maxUlps);	      int    maxUlps    =    Math.min(maxUlps,    entry.length);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
67	[BUG]  [BUGGY]  int  maxUlps  =  Math.min(maxUlps,  entry.length  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  int  maxUlps  =  Math.min(maxUlps,  entry.length  -  1);  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.min(maxUlps,  entry.length  -  1);	      int    maxUlps    =    Math.min(maxUlps,    entry.length);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
68	[BUG]  [BUGGY]  col  =  Math.max(columnLabelsToDrop,  entry.length  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  col  =  Math.max(columnLabelsToDrop,  entry.length  -  1);  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabelsToDrop,  entry.length  -  1);	      col    =    Math.max(columnLabelsToDrop,    entry.length);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
69	[BUG]  [BUGGY]  col  =  Math.max(columnLabelsToDrop,  entry.length  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  col  =  Math.max(columnLabelsToDrop,  entry.length  +  1);  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabelsToDrop,  entry.length  +  1);	      col    =    Math.max(columnLabelsToDrop,    entry.length);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
70	[BUG]  [BUGGY]  col  =  Math.min(columnLabelsToDrop,  entry.length);  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  col  =  Math.min(columnLabelsToDrop,  entry.length);  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.min(columnLabelsToDrop,  entry.length);	      col    =    Math.max(columnLabelsToDrop,    entry.length);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
71	[BUG]  [BUGGY]  ColumnLabels.add(columnLabels,  entry,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  ColumnLabels.add(columnLabels,  entry,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabels,  entry,  NEGATIVE_VAR_COLUMN_LABEL);	  ColumnLabels.add(columnLabels,    entry);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
72	[BUG]  [BUGGY]  ColumnLabels.add(columnLabels,  entry,  maxUlps);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  ColumnLabels.add(columnLabels,  entry,  maxUlps);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabels,  entry,  maxUlps);	  ColumnLabels.add(columnLabels,    entry);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
73	[BUG]  [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }	      if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
74	[BUG]  [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(  [CE]  '.class'  expected  [FE]            AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(entry!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(	      if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  '.class'  expected	11	None	replace
75	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(entry.length,  2);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  int  maxUlps  =  Math.max(entry.length,  2);  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.max(entry.length,  2);	      int    maxUlps    =    Math.max(entry.length,    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
76	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(entry.length,  i);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  int  maxUlps  =  Math.max(entry.length,  i);  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.max(entry.length,  i);	      int    maxUlps    =    Math.max(entry.length,    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
77	[BUG]  [BUGGY]  columnsToDrop.add(i  +  1,  entry);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  columnsToDrop.add(i  +  1,  entry);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(i  +  1,  entry);	  columnsToDrop.add(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
78	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  maxUlps);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  col  =  Math.max(columnLabels.size(),  maxUlps);  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  maxUlps);	      col    =    Math.max(columnLabels.size(),    entry.doubleValue());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
79	[BUG]  [BUGGY]  columnsToDrop.remove(i);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  columnsToDrop.remove(i);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.remove(i);	  columnsToDrop.remove(entry);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
80	[BUG]  [BUGGY]  columnsToDrop.add(i,  entry);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  columnsToDrop.add(i,  entry);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(i,  entry);	  columnsToDrop.remove(entry);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
81	[BUG]  [BUGGY]  ColumnLabels.add(columnsToDrop,  i);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  ColumnLabels.add(columnsToDrop,  i);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnsToDrop,  i);	  ColumnLabels.add(columnLabelsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
82	[BUG]  [BUGGY]  ColumnLabels.add(columnsToDrop,  0);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  ColumnLabels.add(columnsToDrop,  0);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnsToDrop,  0);	  ColumnLabels.add(columnLabelsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
83	[BUG]  [BUGGY]  ColumnLabels.add(columnsToDrop,  column);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  ColumnLabels.add(columnsToDrop,  column);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnsToDrop,  column);	  ColumnLabels.add(columnLabelsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
84	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }	      if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i));    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
85	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  col))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }	      if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i));    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
86	[BUG]  [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(entry!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow	      if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i));    }    	non-compiled	[CE]  ')'  expected	12	None	replace
87	[BUG]  [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow  [CE]  ')'  expected  [FE]                  AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow	      if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i));    }    	non-compiled	[CE]  ')'  expected	12	None	replace
88	[BUG]  [BUGGY]  ColumnLabels.add(columnLabels,  i,  entry);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  ColumnLabels.add(columnLabels,  i,  entry);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabels,  i,  entry);	  ColumnLabels.add(columnLabels,    entry);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
89	[BUG]  [BUGGY]  ColumnLabels.add(columnLabels,  0,  entry);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  ColumnLabels.add(columnLabels,  0,  entry);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabels,  0,  entry);	  ColumnLabels.add(columnLabels,    entry);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
90	[BUG]  [BUGGY]  ColumnLabels.add(columnLabels,  i);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  ColumnLabels.add(columnLabels,  i);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabels,  i);	  ColumnLabels.add(columnLabels,    entry);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
91	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)	      if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    	non-compiled	[CE]  ')'  expected	14	None	replace
92	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [CE]  ')'  expected  [FE]                  AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)	      if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    	non-compiled	[CE]  ')'  expected	14	None	replace
93	[BUG]  [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(entry!=  null)  {  if(!precision.compareTo(entry,  0,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }	      if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
94	[BUG]  [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(entry!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }	      if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
95	[BUG]  [BUGGY]  ColumnLabels.add(columnLabelsToDrop,  i);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  ColumnLabels.add(columnLabelsToDrop,  i);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabelsToDrop,  i);	  ColumnLabels.add(columnLabelsToDrop,    entry);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
96	[BUG]  [BUGGY]  ColumnLabels.add(columnLabelsToDrop,  maxUlps);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  ColumnLabels.add(columnLabelsToDrop,  maxUlps);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabelsToDrop,  maxUlps);	  ColumnLabels.add(columnLabelsToDrop,    entry);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
97	[BUG]  [BUGGY]  ColumnLabels.add(columnLabelsToDrop,  col);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  ColumnLabels.add(columnLabelsToDrop,  col);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabelsToDrop,  col);	  ColumnLabels.add(columnLabelsToDrop,    entry);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
98	[BUG]  [BUGGY]  columnsToDrop.add(new  Integer(i));  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  columnsToDrop.add(new  Integer(i));  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(new  Integer(i));	  columnsToDrop.add(int);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
99	[BUG]  [BUGGY]  columnsToDrop.add(maxUlps  +  1);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  columnsToDrop.add(maxUlps  +  1);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(maxUlps  +  1);	  columnsToDrop.add(entry    +    1);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
100	[BUG]  [BUGGY]  double  height  =  Math.abs(entry.doubleValue()  *  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  double  height  =  Math.abs(entry.doubleValue()  *  DEFAULT_ULPS);  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	double  height  =  Math.abs(entry.doubleValue()  *  DEFAULT_ULPS);	      double    height    =    Math.abs(entry.doubleValue());    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
101	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  entry))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  if(!precision.compareTo(entry,  0,  entry))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  entry))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }	      if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
102	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnsToDrop.add(i);  }	      if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
103	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  columnLabels.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  if(!precision.compareTo(entry,  0,  columnLabels.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  columnLabels.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }	      if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnLabels.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
104	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  columnLabels))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  if(!precision.compareTo(entry,  0,  columnLabels))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  columnLabels))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }	      if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnLabels.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
105	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  entry))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  if(!precision.compareTo(entry,  0,  entry))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  entry))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }	      if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
106	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i);  }	      if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
107	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(entry.length,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  int  maxUlps  =  Math.max(entry.length,  DEFAULT_ULPS);  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.max(entry.length,  DEFAULT_ULPS);	      int    maxUlps    =    Math.max(entry.length,    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
108	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(entry.length,  3);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  int  maxUlps  =  Math.max(entry.length,  3);  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  maxUlps  =  Math.max(entry.length,  3);	      int    maxUlps    =    Math.max(entry.length,    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
109	[BUG]  [BUGGY]  columnsToDrop.add(entry.doubleValue()  -  1);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  columnsToDrop.add(entry.doubleValue()  -  1);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(entry.doubleValue()  -  1);	  columnsToDrop.add(i    -    1);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
110	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i));  }	      if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i));    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
111	[BUG]  [BUGGY]  ColumnLabels.add(columnLabelsToDrop,  table);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  ColumnLabels.add(columnLabelsToDrop,  table);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabelsToDrop,  table);	  ColumnLabels.add(columnLabelsToDrop,    entry);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
112	[BUG]  [BUGGY]  ColumnLabels.add(columnLabels,  entry,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  ColumnLabels.add(columnLabels,  entry,  DEFAULT_ULPS);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabels,  entry,  DEFAULT_ULPS);	  ColumnLabels.add(columnLabels,    entry);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
113	[BUG]  [BUGGY]  ColumnLabels.add(columnLabels,  columnLabels,  entry);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  ColumnLabels.add(columnLabels,  columnLabels,  entry);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	ColumnLabels.add(columnLabels,  columnLabels,  entry);	  ColumnLabels.add(columnLabels,    entry);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
114	[BUG]  [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  if(entry!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(entry!=  null)  {  if(!precision.compareTo(entry,  0d,  maxUlps))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)	      if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    	non-compiled	[CE]  ')'  expected	14	None	replace
115	[BUG]  [BUGGY]  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [CE]  ')'  expected  [FE]                  AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	if(!precision.compareTo(entry,  0,  entry.length))  {  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  columnsToDrop.add(i  +  getBasicRow(i)	      if(!precision.compareTo(entry,    0d,    maxUlps))    {    for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    columnsToDrop.add(i    +    getBasicRow(i)    	non-compiled	[CE]  ')'  expected	14	None	replace
116	[BUG]  [BUGGY]  col  =  Math.max(columnLabels.size(),  table.getValue());  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  col  =  Math.max(columnLabels.size(),  table.getValue());  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	col  =  Math.max(columnLabels.size(),  table.getValue());	      col    =    Math.max(columnLabels.size(),    entry.getValue());    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
117	[BUG]  [BUGGY]  int  height  =  Math.max(entry.length,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  int  height  =  Math.max(entry.length,  DEFAULT_ULPS);  [BUGGY]    columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	int  height  =  Math.max(entry.length,  DEFAULT_ULPS);	      int    height    =    Math.max(entry.length,    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
118	[BUG]  [BUGGY]  columnsToDrop.remove(columnLabels);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  columnsToDrop.remove(columnLabels);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.remove(columnLabels);	  columnsToDrop.remove(entry);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
119	[BUG]  [BUGGY]  columnsToDrop.add(new  Integer(entry.doubleValue()));  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  columnsToDrop.add(new  Integer(entry.doubleValue()));  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(new  Integer(entry.doubleValue()));	  columnsToDrop.add(int);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
120	[BUG]  [BUGGY]  columnsToDrop.add(new  Integer(entry.getValue()));  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {    [BUGGY]  columnsToDrop.add(new  Integer(entry.getValue()));  [BUGGY]    }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	columnsToDrop.add(new  Integer(entry.getValue()));	  columnsToDrop.add(int);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
