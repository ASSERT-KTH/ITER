bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(j));  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  For(int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(j));  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	For(int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(j));  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnLabels.size();    ++j)    {    columnLabels.add((    int)columnLabels.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
2	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnLabels.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(j));  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columnLabels.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(j));  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columnLabels.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(j));  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnLabels.size();    ++j)    {    columnLabels.add((    int)columnLabels.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
3	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  columnLabels.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(j));  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  For(int  j  =  0;  j  <  columnLabels.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(j));  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	For(int  j  =  0;  j  <  columnLabels.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(j));  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnLabels.size();    ++j)    {    columnLabels.add((    int)columnLabels.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
4	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  this.columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  this.columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  this.columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  col);  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    columnLabels[j    -    1][col++]    =    matrix.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
5	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  matrix[i  -  1][col++]  =  columnLabels.getEntry(i,  j);  }  else  {  this.tableau.addChangeListener(this);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  if(columnLabels!=  null)  {  matrix[i  -  1][col++]  =  columnLabels.getEntry(i,  j);  }  else  {  this.tableau.addChangeListener(this);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	if(columnLabels!=  null)  {  matrix[i  -  1][col++]  =  columnLabels.getEntry(i,  j);  }  else  {  this.tableau.addChangeListener(this);  }	  if(columnLabels!=    null)    {    matrix[i    -    1][col++]    =    this.tableau.getEntry(i,    j);    }    else    {    this.tableau.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
6	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(columnLabels,  columnLabels.size()  -  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  int  maxUlps  =  Math.max(columnLabels,  columnLabels.size()  -  1);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	int  maxUlps  =  Math.max(columnLabels,  columnLabels.size()  -  1);	  int    maxUlps    =    Math.max(columnLabels,    columnsToDrop.size());    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
7	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(columnLabels,  columnsToDrop.size()  +  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  int  maxUlps  =  Math.max(columnLabels,  columnsToDrop.size()  +  1);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	int  maxUlps  =  Math.max(columnLabels,  columnsToDrop.size()  +  1);	  int    maxUlps    =    Math.max(columnLabels,    columnsToDrop.size());    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
8	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(columnLabels,  columnsToDrop.size()  -  2);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  int  maxUlps  =  Math.max(columnLabels,  columnsToDrop.size()  -  2);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	int  maxUlps  =  Math.max(columnLabels,  columnsToDrop.size()  -  2);	  int    maxUlps    =    Math.max(columnLabels,    columnsToDrop.size());    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
9	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(col.size(),  columnLabels.size());  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  int  maxUlps  =  Math.max(col.size(),  columnLabels.size());  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	int  maxUlps  =  Math.max(col.size(),  columnLabels.size());	  int    maxUlps    =    Math.max(columnLabels.size(),    col.size());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
10	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(col.size(),  columnsToDrop.size());  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  int  maxUlps  =  Math.max(col.size(),  columnsToDrop.size());  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	int  maxUlps  =  Math.max(col.size(),  columnsToDrop.size());	  int    maxUlps    =    Math.max(columnLabels.size(),    col.size());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
11	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(col.size(),  col.size());  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  int  maxUlps  =  Math.max(col.size(),  col.size());  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	int  maxUlps  =  Math.max(col.size(),  col.size());	  int    maxUlps    =    Math.max(columnLabels.size(),    col.size());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
12	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  ++i)  {  columnLabels.add((  int)columnLabels.get(i));  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  ++i)  {  columnLabels.add((  int)columnLabels.get(i));  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columnsToDrop.size();  ++i)  {  columnLabels.add((  int)columnLabels.get(i));  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    ++j)    {    columnLabels.add((    int)columnLabels.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
13	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnLabels.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i));  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columnLabels.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i));  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columnLabels.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i));  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    ++j)    {    columnLabels.add((    int)columnLabels.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
14	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  this.columnLabels.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i));  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  this.columnLabels.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i));  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  this.columnLabels.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i));  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    ++j)    {    columnLabels.add((    int)columnLabels.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
15	[BUG]  [BUGGY]  this.tableau.setEntry(columnLabels[i  -  1][col++],  table,  column);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  this.tableau.setEntry(columnLabels[i  -  1][col++],  table,  column);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	this.tableau.setEntry(columnLabels[i  -  1][col++],  table,  column);	  this.tableau.setEntry(columnLabels[i    -    1][col++],    table);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
16	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    matrix[i    -    1][col++]    =    table.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
17	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(j,  col);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(j,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(j,  col);  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    matrix[i    -    1][col++]    =    table.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
18	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  this.columns.size();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(j,  col);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  this.columns.size();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(j,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  this.columns.size();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(j,  col);  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    matrix[i    -    1][col++]    =    table.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
19	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  For(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	For(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    matrix[i    -    1][col++]    =    table.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
20	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columns.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(j,  col);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columns.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(j,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columns.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(j,  col);  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnLabels.size();    j++)    {    matrix[j    -    1][col++]    =    table.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
21	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columns.size();  ++j)  {  columnLabels.remove((  int)columnLabels.get(i));  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columns.size();  ++j)  {  columnLabels.remove((  int)columnLabels.get(i));  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columns.size();  ++j)  {  columnLabels.remove((  int)columnLabels.get(i));  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnLabels.size();    ++j)    {    columnLabels.remove((    int)columnLabels.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
22	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  columnLabels.remove((  int)columnLabels.get(i));  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  For(int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  columnLabels.remove((  int)columnLabels.get(i));  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	For(int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  columnLabels.remove((  int)columnLabels.get(i));  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnLabels.size();    ++j)    {    columnLabels.remove((    int)columnLabels.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
23	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(col,  columnLabels.size()  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  int  maxUlps  =  Math.max(col,  columnLabels.size()  -  1);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	int  maxUlps  =  Math.max(col,  columnLabels.size()  -  1);	  int    maxUlps    =    Math.max(col,    columnLabels.size());    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
24	[BUG]  [BUGGY]  this.tableau.setEntry(columnLabels[i  -  1][col++],  matrix,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  this.tableau.setEntry(columnLabels[i  -  1][col++],  matrix,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	this.tableau.setEntry(columnLabels[i  -  1][col++],  matrix,  NEGATIVE_VAR_COLUMN_LABEL);	  this.tableau.setEntry(columnLabels[i    -    1][col++],    NEGATIVE_VAR_COLUMN_LABEL);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
25	[BUG]  [BUGGY]  this.tableau.setEntry(columnLabels[i  -  1][col++],  NEGATIVE_VAR_COLUMN_LABEL,  matrix);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  this.tableau.setEntry(columnLabels[i  -  1][col++],  NEGATIVE_VAR_COLUMN_LABEL,  matrix);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	this.tableau.setEntry(columnLabels[i  -  1][col++],  NEGATIVE_VAR_COLUMN_LABEL,  matrix);	  this.tableau.setEntry(columnLabels[i    -    1][col++],    NEGATIVE_VAR_COLUMN_LABEL);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
26	[BUG]  [BUGGY]  this.tableau.setEntry(columnLabels[i  -  1][col++],  NEGATIVE_VAR_COLUMN_LABEL,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  this.tableau.setEntry(columnLabels[i  -  1][col++],  NEGATIVE_VAR_COLUMN_LABEL,  columnLabels);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	this.tableau.setEntry(columnLabels[i  -  1][col++],  NEGATIVE_VAR_COLUMN_LABEL,  columnLabels);	  this.tableau.setEntry(columnLabels[i    -    1][col++],    NEGATIVE_VAR_COLUMN_LABEL);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
27	[BUG]  [BUGGY]  ColumnLabels[j  -  1][col++]  =  matrix.getEntry(i,  columnLabels[j]);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  ColumnLabels[j  -  1][col++]  =  matrix.getEntry(i,  columnLabels[j]);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	ColumnLabels[j  -  1][col++]  =  matrix.getEntry(i,  columnLabels[j]);	  ColumnLabels[j    -    1][col++]    =    matrix.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
28	[BUG]  [BUGGY]  ColumnLabels[i  -  1][col++]  =  matrix.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  ColumnLabels[i  -  1][col++]  =  matrix.getEntry(i,  col);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	ColumnLabels[i  -  1][col++]  =  matrix.getEntry(i,  col);	  ColumnLabels[j    -    1][col++]    =    matrix.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
29	[BUG]  [BUGGY]  col[j  -  1][col++]  =  matrix.getEntry(j,  col);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  col[j  -  1][col++]  =  matrix.getEntry(j,  col);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	col[j  -  1][col++]  =  matrix.getEntry(j,  col);	  for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    col[j    -    1][col++]    =    matrix.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
30	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  col[j  -  1][col++]  =  matrix.getEntry(j,  col);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  col[j  -  1][col++]  =  matrix.getEntry(j,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  col[j  -  1][col++]  =  matrix.getEntry(j,  col);  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    col[j    -    1][col++]    =    matrix.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
31	[BUG]  [BUGGY]  int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  col[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  col[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  col[j  -  1][col++]  =  matrix.getEntry(i,  col);  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    col[j    -    1][col++]    =    matrix.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
32	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    columnLabels[j    -    1][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
33	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  this.columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  this.columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  this.columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    columnLabels[j    -    1][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
34	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  For(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	For(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    columnLabels[j    -    1][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
35	[BUG]  [BUGGY]  this.numArtificialVariables  =  columnsToDrop.size()  -  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  this.numArtificialVariables  =  columnsToDrop.size()  -  1;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	this.numArtificialVariables  =  columnsToDrop.size()  -  1;	  this.numArtificialVariables    =    columnsToDrop.size();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
36	[BUG]  [BUGGY]  this.numArtificialVariables  =  columnLabels.size();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  this.numArtificialVariables  =  columnLabels.size();  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	this.numArtificialVariables  =  columnLabels.size();	  this.numArtificialVariables    =    columnsToDrop.size();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
37	[BUG]  [BUGGY]  this.numArtificialVariables  =  columnsToDrop.size()  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  this.numArtificialVariables  =  columnsToDrop.size()  +  1;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	this.numArtificialVariables  =  columnsToDrop.size()  +  1;	  this.numArtificialVariables    =    columnsToDrop.size();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
38	[BUG]  [BUGGY]  colLabels[i  -  1][col++]  =  table.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  colLabels[i  -  1][col++]  =  table.getEntry(i,  col);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	colLabels[i  -  1][col++]  =  table.getEntry(i,  col);	  colLabels[j    -    1][col++]    =    table.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
39	[BUG]  [BUGGY]  colLabels[j  -  1][col++]  =  table.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  colLabels[j  -  1][col++]  =  table.getEntry(i,  col);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	colLabels[j  -  1][col++]  =  table.getEntry(i,  col);	  colLabels[j    -    1][col++]    =    table.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
40	[BUG]  [BUGGY]  colLabels[i  -  1][col++]  =  table.getEntry(i,  columnLabels[j]);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  colLabels[i  -  1][col++]  =  table.getEntry(i,  columnLabels[j]);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	colLabels[i  -  1][col++]  =  table.getEntry(i,  columnLabels[j]);	  colLabels[j    -    1][col++]    =    table.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
41	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(columnLabels.size(),  columnLabels.size()  -  2);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  int  maxUlps  =  Math.max(columnLabels.size(),  columnLabels.size()  -  2);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	int  maxUlps  =  Math.max(columnLabels.size(),  columnLabels.size()  -  2);	  int    maxUlps    =    Math.max(columnLabels.size(),    columnLabels.size());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
42	[BUG]  [BUGGY]  ColumnLabels[j  -  1][col++]  =  table.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  ColumnLabels[j  -  1][col++]  =  table.getEntry(i,  col);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	ColumnLabels[j  -  1][col++]  =  table.getEntry(i,  col);	  ColumnLabels[j    -    1][col++]    =    table.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
43	[BUG]  [BUGGY]  ColumnLabels[i  -  1][col++]  =  table.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  ColumnLabels[i  -  1][col++]  =  table.getEntry(i,  col);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	ColumnLabels[i  -  1][col++]  =  table.getEntry(i,  col);	  ColumnLabels[j    -    1][col++]    =    table.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
44	[BUG]  [BUGGY]  ColumnLabels[j  -  1][col++]  =  table.getEntry(i,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  ColumnLabels[j  -  1][col++]  =  table.getEntry(i,  columnLabels);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	ColumnLabels[j  -  1][col++]  =  table.getEntry(i,  columnLabels);	  ColumnLabels[j    -    1][col++]    =    table.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
45	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columns.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(j));  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columns.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(j));  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columns.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(j));  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    col.size();    ++j)    {    columnLabels.add((    int)columnLabels.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
46	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  col.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(j));  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  col.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(j));  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  col.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(j));  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    col.size();    ++j)    {    columnLabels.add((    int)columnLabels.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
47	[BUG]  [BUGGY]  colLabels.add((  double)columnLabels.get(j));  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  colLabels.add((  double)columnLabels.get(j));  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	colLabels.add((  double)columnLabels.get(j));	  colLabels.add((    int)columnLabels.get(j));    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
48	[BUG]  [BUGGY]  colLabels.add((  char)columnLabels.get(j));  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  colLabels.add((  char)columnLabels.get(j));  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	colLabels.add((  char)columnLabels.get(j));	  colLabels.add((    int)columnLabels.get(j));    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
49	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(columnLabels,  columnLabels.size());  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  int  maxUlps  =  Math.max(columnLabels,  columnLabels.size());  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	int  maxUlps  =  Math.max(columnLabels,  columnLabels.size());	  int    maxUlps    =    Math.max(columnLabels,    columnsToDrop.size()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
50	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  row[j  -  1][col++]  =  matrix.getEntry(j,  col);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  row[j  -  1][col++]  =  matrix.getEntry(j,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  row[j  -  1][col++]  =  matrix.getEntry(j,  col);  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    row[j    -    1][col++]    =    matrix.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
51	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  row[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  row[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  row[j  -  1][col++]  =  matrix.getEntry(i,  col);  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    row[j    -    1][col++]    =    matrix.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
52	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[j  -  1][col++]  =  matrix.getEntry(j,  col);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[j  -  1][col++]  =  matrix.getEntry(j,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[j  -  1][col++]  =  matrix.getEntry(j,  col);  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    row[j    -    1][col++]    =    matrix.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
53	[BUG]  [BUGGY]  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  if(columnLabels!=  null)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  column);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  if(columnLabels!=  null)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  column);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  if(columnLabels!=  null)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  column);  }	  if(columnLabels!=    null)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    column);    }    else    {    this.tableau.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
54	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  ++i)  {  columnLabels.remove((  int)columnLabels.get(i));  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  ++i)  {  columnLabels.remove((  int)columnLabels.get(i));  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columnsToDrop.size();  ++i)  {  columnLabels.remove((  int)columnLabels.get(i));  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    ++j)    {    columnLabels.remove((    int)columnLabels.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
55	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  this.columnLabels.size();  ++j)  {  columnLabels.remove((  int)columnLabels.get(i));  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  this.columnLabels.size();  ++j)  {  columnLabels.remove((  int)columnLabels.get(i));  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  this.columnLabels.size();  ++j)  {  columnLabels.remove((  int)columnLabels.get(i));  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    ++j)    {    columnLabels.remove((    int)columnLabels.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
56	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(i,  col);  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    matrix[j    -    1][col++]    =    table.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
57	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rowsToDrop.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  rowsToDrop.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  rowsToDrop.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(i,  col);  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    matrix[j    -    1][col++]    =    table.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
58	[BUG]  [BUGGY]  this.numArtificialVariables  =  new  ArrayList  <  String>(columnLabels.size()  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  this.numArtificialVariables  =  new  ArrayList  <  String>(columnLabels.size()  -  1);  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	this.numArtificialVariables  =  new  ArrayList  <  String>(columnLabels.size()  -  1);	  this.numArtificialVariables    =    new    ArrayList    <    String>(columnLabels.size());    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
59	[BUG]  [BUGGY]  this.numArtificialVariables  =  new  ArrayList  <  String>(columnLabels.size()  +  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  this.numArtificialVariables  =  new  ArrayList  <  String>(columnLabels.size()  +  1);  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	this.numArtificialVariables  =  new  ArrayList  <  String>(columnLabels.size()  +  1);	  this.numArtificialVariables    =    new    ArrayList    <    String>(columnLabels.size());    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
60	[BUG]  [BUGGY]  this.numArtificialVariables  =  new  ArrayList  <  String>(columnLabels.size()  -  2);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  this.numArtificialVariables  =  new  ArrayList  <  String>(columnLabels.size()  -  2);  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	this.numArtificialVariables  =  new  ArrayList  <  String>(columnLabels.size()  -  2);	  this.numArtificialVariables    =    new    ArrayList    <    String>(columnLabels.size());    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
61	[BUG]  [BUGGY]  this.tableau.addChangeListener(this,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  this.tableau.addChangeListener(this,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	this.tableau.addChangeListener(this,  NEGATIVE_VAR_COLUMN_LABEL);	  this.tableau.addChangeListener(this);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
62	[BUG]  [BUGGY]  this.tableau.removeChangeListener(this);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  this.tableau.removeChangeListener(this);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	this.tableau.removeChangeListener(this);	  this.tableau.addChangeListener(this);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
63	[BUG]  [BUGGY]  this.numArtificialVariables  =  NEGATIVE_VAR_COLUMN_LABEL  +  col;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  this.numArtificialVariables  =  NEGATIVE_VAR_COLUMN_LABEL  +  col;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	this.numArtificialVariables  =  NEGATIVE_VAR_COLUMN_LABEL  +  col;	  this.numArtificialVariables    =    col;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
64	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columns.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i));  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columns.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i));  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columns.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i));  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnLabels.size();    ++j)    {    columnLabels.add((    int)columnLabels.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
65	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i));  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  For(int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i));  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	For(int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i));  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnLabels.size();    ++j)    {    columnLabels.add((    int)columnLabels.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
66	[BUG]  [BUGGY]  colLabels[i  -  1][col++]  =  matrix.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  colLabels[i  -  1][col++]  =  matrix.getEntry(i,  j);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	colLabels[i  -  1][col++]  =  matrix.getEntry(i,  j);	  colLabels[j    -    1][col++]    =    matrix.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
67	[BUG]  [BUGGY]  colLabels[j  -  1][col++]  =  matrix.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  colLabels[j  -  1][col++]  =  matrix.getEntry(i,  col);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	colLabels[j  -  1][col++]  =  matrix.getEntry(i,  col);	  colLabels[j    -    1][col++]    =    matrix.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
68	[BUG]  [BUGGY]  colLabels[i  -  1][col++]  =  matrix.getEntry(i,  columnLabels[j]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  colLabels[i  -  1][col++]  =  matrix.getEntry(i,  columnLabels[j]);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	colLabels[i  -  1][col++]  =  matrix.getEntry(i,  columnLabels[j]);	  colLabels[j    -    1][col++]    =    matrix.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
69	[BUG]  [BUGGY]  colLabels[j  -  1][col++]  =  matrix.getEntry(i,  columnLabels[j]);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  colLabels[j  -  1][col++]  =  matrix.getEntry(i,  columnLabels[j]);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	colLabels[j  -  1][col++]  =  matrix.getEntry(i,  columnLabels[j]);	  colLabels[j    -    1][col++]    =    matrix.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
70	[BUG]  [BUGGY]  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  if(columnLabels!=  null)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  columnLabels);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  if(columnLabels!=  null)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  columnLabels);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  if(columnLabels!=  null)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  columnLabels);  }	  if(columnLabels!=    null)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    columnLabels);    }    else    {    this.tableau.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
71	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  col[j  -  1][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  col[j  -  1][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  col[j  -  1][col++]  =  matrix.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    col[j    -    1][col++]    =    matrix.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
72	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  col[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  col[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  col[j  -  1][col++]  =  matrix.getEntry(i,  col);  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    col[j    -    1][col++]    =    matrix.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
73	[BUG]  [BUGGY]  col[j  -  1][col++]  =  matrix.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  col[j  -  1][col++]  =  matrix.getEntry(i,  col);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	col[j  -  1][col++]  =  matrix.getEntry(i,  col);	  for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    col[j    -    1][col++]    =    matrix.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
74	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columns.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columns.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columns.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  col);  }	  for(int    j    =    0;    j    <    columnLabels.size();    j++)    {    columnLabels[j    -    1][col++]    =    matrix.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
75	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columns.size();  j++)  {  columnLabels[j  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columns.size();  j++)  {  columnLabels[j  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columns.size();  j++)  {  columnLabels[j  -  1][col++]  =  table.getEntry(i,  j);  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnLabels.size();    j++)    {    columnLabels[j    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
76	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(columnLabels,  col.size());  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  int  maxUlps  =  Math.max(columnLabels,  col.size());  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	int  maxUlps  =  Math.max(columnLabels,  col.size());	  int    maxUlps    =    Math.max(col,    columnsToDrop.size());    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
77	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  row[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  row[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  row[j  -  1][col++]  =  matrix.getEntry(i,  col);  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    row[j    -    1][col++]    =    matrix.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
78	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  this.columnLabels.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(j));  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  this.columnLabels.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(j));  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  this.columnLabels.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(j));  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    ++j)    {    columnLabels.add((    int)columnLabels.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
79	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  matrix[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  matrix[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  matrix[j  -  1][col++]  =  matrix.getEntry(i,  col);  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    matrix[j    -    1][col++]    =    matrix.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
80	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[j  -  1][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[j  -  1][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[j  -  1][col++]  =  matrix.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    matrix[j    -    1][col++]    =    matrix.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
81	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  matrix.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  matrix.getEntry(i,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  matrix.getEntry(i,  col);  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    matrix[j    -    1][col++]    =    matrix.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
82	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(columnLabels.size()  +  1,  columnsToDrop.size());  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  int  maxUlps  =  Math.max(columnLabels.size()  +  1,  columnsToDrop.size());  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	int  maxUlps  =  Math.max(columnLabels.size()  +  1,  columnsToDrop.size());	  int    maxUlps    =    Math.max(columnLabels.size(),    columnsToDrop.size()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
83	[BUG]  [BUGGY]  this.numArtificialVariables  =  new  ArrayList  <  String>(col);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  this.numArtificialVariables  =  new  ArrayList  <  String>(col);  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	this.numArtificialVariables  =  new  ArrayList  <  String>(col);	  this.numArtificialVariables    =    new    ArrayList    <    String>();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
84	[BUG]  [BUGGY]  this.numArtificialVariables  =  new  LinkedList  <  String>();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  this.numArtificialVariables  =  new  LinkedList  <  String>();  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	this.numArtificialVariables  =  new  LinkedList  <  String>();	  this.numArtificialVariables    =    new    ArrayList    <    String>();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
85	[BUG]  [BUGGY]  this.numArtificialVariables  =  new  ArrayList  <  String>(0);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  this.numArtificialVariables  =  new  ArrayList  <  String>(0);  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	this.numArtificialVariables  =  new  ArrayList  <  String>(0);	  this.numArtificialVariables    =    new    ArrayList    <    String>();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
86	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columns.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columns.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columns.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  j);  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnLabels.size();    j++)    {    columnLabels[j    -    1][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
87	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    matrix[j    -    1][col++]    =    table.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
88	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  this.columnLabels.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(j,  col);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  this.columnLabels.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(j,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  this.columnLabels.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(j,  col);  }	  for(int    j    =    0;    j    <    columnLabels.size();    j++)    {    matrix[j    -    1][col++]    =    table.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
89	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columns.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i));  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columns.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i));  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columns.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i));  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    col.size();    ++j)    {    columnLabels.add((    int)columnLabels.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
90	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  col.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i));  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  col.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i));  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  col.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i));  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    col.size();    ++j)    {    columnLabels.add((    int)columnLabels.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
91	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(columnsToDrop,  columnLabels.size()  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  int  maxUlps  =  Math.max(columnsToDrop,  columnLabels.size()  -  1);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	int  maxUlps  =  Math.max(columnsToDrop,  columnLabels.size()  -  1);	  int    maxUlps    =    Math.max(columnsToDrop,    columnLabels.size());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
92	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(columnsToDrop,  columnsToDrop.size()  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  int  maxUlps  =  Math.max(columnsToDrop,  columnsToDrop.size()  -  1);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	int  maxUlps  =  Math.max(columnsToDrop,  columnsToDrop.size()  -  1);	  int    maxUlps    =    Math.max(columnsToDrop,    columnLabels.size());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
93	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(columnsToDrop,  columns.size()  -  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  int  maxUlps  =  Math.max(columnsToDrop,  columns.size()  -  1);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	int  maxUlps  =  Math.max(columnsToDrop,  columns.size()  -  1);	  int    maxUlps    =    Math.max(columnsToDrop,    columnLabels.size());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
94	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(columnsToDrop,  columnLabels.size()  +  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  int  maxUlps  =  Math.max(columnsToDrop,  columnLabels.size()  +  1);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	int  maxUlps  =  Math.max(columnsToDrop,  columnLabels.size()  +  1);	  int    maxUlps    =    Math.max(columnsToDrop,    columnLabels.size());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
95	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  rowsToDrop.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(j));  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  For(int  j  =  0;  j  <  rowsToDrop.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(j));  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	For(int  j  =  0;  j  <  rowsToDrop.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(j));  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    rowsToDrop.size();    ++j)    {    columnLabels.add((    int)columnLabels.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
96	[BUG]  [BUGGY]  this.numArtificialVariables  =  NEGATIVE_VAR_COLUMN_LABEL  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  this.numArtificialVariables  =  NEGATIVE_VAR_COLUMN_LABEL  +  1;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	this.numArtificialVariables  =  NEGATIVE_VAR_COLUMN_LABEL  +  1;	  this.numArtificialVariables    =    NEGATIVE_VAR_COLUMN_LABEL;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
97	[BUG]  [BUGGY]  colLabels.add((  int)columnLabels.get(i  -  1));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  colLabels.add((  int)columnLabels.get(i  -  1));  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	colLabels.add((  int)columnLabels.get(i  -  1));	  colLabels.add((    int)columnLabels.get(i));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
98	[BUG]  [BUGGY]  colLabels.add((  int)columnLabels.get(i  +  1));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  colLabels.add((  int)columnLabels.get(i  +  1));  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	colLabels.add((  int)columnLabels.get(i  +  1));	  colLabels.add((    int)columnLabels.get(i));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
99	[BUG]  [BUGGY]  colLabels.add((  double)columnLabels.get(i));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  colLabels.add((  double)columnLabels.get(i));  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	colLabels.add((  double)columnLabels.get(i));	  colLabels.add((    int)columnLabels.get(i));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
100	[BUG]  [BUGGY]  ColumnLabels[i  -  1][col++]  =  matrix.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  ColumnLabels[i  -  1][col++]  =  matrix.getEntry(i,  j);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	ColumnLabels[i  -  1][col++]  =  matrix.getEntry(i,  j);	  ColumnLabels[j    -    1][col++]    =    matrix.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
101	[BUG]  [BUGGY]  ColumnLabels[j  -  1][col++]  =  matrix.getEntry(i,  column);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  ColumnLabels[j  -  1][col++]  =  matrix.getEntry(i,  column);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	ColumnLabels[j  -  1][col++]  =  matrix.getEntry(i,  column);	  ColumnLabels[j    -    1][col++]    =    matrix.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
102	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i  +  1));  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i  +  1));  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i  +  1));  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    ++j)    {    columnLabels.add((    int)columnLabels.get(i    +    1));    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
103	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i  +  1));  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  For(int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i  +  1));  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	For(int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i  +  1));  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    ++j)    {    columnLabels.add((    int)columnLabels.get(i    +    1));    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
104	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnLabels.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i  +  1));  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columnLabels.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i  +  1));  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columnLabels.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i  +  1));  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    ++j)    {    columnLabels.add((    int)columnLabels.get(i    +    1));    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
105	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  this.columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  this.columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  this.columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  table.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    columnLabels[j    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
106	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  table.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    columnLabels[j    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
107	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  columnLabels[j  -  1][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  columnLabels[j  -  1][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  columnLabels[j  -  1][col++]  =  table.getEntry(i,  col);  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    columnLabels[j    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
108	[BUG]  [BUGGY]  col  <  columnLabels.length)  {  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  col  <  columnLabels.length)  {  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	col  <  columnLabels.length)  {  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  col);  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnLabels.size();    j++)    {    columnLabels[j    -    1][col++]    =    matrix.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
109	[BUG]  [BUGGY]  col  <  columnLabels.length)  {  for(int  j  =  0;  j  <  columns.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  col  <  columnLabels.length)  {  for(int  j  =  0;  j  <  columns.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	col  <  columnLabels.length)  {  for(int  j  =  0;  j  <  columns.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  col);  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnLabels.size();    j++)    {    columnLabels[j    -    1][col++]    =    matrix.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
110	[BUG]  [BUGGY]  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	matrix[i  -  1][col++]  =  column.getEntry(i,  j);	  if(columnLabels!=    null)    {    matrix[i    -    1][col++]    =    column.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
111	[BUG]  [BUGGY]  col[i  -  1][col++]  =  column.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  col[i  -  1][col++]  =  column.getEntry(i,  j);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	col[i  -  1][col++]  =  column.getEntry(i,  j);	  if(columnLabels!=    null)    {    matrix[i    -    1][col++]    =    column.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
112	[BUG]  [BUGGY]  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	matrix[i  -  1][col++]  =  table.getEntry(i,  j);	  if(columnLabels!=    null)    {    matrix[i    -    1][col++]    =    column.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
113	[BUG]  [BUGGY]  this.tableau.setEntry(columnLabels[i  -  1][col++],  matrix,  columnLabels);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  this.tableau.setEntry(columnLabels[i  -  1][col++],  matrix,  columnLabels);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	this.tableau.setEntry(columnLabels[i  -  1][col++],  matrix,  columnLabels);	  this.tableau.setEntry(columnLabels[i    -    1][col++],    matrix);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
114	[BUG]  [BUGGY]  this.tableau.setEntry(columnLabels[i  -  1][col++],  matrix,  column);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  this.tableau.setEntry(columnLabels[i  -  1][col++],  matrix,  column);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	this.tableau.setEntry(columnLabels[i  -  1][col++],  matrix,  column);	  this.tableau.setEntry(columnLabels[i    -    1][col++],    matrix);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
115	[BUG]  [BUGGY]  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  if(columnLabels!=  null)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  if(columnLabels!=  null)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  if(columnLabels!=  null)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }	  if(columnLabels!=    null)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    col);    }    else    {    this.tableau.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
116	[BUG]  [BUGGY]  col[i  -  1][col++]  =  table.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  col[i  -  1][col++]  =  table.getEntry(i,  col);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	col[i  -  1][col++]  =  table.getEntry(i,  col);	  if(columnLabels!=    null)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    col);    }    else    {    this.tableau.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
117	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(columnsToDrop,  columnsToDrop.size()  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  int  maxUlps  =  Math.max(columnsToDrop,  columnsToDrop.size()  +  1);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	int  maxUlps  =  Math.max(columnsToDrop,  columnsToDrop.size()  +  1);	  int    maxUlps    =    Math.max(columnsToDrop,    columnsToDrop.size());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
118	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(columnsToDrop,  col.size());  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  int  maxUlps  =  Math.max(columnsToDrop,  col.size());  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	int  maxUlps  =  Math.max(columnsToDrop,  col.size());	  int    maxUlps    =    Math.max(columnsToDrop,    columnsToDrop.size());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
119	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  this.columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(j,  col);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  this.columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(j,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  this.columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(j,  col);  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    columnLabels[j    -    1][col++]    =    matrix.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
120	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  col.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(j,  col);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  col.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(j,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  col.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(j,  col);  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    columnLabels[j    -    1][col++]    =    matrix.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
121	[BUG]  [BUGGY]  col[i  -  1][col++]  =  column.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  col[i  -  1][col++]  =  column.getEntry(i,  col);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	col[i  -  1][col++]  =  column.getEntry(i,  col);	  if(columnLabels!=    null)    {    matrix[i    -    1][col++]    =    column.getEntry(i,    col);    }    else    {    this.tableau.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
122	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columns.size();  ++j)  {  columnLabels.remove((  int)columnLabels.get(i));  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columns.size();  ++j)  {  columnLabels.remove((  int)columnLabels.get(i));  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columns.size();  ++j)  {  columnLabels.remove((  int)columnLabels.get(i));  }	  for(int    j    =    0;    j    <    columnLabels.size();    ++j)    {    columnLabels.remove((    int)columnLabels.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
123	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  this.columns.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(j,  col);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  this.columns.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(j,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  this.columns.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(j,  col);  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    matrix[j    -    1][col++]    =    table.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
124	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  col.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(j,  col);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  col.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(j,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  col.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(j,  col);  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    matrix[j    -    1][col++]    =    table.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
125	[BUG]  [BUGGY]  this.tableau.setEntry(column[i  -  1][col++],  matrix);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  this.tableau.setEntry(column[i  -  1][col++],  matrix);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	this.tableau.setEntry(column[i  -  1][col++],  matrix);	  this.tableau.setEntry(columnLabels[i    -    1][col++],    column);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
126	[BUG]  [BUGGY]  this.numArtificialVariables  =  new  ArrayList  <  NEGATIVE_VAR_COLUMN_LABEL>();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  this.numArtificialVariables  =  new  ArrayList  <  NEGATIVE_VAR_COLUMN_LABEL>();  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	this.numArtificialVariables  =  new  ArrayList  <  NEGATIVE_VAR_COLUMN_LABEL>();	  this.numArtificialVariables    =    columns;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
127	[BUG]  [BUGGY]  col  <  columnLabels.length)  {  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(j,  col);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  col  <  columnLabels.length)  {  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(j,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	col  <  columnLabels.length)  {  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(j,  col);  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnLabels.size();    j++)    {    columnLabels[j    -    1][col++]    =    matrix.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
128	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(j,  col);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(j,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(j,  col);  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnLabels.size();    j++)    {    columnLabels[j    -    1][col++]    =    matrix.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
129	[BUG]  [BUGGY]  col  <  columnLabels.length)  {  for(int  j  =  0;  j  <  columns.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(j,  col);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  col  <  columnLabels.length)  {  for(int  j  =  0;  j  <  columns.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(j,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	col  <  columnLabels.length)  {  for(int  j  =  0;  j  <  columns.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(j,  col);  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnLabels.size();    j++)    {    columnLabels[j    -    1][col++]    =    matrix.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
130	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnLabels.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i  +  1));  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnLabels.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i  +  1));  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnLabels.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i  +  1));  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    ++j)    {    columnLabels.add((    int)columnLabels.get(i    +    1));    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
131	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  col.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i  +  1));  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  col.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i  +  1));  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  col.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i  +  1));  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    ++j)    {    columnLabels.add((    int)columnLabels.get(i    +    1));    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
132	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  table[j  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  table[j  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  table[j  -  1][col++]  =  table.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    columnLabels[j    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
133	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  if(columnLabels!=  null)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	if(columnLabels!=  null)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	  if(columnLabels!=    null)    {    matrix[i    -    1][col++]    =    column.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
134	[BUG]  [BUGGY]  int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(j,  col);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(j,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(j,  col);  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    columnLabels[j    -    1][col++]    =    matrix.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
135	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(columnLabels,  columnToDrop.size());  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  int  maxUlps  =  Math.max(columnLabels,  columnToDrop.size());  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	int  maxUlps  =  Math.max(columnLabels,  columnToDrop.size());	  int    maxUlps    =    Math.max(col,    columnsToDrop.size());    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
136	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  col[i  -  1][col++]  =  matrix.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  col[i  -  1][col++]  =  matrix.getEntry(i,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  col[i  -  1][col++]  =  matrix.getEntry(i,  col);  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    col[j    -    1][col++]    =    matrix.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
137	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  row[j  -  1][col++]  =  matrix.getEntry(j,  col);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  row[j  -  1][col++]  =  matrix.getEntry(j,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  row[j  -  1][col++]  =  matrix.getEntry(j,  col);  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    row[j    -    1][col++]    =    matrix.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
138	[BUG]  [BUGGY]  int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    columnLabels[j    -    1][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
139	[BUG]  [BUGGY]  matrix[i  -  1][col++]  =  this.tableau.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  matrix[i  -  1][col++]  =  this.tableau.getEntry(i,  j);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	matrix[i  -  1][col++]  =  this.tableau.getEntry(i,  j);	  if(columnLabels!=    null)    {    matrix[i    -    1][col++]    =    this.tableau.getEntry(i,    j);    }    else    {    this.tableau.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
140	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(columnLabels.size(),  col.length());  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  int  maxUlps  =  Math.max(columnLabels.size(),  col.length());  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	int  maxUlps  =  Math.max(columnLabels.size(),  col.length());	  int    maxUlps    =    Math.max(columnLabels.size(),    col.size());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
141	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(columnLabels.size(),  col.size()  -  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  int  maxUlps  =  Math.max(columnLabels.size(),  col.size()  -  1);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	int  maxUlps  =  Math.max(columnLabels.size(),  col.size()  -  1);	  int    maxUlps    =    Math.max(columnLabels.size(),    col.size());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
142	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columns.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(j));  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columns.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(j));  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columns.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(j));  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnLabels.size();    ++j)    {    columnLabels.add((    int)columnLabels.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
143	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  column[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  column[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  column[j  -  1][col++]  =  matrix.getEntry(i,  col);  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    row[j    -    1][col++]    =    matrix.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
144	[BUG]  [BUGGY]  ColumnLabels[j  -  1][col++]  =  column.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  ColumnLabels[j  -  1][col++]  =  column.getEntry(i,  col);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	ColumnLabels[j  -  1][col++]  =  column.getEntry(i,  col);	  ColumnLabels[j    -    1][col++]    =    matrix.getEntry(j,    col);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
145	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  col[i  -  1][col++]  =  matrix.getEntry(j,  col);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  col[i  -  1][col++]  =  matrix.getEntry(j,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  col[i  -  1][col++]  =  matrix.getEntry(j,  col);  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    col[j    -    1][col++]    =    matrix.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
146	[BUG]  [BUGGY]  this.tableau.setEntry(columnLabels[i  -  1][col++],  matrix,  null);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  this.tableau.setEntry(columnLabels[i  -  1][col++],  matrix,  null);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	this.tableau.setEntry(columnLabels[i  -  1][col++],  matrix,  null);	  this.tableau.setEntry(columnLabels[i    -    1][col++],    matrix);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
147	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(columnsToDrop,  columnsToDrop.size()  -  2);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  int  maxUlps  =  Math.max(columnsToDrop,  columnsToDrop.size()  -  2);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	int  maxUlps  =  Math.max(columnsToDrop,  columnsToDrop.size()  -  2);	  int    maxUlps    =    Math.max(columnsToDrop,    columnsToDrop.size());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
148	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(i,  col);  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    matrix[j    -    1][col++]    =    table.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
149	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[j  -  1][col++]  =  column.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[j  -  1][col++]  =  column.getEntry(i,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[j  -  1][col++]  =  column.getEntry(i,  col);  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    matrix[j    -    1][col++]    =    table.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
150	[BUG]  [BUGGY]  colLabels.add((  int)columnLabels.get(i),  this.maxUlps);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  colLabels.add((  int)columnLabels.get(i),  this.maxUlps);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	colLabels.add((  int)columnLabels.get(i),  this.maxUlps);	  colLabels.add((    int)columnLabels.get(i));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
151	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columns.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(j,  col);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columns.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(j,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columns.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(j,  col);  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnLabels.size();    j++)    {    columnLabels[j    -    1][col++]    =    matrix.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
152	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  this.columnsToDrop.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(j,  col);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  this.columnsToDrop.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(j,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  this.columnsToDrop.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(j,  col);  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    matrix[j    -    1][col++]    =    table.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
153	[BUG]  [BUGGY]  colLabels[j  -  1][col++]  =  matrix.getEntry(i,  j  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  colLabels[j  -  1][col++]  =  matrix.getEntry(i,  j  +  1);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	colLabels[j  -  1][col++]  =  matrix.getEntry(i,  j  +  1);	  colLabels[j    -    1][col++]    =    matrix.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
154	[BUG]  [BUGGY]  this.numArtificialVariables  =  i  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  this.numArtificialVariables  =  i  +  1;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	this.numArtificialVariables  =  i  +  1;	  this.numArtificialVariables    =    i;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
155	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  For(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	For(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[j  -  1][col++]  =  matrix.getEntry(i,  col);  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    matrix[j    -    1][col++]    =    matrix.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
156	[BUG]  [BUGGY]  this.tableau.setChangeListener(this);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  this.tableau.setChangeListener(this);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	this.tableau.setChangeListener(this);	  this.tableau.addChangeListener(this);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
157	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  For(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	For(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(i,  col);  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    matrix[j    -    1][col++]    =    table.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
158	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(j  -  1));  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(j  -  1));  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(j  -  1));  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    ++j)    {    columnLabels.add((    int)columnLabels.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
159	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(columnLabels,  columns.size()  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  int  maxUlps  =  Math.max(columnLabels,  columns.size()  -  1);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	int  maxUlps  =  Math.max(columnLabels,  columns.size()  -  1);	  int    maxUlps    =    Math.max(col,    columnLabels.size());    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
160	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  this.columnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(j,  col);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  this.columnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(j,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  this.columnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(j,  col);  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    matrix[i    -    1][col++]    =    table.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
161	[BUG]  [BUGGY]  this.numArtificialVariables  =  new  ArrayList  <  String>(8);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  this.numArtificialVariables  =  new  ArrayList  <  String>(8);  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	this.numArtificialVariables  =  new  ArrayList  <  String>(8);	  this.numArtificialVariables    =    new    ArrayList    <    String>();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
162	[BUG]  [BUGGY]  int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  col);  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    columnLabels[j    -    1][col++]    =    matrix.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
163	[BUG]  [BUGGY]  col  >  0)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  col);  }  else  {  this.tableau.addChangeListener(this);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  col  >  0)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  col);  }  else  {  this.tableau.addChangeListener(this);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	col  >  0)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  col);  }  else  {  this.tableau.addChangeListener(this);  }	  if(columnLabels!=    null)    {    matrix[i    -    1][col++]    =    column.getEntry(i,    col);    }    else    {    this.tableau.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
164	[BUG]  [BUGGY]  this.numArtificialVariables  =  new  double[NEGATIVE_VAR_COLUMN_LABEL];  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  this.numArtificialVariables  =  new  double[NEGATIVE_VAR_COLUMN_LABEL];  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	this.numArtificialVariables  =  new  double[NEGATIVE_VAR_COLUMN_LABEL];	  this.numArtificialVariables    =    NEGATIVE_VAR_COLUMN_LABEL;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
165	[BUG]  [BUGGY]  colLabels[i  -  1][col++]  =  table.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  colLabels[i  -  1][col++]  =  table.getEntry(i,  j);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	colLabels[i  -  1][col++]  =  table.getEntry(i,  j);	  colLabels[j    -    1][col++]    =    table.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
166	[BUG]  [BUGGY]  colLabels.add((  int)columnLabels.get(j  -  1));  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  colLabels.add((  int)columnLabels.get(j  -  1));  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	colLabels.add((  int)columnLabels.get(j  -  1));	  colLabels.add((    int)columnLabels.get(j));    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
167	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columns.size();  j++)  {  columnLabels[j  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columns.size();  j++)  {  columnLabels[j  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columns.size();  j++)  {  columnLabels[j  -  1][col++]  =  table.getEntry(i,  j);  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnLabels.size();    j++)    {    columnLabels[j    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
168	[BUG]  [BUGGY]  this.tableau.setEntry(columnLabels[i  -  1][col++],  NEGATIVE_VAR_COLUMN_LABEL,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  this.tableau.setEntry(columnLabels[i  -  1][col++],  NEGATIVE_VAR_COLUMN_LABEL,  DEFAULT_ULPS);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	this.tableau.setEntry(columnLabels[i  -  1][col++],  NEGATIVE_VAR_COLUMN_LABEL,  DEFAULT_ULPS);	  this.tableau.setEntry(columnLabels[i    -    1][col++],    NEGATIVE_VAR_COLUMN_LABEL);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
169	[BUG]  [BUGGY]  this.tableau.setEntry(columnLabels[i  -  1][col++],  NEGATIVE_VAR_COLUMN_LABEL,  column);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  this.tableau.setEntry(columnLabels[i  -  1][col++],  NEGATIVE_VAR_COLUMN_LABEL,  column);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	this.tableau.setEntry(columnLabels[i  -  1][col++],  NEGATIVE_VAR_COLUMN_LABEL,  column);	  this.tableau.setEntry(columnLabels[i    -    1][col++],    NEGATIVE_VAR_COLUMN_LABEL);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
170	[BUG]  [BUGGY]  ColumnLabels[i  -  1][col++]  =  table.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  ColumnLabels[i  -  1][col++]  =  table.getEntry(i,  j);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	ColumnLabels[i  -  1][col++]  =  table.getEntry(i,  j);	  ColumnLabels[j    -    1][col++]    =    table.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
171	[BUG]  [BUGGY]  ColumnLabels[j  -  1][col++]  =  table.getEntry(i,  column);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  ColumnLabels[j  -  1][col++]  =  table.getEntry(i,  column);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	ColumnLabels[j  -  1][col++]  =  table.getEntry(i,  column);	  ColumnLabels[j    -    1][col++]    =    table.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
172	[BUG]  [BUGGY]  this.numArtificialVariables  =  DEFAULT_ULPS?  col  :  NEGATIVE_VAR_COLUMN_LABEL;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  this.numArtificialVariables  =  DEFAULT_ULPS?  col  :  NEGATIVE_VAR_COLUMN_LABEL;  [BUGGY]      }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	this.numArtificialVariables  =  DEFAULT_ULPS?  col  :  NEGATIVE_VAR_COLUMN_LABEL;	  this.numArtificialVariables    =    col;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
173	[BUG]  [BUGGY]  ColumnLabels[j  -  1][col++]  =  table.getEntry(i,  j,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  ColumnLabels[j  -  1][col++]  =  table.getEntry(i,  j,  columnLabels);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	ColumnLabels[j  -  1][col++]  =  table.getEntry(i,  j,  columnLabels);	  ColumnLabels[j    -    1][col++]    =    table.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
174	[BUG]  [BUGGY]  colLabels.add((  int)columnLabels.get(col));  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  colLabels.add((  int)columnLabels.get(col));  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	colLabels.add((  int)columnLabels.get(col));	  colLabels.add((    int)columnLabels.get(j));    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
175	[BUG]  [BUGGY]  colLabels.add((  int)columnLabels.get(0,  j));  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  colLabels.add((  int)columnLabels.get(0,  j));  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	colLabels.add((  int)columnLabels.get(0,  j));	  colLabels.add((    int)columnLabels.get(j));    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
176	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columns.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columns.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columns.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  col);  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnLabels.size();    j++)    {    columnLabels[j    -    1][col++]    =    matrix.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
177	[BUG]  [BUGGY]  col  >  0)  {  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  col  >  0)  {  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	col  >  0)  {  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(i,  col);  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnLabels.size();    j++)    {    columnLabels[j    -    1][col++]    =    matrix.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
178	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  row[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  row[j  -  1][col++]  =  matrix.getEntry(i,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  row[j  -  1][col++]  =  matrix.getEntry(i,  col);  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    row[j    -    1][col++]    =    matrix.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
179	[BUG]  [BUGGY]  colLabels[j  -  1][col++]  =  matrix.getEntry(i,  columnLabels);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  colLabels[j  -  1][col++]  =  matrix.getEntry(i,  columnLabels);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	colLabels[j  -  1][col++]  =  matrix.getEntry(i,  columnLabels);	  colLabels[j    -    1][col++]    =    matrix.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
180	[BUG]  [BUGGY]  int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  columnLabels[j  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  columnLabels[j  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  columnLabels[j  -  1][col++]  =  table.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    columnLabels[j    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
181	[BUG]  [BUGGY]  int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  columnLabels.remove((  int)columnLabels.get(i));  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  columnLabels.remove((  int)columnLabels.get(i));  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  columnLabels.remove((  int)columnLabels.get(i));  }	  for(int    j    =    0;    j    <    columnLabels.size();    ++j)    {    columnLabels.remove((    int)columnLabels.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
182	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(col,  columnsToDrop.size()  -  2);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  int  maxUlps  =  Math.max(col,  columnsToDrop.size()  -  2);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	int  maxUlps  =  Math.max(col,  columnsToDrop.size()  -  2);	  int    maxUlps    =    Math.max(col,    columnsToDrop.size());    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
183	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columns.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(j,  col);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columns.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(j,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columns.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(j,  col);  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnLabels.size();    j++)    {    matrix[j    -    1][col++]    =    table.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
184	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(columnLabelsToDrop,  columnsToDrop.size());  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  int  maxUlps  =  Math.max(columnLabelsToDrop,  columnsToDrop.size());  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	int  maxUlps  =  Math.max(columnLabelsToDrop,  columnsToDrop.size());	  int    maxUlps    =    Math.max(columnsToDrop,    columnsToDrop.size());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
185	[BUG]  [BUGGY]  ColumnLabels[j  -  1][col++]  =  matrix.getEntry(i,  columnLabels);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  ColumnLabels[j  -  1][col++]  =  matrix.getEntry(i,  columnLabels);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	ColumnLabels[j  -  1][col++]  =  matrix.getEntry(i,  columnLabels);	  ColumnLabels[j    -    1][col++]    =    matrix.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
186	[BUG]  [BUGGY]  ColumnLabels[j  -  1][col++]  =  matrix.getEntry(i,  j,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  ColumnLabels[j  -  1][col++]  =  matrix.getEntry(i,  j,  DEFAULT_ULPS);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	ColumnLabels[j  -  1][col++]  =  matrix.getEntry(i,  j,  DEFAULT_ULPS);	  ColumnLabels[j    -    1][col++]    =    matrix.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
187	[BUG]  [BUGGY]  col  >  0)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  else  {  this.tableau.addChangeListener(this);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  col  >  0)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  else  {  this.tableau.addChangeListener(this);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	col  >  0)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  else  {  this.tableau.addChangeListener(this);  }	  if(columnLabels!=    null)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    col);    }    else    {    this.tableau.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
188	[BUG]  [BUGGY]  colLabels[j  -  1][col++]  =  table.getEntry(i,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  colLabels[j  -  1][col++]  =  table.getEntry(i,  columnLabels);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	colLabels[j  -  1][col++]  =  table.getEntry(i,  columnLabels);	  colLabels[j    -    1][col++]    =    table.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
189	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    matrix[i    -    1][col++]    =    table.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
190	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    j++)    {    matrix[i    -    1][col++]    =    table.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
191	[BUG]  [BUGGY]  this.tableau.clearChangeListener();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  this.tableau.clearChangeListener();  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	this.tableau.clearChangeListener();	  this.tableau.addChangeListener(this);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
192	[BUG]  [BUGGY]  this.tableau.setEntry(columnLabels[i  -  1][col++],  matrix,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  this.tableau.setEntry(columnLabels[i  -  1][col++],  matrix,  columnsToDrop);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	this.tableau.setEntry(columnLabels[i  -  1][col++],  matrix,  columnsToDrop);	  this.tableau.setEntry(columnLabels[i    -    1][col++],    matrix);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
193	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(columnLabels.size(),  matrix.size());  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  int  maxUlps  =  Math.max(columnLabels.size(),  matrix.size());  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	int  maxUlps  =  Math.max(columnLabels.size(),  matrix.size());	  int    maxUlps    =    Math.max(columnLabels.size(),    col.size());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
194	[BUG]  [BUGGY]  col  >  0)  {  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(j,  col);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  col  >  0)  {  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(j,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	col  >  0)  {  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(j,  col);  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnLabels.size();    j++)    {    columnLabels[j    -    1][col++]    =    matrix.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
195	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columns.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(j,  col);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columns.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(j,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  columns.size();  j++)  {  columnLabels[j  -  1][col++]  =  matrix.getEntry(j,  col);  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnLabels.size();    j++)    {    columnLabels[j    -    1][col++]    =    matrix.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
196	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i  -  1));  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i  -  1));  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columnsToDrop.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i  -  1));  }	  for(int    j    =    0;    j    <    columnsToDrop.size();    ++j)    {    columnLabels.add((    int)columnLabels.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
197	[BUG]  [BUGGY]  int  maxUlps  =  Math.max(col,  columnLabels.size()  -  2);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  int  maxUlps  =  Math.max(col,  columnLabels.size()  -  2);  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	int  maxUlps  =  Math.max(col,  columnLabels.size()  -  2);	  int    maxUlps    =    Math.max(col,    columnLabels.size());    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
198	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  rowsToDrop.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i  +  1));  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  rowsToDrop.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i  +  1));  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  rowsToDrop.size();  ++j)  {  columnLabels.add((  int)columnLabels.get(i  +  1));  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    columnsToDrop.size();    ++j)    {    columnLabels.add((    int)columnLabels.get(i    +    1));    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
199	[BUG]  [BUGGY]  colLabels.add((  int)columnLabels.get(i).doubleValue());  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  colLabels.add((  int)columnLabels.get(i).doubleValue());  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	colLabels.add((  int)columnLabels.get(i).doubleValue());	  colLabels.add((    int)columnLabels.get(i));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
200	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columns.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);      [BUGGY]  for(int  j  =  0;  j  <  columns.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	for(int  j  =  0;  j  <  columns.size();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(i,  col);  }	  for(int    j    =    0;    j    <    columnLabels.size();    j++)    {    matrix[j    -    1][col++]    =    table.getEntry(j,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
