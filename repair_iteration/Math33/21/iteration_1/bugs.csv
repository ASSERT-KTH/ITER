bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    int  maxUlps  =  columnsToDrop.size();  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  [BUGGY]    int  maxUlps  =  columnsToDrop.size();  [BUGGY]  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	346	346	1	replace	    int  maxUlps  =  columnsToDrop.size();		non-compiled	[CE]  illegal  start  of  expression	42	None	add
2	[BUG]  [BUGGY]    ColumnsToDrop.add(col);  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  [BUGGY]    ColumnsToDrop.add(col);  [BUGGY]  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	346	346	1	replace	    ColumnsToDrop.add(col);		non-compiled	[CE]  illegal  start  of  expression	42	None	add
3	[BUG]  [BUGGY]    ColumnsToDrop.remove(col);  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  [BUGGY]    ColumnsToDrop.remove(col);  [BUGGY]  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	346	346	1	replace	    ColumnsToDrop.remove(col);		non-compiled	[CE]  illegal  start  of  expression	42	None	add
4	[BUG]  [BUGGY]    ColumnsToDrop.clear();  [CE]  illegal  start  of  expression  [FE]          AssertionError  [CONTEXT]  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  [BUGGY]    ColumnsToDrop.clear();  [BUGGY]  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	346	346	1	replace	    ColumnsToDrop.clear();		non-compiled	[CE]  illegal  start  of  expression	42	None	add
5	[BUG]  [BUGGY]    int  maxUlps  =  getMaximumUlps();  [CE]  illegal  start  of  expression  [FE]            AssertionError  [CONTEXT]  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  [BUGGY]    int  maxUlps  =  getMaximumUlps();  [BUGGY]  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	346	346	1	replace	    int  maxUlps  =  getMaximumUlps();		non-compiled	[CE]  illegal  start  of  expression	42	None	add
6	[BUG]  [BUGGY]  if  (getBasicRow(col)!=  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  [BUGGY]  if  (getBasicRow(col)!=  null)  {  [BUGGY]  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	346	346	1	replace	if  (getBasicRow(col)!=  null)  {	if  (getBasicRow(col)  ==  null)  {  	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
7	[BUG]  [BUGGY]  if  (getBasicRow(col)  ==  null  &&  columnsToDrop.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  [BUGGY]  if  (getBasicRow(col)  ==  null  &&  columnsToDrop.size()  >  0)  {  [BUGGY]  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	346	346	1	replace	if  (getBasicRow(col)  ==  null  &&  columnsToDrop.size()  >  0)  {	if  (getBasicRow(col)  ==  null)  {  	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
8	[BUG]  [BUGGY]  if  (getBasicRow(col)  ==  null  &&  col  <  =  DEFAULT_ULPS)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  [BUGGY]  if  (getBasicRow(col)  ==  null  &&  col  <  =  DEFAULT_ULPS)  {  [BUGGY]  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	346	346	1	replace	if  (getBasicRow(col)  ==  null  &&  col  <  =  DEFAULT_ULPS)  {	if  (getBasicRow(col)  ==  null)  {  	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
9	[BUG]  [BUGGY]  if(col  <  =  0  ||  getBasicRow(col)  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  [BUGGY]  if(col  <  =  0  ||  getBasicRow(col)  ==  null)  {  [BUGGY]  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	346	346	1	replace	if(col  <  =  0  ||  getBasicRow(col)  ==  null)  {	if  (getBasicRow(col)  ==  null)  {  	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
10	[BUG]  [BUGGY]  if(col  <  =  0  ||  getBasicRow(col)!=  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  [BUGGY]  if(col  <  =  0  ||  getBasicRow(col)!=  null)  {  [BUGGY]  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	346	346	1	replace	if(col  <  =  0  ||  getBasicRow(col)!=  null)  {	if  (getBasicRow(col)  ==  null)  {  	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
11	[BUG]  [BUGGY]  if(col  <  =  DEFAULT_ULPS)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  [BUGGY]  if(col  <  =  DEFAULT_ULPS)  {  [BUGGY]  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	346	346	1	replace	if(col  <  =  DEFAULT_ULPS)  {	if  (getBasicRow(col)  ==  null)  {  	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
12	[BUG]  [BUGGY]  if(getBasicRow(col)!=  col)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  [BUGGY]  if(getBasicRow(col)!=  col)  {  [BUGGY]  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	346	346	1	replace	if(getBasicRow(col)!=  col)  {	if  (getBasicRow(col)  ==  null)  {  	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
13	[BUG]  [BUGGY]    Integer  column  =  columnsToDrop.get(i);  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  [BUGGY]    Integer  column  =  columnsToDrop.get(i);  [BUGGY]  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	346	346	1	replace	    Integer  column  =  columnsToDrop.get(i);		non-compiled	[CE]  illegal  start  of  expression	42	None	add
14	[BUG]  [BUGGY]    Integer  column  =  columnsToDrop.get(col);  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  [BUGGY]    Integer  column  =  columnsToDrop.get(col);  [BUGGY]  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	346	346	1	replace	    Integer  column  =  columnsToDrop.get(col);		non-compiled	[CE]  illegal  start  of  expression	42	None	add
15	[BUG]  [BUGGY]    Integer  column  =  columnsToDrop.size();  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  [BUGGY]    Integer  column  =  columnsToDrop.size();  [BUGGY]  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	346	346	1	replace	    Integer  column  =  columnsToDrop.size();		non-compiled	[CE]  illegal  start  of  expression	42	None	add
