bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(colIndex  >=  NEGATIVE_VAR_COLUMN_LABEL  ||  colIndex  >=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  >=  NEGATIVE_VAR_COLUMN_LABEL  ||  colIndex  >=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  >=  NEGATIVE_VAR_COLUMN_LABEL  ||  colIndex  >=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }	  if(colIndex    >=    colColumn    ||    colIndex    >=    NEGATIVE_VAR_COLUMN_LABEL)    {    continue;    }    	non-compiled	[CE]  ')'  expected	91	None	replace
2	[BUG]  [BUGGY]  if(colIndex  >=  colColumn  &&  colIndex  >=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  >=  colColumn  &&  colIndex  >=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  >=  colColumn  &&  colIndex  >=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }	  if(colIndex    >=    colColumn    ||    colIndex    >=    NEGATIVE_VAR_COLUMN_LABEL)    {    continue;    }    	non-compiled	[CE]  ')'  expected	91	None	replace
3	[BUG]  [BUGGY]  if(colIndex  >=  0  ||  colIndex  >=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  >=  0  ||  colIndex  >=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  >=  0  ||  colIndex  >=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }	  if(colIndex    >=    colColumn    ||    colIndex    >=    NEGATIVE_VAR_COLUMN_LABEL)    {    continue;    }    	non-compiled	[CE]  ')'  expected	91	None	replace
4	[BUG]  [BUGGY]  if(colIndex  >=  colVarColumn  ||  colIndex  >=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  >=  colVarColumn  ||  colIndex  >=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  >=  colVarColumn  ||  colIndex  >=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }	  if(colIndex    >=    colColumn    ||    colIndex    >=    NEGATIVE_VAR_COLUMN_LABEL)    {    continue;    }    	non-compiled	[CE]  ')'  expected	91	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)  ==  continue;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)  ==  continue;  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)  ==  continue;	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow)    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow)    	non-compiled	[CE]  ')'  expected	31	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)!=  continue;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)!=  continue;  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)!=  continue;	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow)    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)  ==  continue;  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)  ==  continue;  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)  ==  continue;	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow)    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue	  for(int    i    =    0;    i    <    columns.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  ';'  expected	11	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue	  for(int    i    =    0;    i    <    columns.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  ';'  expected	11	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue	  for(int    i    =    0;    i    <    columns.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  ';'  expected	11	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  if(basicRows[i]!=  0)  {  continue;  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  if(basicRows[i]!=  0)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.length;  i++)  {  if(basicRows[i]!=  0)  {  continue;  }	  for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    if(basicRows[i]!=    0)    {    continue;    }    	non-compiled	[CE]  ')'  expected	79	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  if(basicRows[i]  ==  0)  {  continue;  }  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  if(basicRows[i]  ==  0)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.length;  i++)  {  if(basicRows[i]  ==  0)  {  continue;  }	  for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    if(basicRows[i]!=    0)    {    continue;    }    	non-compiled	[CE]  ')'  expected	79	None	replace
14	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  columns.length;  i++)  {  if(basicRows[i]!=  0)  {  continue;  }  [CE]  '.class'  expected  [FE]                            AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  For(int  i  =  0;  i  <  columns.length;  i++)  {  if(basicRows[i]!=  0)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	For(int  i  =  0;  i  <  columns.length;  i++)  {  if(basicRows[i]!=  0)  {  continue;  }	  for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    if(basicRows[i]!=    0)    {    continue;    }    	non-compiled	[CE]  '.class'  expected	79	None	replace
15	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  columns.length;  i++)  {  if(basicRows[i]  ==  0)  {  continue;  }  [CE]  '.class'  expected  [FE]                              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  For(int  i  =  0;  i  <  columns.length;  i++)  {  if(basicRows[i]  ==  0)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	For(int  i  =  0;  i  <  columns.length;  i++)  {  if(basicRows[i]  ==  0)  {  continue;  }	  for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    if(basicRows[i]!=    0)    {    continue;    }    	non-compiled	[CE]  '.class'  expected	79	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicR  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicR  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicR	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.equals(basicR    	non-compiled	[CE]  ')'  expected	68	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicR  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicR  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicR	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.equals(basicR    	non-compiled	[CE]  ')'  expected	68	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicR  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicR  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicR	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.equals(basicR    	non-compiled	[CE]  ')'  expected	68	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    	non-compiled	[CE]  ')'  expected	50	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    	non-compiled	[CE]  ')'  expected	50	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    	non-compiled	[CE]  ')'  expected	50	None	replace
22	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  [CE]  ')'  expected  [FE]                            AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    	non-compiled	[CE]  ')'  expected	50	None	replace
23	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  For(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	For(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  continue	  For(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  '.class'  expected	89	None	replace
24	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  For(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	For(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  continue	  For(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  '.class'  expected	89	None	replace
25	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow)  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  For(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow)  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	For(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow)	  For(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  '.class'  expected	89	None	replace
26	[BUG]  [BUGGY]  colIndex  =  colIndex  >  0?  getColumnIndex(colIndex):  null;  [CE]  ')'  expected  [FE]        OutOfRangeException      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  colIndex  =  colIndex  >  0?  getColumnIndex(colIndex):  null;  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	colIndex  =  colIndex  >  0?  getColumnIndex(colIndex):  null;	  if(colIndex    >    0)    {    continue;    }    	non-compiled	[CE]  ')'  expected	40	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  continue	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  ';'  expected	1	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow)  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow)  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow)	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  ')'  expected	1	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  continue	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  ';'  expected	1	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {	  for(int    i    =    0;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow))    {    	non-compiled	[CE]  ')'  expected	8	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow)  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow)  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow)	  for(int    i    =    0;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow))    {    	non-compiled	[CE]  ')'  expected	8	None	replace
32	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  [CE]  '.class'  expected  [FE]                          AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  For(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	For(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {	  for(int    i    =    0;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow))    {    	non-compiled	[CE]  '.class'  expected	8	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicR  [CE]  ')'  expected  [FE]                            AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicR  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicR	  for(int    i    =    0;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow))    {    	non-compiled	[CE]  ')'  expected	8	None	replace
34	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue	  for(int    i    =    0;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow))    {    continue;    	non-compiled	[CE]  ';'  expected	6	None	replace
35	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue;  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue;	  for(int    i    =    0;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow))    {    continue;    	non-compiled	[CE]  ')'  expected	6	None	replace
36	[BUG]  [BUGGY]  if(colIndex  <  DEFAULT_ULPS)  {  continue;  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  <  DEFAULT_ULPS)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  <  DEFAULT_ULPS)  {  continue;  }	  if(colIndex    <    =    DEFAULT_ULPS)    {    continue;    }    	non-compiled	[CE]  ')'  expected	25	None	replace
37	[BUG]  [BUGGY]  if(colIndex  >=  DEFAULT_ULPS)  {  continue;  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  >=  DEFAULT_ULPS)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  >=  DEFAULT_ULPS)  {  continue;  }	  if(colIndex    <    =    DEFAULT_ULPS)    {    continue;    }    	non-compiled	[CE]  ')'  expected	25	None	replace
38	[BUG]  [BUGGY]  if(colIndex  ==  DEFAULT_ULPS)  {  continue;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  ==  DEFAULT_ULPS)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  ==  DEFAULT_ULPS)  {  continue;  }	  if(colIndex    <    =    DEFAULT_ULPS)    {    continue;    }    	non-compiled	[CE]  ')'  expected	25	None	replace
39	[BUG]  [BUGGY]  int  colIndex  =  columnLabels.indexOf( "x   "  +  i);  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  int  colIndex  =  columnLabels.indexOf( "x   "  +  i);  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	int  colIndex  =  columnLabels.indexOf( "x   "  +  i);	  if(colIndex    ==    colIndex)    {    continue;    }    if(colIndex    ==    colIndex)    {    continue;    }    	non-compiled	[CE]  ')'  expected	54	None	replace
40	[BUG]  [BUGGY]  Integer  colIndex  =  getColumnIndex(colIndex);  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  Integer  colIndex  =  getColumnIndex(colIndex);  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	Integer  colIndex  =  getColumnIndex(colIndex);	  if(colIndex    ==    colIndex)    {    continue;    }    if(colIndex    ==    colIndex)    {    continue;    }    	non-compiled	[CE]  ')'  expected	54	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.equals(basicRow    	non-compiled	[CE]  ')'  expected	48	None	replace
42	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.equals(basicRow    	non-compiled	[CE]  ')'  expected	48	None	replace
43	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.equals(basicRow    	non-compiled	[CE]  ')'  expected	48	None	replace
44	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(bas  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(bas  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(bas	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.contains(bas    	non-compiled	[CE]  ')'  expected	74	None	replace
45	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.contains(bas    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
46	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(bas  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(bas  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(bas	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.contains(bas    	non-compiled	[CE]  ')'  expected	74	None	replace
47	[BUG]  [BUGGY]  if(colIndex!=  NEGATIVE_VAR_COLUMN_LABEL  ||  colIndex  >=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex!=  NEGATIVE_VAR_COLUMN_LABEL  ||  colIndex  >=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex!=  NEGATIVE_VAR_COLUMN_LABEL  ||  colIndex  >=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }	  if(colIndex!=    colColumn    ||    colIndex!=    NEGATIVE_VAR_COLUMN_LABEL)    {    continue;    }    	non-compiled	[CE]  ')'  expected	94	None	replace
48	[BUG]  [BUGGY]  if(colIndex!=  colColumn  &&  colIndex!=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex!=  colColumn  &&  colIndex!=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex!=  colColumn  &&  colIndex!=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }	  if(colIndex!=    colColumn    ||    colIndex!=    NEGATIVE_VAR_COLUMN_LABEL)    {    continue;    }    	non-compiled	[CE]  ')'  expected	94	None	replace
49	[BUG]  [BUGGY]  if(colIndex  >=  NEGATIVE_VAR_COLUMN_LABEL  ||  colIndex!=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  >=  NEGATIVE_VAR_COLUMN_LABEL  ||  colIndex!=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  >=  NEGATIVE_VAR_COLUMN_LABEL  ||  colIndex!=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }	  if(colIndex!=    colColumn    ||    colIndex!=    NEGATIVE_VAR_COLUMN_LABEL)    {    continue;    }    	non-compiled	[CE]  ')'  expected	94	None	replace
50	[BUG]  [BUGGY]  if(colIndex!=  NEGATIVE_VAR_COLUMN_LABEL  ||  colIndex!=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex!=  NEGATIVE_VAR_COLUMN_LABEL  ||  colIndex!=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex!=  NEGATIVE_VAR_COLUMN_LABEL  ||  colIndex!=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }	  if(colIndex!=    colColumn    ||    colIndex!=    NEGATIVE_VAR_COLUMN_LABEL)    {    continue;    }    	non-compiled	[CE]  ')'  expected	94	None	replace
51	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.equals    	non-compiled	[CE]  ')'  expected	67	None	replace
52	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals  ==  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals  ==  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals  ==	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.equals    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
53	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.equals    	non-compiled	[CE]  ')'  expected	67	None	replace
54	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  For(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	For(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {	  for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow))    {    	non-compiled	[CE]  '.class'  expected	34	None	replace
55	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicR  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicR  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicR	  for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow))    {    	non-compiled	[CE]  ')'  expected	34	None	replace
56	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue;  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue;  }  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue;  }	  for(int    i    =    0;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow))    {    continue;    }    	non-compiled	[CE]  ')'  expected	52	None	replace
57	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basicR  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basicR  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basicR	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(basicR    	non-compiled	[CE]  ')'  expected	87	None	replace
58	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basicR  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basicR  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basicR	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(basicR    	non-compiled	[CE]  ')'  expected	87	None	replace
59	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basicR  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basicR  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basicR	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(basicR    	non-compiled	[CE]  ')'  expected	87	None	replace
60	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.contains(bas  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.contains(bas  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.contains(bas	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)basicRows.get(i);    if(basicRow!=    null    &&    basicRow.contains(bas    	non-compiled	[CE]  ')'  expected	99	None	replace
61	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.contains(bas  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.contains(bas  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.contains(bas	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)basicRows.get(i);    if(basicRow!=    null    &&    basicRow.contains(bas    	non-compiled	[CE]  ')'  expected	99	None	replace
62	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)basicRows.get(i);    if(basicRow!=    null    &&    basicRow.contains(bas    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
63	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnRows.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.contains(bas  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnRows.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.contains(bas  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnRows.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.contains(bas	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)basicRows.get(i);    if(basicRow!=    null    &&    basicRow.contains(bas    	non-compiled	[CE]  ')'  expected	99	None	replace
64	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(bas  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(bas  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(bas	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.contains(bas    	non-compiled	[CE]  ')'  expected	70	None	replace
65	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.contains(bas    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
66	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(bas  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(bas  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(bas	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.contains(bas    	non-compiled	[CE]  ')'  expected	70	None	replace
67	[BUG]  [BUGGY]  if(colIndex  >=  0)  {  if(colIndex  ==  colIndex)  {  continue;  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  >=  0)  {  if(colIndex  ==  colIndex)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  >=  0)  {  if(colIndex  ==  colIndex)  {  continue;  }	  if(colIndex    ==    colIndex)    {    continue;    }    if(colIndex!=    colIndex)    {    continue;    }    	non-compiled	[CE]  ')'  expected	56	None	replace
68	[BUG]  [BUGGY]  if(colIndex  ==  0)  {  if(colIndex  ==  colIndex)  {  continue;  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  ==  0)  {  if(colIndex  ==  colIndex)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  ==  0)  {  if(colIndex  ==  colIndex)  {  continue;  }	  if(colIndex    ==    colIndex)    {    continue;    }    if(colIndex!=    colIndex)    {    continue;    }    	non-compiled	[CE]  ')'  expected	56	None	replace
69	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue;  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue;  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue;	  for(int    i    =    0;    i    <    columns.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    continue;    	non-compiled	[CE]  ')'  expected	12	None	replace
70	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue;  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue;  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue;	  for(int    i    =    0;    i    <    columns.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    continue;    	non-compiled	[CE]  ')'  expected	12	None	replace
71	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue;  [CE]  ')'  expected  [FE]                            AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue;  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue;	  for(int    i    =    0;    i    <    columns.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    continue;    	non-compiled	[CE]  ')'  expected	12	None	replace
72	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow.contains(basicRow))  {  continue;  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow.contains(basicRow))  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow.contains(basicRow))  {  continue;  }	  for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow.contains(basicRow))    {    continue;    }    	non-compiled	[CE]  ')'  expected	36	None	replace
73	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow.contains(basicRow))  {  continue  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow.contains(basicRow))  {  continue	  for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow.contains(basicRow))    {    continue;    }    	non-compiled	[CE]  ';'  expected	36	None	replace
74	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow.contains(basicRow))  {  continue;  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow.contains(basicRow))  {  continue;  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow.contains(basicRow))  {  continue;	  for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow.contains(basicRow))    {    continue;    }    	non-compiled	[CE]  ')'  expected	36	None	replace
75	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  baseRow  =  getBasicMatrix(i);  if(basicRow.contains(basicRow))  {  continue;  }  [CE]  ')'  expected  [FE]                            AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  baseRow  =  getBasicMatrix(i);  if(basicRow.contains(basicRow))  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  baseRow  =  getBasicMatrix(i);  if(basicRow.contains(basicRow))  {  continue;  }	  for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow.contains(basicRow))    {    continue;    }    	non-compiled	[CE]  ')'  expected	36	None	replace
76	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow  [CE]  '.class'  expected  [FE]                        AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  For(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	For(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow	  for(int    i    =    1;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.equals(basicRow    	non-compiled	[CE]  '.class'  expected	51	None	replace
77	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(bas  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(bas  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(bas	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(bas    	non-compiled	[CE]  ')'  expected	82	None	replace
78	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(bas  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(bas  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(bas	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(bas    	non-compiled	[CE]  ')'  expected	82	None	replace
79	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(bas  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(bas  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(bas	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(bas    	non-compiled	[CE]  ')'  expected	82	None	replace
80	[BUG]  [BUGGY]  int  colIndex  =  coefficients.indexOf( "x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  int  colIndex  =  coefficients.indexOf( "x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	int  colIndex  =  coefficients.indexOf( "x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }	  int    colIndex    =    columnLabels.indexOf(   "x   "    +    i);    if(colIndex    <    0)    {    coefficients[i]    =    0;    }    	non-compiled	[CE]  ')'  expected	21	None	replace
81	[BUG]  [BUGGY]  int  colIndex  =  basicRows.indexOf( "x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  int  colIndex  =  basicRows.indexOf( "x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	int  colIndex  =  basicRows.indexOf( "x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }	  int    colIndex    =    columnLabels.indexOf(   "x   "    +    i);    if(colIndex    <    0)    {    coefficients[i]    =    0;    }    	non-compiled	[CE]  ')'  expected	21	None	replace
82	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basic  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basic  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basic	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(basic    	non-compiled	[CE]  ')'  expected	88	None	replace
83	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basic  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basic  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basic	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(basic    	non-compiled	[CE]  ')'  expected	88	None	replace
84	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basic  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basic  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basic	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(basic    	non-compiled	[CE]  ')'  expected	88	None	replace
85	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue;  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue;  }  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue;  }	  for(int    i    =    0;    i    <    columns.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    continue;    }    	non-compiled	[CE]  ')'  expected	10	None	replace
86	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(basic  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(basic  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(basic	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.contains(basic    	non-compiled	[CE]  ')'  expected	97	None	replace
87	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.contains(basic    	non-compiled	[CE]  ')'  expected	97	None	replace
88	[BUG]  [BUGGY]  if(i  <  =  colIndex)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(i  <  =  colIndex)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(i  <  =  colIndex)  {  continue;  }	  if(i    <    colIndex)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
89	[BUG]  [BUGGY]  if(i  <  colIndex  ||  colIndex  >  0)  {  continue;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(i  <  colIndex  ||  colIndex  >  0)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(i  <  colIndex  ||  colIndex  >  0)  {  continue;  }	  if(i    <    colIndex)    {    continue;    }    	non-compiled	[CE]  ')'  expected	95	None	replace
90	[BUG]  [BUGGY]  if(i  <  colIndex  ||  colIndex  <  0)  {  continue;  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(i  <  colIndex  ||  colIndex  <  0)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(i  <  colIndex  ||  colIndex  <  0)  {  continue;  }	  if(i    <    colIndex)    {    continue;    }    	non-compiled	[CE]  ')'  expected	95	None	replace
91	[BUG]  [BUGGY]  if(colIndex  <  0  ||  colIndex  >=  0)  {  continue;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  <  0  ||  colIndex  >=  0)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  <  0  ||  colIndex  >=  0)  {  continue;  }	  if(colIndex    <    0    ||    colIndex    >    0)    {    continue;    }    	non-compiled	[CE]  ')'  expected	24	None	replace
92	[BUG]  [BUGGY]  if(colIndex  <  0  ||  colIndex  ==  0)  {  continue;  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  <  0  ||  colIndex  ==  0)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  <  0  ||  colIndex  ==  0)  {  continue;  }	  if(colIndex    <    0    ||    colIndex    >    0)    {    continue;    }    	non-compiled	[CE]  ')'  expected	24	None	replace
93	[BUG]  [BUGGY]  colIndex  <  0  ||  colIndex  >  0)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  colIndex  <  0  ||  colIndex  >  0)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	colIndex  <  0  ||  colIndex  >  0)  {  continue;  }	  if(colIndex    <    0    ||    colIndex    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
94	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseR  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseR  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseR	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(baseR    	non-compiled	[CE]  ')'  expected	69	None	replace
95	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseR  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseR  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseR	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(baseR    	non-compiled	[CE]  ')'  expected	69	None	replace
96	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseR  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseR  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseR	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(baseR    	non-compiled	[CE]  ')'  expected	69	None	replace
97	[BUG]  [BUGGY]  int  colIndex  =  coefficients.indexOf( "x "  +  i);  if(colIndex  <  0)  {  continue;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  int  colIndex  =  coefficients.indexOf( "x "  +  i);  if(colIndex  <  0)  {  continue;  }  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	int  colIndex  =  coefficients.indexOf( "x "  +  i);  if(colIndex  <  0)  {  continue;  }	  int    colIndex    =    columnLabels.indexOf(   "x   "    +    i);    if(colIndex    <    0)    {    continue;    }    	non-compiled	[CE]  ')'  expected	29	None	replace
98	[BUG]  [BUGGY]  int  colIndex  =  basicRows.indexOf( "x "  +  i);  if(colIndex  <  0)  {  continue;  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  int  colIndex  =  basicRows.indexOf( "x "  +  i);  if(colIndex  <  0)  {  continue;  }  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	int  colIndex  =  basicRows.indexOf( "x "  +  i);  if(colIndex  <  0)  {  continue;  }	  int    colIndex    =    columnLabels.indexOf(   "x   "    +    i);    if(colIndex    <    0)    {    continue;    }    	non-compiled	[CE]  ')'  expected	29	None	replace
99	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basicRow  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basicRow  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basicRow	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(basicRow    	non-compiled	[CE]  ')'  expected	63	None	replace
100	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basicRow  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basicRow  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basicRow	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(basicRow    	non-compiled	[CE]  ')'  expected	63	None	replace
101	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basicRow  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basicRow  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basicRow	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(basicRow    	non-compiled	[CE]  ')'  expected	63	None	replace
102	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow)  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow)  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow)	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow)    	non-compiled	[CE]  ')'  expected	60	None	replace
103	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(basicR  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(basicR  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(basicR	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow)    	non-compiled	[CE]  ')'  expected	60	None	replace
104	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow)  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow)  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow)	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow)    	non-compiled	[CE]  ')'  expected	60	None	replace
105	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  if(basicRows[i]  ==  0)  {  basicRows[i]  =  0;  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  if(basicRows[i]  ==  0)  {  basicRows[i]  =  0;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  if(basicRows[i]  ==  0)  {  basicRows[i]  =  0;  }	  for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    if(basicRows[i]    ==    0)    {    basicRows[i]    =    0;    }    	non-compiled	[CE]  ')'  expected	78	None	replace
106	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  columnLabels.size();  i++)  {  if(basicRows[i]  ==  0)  {  basicRows[i]  =  0;  }  [CE]  '.class'  expected  [FE]                        AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  For(int  i  =  0;  i  <  columnLabels.size();  i++)  {  if(basicRows[i]  ==  0)  {  basicRows[i]  =  0;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	For(int  i  =  0;  i  <  columnLabels.size();  i++)  {  if(basicRows[i]  ==  0)  {  basicRows[i]  =  0;  }	  for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    if(basicRows[i]    ==    0)    {    basicRows[i]    =    0;    }    	non-compiled	[CE]  '.class'  expected	78	None	replace
107	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  if(basicRows[i]!=  0)  {  basicRows[i]  =  0;  }  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  if(basicRows[i]!=  0)  {  basicRows[i]  =  0;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  if(basicRows[i]!=  0)  {  basicRows[i]  =  0;  }	  for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    if(basicRows[i]    ==    0)    {    basicRows[i]    =    0;    }    	non-compiled	[CE]  ')'  expected	78	None	replace
108	[BUG]  [BUGGY]  int  colIndex  =  columnLabels.size();  [CE]  ')'  expected  [FE]                            AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  int  colIndex  =  columnLabels.size();  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	int  colIndex  =  columnLabels.size();	  for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    if(basicRows[i]    ==    0)    {    basicRows[i]    =    0;    }    	non-compiled	[CE]  ')'  expected	78	None	replace
109	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow))  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow))  {	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)baseRows.get(i);    if(baseRow.contains(basicRow))    {    	non-compiled	[CE]  ')'  expected	19	None	replace
110	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  baseRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow))  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  baseRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  baseRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow))  {	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)baseRows.get(i);    if(baseRow.contains(basicRow))    {    	non-compiled	[CE]  ')'  expected	19	None	replace
111	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow))  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow))  {	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)baseRows.get(i);    if(baseRow.contains(basicRow))    {    	non-compiled	[CE]  ')'  expected	19	None	replace
112	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow)  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow)  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow)	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)baseRows.get(i);    if(baseRow.contains(basicRow))    {    	non-compiled	[CE]  ')'  expected	19	None	replace
113	[BUG]  [BUGGY]  colIndex  =  i;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  colIndex  =  i;  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	colIndex  =  i;	  colIndex    =    colIndex;    	non-compiled	[CE]  ')'  expected	14	None	replace
114	[BUG]  [BUGGY]  colIndex  -=  colIndex;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  colIndex  -=  colIndex;  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	colIndex  -=  colIndex;	  colIndex    =    colIndex;    	non-compiled	[CE]  ')'  expected	14	None	replace
115	[BUG]  [BUGGY]  colIndex  =  0;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  colIndex  =  0;  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	colIndex  =  0;	  colIndex    =    colIndex;    	non-compiled	[CE]  ')'  expected	14	None	replace
116	[BUG]  [BUGGY]  colIndex  =  DEFAULT_ULPS;  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  colIndex  =  DEFAULT_ULPS;  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	colIndex  =  DEFAULT_ULPS;	  colIndex    =    colIndex;    	non-compiled	[CE]  ')'  expected	14	None	replace
117	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(bas  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(bas  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(bas	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.equals(bas    	non-compiled	[CE]  ')'  expected	66	None	replace
118	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(bas  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(bas  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(bas	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.equals(bas    	non-compiled	[CE]  ')'  expected	66	None	replace
119	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(bas  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(bas  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(bas	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.equals(bas    	non-compiled	[CE]  ')'  expected	66	None	replace
120	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  continue	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)baseColumns.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  ';'  expected	81	None	replace
121	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  continue	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)baseColumns.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  ';'  expected	81	None	replace
122	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  baseColumns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow)  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  baseColumns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow)  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  baseColumns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow)	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)baseColumns.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  ')'  expected	81	None	replace
123	[BUG]  [BUGGY]  colIndex  >  colIndex)  {  continue;  }  [CE]  not  a  statement  [FE]        OutOfRangeException      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  colIndex  >  colIndex)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	colIndex  >  colIndex)  {  continue;  }	  if(colIndex    >    colIndex)    {    continue;    }    if(colIndex    >    colIndex)    {    continue;    }    	non-compiled	[CE]  not  a  statement	45	None	replace
124	[BUG]  [BUGGY]  if(colIndex  >=  colColumn)  {  if(colIndex  >  colIndex)  {  continue;  }  [CE]  ')'  expected  [FE]          OutOfRangeException      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  >=  colColumn)  {  if(colIndex  >  colIndex)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  >=  colColumn)  {  if(colIndex  >  colIndex)  {  continue;  }	  if(colIndex    >    colIndex)    {    continue;    }    if(colIndex    >    colIndex)    {    continue;    }    	non-compiled	[CE]  ')'  expected	45	None	replace
125	[BUG]  [BUGGY]  if(colIndex  <  =  colIndex)  {  continue;  }  else  if(colIndex  >  mostNegative)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]            OutOfRangeException      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  <  =  colIndex)  {  continue;  }  else  if(colIndex  >  mostNegative)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  <  =  colIndex)  {  continue;  }  else  if(colIndex  >  mostNegative)  {  continue;  }	  if(colIndex    >    colIndex)    {    continue;    }    if(colIndex    >    colIndex)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
126	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  1;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  1;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {	  for(int    i    =    1;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    	non-compiled	[CE]  ')'  expected	58	None	replace
127	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow.contains(basicRow))  {  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow.contains(basicRow))  {  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow.contains(basicRow))  {  }	  for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow.contains(basicRow))    {    }    	non-compiled	[CE]  ')'  expected	37	None	replace
128	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow.contains(basicRow))  {  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow.contains(basicRow))  {  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow.contains(basicRow))  {	  for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow.contains(basicRow))    {    }    	non-compiled	[CE]  ')'  expected	37	None	replace
129	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow.contains(basicRow)  [CE]  ')'  expected  [FE]                            AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow.contains(basicRow)  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow.contains(basicRow)	  for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow.contains(basicRow))    {    }    	non-compiled	[CE]  ')'  expected	37	None	replace
130	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i).if(basicRow.contains(basicRow))  {  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i).if(basicRow.contains(basicRow))  {  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i).if(basicRow.contains(basicRow))  {  }	  for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow.contains(basicRow))    {    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
131	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseRow  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseRow  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseRow	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(baseRow    	non-compiled	[CE]  ')'  expected	38	None	replace
132	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseRow  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseRow  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseRow	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(baseRow    	non-compiled	[CE]  ')'  expected	38	None	replace
133	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseRow  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseRow  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseRow	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(baseRow    	non-compiled	[CE]  ')'  expected	38	None	replace
134	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  columnLabels.size();  i++)  {  if(basicRows[i]!=  0)  {  basicRows[i]  =  0;  }  [CE]  '.class'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  For(int  i  =  0;  i  <  columnLabels.size();  i++)  {  if(basicRows[i]!=  0)  {  basicRows[i]  =  0;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	For(int  i  =  0;  i  <  columnLabels.size();  i++)  {  if(basicRows[i]!=  0)  {  basicRows[i]  =  0;  }	  for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    if(basicRows[i]!=    0)    {    basicRows[i]    =    0;    }    	non-compiled	[CE]  '.class'  expected	77	None	replace
135	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  if(basicRows[i]  >=  0)  {  basicRows[i]  =  0;  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  if(basicRows[i]  >=  0)  {  basicRows[i]  =  0;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  if(basicRows[i]  >=  0)  {  basicRows[i]  =  0;  }	  for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    if(basicRows[i]!=    0)    {    basicRows[i]    =    0;    }    	non-compiled	[CE]  ')'  expected	77	None	replace
136	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(basicR  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(basicR  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(basicR	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.contains(basicR    	non-compiled	[CE]  ')'  expected	61	None	replace
137	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(basicR  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(basicR  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(basicR	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.contains(basicR    	non-compiled	[CE]  ')'  expected	61	None	replace
138	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
139	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
140	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicVariable  baseRow  =(BasicVariable)bases.get(i);  if(baseRow.contains(basicRow))  {  continue;  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicVariable  baseRow  =(BasicVariable)bases.get(i);  if(baseRow.contains(basicRow))  {  continue;  }  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicVariable  baseRow  =(BasicVariable)bases.get(i);  if(baseRow.contains(basicRow))  {  continue;  }	  for(int    i    =    0;    i    <    columns.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)bases.get(i);    if(baseRow.contains(basicRow))    {    continue;    }    	non-compiled	[CE]  ')'  expected	93	None	replace
141	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  baseRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)bases.get(i);  if(baseRow.contains(basicRow))  {  continue;  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  baseRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)bases.get(i);  if(baseRow.contains(basicRow))  {  continue;  }  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  baseRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)bases.get(i);  if(baseRow.contains(basicRow))  {  continue;  }	  for(int    i    =    0;    i    <    columns.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)bases.get(i);    if(baseRow.contains(basicRow))    {    continue;    }    	non-compiled	[CE]  ')'  expected	93	None	replace
142	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  baseRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)bases.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  baseRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)bases.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  baseRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)bases.get(i);  if(baseRow.contains(basicRow))  {  continue	  for(int    i    =    0;    i    <    columns.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)bases.get(i);    if(baseRow.contains(basicRow))    {    continue;    }    	non-compiled	[CE]  ';'  expected	93	None	replace
143	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  For(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	For(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue	  for(int    i    =    0;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow))    {    continue    	non-compiled	[CE]  '.class'  expected	5	None	replace
144	[BUG]  [BUGGY]  if(colIndex!=  colColIndex)  {  continue;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex!=  colColIndex)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex!=  colColIndex)  {  continue;  }	  if(colIndex    >=    colColIndex)    {    continue;    }    	non-compiled	[CE]  ')'  expected	41	None	replace
145	[BUG]  [BUGGY]  if(colIndex  ==  colColIndex)  {  continue;  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  ==  colColIndex)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  ==  colColIndex)  {  continue;  }	  if(colIndex    >=    colColIndex)    {    continue;    }    	non-compiled	[CE]  ')'  expected	41	None	replace
146	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)baseColumns.get(i);    if(baseRow.contains(basicRow))    {    	non-compiled	[CE]  ')'  expected	72	None	replace
147	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  baseColumns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  baseColumns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  baseColumns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)baseColumns.get(i);    if(baseRow.contains(basicRow))    {    	non-compiled	[CE]  ')'  expected	72	None	replace
148	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)baseColumns.get(i);    if(baseRow.contains(basicRow))    {    	non-compiled	[CE]  ')'  expected	72	None	replace
149	[BUG]  [BUGGY]  colIndex  +=  coefficients.length;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  colIndex  +=  coefficients.length;  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	colIndex  +=  coefficients.length;	  colIndex    +=    colIndex;    	non-compiled	[CE]  ')'  expected	42	None	replace
150	[BUG]  [BUGGY]  colIndex  +=  i;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  colIndex  +=  i;  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	colIndex  +=  i;	  colIndex    +=    colIndex;    	non-compiled	[CE]  ')'  expected	42	None	replace
151	[BUG]  [BUGGY]  colIndex  +=  coefficients[i];  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  colIndex  +=  coefficients[i];  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	colIndex  +=  coefficients[i];	  colIndex    +=    colIndex;    	non-compiled	[CE]  ')'  expected	42	None	replace
152	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    	non-compiled	[CE]  ')'  expected	32	None	replace
153	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    	non-compiled	[CE]  ')'  expected	32	None	replace
154	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.contains    	non-compiled	[CE]  ')'  expected	71	None	replace
155	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.contains    	non-compiled	[CE]  ')'  expected	71	None	replace
156	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.contains    	non-compiled	[CE]  ')'  expected	71	None	replace
157	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)basicRows.get(i);    if(basicRow!=    null    &&    basicRow.equals(basicRow    	non-compiled	[CE]  ')'  expected	49	None	replace
158	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)basicRows.get(i);    if(basicRow!=    null    &&    basicRow.equals(basicRow    	non-compiled	[CE]  ')'  expected	49	None	replace
159	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnRows.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnRows.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnRows.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)basicRows.get(i);    if(basicRow!=    null    &&    basicRow.equals(basicRow    	non-compiled	[CE]  ')'  expected	49	None	replace
160	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)basicRows.get(i);    if(basicRow!=    null    &&    basicRow.equals(basicRow    	non-compiled	[CE]  ')'  expected	49	None	replace
161	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow.contains(basicRow))    {    	non-compiled	[CE]  ')'  expected	3	None	replace
162	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow.contains(basicRow))    {    	non-compiled	[CE]  ')'  expected	3	None	replace
163	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  For(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	For(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {	  for(int    i    =    1;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow.contains(basicRow))    {    	non-compiled	[CE]  '.class'  expected	20	None	replace
164	[BUG]  [BUGGY]  if(colIndex  ==  0)  {  if(colIndex  ==  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  ==  0)  {  if(colIndex  ==  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  ==  0)  {  if(colIndex  ==  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }	  if(colIndex    ==    colIndex)    {    continue;    }    If(colIndex    ==    colIndex)    {    continue;    }    	non-compiled	[CE]  ')'  expected	57	None	replace
165	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    	non-compiled	[CE]  ')'  expected	17	None	replace
166	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    	non-compiled	[CE]  ')'  expected	17	None	replace
167	[BUG]  [BUGGY]  if(colIndex  <  i)  {  continue;  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  <  i)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  <  i)  {  continue;  }	  if(colIndex    <    =    i)    {    continue;    }    	non-compiled	[CE]  ')'  expected	75	None	replace
168	[BUG]  [BUGGY]  if(colIndex  <  colColumn)  {  continue;  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  <  colColumn)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  <  colColumn)  {  continue;  }	  if(colIndex    <    =    colColumn)    {    continue;    }    	non-compiled	[CE]  ')'  expected	92	None	replace
169	[BUG]  [BUGGY]  if(colIndex  <  colColumn  ||  colIndex  <  =  DEFAULT_ULPS)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  <  colColumn  ||  colIndex  <  =  DEFAULT_ULPS)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  <  colColumn  ||  colIndex  <  =  DEFAULT_ULPS)  {  continue;  }	  if(colIndex    <    =    colColumn)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
170	[BUG]  [BUGGY]  colIndex  +=  colColumn.length;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  colIndex  +=  colColumn.length;  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	colIndex  +=  colColumn.length;	  if(colIndex    >=    colColumn.length)    {    continue;    }    	non-compiled	[CE]  ')'  expected	53	None	replace
171	[BUG]  [BUGGY]  colIndex  =  colColumn.length();  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  colIndex  =  colColumn.length();  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	colIndex  =  colColumn.length();	  if(colIndex    >=    colColumn.length)    {    continue;    }    	non-compiled	[CE]  ')'  expected	53	None	replace
172	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  '.class'  expected  [FE]                        AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  For(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	For(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue	  For(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  '.class'  expected	33	None	replace
173	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  '.class'  expected  [FE]                          AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  For(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	For(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue	  For(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  '.class'  expected	33	None	replace
174	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  '.class'  expected  [FE]                            AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  For(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	For(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue	  For(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  '.class'  expected	33	None	replace
175	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  For(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	For(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {	  For(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    	non-compiled	[CE]  '.class'  expected	59	None	replace
176	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  [CE]  '.class'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  For(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	For(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {	  For(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    	non-compiled	[CE]  '.class'  expected	59	None	replace
177	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  [CE]  '.class'  expected  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  For(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	For(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {	  For(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    	non-compiled	[CE]  '.class'  expected	59	None	replace
178	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  continue;  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  continue;  }  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  basicRows.size();  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  continue;  }	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    int    colIndex    =    columnLabels.indexOf(   "x   "    +    i);    if(colIndex    <    0)    {    continue;    }    	non-compiled	[CE]  ')'  expected	28	None	replace
179	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  continue;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  continue;  }  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  coefficients.size();  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  continue;  }	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    int    colIndex    =    columnLabels.indexOf(   "x   "    +    i);    if(colIndex    <    0)    {    continue;    }    	non-compiled	[CE]  ')'  expected	28	None	replace
180	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  int  colIndex  =  columns.indexOf( "x "  +  i);  if(colIndex  <  0)  {  continue;  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  int  colIndex  =  columns.indexOf( "x "  +  i);  if(colIndex  <  0)  {  continue;  }  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  basicRows.size();  i++)  {  int  colIndex  =  columns.indexOf( "x "  +  i);  if(colIndex  <  0)  {  continue;  }	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    int    colIndex    =    columnLabels.indexOf(   "x   "    +    i);    if(colIndex    <    0)    {    continue;    }    	non-compiled	[CE]  ')'  expected	28	None	replace
181	[BUG]  [BUGGY]  if(colIndex  ==  colColumn.length)  {  continue;  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  ==  colColumn.length)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  ==  colColumn.length)  {  continue;  }	  if(colIndex!=    colColumn.length)    {    continue;    }    	non-compiled	[CE]  ')'  expected	64	None	replace
182	[BUG]  [BUGGY]  if(colIndex  <  =  colIndex)  {  if(colIndex  >  colIndex)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]          OutOfRangeException      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  <  =  colIndex)  {  if(colIndex  >  colIndex)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  <  =  colIndex)  {  if(colIndex  >  colIndex)  {  continue;  }	  if(colIndex    >    colIndex)    {    continue;    }    If(colIndex    >    colIndex)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
183	[BUG]  [BUGGY]  if(colIndex  <  =  colIndex)  {  continue;  }  else  if(colIndex  >  colIndex)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]            OutOfRangeException      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  <  =  colIndex)  {  continue;  }  else  if(colIndex  >  colIndex)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  <  =  colIndex)  {  continue;  }  else  if(colIndex  >  colIndex)  {  continue;  }	  if(colIndex    >    colIndex)    {    continue;    }    If(colIndex    >    colIndex)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
184	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow)  ==  continue;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow)  ==  continue;  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow)  ==  continue;	  for(int    i    =    0;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow)    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
185	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow)  ==  continue  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow)  ==  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow)  ==  continue	  for(int    i    =    0;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow)    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
186	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow)  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  For(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow)  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	For(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow)	  for(int    i    =    0;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow)    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
187	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  if(basicRows[i]!=  0)  {  basicRows[i]  =  0;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  if(basicRows[i]!=  0)  {  basicRows[i]  =  0;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.length;  i++)  {  if(basicRows[i]!=  0)  {  basicRows[i]  =  0;  }	  for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    if(basicRows[i]!=    0)    {    basicRows[i]    =    0;    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
188	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  if(basicRows[i]  ==  0)  {  basicRows[i]  =  0;  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  if(basicRows[i]  ==  0)  {  basicRows[i]  =  0;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.length;  i++)  {  if(basicRows[i]  ==  0)  {  basicRows[i]  =  0;  }	  for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    if(basicRows[i]!=    0)    {    basicRows[i]    =    0;    }    	non-compiled	[CE]  ')'  expected	76	None	replace
189	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  if(basicRows[i]  >=  0)  {  basicRows[i]  =  0;  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  if(basicRows[i]  >=  0)  {  basicRows[i]  =  0;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.length;  i++)  {  if(basicRows[i]  >=  0)  {  basicRows[i]  =  0;  }	  for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    if(basicRows[i]!=    0)    {    basicRows[i]    =    0;    }    	non-compiled	[CE]  ')'  expected	76	None	replace
190	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)  ==  continue;  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)  ==  continue;  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)  ==  continue;	  for(int    i    =    0;    i    <    columns.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow)    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
191	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)  ==  continue;  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)  ==  continue;  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)  ==  continue;	  for(int    i    =    0;    i    <    columns.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow)    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
192	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)  ==  continue;  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)  ==  continue;  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)  ==  continue;	  for(int    i    =    0;    i    <    columns.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow)    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
193	[BUG]  [BUGGY]  if(colIndex  >=  colColumn  &&  colIndex  >=  0)  {  continue;  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  >=  colColumn  &&  colIndex  >=  0)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  >=  colColumn  &&  colIndex  >=  0)  {  continue;  }	  if(colIndex    >=    colColumn    ||    colIndex    >=    0)    {    continue;    }    	non-compiled	[CE]  ')'  expected	83	None	replace
194	[BUG]  [BUGGY]  if(colIndex  >=  colVarColumn  ||  colIndex  >=  0)  {  continue;  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  >=  colVarColumn  ||  colIndex  >=  0)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  >=  colVarColumn  ||  colIndex  >=  0)  {  continue;  }	  if(colIndex    >=    colColumn    ||    colIndex    >=    0)    {    continue;    }    	non-compiled	[CE]  ')'  expected	83	None	replace
195	[BUG]  [BUGGY]  if(colIndex  >=  colColumn  ||  colIndex  ==  0)  {  continue;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  >=  colColumn  ||  colIndex  ==  0)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  >=  colColumn  ||  colIndex  ==  0)  {  continue;  }	  if(colIndex    >=    colColumn    ||    colIndex    >=    0)    {    continue;    }    	non-compiled	[CE]  ')'  expected	83	None	replace
196	[BUG]  [BUGGY]  if(colIndex  >=  colColumn  ||  colIndex  >  0)  {  continue;  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  >=  colColumn  ||  colIndex  >  0)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  >=  colColumn  ||  colIndex  >  0)  {  continue;  }	  if(colIndex    >=    colColumn    ||    colIndex    >=    0)    {    continue;    }    	non-compiled	[CE]  ')'  expected	83	None	replace
197	[BUG]  [BUGGY]  colIndex  <  =  colIndex)  {  continue;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  colIndex  <  =  colIndex)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	colIndex  <  =  colIndex)  {  continue;  }	  if(colIndex    <    colIndex)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
198	[BUG]  [BUGGY]  int  colIndex  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  int  colIndex  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	int  colIndex  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);	  if(colIndex    <    colIndex)    {    continue;    }    	non-compiled	[CE]  ')'  expected	26	None	replace
199	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  basicRows.size();  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    int    colIndex    =    columnLabels.indexOf(   "x   "    +    i);    if(colIndex    <    0)    {    coefficients[i]    =    0;    }    	non-compiled	[CE]  ')'  expected	22	None	replace
200	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  int  colIndex  =  columnLabels.indexOf( ".x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  int  colIndex  =  columnLabels.indexOf( ".x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  basicRows.size();  i++)  {  int  colIndex  =  columnLabels.indexOf( ".x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    int    colIndex    =    columnLabels.indexOf(   "x   "    +    i);    if(colIndex    <    0)    {    coefficients[i]    =    0;    }    	non-compiled	[CE]  ')'  expected	22	None	replace
201	[BUG]  [BUGGY]  if(colIndex!=  -1)  {  continue;  }  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex!=  -1)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex!=  -1)  {  continue;  }	  if(colIndex    ==    -1)    {    continue;    }    	non-compiled	[CE]  ')'  expected	85	None	replace
202	[BUG]  [BUGGY]  if(colIndex!=  colVarColumn)  {  continue;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex!=  colVarColumn)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex!=  colVarColumn)  {  continue;  }	  if(colIndex    >=    colVarColumn)    {    continue;    }    	non-compiled	[CE]  ')'  expected	90	None	replace
203	[BUG]  [BUGGY]  if(i  >=  colIndex)  {  continue;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(i  >=  colIndex)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(i  >=  colIndex)  {  continue;  }	  if(colIndex    >=    i)    {    continue;    }    	non-compiled	[CE]  ')'  expected	65	None	replace
204	[BUG]  [BUGGY]  if(i!=  colIndex)  {  continue;  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(i!=  colIndex)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(i!=  colIndex)  {  continue;  }	  if(colIndex    >=    i)    {    continue;    }    	non-compiled	[CE]  ')'  expected	65	None	replace
205	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(basicRow)  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(basicRow)  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(basicRow)	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.contains(basicRow)    	non-compiled	[CE]  ')'  expected	15	None	replace
206	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(basicR  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(basicR  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(basicR	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.contains(basicRow)    	non-compiled	[CE]  ')'  expected	15	None	replace
207	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow)  ==  continue;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow)  ==  continue;  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow)  ==  continue;	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow.contains(basicRow)    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
208	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow)  ==  continue;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow)  ==  continue;  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow)  ==  continue;	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow.contains(basicRow)    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
209	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {	  for(int    i    =    colIndex;    i    <    basicRows.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    	non-compiled	[CE]  ')'  expected	86	None	replace
210	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)	  for(int    i    =    colIndex;    i    <    basicRows.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    	non-compiled	[CE]  ')'  expected	86	None	replace
211	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)basicRows.get(i);  if(baseRow.contains(basicRow))  {  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)basicRows.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)basicRows.get(i);  if(baseRow.contains(basicRow))  {	  for(int    i    =    colIndex;    i    <    basicRows.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    	non-compiled	[CE]  ')'  expected	86	None	replace
212	[BUG]  [BUGGY]  int  colIndex  =  columnLabels.indexOf( ".x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  int  colIndex  =  columnLabels.indexOf( ".x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	int  colIndex  =  columnLabels.indexOf( ".x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    int    colIndex    =    columnLabels.indexOf(   ".x   "    +    i);    if(colIndex    <    0)    {    coefficients[i]    =    0;    }    	non-compiled	[CE]  ')'  expected	73	None	replace
213	[BUG]  [BUGGY]  if(colIndex  <  MAXIMUM_VAR_COLUMN_LABEL)  {  continue;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  <  MAXIMUM_VAR_COLUMN_LABEL)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  <  MAXIMUM_VAR_COLUMN_LABEL)  {  continue;  }	  if(colIndex    <    =    MAXIMUM_VAR_COLUMN_LABEL)    {    continue;    }    	non-compiled	[CE]  ')'  expected	27	None	replace
214	[BUG]  [BUGGY]  if(colIndex  <  MAXIMUM_VAR_COLUMN_LABEL  ||  colIndex  >  MAXIMUM_VAR_COLUMN_LABEL)  {  continue;  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  <  MAXIMUM_VAR_COLUMN_LABEL  ||  colIndex  >  MAXIMUM_VAR_COLUMN_LABEL)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  <  MAXIMUM_VAR_COLUMN_LABEL  ||  colIndex  >  MAXIMUM_VAR_COLUMN_LABEL)  {  continue;  }	  if(colIndex    <    =    MAXIMUM_VAR_COLUMN_LABEL)    {    continue;    }    	non-compiled	[CE]  ')'  expected	27	None	replace
215	[BUG]  [BUGGY]  if(colIndex  <  MAXIMUM_VAR_COLUMN_LABEL  ||  colIndex  >=  MAXIMUM_VAR_COLUMN_LABEL)  {  continue;  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  <  MAXIMUM_VAR_COLUMN_LABEL  ||  colIndex  >=  MAXIMUM_VAR_COLUMN_LABEL)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  <  MAXIMUM_VAR_COLUMN_LABEL  ||  colIndex  >=  MAXIMUM_VAR_COLUMN_LABEL)  {  continue;  }	  if(colIndex    <    =    MAXIMUM_VAR_COLUMN_LABEL)    {    continue;    }    	non-compiled	[CE]  ')'  expected	27	None	replace
216	[BUG]  [BUGGY]  if(colIndex  <  MAXIMUM_VAR_COLUMN_LABEL  ||  colIndex  <  MAXIMUM_VAR_COLUMN_LABEL)  {  continue;  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  <  MAXIMUM_VAR_COLUMN_LABEL  ||  colIndex  <  MAXIMUM_VAR_COLUMN_LABEL)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  <  MAXIMUM_VAR_COLUMN_LABEL  ||  colIndex  <  MAXIMUM_VAR_COLUMN_LABEL)  {  continue;  }	  if(colIndex    <    =    MAXIMUM_VAR_COLUMN_LABEL)    {    continue;    }    	non-compiled	[CE]  ')'  expected	27	None	replace
217	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
218	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
219	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
220	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  }	  for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow))    {    }    	non-compiled	[CE]  ')'  expected	35	None	replace
221	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow    	non-compiled	[CE]  ')'  expected	62	None	replace
222	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  coefficients.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow    	non-compiled	[CE]  ')'  expected	62	None	replace
223	[BUG]  [BUGGY]  if(colIndex!=  colColumn  &&  colIndex  >=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex!=  colColumn  &&  colIndex  >=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex!=  colColumn  &&  colIndex  >=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }	  if(colIndex!=    colColumn    ||    colIndex    >=    NEGATIVE_VAR_COLUMN_LABEL)    {    continue;    }    	non-compiled	[CE]  ')'  expected	9	None	replace
224	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  baseRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  baseRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  baseRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow))  {  continue	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)baseRows.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  ';'  expected	80	None	replace
225	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow))  {  continue	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)baseRows.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  ';'  expected	80	None	replace
226	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow))  {  continue	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)baseRows.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  ';'  expected	80	None	replace
227	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow))  {  continue	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)baseRows.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  ';'  expected	80	None	replace
228	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(bas  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(bas  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(bas	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.contains(bas    	non-compiled	[CE]  ')'  expected	74	None	replace
229	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  baseRow.contains(basicRow))  {  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  baseRow.contains(basicRow))  {  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  baseRow.contains(basicRow))  {  }	  for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow))    {    }    	non-compiled	[CE]  ')'  expected	35	None	replace
230	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow    	non-compiled	[CE]  ')'  expected	62	None	replace
231	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  data.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.contains(bas  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  data.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.contains(bas  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  data.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.contains(bas	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)basicRows.get(i);    if(basicRow!=    null    &&    basicRow.contains(bas    	non-compiled	[CE]  ')'  expected	99	None	replace
232	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  this.columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)basicRows.get(i);    if(basicRow!=    null    &&    basicRow.contains(bas    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
233	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnRows.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnRows.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnRows.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)basicRows.get(i);    if(basicRow!=    null    &&    basicRow.contains(bas    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
234	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  ';'  expected	30	None	replace
235	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnCount.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnCount.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnCount.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue	  for(int    i    =    0;    i    <    columns.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  ';'  expected	11	None	replace
236	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnCount.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnCount.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnCount.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.equals(basicRow    	non-compiled	[CE]  ')'  expected	48	None	replace
237	[BUG]  [BUGGY]  for(int  i  =  colIndex;  i  <  basicRows.size();  i++)  {  if(basicRows[i]  ==  0)  {  basicRows[i]  =  0;  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  colIndex;  i  <  basicRows.size();  i++)  {  if(basicRows[i]  ==  0)  {  basicRows[i]  =  0;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  colIndex;  i  <  basicRows.size();  i++)  {  if(basicRows[i]  ==  0)  {  basicRows[i]  =  0;  }	  for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    if(basicRows[i]    ==    0)    {    basicRows[i]    =    0;    }    	non-compiled	[CE]  ')'  expected	78	None	replace
238	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  if(basicRows[i]  ==  null)  {  basicRows[i]  =  0;  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  if(basicRows[i]  ==  null)  {  basicRows[i]  =  0;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  if(basicRows[i]  ==  null)  {  basicRows[i]  =  0;  }	  for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    if(basicRows[i]    ==    0)    {    basicRows[i]    =    0;    }    	non-compiled	[CE]  ')'  expected	78	None	replace
239	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnCount.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(bas  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnCount.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(bas  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnCount.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(bas	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(bas    	non-compiled	[CE]  ')'  expected	82	None	replace
240	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains  ==  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains  ==  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains  ==	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.contains    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
241	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains  ==  continue  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains  ==  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains  ==  continue	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.contains    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
242	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow))  {  continue	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)baseRows.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  ';'  expected	80	None	replace
243	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  baseRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow)  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  baseRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow)  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  baseRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow)	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)baseRows.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  ')'  expected	80	None	replace
244	[BUG]  [BUGGY]  if(colIndex  >=  -1)  {  continue;  }  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  >=  -1)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  >=  -1)  {  continue;  }	  if(colIndex    ==    -1)    {    continue;    }    	non-compiled	[CE]  ')'  expected	85	None	replace
245	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals	  for(int    i    =    1;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(baseRow    	non-compiled	[CE]  ')'  expected	98	None	replace
246	[BUG]  [BUGGY]  Integer  colIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  Integer  colIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	Integer  colIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }	  int    colIndex    =    columnLabels.indexOf(   "x   "    +    i);    if(colIndex    <    0)    {    coefficients[i]    =    0;    }    	non-compiled	[CE]  ')'  expected	21	None	replace
247	[BUG]  [BUGGY]  int  colIndex  =  columnLabels.indexOf( ".s.IFJDCS "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  int  colIndex  =  columnLabels.indexOf( ".s.IFJDCS "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	int  colIndex  =  columnLabels.indexOf( ".s.IFJDCS "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }	  int    colIndex    =    columnLabels.indexOf(   "x   "    +    i);    if(colIndex    <    0)    {    coefficients[i]    =    0;    }    	non-compiled	[CE]  ')'  expected	21	None	replace
248	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)!=  continue;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)!=  continue;  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)!=  continue;	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow)    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
249	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnCount;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnCount;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnCount;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {	  for(int    i    =    0;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow))    {    	non-compiled	[CE]  ')'  expected	8	None	replace
250	[BUG]  [BUGGY]  if(colIndex  <  =  0  ||  colIndex  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  <  =  0  ||  colIndex  >  0)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  <  =  0  ||  colIndex  >  0)  {  continue;  }	  if(colIndex    <    0    ||    colIndex    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
251	[BUG]  [BUGGY]  if(colIndex  ==  MAXIMUM_VAR_COLUMN_LABEL)  {  continue;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  ==  MAXIMUM_VAR_COLUMN_LABEL)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  ==  MAXIMUM_VAR_COLUMN_LABEL)  {  continue;  }	  if(colIndex    <    =    MAXIMUM_VAR_COLUMN_LABEL)    {    continue;    }    	non-compiled	[CE]  ')'  expected	27	None	replace
252	[BUG]  [BUGGY]  if(colIndex  >=  MAXIMUM_VAR_COLUMN_LABEL)  {  continue;  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  >=  MAXIMUM_VAR_COLUMN_LABEL)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  >=  MAXIMUM_VAR_COLUMN_LABEL)  {  continue;  }	  if(colIndex    <    =    MAXIMUM_VAR_COLUMN_LABEL)    {    continue;    }    	non-compiled	[CE]  ')'  expected	27	None	replace
253	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  baseRow.contains(basicRow))  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  baseRow.contains(basicRow))  {  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  baseRow.contains(basicRow))  {	  for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow))    {    	non-compiled	[CE]  ')'  expected	34	None	replace
254	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)bases.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)bases.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)bases.get(i);  if(baseRow.contains(basicRow))  {  continue	  for(int    i    =    0;    i    <    columns.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)bases.get(i);    if(baseRow.contains(basicRow))    {    continue;    }    	non-compiled	[CE]  ';'  expected	93	None	replace
255	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  int  colIndex  =  columns.indexOf( "x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  int  colIndex  =  columns.indexOf( "x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  basicRows.size();  i++)  {  int  colIndex  =  columns.indexOf( "x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    int    colIndex    =    columnLabels.indexOf(   "x   "    +    i);    if(colIndex    <    0)    {    coefficients[i]    =    0;    }    	non-compiled	[CE]  ')'  expected	22	None	replace
256	[BUG]  [BUGGY]  if(i  ==  colIndex)  {  continue;  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(i  ==  colIndex)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(i  ==  colIndex)  {  continue;  }	  if(i    <    colIndex)    {    continue;    }    	non-compiled	[CE]  ')'  expected	95	None	replace
257	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow)  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow)  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow)	  for(int    i    =    1;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow.contains(basicRow))    {    	non-compiled	[CE]  ')'  expected	20	None	replace
258	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  baseColumns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  baseColumns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  baseColumns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  continue	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)baseColumns.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  ';'  expected	81	None	replace
259	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  baseRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  baseRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  baseRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  continue	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)baseColumns.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  ';'  expected	81	None	replace
260	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  continue	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)baseColumns.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  ';'  expected	81	None	replace
261	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    	non-compiled	[CE]  ')'  expected	50	None	replace
262	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    	non-compiled	[CE]  ')'  expected	17	None	replace
263	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnCount.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basic  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnCount.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basic  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnCount.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basic	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(basic    	non-compiled	[CE]  ')'  expected	88	None	replace
264	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnCount;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnCount;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnCount;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue	  for(int    i    =    0;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow))    {    continue    	non-compiled	[CE]  ';'  expected	5	None	replace
265	[BUG]  [BUGGY]  if(colIndex!=  colColumn  ||  colIndex  ==  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex!=  colColumn  ||  colIndex  ==  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex!=  colColumn  ||  colIndex  ==  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }	  if(colIndex!=    colColumn    ||    colIndex!=    NEGATIVE_VAR_COLUMN_LABEL)    {    continue;    }    	non-compiled	[CE]  ')'  expected	94	None	replace
266	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnCount.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicR  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnCount.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicR  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnCount.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicR	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.equals(basicR    	non-compiled	[CE]  ')'  expected	68	None	replace
267	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  this.columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
268	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow)  >=  continue  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow)  >=  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow)  >=  continue	  for(int    i    =    0;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow)    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
269	[BUG]  [BUGGY]  int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  >  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue	  for(int    i    =    0;    i    <    columns.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    continue;    }    	non-compiled	[CE]  >  expected	10	None	replace
270	[BUG]  [BUGGY]  int  colIndex  =  columnLabels.indexOf( ".s.IFJDCS "  +  i);  if(colIndex  <  0)  {  continue;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  int  colIndex  =  columnLabels.indexOf( ".s.IFJDCS "  +  i);  if(colIndex  <  0)  {  continue;  }  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	int  colIndex  =  columnLabels.indexOf( ".s.IFJDCS "  +  i);  if(colIndex  <  0)  {  continue;  }	  int    colIndex    =    columnLabels.indexOf(   "x   "    +    i);    if(colIndex    <    0)    {    continue;    }    	non-compiled	[CE]  ')'  expected	29	None	replace
271	[BUG]  [BUGGY]  int  colIndex  =  columnLabels.indexOf( ".columns "  +  i);  if(colIndex  <  0)  {  continue;  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  int  colIndex  =  columnLabels.indexOf( ".columns "  +  i);  if(colIndex  <  0)  {  continue;  }  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	int  colIndex  =  columnLabels.indexOf( ".columns "  +  i);  if(colIndex  <  0)  {  continue;  }	  int    colIndex    =    columnLabels.indexOf(   "x   "    +    i);    if(colIndex    <    0)    {    continue;    }    	non-compiled	[CE]  ')'  expected	29	None	replace
272	[BUG]  [BUGGY]  Integer  colIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  continue;  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  Integer  colIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  continue;  }  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	Integer  colIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  continue;  }	  int    colIndex    =    columnLabels.indexOf(   "x   "    +    i);    if(colIndex    <    0)    {    continue;    }    	non-compiled	[CE]  ')'  expected	29	None	replace
273	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    	non-compiled	[CE]  ')'  expected	32	None	replace
274	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow.contains(basicRow))    {    	non-compiled	[CE]  ')'  expected	3	None	replace
275	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow.contains(basicRow))  {  }  [CE]  '.class'  expected  [FE]                        AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  For(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow.contains(basicRow))  {  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	For(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow.contains(basicRow))  {  }	  for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow.contains(basicRow))    {    }    	non-compiled	[CE]  '.class'  expected	37	None	replace
276	[BUG]  [BUGGY]  if(colIndex  >=  colVarRow)  {  continue;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  >=  colVarRow)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  >=  colVarRow)  {  continue;  }	  if(colIndex    >=    colVarColumn)    {    continue;    }    	non-compiled	[CE]  ')'  expected	90	None	replace
277	[BUG]  [BUGGY]  if(colIndex  ==  colVarColumn)  {  continue;  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  ==  colVarColumn)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  ==  colVarColumn)  {  continue;  }	  if(colIndex    >=    colVarColumn)    {    continue;    }    	non-compiled	[CE]  ')'  expected	90	None	replace
278	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnCount.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnCount.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnCount.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.equals    	non-compiled	[CE]  ')'  expected	67	None	replace
279	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  this.columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  this.columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.equals    	non-compiled	[CE]  ')'  expected	67	None	replace
280	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)!=  continue;  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)!=  continue;  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)!=  continue;	  for(int    i    =    0;    i    <    columns.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow)    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
281	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)!=  continue;  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)!=  continue;  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)!=  continue;	  for(int    i    =    0;    i    <    columns.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow)    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
282	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  For(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	For(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  continue	  For(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  '.class'  expected	89	None	replace
283	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  int  colIndex  =  columnLabels.indexOf( ".x "  +  i);  if(colIndex  <  0)  {  continue;  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  int  colIndex  =  columnLabels.indexOf( ".x "  +  i);  if(colIndex  <  0)  {  continue;  }  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  basicRows.size();  i++)  {  int  colIndex  =  columnLabels.indexOf( ".x "  +  i);  if(colIndex  <  0)  {  continue;  }	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    int    colIndex    =    columnLabels.indexOf(   "x   "    +    i);    if(colIndex    <    0)    {    continue;    }    	non-compiled	[CE]  ')'  expected	28	None	replace
284	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  continue  [CE]  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  basicRows.size();  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  continue	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    int    colIndex    =    columnLabels.indexOf(   "x   "    +    i);    if(colIndex    <    0)    {    continue;    }    	non-compiled	[CE]  	28	None	replace
285	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  columnRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  '.class'  expected  [FE]                        AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  For(int  i  =  0;  i  <  columnRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	For(int  i  =  0;  i  <  columnRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue	  For(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  '.class'  expected	33	None	replace
286	[BUG]  [BUGGY]  if(colIndex  <  colColumn.length)  {  continue;  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  <  colColumn.length)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  <  colColumn.length)  {  continue;  }	  if(colIndex    >=    colColumn.length)    {    continue;    }    	non-compiled	[CE]  ')'  expected	53	None	replace
287	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  if(basicRows[i]  >=  0)  {  continue;  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  if(basicRows[i]  >=  0)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.length;  i++)  {  if(basicRows[i]  >=  0)  {  continue;  }	  for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    if(basicRows[i]!=    0)    {    continue;    }    	non-compiled	[CE]  ')'  expected	79	None	replace
288	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(    	non-compiled	[CE]  ')'  expected	39	None	replace
289	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnCount.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basicRow  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnCount.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basicRow  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnCount.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basicRow	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(basicRow    	non-compiled	[CE]  ')'  expected	63	None	replace
290	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  baseRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  baseRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  baseRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)baseColumns.get(i);    if(baseRow.contains(basicRow))    {    	non-compiled	[CE]  ')'  expected	72	None	replace
291	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)baseColumns.get(i);    if(baseRow.contains(basicRow))    {    	non-compiled	[CE]  ')'  expected	72	None	replace
292	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnCount.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(bas  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnCount.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(bas  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnCount.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(bas	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.equals(bas    	non-compiled	[CE]  ')'  expected	66	None	replace
293	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(bas  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(bas  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(bas	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.contains(bas    	non-compiled	[CE]  ')'  expected	70	None	replace
294	[BUG]  [BUGGY]  Integer  colRow  =  getColumnRow(i);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  Integer  colRow  =  getColumnRow(i);  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	Integer  colRow  =  getColumnRow(i);	  if(colIndex    ==    colIndex)    {    continue;    }    If(colIndex    ==    colIndex)    {    continue;    }    	non-compiled	[CE]  ')'  expected	57	None	replace
295	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  continue	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  ';'  expected	1	None	replace
296	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  if(basicRows[i]!=  null)  {  basicRows[i]  =  0;  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  if(basicRows[i]!=  null)  {  basicRows[i]  =  0;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.length;  i++)  {  if(basicRows[i]!=  null)  {  basicRows[i]  =  0;  }	  for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    if(basicRows[i]!=    0)    {    basicRows[i]    =    0;    }    	non-compiled	[CE]  ')'  expected	76	None	replace
297	[BUG]  [BUGGY]  for(int  i  =  colIndex;  i  <  basicRows.size();  i++)  {  if(basicRows[i]!=  0)  {  basicRows[i]  =  0;  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  colIndex;  i  <  basicRows.size();  i++)  {  if(basicRows[i]!=  0)  {  basicRows[i]  =  0;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  colIndex;  i  <  basicRows.size();  i++)  {  if(basicRows[i]!=  0)  {  basicRows[i]  =  0;  }	  for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    if(basicRows[i]!=    0)    {    basicRows[i]    =    0;    }    	non-compiled	[CE]  ')'  expected	77	None	replace
298	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  data.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  data.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  data.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)basicRows.get(i);    if(basicRow!=    null    &&    basicRow.equals(basicRow    	non-compiled	[CE]  ')'  expected	49	None	replace
299	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnRows.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.equals(bas  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnRows.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.equals(bas  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnRows.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.equals(bas	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)basicRows.get(i);    if(basicRow!=    null    &&    basicRow.equals(basicRow    	non-compiled	[CE]  ')'  expected	49	None	replace
300	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  columnRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  For(int  i  =  0;  i  <  columnRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	For(int  i  =  0;  i  <  columnRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {	  For(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    	non-compiled	[CE]  '.class'  expected	59	None	replace
301	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow)!=  continue  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow)!=  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow)!=  continue	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow.contains(basicRow)    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
302	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow)!=  continue  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow)!=  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow)!=  continue	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow.contains(basicRow)    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
303	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow)  ==  continue  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow)  ==  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow)  ==  continue	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow.contains(basicRow)    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
304	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnCount.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseR  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnCount.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseR  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnCount.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseR	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(baseR    	non-compiled	[CE]  ')'  expected	69	None	replace
305	[BUG]  [BUGGY]  colIndex  =  colColumn.length;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  colIndex  =  colColumn.length;  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	colIndex  =  colColumn.length;	  if(colIndex!=    colColumn.length)    {    continue;    }    	non-compiled	[CE]  ')'  expected	64	None	replace
306	[BUG]  [BUGGY]  if(i  >  0)  {  continue;  }  [CE]  ')'  expected  [FE]        OutOfRangeException      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(i  >  0)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(i  >  0)  {  continue;  }	  if(colIndex    >    0)    {    continue;    }    	non-compiled	[CE]  ')'  expected	40	None	replace
307	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue;  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue;  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue;	  for(int    i    =    0;    i    <    columns.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    continue;    	non-compiled	[CE]  ')'  expected	12	None	replace
308	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnColumns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnColumns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnColumns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)baseColumns.get(i);    if(baseRow.contains(basicRow))    {    	non-compiled	[CE]  ')'  expected	72	None	replace
309	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)baseColumns.get(i);    if(baseRow.contains(basicRow))    {    	non-compiled	[CE]  ')'  expected	72	None	replace
310	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow)    	non-compiled	[CE]  ')'  expected	31	None	replace
311	[BUG]  [BUGGY]  int  columnIndex  =  columnLabels.indexOf( ".x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  int  columnIndex  =  columnLabels.indexOf( ".x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	int  columnIndex  =  columnLabels.indexOf( ".x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    int    colIndex    =    columnLabels.indexOf(   ".x   "    +    i);    if(colIndex    <    0)    {    coefficients[i]    =    0;    }    	non-compiled	[CE]  ')'  expected	73	None	replace
312	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(basicRow);  if(basicRow!=  null  &&  basicRow.contains(basicRow)  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(basicRow);  if(basicRow!=  null  &&  basicRow.contains(basicRow)  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(basicRow);  if(basicRow!=  null  &&  basicRow.contains(basicRow)	  for(int    i    =    0;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow)    	non-compiled	[CE]  ')'  expected	7	None	replace
313	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(colIndex);  if(basicRow!=  null  &&  basicRow.contains(basicRow)  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(colIndex);  if(basicRow!=  null  &&  basicRow.contains(basicRow)  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(colIndex);  if(basicRow!=  null  &&  basicRow.contains(basicRow)	  for(int    i    =    0;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow)    	non-compiled	[CE]  ')'  expected	7	None	replace
314	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(basicRow);  if(basicRow!=  null  &&  basicRow.contains(basicR  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(basicRow);  if(basicRow!=  null  &&  basicRow.contains(basicR  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(basicRow);  if(basicRow!=  null  &&  basicRow.contains(basicR	  for(int    i    =    0;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow)    	non-compiled	[CE]  ')'  expected	7	None	replace
315	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow))  {  continue	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)baseRows.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  ';'  expected	80	None	replace
316	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)bases.get(i);  if(baseRow.contains(basicRow))  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)bases.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)bases.get(i);  if(baseRow.contains(basicRow))  {	  for(int    i    =    colIndex;    i    <    basicRows.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    	non-compiled	[CE]  ')'  expected	86	None	replace
317	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRows.contains(basicRow))  {  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRows.contains(basicRow))  {  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRows.contains(basicRow))  {  }	  for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow))    {    }    	non-compiled	[CE]  ')'  expected	35	None	replace
318	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(basic  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(basic  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(basic	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.contains(basic    	non-compiled	[CE]  ')'  expected	97	None	replace
319	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.equals(basicRow    	non-compiled	[CE]  ')'  expected	48	None	replace
320	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basicRow  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basicRow  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basicRow	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(basicRow    	non-compiled	[CE]  ')'  expected	63	None	replace
321	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)bases.get(i);  if(baseRow.contains(basicRow))  {  continue;  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)bases.get(i);  if(baseRow.contains(basicRow))  {  continue;  }  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)bases.get(i);  if(baseRow.contains(basicRow))  {  continue;  }	  for(int    i    =    0;    i    <    columns.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)bases.get(i);    if(baseRow.contains(basicRow))    {    continue;    }    	non-compiled	[CE]  ')'  expected	93	None	replace
322	[BUG]  [BUGGY]  int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)bases.get(i);  if(baseRow.contains(basicRow))  {  continue;  }  [CE]  >  expected  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)bases.get(i);  if(baseRow.contains(basicRow))  {  continue;  }  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)bases.get(i);  if(baseRow.contains(basicRow))  {  continue;  }	  for(int    i    =    0;    i    <    columns.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)bases.get(i);    if(baseRow.contains(basicRow))    {    continue;    }    	non-compiled	[CE]  >  expected	93	None	replace
323	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)basicRows.get(i);    if(basicRow!=    null    &&    basicRow.equals(basicRow    	non-compiled	[CE]  ')'  expected	49	None	replace
324	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(basicRow);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(basicRow);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(basicRow);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue	  for(int    i    =    0;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow))    {    continue;    }    	non-compiled	[CE]  ';'  expected	52	None	replace
325	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(basicRow);  if(basicRow!=  null  &&  basicRow.contains(basicRow  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(basicRow);  if(basicRow!=  null  &&  basicRow.contains(basicRow  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(basicRow);  if(basicRow!=  null  &&  basicRow.contains(basicRow	  for(int    i    =    0;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow))    {    continue;    }    	non-compiled	[CE]  ')'  expected	52	None	replace
326	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow))  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow))  {	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)baseRows.get(i);    if(baseRow.contains(basicRow))    {    	non-compiled	[CE]  ')'  expected	19	None	replace
327	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow))  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow))  {	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)baseRows.get(i);    if(baseRow.contains(basicRow))    {    	non-compiled	[CE]  ')'  expected	19	None	replace
328	[BUG]  [BUGGY]  if(colIndex  ==  colColumn  ||  colIndex!=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  ==  colColumn  ||  colIndex!=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  ==  colColumn  ||  colIndex!=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }	  if(colIndex!=    colColumn    ||    colIndex!=    NEGATIVE_VAR_COLUMN_LABEL)    {    continue;    }    	non-compiled	[CE]  ')'  expected	94	None	replace
329	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow)  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow)  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow)	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow.contains(basicRow)    	non-compiled	[CE]  ')'  expected	2	None	replace
330	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow)  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow)  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow)	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow.contains(basicRow)    	non-compiled	[CE]  ')'  expected	2	None	replace
331	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)bases.get(i);  if(baseRow.contains(basicRow))  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)bases.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)bases.get(i);  if(baseRow.contains(basicRow))  {	  for(int    i    =    1;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    	non-compiled	[CE]  ')'  expected	58	None	replace
332	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(basicRow)  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(basicRow)  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(basicRow)	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.contains(basicRow)    	non-compiled	[CE]  ')'  expected	15	None	replace
333	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(bas  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(bas  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(bas	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.equals(bas    	non-compiled	[CE]  ')'  expected	66	None	replace
334	[BUG]  [BUGGY]  if(colIndex  >=  colColumn  ||  colIndex  >  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  >=  colColumn  ||  colIndex  >  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  >=  colColumn  ||  colIndex  >  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }	  if(colIndex!=    colColumn    ||    colIndex    >=    NEGATIVE_VAR_COLUMN_LABEL)    {    continue;    }    	non-compiled	[CE]  ')'  expected	9	None	replace
335	[BUG]  [BUGGY]  if(colIndex  ==  colColumn  ||  colIndex  >=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  ==  colColumn  ||  colIndex  >=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  ==  colColumn  ||  colIndex  >=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }	  if(colIndex!=    colColumn    ||    colIndex    >=    NEGATIVE_VAR_COLUMN_LABEL)    {    continue;    }    	non-compiled	[CE]  ')'  expected	9	None	replace
336	[BUG]  [BUGGY]  if(colIndex!=  colColumn  ||  colIndex  >  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex!=  colColumn  ||  colIndex  >  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex!=  colColumn  ||  colIndex  >  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }	  if(colIndex!=    colColumn    ||    colIndex    >=    NEGATIVE_VAR_COLUMN_LABEL)    {    continue;    }    	non-compiled	[CE]  ')'  expected	9	None	replace
337	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseRow  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  For(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseRow  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	For(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseRow	  for(int    i    =    1;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(baseRow    	non-compiled	[CE]  '.class'  expected	98	None	replace
338	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(base  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(base  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(base	  for(int    i    =    1;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(baseRow    	non-compiled	[CE]  ')'  expected	98	None	replace
339	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  columnCount.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  For(int  i  =  0;  i  <  columnCount.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	For(int  i  =  0;  i  <  columnCount.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {	  For(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    	non-compiled	[CE]  '.class'  expected	59	None	replace
340	[BUG]  [BUGGY]  colIndex  +=  1;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  colIndex  +=  1;  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	colIndex  +=  1;	  colIndex    +=    colIndex;    	non-compiled	[CE]  ')'  expected	42	None	replace
341	[BUG]  [BUGGY]  colIndex  +=  2;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  colIndex  +=  2;  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	colIndex  +=  2;	  colIndex    +=    colIndex;    	non-compiled	[CE]  ')'  expected	42	None	replace
342	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.equals  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.equals  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.equals	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.equals    	non-compiled	[CE]  ')'  expected	67	None	replace
343	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.equals    	non-compiled	[CE]  ')'  expected	67	None	replace
344	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseR  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseR  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseR	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(baseR    	non-compiled	[CE]  ')'  expected	69	None	replace
345	[BUG]  [BUGGY]  int  colIndex  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  if(colIndex  <  0)  {  continue;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  int  colIndex  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  if(colIndex  <  0)  {  continue;  }  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	int  colIndex  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  if(colIndex  <  0)  {  continue;  }	  int    colIndex    =    columnLabels.indexOf(   "x   "    +    i);    if(colIndex    <    0)    {    continue;    }    	non-compiled	[CE]  ')'  expected	29	None	replace
346	[BUG]  [BUGGY]  int  colIndex  =  columnLabels.indexOf( ".s.IFJDCS ".charAt(i));  if(colIndex  <  0)  {  continue;  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  int  colIndex  =  columnLabels.indexOf( ".s.IFJDCS ".charAt(i));  if(colIndex  <  0)  {  continue;  }  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	int  colIndex  =  columnLabels.indexOf( ".s.IFJDCS ".charAt(i));  if(colIndex  <  0)  {  continue;  }	  int    colIndex    =    columnLabels.indexOf(   "x   "    +    i);    if(colIndex    <    0)    {    continue;    }    	non-compiled	[CE]  ')'  expected	29	None	replace
347	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  continue	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  ';'  expected	1	None	replace
348	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue;  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue;  }  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue;  }	  for(int    i    =    0;    i    <    columns.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    continue;    }    	non-compiled	[CE]  ')'  expected	10	None	replace
349	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  columnLabels.size();  i++)  {  if(basicRows[i]  ==  0)  {  basicRows[i]  =  0;  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  1;  i  <  columnLabels.size();  i++)  {  if(basicRows[i]  ==  0)  {  basicRows[i]  =  0;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  1;  i  <  columnLabels.size();  i++)  {  if(basicRows[i]  ==  0)  {  basicRows[i]  =  0;  }	  for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    if(basicRows[i]    ==    0)    {    basicRows[i]    =    0;    }    	non-compiled	[CE]  ')'  expected	78	None	replace
350	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  if(basicRows[i]  ==  0  ||  basicRows[i]  ==  0)  {  basicRows[i]  =  0;  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  if(basicRows[i]  ==  0  ||  basicRows[i]  ==  0)  {  basicRows[i]  =  0;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  if(basicRows[i]  ==  0  ||  basicRows[i]  ==  0)  {  basicRows[i]  =  0;  }	  for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    if(basicRows[i]    ==    0)    {    basicRows[i]    =    0;    }    	non-compiled	[CE]  ')'  expected	78	None	replace
351	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(basicR  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(basicR  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(basicR	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.contains(basicR    	non-compiled	[CE]  ')'  expected	18	None	replace
352	[BUG]  [BUGGY]  if(colIndex  <  =  colColumn.length)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  <  =  colColumn.length)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  <  =  colColumn.length)  {  continue;  }	  if(colIndex    >=    colColumn.length)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
353	[BUG]  [BUGGY]  if(colIndex  >  colColumn.length)  {  continue;  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  >  colColumn.length)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  >  colColumn.length)  {  continue;  }	  if(colIndex    >=    colColumn.length)    {    continue;    }    	non-compiled	[CE]  ')'  expected	53	None	replace
354	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
355	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(    	non-compiled	[CE]  ')'  expected	39	None	replace
356	[BUG]  [BUGGY]  if(colIndex  <  =  colVarColumn)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  <  =  colVarColumn)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  <  =  colVarColumn)  {  continue;  }	  if(colIndex    >=    colVarColumn)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
357	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(bas  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(bas  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(bas	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.contains(bas    	non-compiled	[CE]  ')'  expected	74	None	replace
358	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow.contains(basicRow))    {    	non-compiled	[CE]  ')'  expected	3	None	replace
359	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseLabels.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseLabels.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseLabels.get(i);  if(baseRow.contains(basicRow))  {  continue	  for(int    i    =    1;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  ';'  expected	4	None	replace
360	[BUG]  [BUGGY]  if(colIndex  <  1)  {  continue;  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  <  1)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  <  1)  {  continue;  }	  if(colIndex    <    colIndex)    {    continue;    }    	non-compiled	[CE]  ')'  expected	26	None	replace
361	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
362	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.contains(bas  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.contains(bas  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.contains(bas	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)basicRows.get(i);    if(basicRow!=    null    &&    basicRow.contains(bas    	non-compiled	[CE]  ')'  expected	99	None	replace
363	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.contains(bas  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.contains(bas  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.contains(bas	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)basicRows.get(i);    if(basicRow!=    null    &&    basicRow.contains(bas    	non-compiled	[CE]  ')'  expected	99	None	replace
364	[BUG]  [BUGGY]  int  colIndex  =  columns.indexOf( "x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  int  colIndex  =  columns.indexOf( "x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	int  colIndex  =  columns.indexOf( "x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }	  int    colIndex    =    columnLabels.indexOf(   "x   "    +    i);    if(colIndex    <    0)    {    coefficients[i]    =    0;    }    	non-compiled	[CE]  ')'  expected	21	None	replace
365	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.contains  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.contains  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.contains	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.contains    	non-compiled	[CE]  ')'  expected	71	None	replace
366	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  basicRows.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.contains    	non-compiled	[CE]  ')'  expected	71	None	replace
367	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basicR  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basicR  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basicR	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(basicR    	non-compiled	[CE]  ')'  expected	87	None	replace
368	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnColumns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnColumns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnColumns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  continue	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)baseColumns.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  ';'  expected	81	None	replace
369	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  continue	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)baseColumns.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  ';'  expected	81	None	replace
370	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(bas  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(bas  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(bas	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(bas    	non-compiled	[CE]  ')'  expected	82	None	replace
371	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicR  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicR  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicR	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.equals(basicR    	non-compiled	[CE]  ')'  expected	68	None	replace
372	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basic  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basic  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basic	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(basic    	non-compiled	[CE]  ')'  expected	88	None	replace
373	[BUG]  [BUGGY]  if(i  <  =  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(i  <  =  0)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(i  <  =  0)  {  continue;  }	  if(colIndex    <    =    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
374	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  For(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	For(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  continue	  For(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  '.class'  expected	89	None	replace
375	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  columnRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  For(int  i  =  0;  i  <  columnRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	For(int  i  =  0;  i  <  columnRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  continue	  For(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  '.class'  expected	89	None	replace
376	[BUG]  [BUGGY]  int  columnIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  continue;  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  int  columnIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  continue;  }  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	int  columnIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  continue;  }	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    int    colIndex    =    columnLabels.indexOf(   "x   "    +    i);    if(colIndex    <    0)    {    continue;    }    	non-compiled	[CE]  ')'  expected	28	None	replace
377	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  int  colIndex  =  basicRows.indexOf( "x "  +  i);  if(colIndex  <  0)  {  continue;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  int  colIndex  =  basicRows.indexOf( "x "  +  i);  if(colIndex  <  0)  {  continue;  }  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  basicRows.size();  i++)  {  int  colIndex  =  basicRows.indexOf( "x "  +  i);  if(colIndex  <  0)  {  continue;  }	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    int    colIndex    =    columnLabels.indexOf(   "x   "    +    i);    if(colIndex    <    0)    {    continue;    }    	non-compiled	[CE]  ')'  expected	28	None	replace
378	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  int  colIndex  =  basicRows.indexOf( ".x "  +  i);  if(colIndex  <  0)  {  continue;  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  int  colIndex  =  basicRows.indexOf( ".x "  +  i);  if(colIndex  <  0)  {  continue;  }  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  basicRows.size();  i++)  {  int  colIndex  =  basicRows.indexOf( ".x "  +  i);  if(colIndex  <  0)  {  continue;  }	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    int    colIndex    =    columnLabels.indexOf(   "x   "    +    i);    if(colIndex    <    0)    {    continue;    }    	non-compiled	[CE]  ')'  expected	28	None	replace
379	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  columnCount.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  '.class'  expected  [FE]                        AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  For(int  i  =  0;  i  <  columnCount.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	For(int  i  =  0;  i  <  columnCount.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue	  For(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  '.class'  expected	33	None	replace
380	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(basicRow);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(basicRow);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue;  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(basicRow);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue;	  for(int    i    =    0;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow))    {    continue;    	non-compiled	[CE]  ')'  expected	6	None	replace
381	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(basicRow);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(basicRow);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(basicRow);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {	  for(int    i    =    0;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow))    {    	non-compiled	[CE]  ')'  expected	8	None	replace
382	[BUG]  [BUGGY]  Integer  colRow  =  getColumnRow(colIndex);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  Integer  colRow  =  getColumnRow(colIndex);  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	Integer  colRow  =  getColumnRow(colIndex);	  if(colIndex    ==    colIndex)    {    continue;    }    If(colIndex    ==    colIndex)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
383	[BUG]  [BUGGY]  int  columnIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  int  columnIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	int  columnIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    int    colIndex    =    columnLabels.indexOf(   "x   "    +    i);    if(colIndex    <    0)    {    coefficients[i]    =    0;    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
384	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  int  colIndex  =  basicRows.indexOf( "x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  basicRows.size();  i++)  {  int  colIndex  =  basicRows.indexOf( "x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  basicRows.size();  i++)  {  int  colIndex  =  basicRows.indexOf( "x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    int    colIndex    =    columnLabels.indexOf(   "x   "    +    i);    if(colIndex    <    0)    {    coefficients[i]    =    0;    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
385	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i,  basicRow);  if(basicRow.contains(basicRow))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i,  basicRow);  if(basicRow.contains(basicRow))  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i,  basicRow);  if(basicRow.contains(basicRow))  {  continue;  }	  for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow.contains(basicRow))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
386	[BUG]  [BUGGY]  if(colIndex  <  DEFAULT_ULPS  ||  colIndex  >  DEFAULT_VAR_COLUMN_LABEL)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  <  DEFAULT_ULPS  ||  colIndex  >  DEFAULT_VAR_COLUMN_LABEL)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  <  DEFAULT_ULPS  ||  colIndex  >  DEFAULT_VAR_COLUMN_LABEL)  {  continue;  }	  if(colIndex    <    =    DEFAULT_ULPS)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
387	[BUG]  [BUGGY]  if(colIndex  <  DEFAULT_ULPS  ||  colIndex  >=  DEFAULT_ULPS)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  if(colIndex  <  DEFAULT_ULPS  ||  colIndex  >=  DEFAULT_ULPS)  {  continue;  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  <  DEFAULT_ULPS  ||  colIndex  >=  DEFAULT_ULPS)  {  continue;  }	  if(colIndex    <    =    DEFAULT_ULPS)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
388	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  1;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  1;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {	  for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
389	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix[i];  if(basicRow.contains(basicRow))  {  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix[i];  if(basicRow.contains(basicRow))  {  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix[i];  if(basicRow.contains(basicRow))  {  }	  for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow.contains(basicRow))    {    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
390	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix();  if(basicRow.contains(basicRow))  {  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix();  if(basicRow.contains(basicRow))  {  }  [BUGGY]      }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix();  if(basicRow.contains(basicRow))  {  }	  for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow.contains(basicRow))    {    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
391	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseRow  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(     "x     "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;      [BUGGY]  for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseRow  [BUGGY]      continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnCounts.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseRow	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(baseRow    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
