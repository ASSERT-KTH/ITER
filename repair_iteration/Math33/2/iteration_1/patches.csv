bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  continue	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  ';'  expected	20	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow)  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow)  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow)	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  ')'  expected	20	None	replace
3	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  1;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  1;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  continue	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  ';'  expected	20	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue	      for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow))    {    continue;    	non-compiled	[CE]  ';'  expected	9	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue;  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue;  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue;	      for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow))    {    continue;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow)  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow)  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow)	      for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow))    {    continue;    	non-compiled	[CE]  ')'  expected	9	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {	      for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow))    {    continue;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
9	[BUG]  [BUGGY]  if(colIndex!=  colColumn  ||  colIndex  >=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }  [CE]  package  org.apache.commons.math.linear  does  not  exist  [FE]          AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  if(colIndex!=  colColumn  ||  colIndex  >=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }  [BUGGY]    }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex!=  colColumn  ||  colIndex  >=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }	  if(colIndex!=    colColumn)    {    continue;    }    	non-compiled	[CE]  package  org.apache.commons.math.linear  does  not  exist	17	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue;  }  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue;  }	      for(int    i    =    colIndex;    i    <    columns.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue	      for(int    i    =    colIndex;    i    <    columns.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    continue;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue;  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue;  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue;	      for(int    i    =    colIndex;    i    <    columns.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)  [CE]  ')'  expected  [FE]                      AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)	      for(int    i    =    colIndex;    i    <    columns.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    continue;    }    	non-compiled	[CE]  ')'  expected	23	None	replace
14	[BUG]  [BUGGY]  colIndex  =  colIndex;  [CE]  package  org.apache.commons.math.linear  does  not  exist  [FE]            AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  colIndex  =  colIndex;  [BUGGY]    }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	colIndex  =  colIndex;	  if(colIndex    ==    colColumn)    {    continue;    }    	non-compiled	[CE]  package  org.apache.commons.math.linear  does  not  exist	18	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(basicRow)  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(basicRow)  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(basicRow)	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.contains(basicRow)    	non-compiled	[CE]  ')'  expected	15	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.contains(basicRow)    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.contains(basicRow)    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(basicR  [CE]  ')'  expected  [FE]                      AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(basicR  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(basicR	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.contains(basicRow)    	non-compiled	[CE]  ')'  expected	15	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow))  {	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow.contains(basicRow))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  1;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  1;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow.contains(basicRow))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
21	[BUG]  [BUGGY]  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }  [CE]  package  org.apache.commons.math.linear  does  not  exist  [FE]        AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    int    colIndex    =    columnLabels.indexOf(   "x   "    +    i);    if(colIndex    <    0)    {    coefficients[i]    =    0;    }    	non-compiled	[CE]  package  org.apache.commons.math.linear  does  not  exist	7	None	replace
22	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    int    colIndex    =    columnLabels.indexOf(   "x   "    +    i);    if(colIndex    <    0)    {    coefficients[i]    =    0;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
23	[BUG]  [BUGGY]  if(colIndex  <  =  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  if(colIndex  <  =  0)  {  continue;  }  [BUGGY]    }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  <  =  0)  {  continue;  }	  if(colIndex    <    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
24	[BUG]  [BUGGY]  if(colIndex  <  0  ||  colIndex  >  0)  {  continue;  }  [CE]  package  org.apache.commons.math.linear  does  not  exist  [FE]            AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  if(colIndex  <  0  ||  colIndex  >  0)  {  continue;  }  [BUGGY]    }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  <  0  ||  colIndex  >  0)  {  continue;  }	  if(colIndex    <    0)    {    continue;    }    	non-compiled	[CE]  package  org.apache.commons.math.linear  does  not  exist	25	None	replace
25	[BUG]  [BUGGY]  if(colIndex  <  =  DEFAULT_ULPS)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  if(colIndex  <  =  DEFAULT_ULPS)  {  continue;  }  [BUGGY]    }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  <  =  DEFAULT_ULPS)  {  continue;  }	  if(colIndex    <    =    colIndex)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
26	[BUG]  [BUGGY]  if(colIndex  <  colIndex)  {  continue;  }  [CE]  package  org.apache.commons.math.linear  does  not  exist  [FE]          AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  if(colIndex  <  colIndex)  {  continue;  }  [BUGGY]    }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  <  colIndex)  {  continue;  }	  if(colIndex    <    =    colIndex)    {    continue;    }    	non-compiled	[CE]  package  org.apache.commons.math.linear  does  not  exist	24	None	replace
27	[BUG]  [BUGGY]  if(colIndex  <  =  MAXIMUM_VAR_COLUMN_LABEL)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  if(colIndex  <  =  MAXIMUM_VAR_COLUMN_LABEL)  {  continue;  }  [BUGGY]    }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  <  =  MAXIMUM_VAR_COLUMN_LABEL)  {  continue;  }	  if(colIndex    <    =    colIndex)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  continue;  }  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  continue;  }	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    int    colIndex    =    columnLabels.indexOf(   "x   "    +    i);    if(colIndex    <    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
29	[BUG]  [BUGGY]  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  continue;  }  [CE]  package  org.apache.commons.math.linear  does  not  exist  [FE]            AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  continue;  }  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  continue;  }	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    int    colIndex    =    columnLabels.indexOf(   "x   "    +    i);    if(colIndex    <    0)    {    continue;    }    	non-compiled	[CE]  package  org.apache.commons.math.linear  does  not  exist	8	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  ';'  expected	22	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow)	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  ')'  expected	22	None	replace
32	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
33	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  '.class'  expected  [FE]                    AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  For(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	For(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  '.class'  expected	22	None	replace
34	[BUG]  [BUGGY]  for(int  i  =  colIndex;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  colIndex;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  [BUGGY]    }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  colIndex;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
35	[BUG]  [BUGGY]  for(int  i  =  colIndex;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  colIndex;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  }  [BUGGY]    }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  colIndex;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
36	[BUG]  [BUGGY]  for(int  i  =  colIndex;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow.contains(basicRow))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  colIndex;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow.contains(basicRow))  {  continue;  }  [BUGGY]    }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  colIndex;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow.contains(basicRow))  {  continue;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
37	[BUG]  [BUGGY]  for(int  i  =  colIndex;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow.contains(basicRow))  {  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  colIndex;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow.contains(basicRow))  {  }  [BUGGY]    }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  colIndex;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow.contains(basicRow))  {  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
38	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseRow  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseRow  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseRow	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(baseRow    	non-compiled	[CE]  ')'  expected	12	None	replace
39	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(baseRow    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
40	[BUG]  [BUGGY]  if(colIndex  >  0)  {  continue;  }  [CE]  package  org.apache.commons.math.linear  does  not  exist  [FE]    OutOfRangeException    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  if(colIndex  >  0)  {  continue;  }  [BUGGY]    }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  >  0)  {  continue;  }	  if(colIndex    >    colIndex)    {    continue;    }    	non-compiled	[CE]  package  org.apache.commons.math.linear  does  not  exist	4	None	replace
41	[BUG]  [BUGGY]  if(colIndex  >=  colColIndex)  {  continue;  }  [CE]  package  org.apache.commons.math.linear  does  not  exist  [FE]            AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  if(colIndex  >=  colColIndex)  {  continue;  }  [BUGGY]    }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  >=  colColIndex)  {  continue;  }	  if(colIndex    >=    colIndex)    {    continue;    }    	non-compiled	[CE]  package  org.apache.commons.math.linear  does  not  exist	5	None	replace
42	[BUG]  [BUGGY]  colIndex  +=  colIndex;  [CE]  package  org.apache.commons.math.linear  does  not  exist  [FE]              AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  colIndex  +=  colIndex;  [BUGGY]    }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	colIndex  +=  colIndex;	  if(colIndex    >=    colIndex)    {    continue;    }    	non-compiled	[CE]  package  org.apache.commons.math.linear  does  not  exist	5	None	replace
43	[BUG]  [BUGGY]  if(colIndex  ==  0)  {  continue;  }  [CE]  package  org.apache.commons.math.linear  does  not  exist  [FE]    AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  if(colIndex  ==  0)  {  continue;  }  [BUGGY]    }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  ==  0)  {  continue;  }	  if(colIndex    ==    colIndex)    {    continue;    }    	non-compiled	[CE]  package  org.apache.commons.math.linear  does  not  exist	2	None	replace
44	[BUG]  [BUGGY]  if(colIndex  >=  0)  {  continue;  }  [CE]  package  org.apache.commons.math.linear  does  not  exist  [FE]      AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  if(colIndex  >=  0)  {  continue;  }  [BUGGY]    }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  >=  0)  {  continue;  }	  if(colIndex    ==    colIndex)    {    continue;    }    	non-compiled	[CE]  package  org.apache.commons.math.linear  does  not  exist	2	None	replace
45	[BUG]  [BUGGY]  if(colIndex  >  colIndex)  {  continue;  }  if(colIndex  >  colIndex)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]    OutOfRangeException    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  if(colIndex  >  colIndex)  {  continue;  }  if(colIndex  >  colIndex)  {  continue;  }  [BUGGY]    }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex    >    colIndex)    {    continue;    }    if(colIndex  >  colIndex)  {  continue;  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
46	[BUG]  [BUGGY]  if(colIndex  >  colIndex)  {  continue;  }  If(colIndex  >  colIndex)  {  continue;  }  [CE]  ';'  expected  [FE]      OutOfRangeException    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  if(colIndex  >  colIndex)  {  continue;  }  If(colIndex  >  colIndex)  {  continue;  }  [BUGGY]    }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex    >    colIndex)    {    continue;    }    If(colIndex  >  colIndex)  {  continue;  }	  	non-compiled	[CE]  ';'  expected	3	None	add
47	[BUG]  [BUGGY]  if(colIndex  >  colIndex)  {  continue;  }  if(colIndex  >  colIndex)  {  continue;  [CE]  illegal  start  of  expression  [FE]        OutOfRangeException    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  if(colIndex  >  colIndex)  {  continue;  }  if(colIndex  >  colIndex)  {  continue;  [BUGGY]    }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex    >    colIndex)    {    continue;    }    if(colIndex  >  colIndex)  {  continue;	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
48	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.equals(basicRow    	non-compiled	[CE]  ')'  expected	14	None	replace
49	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.equals(basicRow    	non-compiled	[CE]  ')'  expected	14	None	replace
50	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.equals(basicRow    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
51	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow  [CE]  ')'  expected  [FE]                    AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  1;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  1;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.equals(basicRow    	non-compiled	[CE]  ')'  expected	14	None	replace
52	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue;  }  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue;  }	      for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
53	[BUG]  [BUGGY]  if(colIndex  >=  colColumn.length)  {  continue;  }  [CE]  package  org.apache.commons.math.linear  does  not  exist  [FE]        AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  if(colIndex  >=  colColumn.length)  {  continue;  }  [BUGGY]    }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  >=  colColumn.length)  {  continue;  }	  if(colIndex    >=    colColumn)    {    continue;    }    	non-compiled	[CE]  package  org.apache.commons.math.linear  does  not  exist	16	None	replace
54	[BUG]  [BUGGY]  if(colIndex  ==  colIndex)  {  continue;  }  if(colIndex  ==  colIndex)  {  continue;  }  [CE]  package  org.apache.commons.math.linear  does  not  exist  [FE]    AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  if(colIndex  ==  colIndex)  {  continue;  }  if(colIndex  ==  colIndex)  {  continue;  }  [BUGGY]    }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex    ==    colIndex)    {    continue;    }    if(colIndex  ==  colIndex)  {  continue;  }	  	non-compiled	[CE]  package  org.apache.commons.math.linear  does  not  exist	1	None	add
55	[BUG]  [BUGGY]  if(colIndex  ==  colIndex)  {  continue;  }  if(colIndex  >=  colIndex)  {  continue;  }  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  if(colIndex  ==  colIndex)  {  continue;  }  if(colIndex  >=  colIndex)  {  continue;  }  [BUGGY]    }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex    ==    colIndex)    {    continue;    }    if(colIndex  >=  colIndex)  {  continue;  }	  	non-compiled	[CE]  ')'  expected	1	None	add
56	[BUG]  [BUGGY]  if(colIndex  ==  colIndex)  {  continue;  }  if(colIndex!=  colIndex)  {  continue;  }  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  if(colIndex  ==  colIndex)  {  continue;  }  if(colIndex!=  colIndex)  {  continue;  }  [BUGGY]    }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex    ==    colIndex)    {    continue;    }    if(colIndex!=  colIndex)  {  continue;  }	  	non-compiled	[CE]  ')'  expected	1	None	add
57	[BUG]  [BUGGY]  if(colIndex  ==  colIndex)  {  continue;  }  If(colIndex  ==  colIndex)  {  continue;  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  if(colIndex  ==  colIndex)  {  continue;  }  If(colIndex  ==  colIndex)  {  continue;  }  [BUGGY]    }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex    ==    colIndex)    {    continue;    }    If(colIndex  ==  colIndex)  {  continue;  }	  	non-compiled	[CE]  ';'  expected	1	None	add
58	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  1;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  1;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    	non-compiled	[CE]  ')'  expected	21	None	replace
59	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  [CE]  '.class'  expected  [FE]              AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  For(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	For(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    	non-compiled	[CE]  '.class'  expected	21	None	replace
60	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow)  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow)  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow)	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow)    	non-compiled	[CE]  ')'  expected	11	None	replace
61	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(basicR  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(basicR  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(basicR	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow)    	non-compiled	[CE]  ')'  expected	11	None	replace
62	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow)    	non-compiled	[CE]  ')'  expected	11	None	replace
63	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basicRow  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basicRow  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basicRow	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(basicRow    	non-compiled	[CE]  ')'  expected	13	None	replace
64	[BUG]  [BUGGY]  if(colIndex!=  colColumn.length)  {  continue;  }  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  if(colIndex!=  colColumn.length)  {  continue;  }  [BUGGY]    }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex!=  colColumn.length)  {  continue;  }	  if(colIndex!=    colColumn)    {    continue;    }    	non-compiled	[CE]  ')'  expected	17	None	replace
65	[BUG]  [BUGGY]  if(colIndex  >=  i)  {  continue;  }  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  if(colIndex  >=  i)  {  continue;  }  [BUGGY]    }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  >=  i)  {  continue;  }	  if(colIndex    >=    colIndex)    {    continue;    }    	non-compiled	[CE]  ')'  expected	5	None	replace
66	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(bas  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(bas  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(bas	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.equals(basicRow    	non-compiled	[CE]  ')'  expected	14	None	replace
67	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.equals(basicRow    	non-compiled	[CE]  ')'  expected	14	None	replace
68	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicR  [CE]  ')'  expected  [FE]                  AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicR  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicR	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.equals(basicRow    	non-compiled	[CE]  ')'  expected	14	None	replace
69	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseR  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseR  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseR	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(baseRow    	non-compiled	[CE]  ')'  expected	12	None	replace
70	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(bas  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(bas  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(bas	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow)    	non-compiled	[CE]  ')'  expected	11	None	replace
71	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow)    	non-compiled	[CE]  ')'  expected	11	None	replace
72	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow.contains(basicRow))    {    	non-compiled	[CE]  ')'  expected	19	None	replace
73	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  int  colIndex  =  columnLabels.indexOf( ".x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  int  colIndex  =  columnLabels.indexOf( ".x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  int  colIndex  =  columnLabels.indexOf( ".x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    int    colIndex    =    columnLabels.indexOf(   "x   "    +    i);    if(colIndex    <    0)    {    coefficients[i]    =    0;    }    	non-compiled	[CE]  ')'  expected	7	None	replace
74	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(bas  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(bas  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(bas	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.contains(basicRow)    	non-compiled	[CE]  ')'  expected	15	None	replace
75	[BUG]  [BUGGY]  if(colIndex  <  =  i)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  if(colIndex  <  =  i)  {  continue;  }  [BUGGY]    }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  <  =  i)  {  continue;  }	  if(colIndex    <    =    colIndex)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
76	[BUG]  [BUGGY]  for(int  i  =  colIndex;  i  <  columns.length;  i++)  {  if(basicRows[i]!=  0)  {  basicRows[i]  =  0;  }  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  colIndex;  i  <  columns.length;  i++)  {  if(basicRows[i]!=  0)  {  basicRows[i]  =  0;  }  [BUGGY]    }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  colIndex;  i  <  columns.length;  i++)  {  if(basicRows[i]!=  0)  {  basicRows[i]  =  0;  }	      	non-compiled	[CE]  ')'  expected	6	None	replace
77	[BUG]  [BUGGY]  for(int  i  =  colIndex;  i  <  columnLabels.size();  i++)  {  if(basicRows[i]!=  0)  {  basicRows[i]  =  0;  }  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  colIndex;  i  <  columnLabels.size();  i++)  {  if(basicRows[i]!=  0)  {  basicRows[i]  =  0;  }  [BUGGY]    }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  colIndex;  i  <  columnLabels.size();  i++)  {  if(basicRows[i]!=  0)  {  basicRows[i]  =  0;  }	      	non-compiled	[CE]  ')'  expected	6	None	replace
78	[BUG]  [BUGGY]  for(int  i  =  colIndex;  i  <  columnLabels.size();  i++)  {  if(basicRows[i]  ==  0)  {  basicRows[i]  =  0;  }  [CE]  ')'  expected  [FE]                  AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  colIndex;  i  <  columnLabels.size();  i++)  {  if(basicRows[i]  ==  0)  {  basicRows[i]  =  0;  }  [BUGGY]    }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  colIndex;  i  <  columnLabels.size();  i++)  {  if(basicRows[i]  ==  0)  {  basicRows[i]  =  0;  }	      	non-compiled	[CE]  ')'  expected	6	None	replace
79	[BUG]  [BUGGY]  for(int  i  =  colIndex;  i  <  columns.length;  i++)  {  if(basicRows[i]!=  0)  {  continue;  }  [CE]  ')'  expected  [FE]                    AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  colIndex;  i  <  columns.length;  i++)  {  if(basicRows[i]!=  0)  {  continue;  }  [BUGGY]    }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  colIndex;  i  <  columns.length;  i++)  {  if(basicRows[i]!=  0)  {  continue;  }	      	non-compiled	[CE]  ')'  expected	6	None	replace
80	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseRows.get(i);  if(baseRow.contains(basicRow))  {  continue	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  ';'  expected	20	None	replace
81	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)baseColumns.get(i);  if(baseRow.contains(basicRow))  {  continue	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  ';'  expected	20	None	replace
82	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(bas  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(bas  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(bas	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(basicRow    	non-compiled	[CE]  ')'  expected	13	None	replace
83	[BUG]  [BUGGY]  if(colIndex  >=  colColumn  ||  colIndex  >=  0)  {  continue;  }  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  if(colIndex  >=  colColumn  ||  colIndex  >=  0)  {  continue;  }  [BUGGY]    }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  >=  colColumn  ||  colIndex  >=  0)  {  continue;  }	  if(colIndex    >=    colColumn)    {    continue;    }    	non-compiled	[CE]  ')'  expected	16	None	replace
84	[BUG]  [BUGGY]  if(colIndex!=  0)  {  continue;  }  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  if(colIndex!=  0)  {  continue;  }  [BUGGY]    }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex!=  0)  {  continue;  }	  if(colIndex    ==    colIndex)    {    continue;    }    	non-compiled	[CE]  ')'  expected	2	None	replace
85	[BUG]  [BUGGY]  if(colIndex  ==  -1)  {  continue;  }  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  if(colIndex  ==  -1)  {  continue;  }  [BUGGY]    }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  ==  -1)  {  continue;  }	  if(colIndex    ==    colIndex)    {    continue;    }    	non-compiled	[CE]  ')'  expected	2	None	replace
86	[BUG]  [BUGGY]  for(int  i  =  colIndex;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  colIndex;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  colIndex;  i  <  basicRows.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    	non-compiled	[CE]  ')'  expected	21	None	replace
87	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basicR  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basicR  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basicR	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(basicRow    	non-compiled	[CE]  ')'  expected	13	None	replace
88	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basic  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basic  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basic	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(basicRow    	non-compiled	[CE]  ')'  expected	13	None	replace
89	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  '.class'  expected  [FE]          AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  For(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	For(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  continue	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  '.class'  expected	20	None	replace
90	[BUG]  [BUGGY]  if(colIndex  >=  colVarColumn)  {  continue;  }  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  if(colIndex  >=  colVarColumn)  {  continue;  }  [BUGGY]    }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  >=  colVarColumn)  {  continue;  }	  if(colIndex    >=    colIndex)    {    continue;    }    	non-compiled	[CE]  ')'  expected	5	None	replace
91	[BUG]  [BUGGY]  if(colIndex  >=  colColumn  ||  colIndex  >=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  if(colIndex  >=  colColumn  ||  colIndex  >=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }  [BUGGY]    }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  >=  colColumn  ||  colIndex  >=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }	  if(colIndex    >=    colColumn)    {    continue;    }    	non-compiled	[CE]  ')'  expected	16	None	replace
92	[BUG]  [BUGGY]  if(colIndex  <  =  colColumn)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  if(colIndex  <  =  colColumn)  {  continue;  }  [BUGGY]    }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  <  =  colColumn)  {  continue;  }	  if(colIndex    >=    colColumn)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
93	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)bases.get(i);  if(baseRow.contains(basicRow))  {  continue;  }  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)bases.get(i);  if(baseRow.contains(basicRow))  {  continue;  }  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)bases.get(i);  if(baseRow.contains(basicRow))  {  continue;  }	      for(int    i    =    colIndex;    i    <    columns.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    continue;    }    	non-compiled	[CE]  ')'  expected	23	None	replace
94	[BUG]  [BUGGY]  if(colIndex!=  colColumn  ||  colIndex!=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  if(colIndex!=  colColumn  ||  colIndex!=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }  [BUGGY]    }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex!=  colColumn  ||  colIndex!=  NEGATIVE_VAR_COLUMN_LABEL)  {  continue;  }	  if(colIndex!=    colColumn)    {    continue;    }    	non-compiled	[CE]  ')'  expected	17	None	replace
95	[BUG]  [BUGGY]  if(i  <  colIndex)  {  continue;  }  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  if(i  <  colIndex)  {  continue;  }  [BUGGY]    }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(i  <  colIndex)  {  continue;  }	  if(colIndex    <    0)    {    continue;    }    	non-compiled	[CE]  ')'  expected	25	None	replace
96	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  1;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  1;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columns.get(i);    if(baseRow.contains(basicRow))    {    continue    	non-compiled	[CE]  ';'  expected	22	None	replace
97	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(basic  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(basic  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(basic	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.contains(basicRow)    	non-compiled	[CE]  ')'  expected	15	None	replace
98	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseRow  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  1;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseRow  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  1;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseRow	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    baseRow    =(BasicVariable)columnLabels.get(i);    if(baseRow!=    null    &&    baseRow.equals(baseRow    	non-compiled	[CE]  ')'  expected	12	None	replace
99	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.contains(bas  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;    [BUGGY]  for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.contains(bas  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	for(int  i  =  0;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)basicRows.get(i);  if(basicRow!=  null  &&  basicRow.contains(bas	      for(int    i    =    colIndex;    i    <    columnLabels.size();    i++)    {    BasicVariable    basicRow    =(BasicVariable)columnLabels.get(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow)    	non-compiled	[CE]  ')'  expected	11	None	replace
