bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  [BUGGY]  if(colIndex  ==  colIndex)  {  continue;  }  [BUGGY]  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	add	if(colIndex  ==  colIndex)  {  continue;  }	continue;  	compilable	  [FE]  AssertionError  	3	1	replace
2	[BUG]  [BUGGY]  if(colIndex  ==  colIndex)  {  continue;  }  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  [BUGGY]  if(colIndex  ==  colIndex)  {  continue;  }  [BUGGY]  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  ==  colIndex)  {  continue;  }	continue;  	compilable	  [FE]  AssertionError  	3	1	replace
3	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      AssertionError  [CONTEXT]  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  [BUGGY]  if(colIndex  >  colIndex)  {  continue;  }  [BUGGY]  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	add	if(colIndex  >  colIndex)  {  continue;  }	continue;  	compilable	  [FE]  OutOfRangeException  	3	3	replace
4	[BUG]  [BUGGY]  if(colIndex  >  colIndex)  {  continue;  }  [FE]  OutOfRangeException  [FE]      AssertionError  [CONTEXT]  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  [BUGGY]  if(colIndex  >  colIndex)  {  continue;  }  [BUGGY]  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  >  colIndex)  {  continue;  }	continue;  	compilable	  [FE]  OutOfRangeException  	3	3	replace
5	[BUG]  [BUGGY]  if(colIndex  >=  colIndex)  {  continue;  }  [CE]  package  org.apache.commons.math.linear  does  not  exist  [FE]        AssertionError  [CONTEXT]  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  [BUGGY]  if(colIndex  >=  colIndex)  {  continue;  }  [BUGGY]  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  >=  colIndex)  {  continue;  }	continue;  	non-compiled	[CE]  package  org.apache.commons.math.linear  does  not  exist	3	None	replace
6	[BUG]  [BUGGY]    [CE]  package  org.apache.commons.math.linear  does  not  exist  [FE]          AssertionError  [CONTEXT]  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  [BUGGY]    [BUGGY]  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	  	continue;  	non-compiled	[CE]  package  org.apache.commons.math.linear  does  not  exist	3	None	replace
7	[BUG]  [BUGGY]    for(int  i  =  colIndex;  i  <  columnLabels.size();  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  [BUGGY]    for(int  i  =  colIndex;  i  <  columnLabels.size();  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }  [BUGGY]  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	    for(int  i  =  colIndex;  i  <  columnLabels.size();  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  coefficients[i]  =  0;  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
8	[BUG]  [BUGGY]    for(int  i  =  colIndex;  i  <  columnLabels.size();  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  [BUGGY]    for(int  i  =  colIndex;  i  <  columnLabels.size();  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  continue;  }  [BUGGY]  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	    for(int  i  =  colIndex;  i  <  columnLabels.size();  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if(colIndex  <  0)  {  continue;  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
9	[BUG]  [BUGGY]    for(int  i  =  colIndex;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue;  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  [BUGGY]    for(int  i  =  colIndex;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue;  [BUGGY]  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	    for(int  i  =  colIndex;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue;		non-compiled	[CE]  illegal  start  of  expression	4	None	add
10	[BUG]  [BUGGY]    for(int  i  =  colIndex;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError  [CONTEXT]  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  [BUGGY]    for(int  i  =  colIndex;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue;  }  [BUGGY]  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	    for(int  i  =  colIndex;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue;  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
11	[BUG]  [BUGGY]    for(int  i  =  colIndex;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow)  [CE]  ')'  expected  [FE]    AssertionError  [CONTEXT]  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  [BUGGY]    for(int  i  =  colIndex;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow)  [BUGGY]  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	    for(int  i  =  colIndex;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow)		non-compiled	[CE]  ')'  expected	4	None	add
12	[BUG]  [BUGGY]    for(int  i  =  colIndex;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseRow  [CE]  ')'  expected  [FE]      AssertionError  [CONTEXT]  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  [BUGGY]    for(int  i  =  colIndex;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseRow  [BUGGY]  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	    for(int  i  =  colIndex;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(baseRow		non-compiled	[CE]  ')'  expected	4	None	add
13	[BUG]  [BUGGY]    for(int  i  =  colIndex;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basicRow  [CE]  ')'  expected  [FE]        AssertionError  [CONTEXT]  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  [BUGGY]    for(int  i  =  colIndex;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basicRow  [BUGGY]  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	    for(int  i  =  colIndex;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.equals(basicRow		non-compiled	[CE]  ')'  expected	4	None	add
14	[BUG]  [BUGGY]    for(int  i  =  colIndex;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow  [CE]  ')'  expected  [FE]          AssertionError  [CONTEXT]  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  [BUGGY]    for(int  i  =  colIndex;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow  [BUGGY]  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	    for(int  i  =  colIndex;  i  <  columnLabels.size();  i++)  {  BasicVariable  basicRow  =(BasicVariable)columnLabels.get(i);  if(basicRow!=  null  &&  basicRow.equals(basicRow		non-compiled	[CE]  ')'  expected	4	None	add
15	[BUG]  [BUGGY]    for(int  i  =  colIndex;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(basicRow)  [CE]  ')'  expected  [FE]            AssertionError  [CONTEXT]  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  [BUGGY]    for(int  i  =  colIndex;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(basicRow)  [BUGGY]  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	    for(int  i  =  colIndex;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow!=  null  &&  baseRow.contains(basicRow)		non-compiled	[CE]  ')'  expected	4	None	add
16	[BUG]  [BUGGY]  if(colIndex  >=  colColumn)  {  continue;  }  [CE]  package  org.apache.commons.math.linear  does  not  exist  [FE]    AssertionError  [CONTEXT]  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  [BUGGY]  if(colIndex  >=  colColumn)  {  continue;  }  [BUGGY]  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  >=  colColumn)  {  continue;  }	continue;  	non-compiled	[CE]  package  org.apache.commons.math.linear  does  not  exist	3	None	replace
17	[BUG]  [BUGGY]  if(colIndex!=  colColumn)  {  continue;  }  [CE]  package  org.apache.commons.math.linear  does  not  exist  [FE]      AssertionError  [CONTEXT]  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  [BUGGY]  if(colIndex!=  colColumn)  {  continue;  }  [BUGGY]  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex!=  colColumn)  {  continue;  }	continue;  	non-compiled	[CE]  package  org.apache.commons.math.linear  does  not  exist	3	None	replace
18	[BUG]  [BUGGY]  if(colIndex  ==  colColumn)  {  continue;  }  [CE]  package  org.apache.commons.math.linear  does  not  exist  [FE]        AssertionError  [CONTEXT]  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  [BUGGY]  if(colIndex  ==  colColumn)  {  continue;  }  [BUGGY]  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  ==  colColumn)  {  continue;  }	continue;  	non-compiled	[CE]  package  org.apache.commons.math.linear  does  not  exist	3	None	replace
19	[BUG]  [BUGGY]    for(int  i  =  colIndex;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  [BUGGY]    for(int  i  =  colIndex;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	    for(int  i  =  colIndex;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {		non-compiled	[CE]  illegal  start  of  expression	4	None	add
20	[BUG]  [BUGGY]    for(int  i  =  colIndex;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]      AssertionError  [CONTEXT]  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  [BUGGY]    for(int  i  =  colIndex;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	    for(int  i  =  colIndex;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columnLabels.get(i);  if(baseRow.contains(basicRow))  {  continue		non-compiled	[CE]  ';'  expected	4	None	add
21	[BUG]  [BUGGY]    for(int  i  =  colIndex;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  [BUGGY]    for(int  i  =  colIndex;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  [BUGGY]  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	    for(int  i  =  colIndex;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {		non-compiled	[CE]  illegal  start  of  expression	4	None	add
22	[BUG]  [BUGGY]    for(int  i  =  colIndex;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]          AssertionError  [CONTEXT]  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  [BUGGY]    for(int  i  =  colIndex;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	    for(int  i  =  colIndex;  i  <  columnLabels.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue		non-compiled	[CE]  ';'  expected	4	None	add
23	[BUG]  [BUGGY]    for(int  i  =  colIndex;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError  [CONTEXT]  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  [BUGGY]    for(int  i  =  colIndex;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue;  }  [BUGGY]  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	    for(int  i  =  colIndex;  i  <  columns.size();  i++)  {  BasicVariable  baseRow  =(BasicVariable)columns.get(i);  if(baseRow.contains(basicRow))  {  continue;  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
24	[BUG]  [BUGGY]  if(colIndex  <  =  colIndex)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  [BUGGY]  if(colIndex  <  =  colIndex)  {  continue;  }  [BUGGY]  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  <  =  colIndex)  {  continue;  }	continue;  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
25	[BUG]  [BUGGY]  if(colIndex  <  0)  {  continue;  }  [CE]  package  org.apache.commons.math.linear  does  not  exist  [FE]      AssertionError  [CONTEXT]  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  [BUGGY]  if(colIndex  <  0)  {  continue;  }  [BUGGY]  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	if(colIndex  <  0)  {  continue;  }	continue;  	non-compiled	[CE]  package  org.apache.commons.math.linear  does  not  exist	3	None	replace
