bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
2	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  <identifier>  expected	16	None	replace
3	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  <identifier>  expected	16	None	replace
4	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getColumnCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getColumnCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  <identifier>  expected	16	None	replace
5	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]	  if(column!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  <identifier>  expected	56	None	replace
6	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i-2);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i-2);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i-2);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i-1);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
7	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[0][col]  =  f.getEntry(i,  col  +  2);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[0][col]  =  f.getEntry(i,  col  +  2);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[0][col]  =  f.getEntry(i,  col  +  2);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[0][col]    =    f.getEntry(i,    col    +    1);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
8	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[0][col]  =  f.getEntry(i,  column  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[0][col]  =  f.getEntry(i,  column  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[0][col]  =  f.getEntry(i,  column  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[0][col]    =    f.getEntry(i,    col    +    1);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
9	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  table.getEntry(i,  col  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  table.getEntry(i,  col  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  table.getEntry(i,  col  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.clone();    matrix[i    -    1][col++]    =    f.getEntry(i,    i    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
10	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  column  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  column  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  column  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.clone();    matrix[i    -    1][col++]    =    f.getEntry(i,    i    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
11	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  table.getEntry(i,  j);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.clone();    matrix[i    -    1][col++]    =    table.getEntry(i,    col);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
12	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.length;  j++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.length;  j++)  {  [BUGGY]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  columnsToDrop.length;  j++)  {	  for(int    j    =    0;    j    <    getColumns().length;    j++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
13	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getRows().length;  j++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getRows().length;  j++)  {  [BUGGY]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getRows().length;  j++)  {	  for(int    j    =    0;    j    <    getColumns().length;    j++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
14	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumns().length  -  1;  j++)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getColumns().length  -  1;  j++)  {  [BUGGY]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getColumns().length  -  1;  j++)  {	  for(int    j    =    0;    j    <    getColumns().length;    j++)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
15	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)col;  matrix[0][col]  =  f.getEntry(i,  col);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)col;  matrix[0][col]  =  f.getEntry(i,  col);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)col;  matrix[0][col]  =  f.getEntry(i,  col);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)matrix.get(i);    matrix[0][col]    =    f.getEntry(i,    col);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	79	None	replace
16	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry	  if(column!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
17	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry	  if(column!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
18	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEnt  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEnt  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEnt	  if(column!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
19	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[1][col]  =  f.getEntry(i,  column);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[1][col]  =  f.getEntry(i,  column);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[1][col]  =  f.getEntry(i,  column);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[0][col]    =    f.getEntry(i,    column);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
20	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  col  +  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  col  +  2);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  col  +  2);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.clone();    matrix[i    -    1][col++]    =    f.getEntry(i,    col    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	39	None	replace
21	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  matrix.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =  matrix.getEntry(i,  col);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =  matrix.getEntry(i,  col);	  LinearObjectiveFunction    f    =    matrix.getEntryFunction(i);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
22	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  matrix.getEntryFunction(i,  col);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =  matrix.getEntryFunction(i,  col);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =  matrix.getEntryFunction(i,  col);	  LinearObjectiveFunction    f    =    matrix.getEntryFunction(i);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
23	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  matrix.getEntryFunction(i,  column);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =  matrix.getEntryFunction(i,  column);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =  matrix.getEntryFunction(i,  column);	  LinearObjectiveFunction    f    =    matrix.getEntryFunction(i);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
24	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  table.getEntry(i,  col);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
25	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(i,  j);  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(i,  j);  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(i,  j);  matrix[i  -  1][col++]  =  table.getEntry(i,  col);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
26	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(i,  col);  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(i,  col);  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(i,  col);  matrix[i  -  1][col++]  =  table.getEntry(i,  j);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
27	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i    +    1);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
28	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  table.getEntry(i,  j);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i    +    1);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
29	[BUG]  [BUGGY]  if(column!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  if(column!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	if(column!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  }	  if(column!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
30	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  2);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  2);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  2);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
31	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =	  for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
32	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	For(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }	  For(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
33	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getMaxUlps();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  For(int  j  =  0;  j  <  getMaxUlps();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	For(int  j  =  0;  j  <  getMaxUlps();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	  For(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
34	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  For(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	For(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }	  For(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
35	[BUG]  [BUGGY]  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	matrix[i  -  1][col++]  =  table.getEntry(i,  col);	  matrix[i    -    1][col++]    =    table.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
36	[BUG]  [BUGGY]  matrix[i  -  1][col++]  =  table.getEntry(i,  j  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  matrix[i  -  1][col++]  =  table.getEntry(i,  j  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	matrix[i  -  1][col++]  =  table.getEntry(i,  j  +  1);	  matrix[i    -    1][col++]    =    table.getEntry(i,    j);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
37	[BUG]  [BUGGY]  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	matrix[i  -  1][col++]  =  column.getEntry(i,  j);	  matrix[i    -    1][col++]    =    table.getEntry(i,    j);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
38	[BUG]  [BUGGY]  matrix[i  -  1][col++]  =  column.getEntry(i,  col);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  matrix[i  -  1][col++]  =  column.getEntry(i,  col);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	matrix[i  -  1][col++]  =  column.getEntry(i,  col);	  matrix[i    -    1][col++]    =    table.getEntry(i,    j);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
39	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnLabels.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnLabels.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnLabels.contains(j))  {  matrix[i  -  1][col++]  =  column	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnLabels.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  <identifier>  expected	19	None	replace
40	[BUG]  [BUGGY]  if(column!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnLabels.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  if(column!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnLabels.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	if(column!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnLabels.contains(j))  {  matrix[i  -  1][col++]  =  column	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnLabels.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  <identifier>  expected	19	None	replace
41	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  col.size();  j++)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  col.size();  j++)  {  [BUGGY]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  col.size();  j++)  {	  for(int    j    =    0;    j    <    this.columnsToDrop.size();    j++)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
42	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  tableau.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  tableau.getEntry(i,  col);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  tableau.getEntry(i,  col);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    tableau.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
43	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  columnLabels.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  columnLabels.getEntry(i,  j);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  columnLabels.getEntry(i,  j);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    tableau.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
44	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  Table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  Table.getEntry(i,  col);  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  Table.getEntry(i,  col);  }	  for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    Table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
45	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  Table.getEntry(i,  j);  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  Table.getEntry(i,  j);  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  Table.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    Table.getEntry(i,    j);    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
46	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  matrix[i  -  1][col++]  =  Table.getEntry(i,  j);  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  matrix[i  -  1][col++]  =  Table.getEntry(i,  j);  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  matrix[i  -  1][col++]  =  Table.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    Table.getEntry(i,    j);    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
47	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  column.getEntryFunction(i,  table);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =  column.getEntryFunction(i,  table);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =  column.getEntryFunction(i,  table);	  LinearObjectiveFunction    f    =    table.getEntryFunction(i,    column);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
48	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  For(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	For(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	  For(int    j    =    0;    j    <    getWidth();    j++)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
49	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columns.get(i);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columns.get(i);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columns.get(i);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnLabels.get(i);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
50	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!table.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
51	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!table.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
52	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!table.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
53	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  columnLabels.getEntryFunction(i,  columnsToDrop);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =  columnLabels.getEntryFunction(i,  columnsToDrop);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =  columnLabels.getEntryFunction(i,  columnsToDrop);	  LinearObjectiveFunction    f    =    table.getEntryFunction(i,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
54	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  matrix.getEntryFunction(i,  columnsToDrop);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =  matrix.getEntryFunction(i,  columnsToDrop);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =  matrix.getEntryFunction(i,  columnsToDrop);	  LinearObjectiveFunction    f    =    table.getEntryFunction(i,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
55	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getColumnCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getColumnCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnToDrop.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
56	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column!=  illegal  start  of  type  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column!=  illegal  start  of  type  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column!=  illegal  start  of  type	  if(column!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  <identifier>  expected	17	None	replace
57	[BUG]  [BUGGY]  col  >  col)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  col  >  col)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	col  >  col)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry	  if(col    >=    col)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
58	[BUG]  [BUGGY]  col  >  col)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  col  >  col)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	col  >  col)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i	  if(col    >=    col)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
59	[BUG]  [BUGGY]  col  >  col)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  col  >  col)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	col  >  col)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(	  if(col    >=    col)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
60	[BUG]  [BUGGY]  col  >  col)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j)  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  col  >  col)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j)  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	col  >  col)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j)	  if(col    >=    col)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
61	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  For(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	For(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }	  For(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
62	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	For(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }	  For(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
63	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!table.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
64	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!table.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  not  a  statement	51	None	replace
65	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!table.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
66	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!table.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
67	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }	  for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    col);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
68	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  table.getEntry(i,  column);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  table.getEntry(i,  column);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  table.getEntry(i,  column);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.clone();    matrix[i    -    1][col++]    =    table.getEntry(i,    i);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
69	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  tableau.getEntry(i,  col);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  tableau.getEntry(i,  col);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  tableau.getEntry(i,  col);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.clone();    matrix[i    -    1][col++]    =    tableau.getEntry(i,    i);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
70	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  table.getEntry(i,  col  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =  table.getEntry(i,  col  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =  table.getEntry(i,  col  +  1);	  LinearObjectiveFunction    f    =    table.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
71	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  table.getEntry(i,  column);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =  table.getEntry(i,  column);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =  table.getEntry(i,  column);	  LinearObjectiveFunction    f    =    table.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
72	[BUG]  [BUGGY]  col  >  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  col  >  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	col  >  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry	  if(col    >=    0)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
73	[BUG]  [BUGGY]  col  >  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  col  >  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	col  >  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i	  if(col    >=    0)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
74	[BUG]  [BUGGY]  col  >  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  col  >  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	col  >  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(	  if(col    >=    0)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
75	[BUG]  [BUGGY]  col  >  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  col  >  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	col  >  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,	  if(col    >=    0)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  not  a  statement	73	None	replace
76	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  column);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  column);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  column);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.clone();    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  not  a  statement	33	None	replace
77	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  col  +  1);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  col  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  col  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.clone();    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  ';'  expected	33	None	replace
78	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  col,  column);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  col,  column);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  col,  column);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.clone();    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  not  a  statement	33	None	replace
79	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  col);  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  col);  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  col);  }	  for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    column.getEntry(i,    j);    }    	non-compiled	[CE]  not  a  statement	46	None	replace
80	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    column.getEntry(i,    j);    }    	non-compiled	[CE]  not  a  statement	46	None	replace
81	[BUG]  [BUGGY]  int  j  =  this.columnLabels.size()  -  1;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  int  j  =  this.columnLabels.size()  -  1;  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	int  j  =  this.columnLabels.size()  -  1;	  int    j    =    this.columnLabels.size();    	non-compiled	[CE]  not  a  statement	43	None	replace
82	[BUG]  [BUGGY]  int  j  =  this.columnLabels.size()  -  2;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  int  j  =  this.columnLabels.size()  -  2;  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	int  j  =  this.columnLabels.size()  -  2;	  int    j    =    this.columnLabels.size();    	non-compiled	[CE]  not  a  statement	43	None	replace
83	[BUG]  [BUGGY]  int  j  =  this.columnsToDrop.size()  -  1;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  int  j  =  this.columnsToDrop.size()  -  1;  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	int  j  =  this.columnsToDrop.size()  -  1;	  int    j    =    this.columnsToDrop.size();    	non-compiled	[CE]  not  a  statement	61	None	replace
84	[BUG]  [BUGGY]  int  j  =  this.columnsToDrop.size()  +  1;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  int  j  =  this.columnsToDrop.size()  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	int  j  =  this.columnsToDrop.size()  +  1;	  int    j    =    this.columnsToDrop.size();    	non-compiled	[CE]  not  a  statement	61	None	replace
85	[BUG]  [BUGGY]  int  j  =  this.columnsToDrop.size()  -  2;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  int  j  =  this.columnsToDrop.size()  -  2;  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	int  j  =  this.columnsToDrop.size()  -  2;	  int    j    =    this.columnsToDrop.size();    	non-compiled	[CE]  not  a  statement	61	None	replace
86	[BUG]  [BUGGY]  if(column!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  if(column!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	if(column!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  column	  if(column!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!table.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
87	[BUG]  [BUGGY]  if(column!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  column  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  if(column!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  column  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	if(column!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  column  }	  if(column!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!table.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
88	[BUG]  [BUGGY]  if(column!=  null)  {  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  if(column!=  null)  {  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	if(column!=  null)  {  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  column	  if(column!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!table.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
89	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  }	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
90	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  }	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
91	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  }	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    }    	non-compiled	[CE]  not  a  statement	77	None	replace
92	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnsCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getColumnsCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getColumnsCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  }	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    }    	non-compiled	[CE]  not  a  statement	77	None	replace
93	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j    	non-compiled	[CE]  not  a  statement	50	None	replace
94	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j    	non-compiled	[CE]  not  a  statement	50	None	replace
95	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
96	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
97	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    getWidth();    j++)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  not  a  statement	6	None	replace
98	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  not  a  statement	18	None	replace
99	[BUG]  [BUGGY]  col  >  col)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  col  >  col)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	col  >  col)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i	  if(col    >=    col)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  not  a  statement	71	None	replace
100	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	For(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =	  For(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  not  a  statement	21	None	replace
101	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  For(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	For(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =	  For(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  not  a  statement	21	None	replace
102	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnsCount()  -  1;  j++)  {  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getColumnsCount()  -  1;  j++)  {  [BUGGY]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getColumnsCount()  -  1;  j++)  {	  for(int    j    =    0;    j    <    getColumnsCount();    j++)    {    	non-compiled	[CE]  not  a  statement	5	None	replace
103	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnsCount()  -  2;  j++)  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getColumnsCount()  -  2;  j++)  {  [BUGGY]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getColumnsCount()  -  2;  j++)  {	  for(int    j    =    0;    j    <    getColumnsCount();    j++)    {    	non-compiled	[CE]  not  a  statement	5	None	replace
104	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getRowsCount();  j++)  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getRowsCount();  j++)  {  [BUGGY]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getRowsCount();  j++)  {	  for(int    j    =    0;    j    <    getColumnsCount();    j++)    {    	non-compiled	[CE]  not  a  statement	5	None	replace
105	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columns.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  i);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columns.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  i);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columns.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  i);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)matrix.clone();    matrix[i    -    1][col++]    =    f.getEntry(i,    i);    	non-compiled	[CE]  not  a  statement	59	None	replace
106	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)matrix.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)matrix.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)matrix.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  col);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)matrix.clone();    matrix[i    -    1][col++]    =    f.getEntry(i,    i);    	non-compiled	[CE]  not  a  statement	59	None	replace
107	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  not  a  statement	48	None	replace
108	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  table.getEntry(i,  col);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  not  a  statement	48	None	replace
109	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columns.size();  j++)  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  columns.size();  j++)  {  [BUGGY]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  columns.size();  j++)  {	  for(int    j    =    0;    j    <    columnLabels.size();    j++)    {    	non-compiled	[CE]  not  a  statement	67	None	replace
110	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  this.columns.size();  j++)  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  this.columns.size();  j++)  {  [BUGGY]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  this.columns.size();  j++)  {	  for(int    j    =    0;    j    <    columnLabels.size();    j++)    {    	non-compiled	[CE]  not  a  statement	67	None	replace
111	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rowsToDrop.size();  j++)  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  rowsToDrop.size();  j++)  {  [BUGGY]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  rowsToDrop.size();  j++)  {	  for(int    j    =    0;    j    <    getRowsToDrop.size();    j++)    {    	non-compiled	[CE]  not  a  statement	31	None	replace
112	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[1][col]  =  f.getEntry(i,  col  +  1);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[1][col]  =  f.getEntry(i,  col  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[1][col]  =  f.getEntry(i,  col  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[1][col]    =    f.getEntry(i,    col);    	non-compiled	[CE]  not  a  statement	10	None	replace
113	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }	  for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  not  a  statement	29	None	replace
114	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  not  a  statement	29	None	replace
115	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.clone();  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.clone();  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.clone();  matrix[i  -  1][col++]  =  table.getEntry(i,  col);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.clone();    matrix[i    -    1][col++]    =    table.getEntry(i,    i);    	non-compiled	[CE]  not  a  statement	34	None	replace
116	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  not  a  statement	9	None	replace
117	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  col  +  1);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  col  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  col  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  not  a  statement	13	None	replace
118	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  column);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  column);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  column);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  not  a  statement	13	None	replace
119	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnsToDrop.get(i  +  1);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnsToDrop.get(i  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnsToDrop.get(i  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.columnsToDrop.get(i);    	non-compiled	[CE]  not  a  statement	65	None	replace
120	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  matrix.getEntryFunction(i,  table);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =  matrix.getEntryFunction(i,  table);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =  matrix.getEntryFunction(i,  table);	  LinearObjectiveFunction    f    =    table.getEntryFunction(i,    matrix);    	non-compiled	[CE]  not  a  statement	60	None	replace
121	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnsCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getColumnsCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getColumnsCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  not  a  statement	27	None	replace
122	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    getWidth();    j++)    {    matrix[i    -    1][col++]    =    column.getEntry(i,    j);    }    	non-compiled	[CE]  not  a  statement	53	None	replace
123	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  col);  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  col);  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  col);  }	  for(int    j    =    0;    j    <    getWidth();    j++)    {    matrix[i    -    1][col++]    =    column.getEntry(i,    j);    }    	non-compiled	[CE]  not  a  statement	53	None	replace
124	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  table.getEntryFunction(i,  col  +  1);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =  table.getEntryFunction(i,  col  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =  table.getEntryFunction(i,  col  +  1);	  LinearObjectiveFunction    f    =    table.getEntryFunction(i,    col);    	non-compiled	[CE]  not  a  statement	3	None	replace
125	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  table.getEntryFunction(i,  col,  column);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =  table.getEntryFunction(i,  col,  column);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =  table.getEntryFunction(i,  col,  column);	  LinearObjectiveFunction    f    =    table.getEntryFunction(i,    col);    	non-compiled	[CE]  not  a  statement	3	None	replace
126	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =	  for(int    j    =    0;    j    <    getColumnsToDrop.size();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  not  a  statement	54	None	replace
127	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getSize();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getSize();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getSize();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =	  for(int    j    =    0;    j    <    getColumnsToDrop.size();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  not  a  statement	54	None	replace
128	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnsCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getColumnsCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getColumnsCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  not  a  statement	20	None	replace
129	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);  matrix[0][col]  =  f.getEntry(i,  col  +  1);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);  matrix[0][col]  =  f.getEntry(i,  col  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);  matrix[0][col]  =  f.getEntry(i,  col  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i    -    1);    matrix[0][col]    =    f.getEntry(i,    col);    	non-compiled	[CE]  not  a  statement	64	None	replace
130	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);  matrix[1][col]  =  f.getEntry(i,  col);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);  matrix[1][col]  =  f.getEntry(i,  col);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);  matrix[1][col]  =  f.getEntry(i,  col);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i    -    1);    matrix[0][col]    =    f.getEntry(i,    col);    	non-compiled	[CE]  not  a  statement	64	None	replace
131	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);  matrix[0][col]  =  f.getEntry(i,  column);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);  matrix[0][col]  =  f.getEntry(i,  column);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);  matrix[0][col]  =  f.getEntry(i,  column);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i    -    1);    matrix[0][col]    =    f.getEntry(i,    col);    	non-compiled	[CE]  not  a  statement	64	None	replace
132	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  Table.getEntry(i,  j);  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  Table.getEntry(i,  j);  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	For(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  Table.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    getWidth();    j++)    {    matrix[i    -    1][col++]    =    Table.getEntry(i,    j);    }    	non-compiled	[CE]  not  a  statement	52	None	replace
133	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  Table.getEntry(i,  col);  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  Table.getEntry(i,  col);  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  Table.getEntry(i,  col);  }	  for(int    j    =    0;    j    <    getWidth();    j++)    {    matrix[i    -    1][col++]    =    Table.getEntry(i,    j);    }    	non-compiled	[CE]  not  a  statement	52	None	replace
134	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)matricesToDrop.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  i);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)matricesToDrop.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  i);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)matricesToDrop.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  i);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)matrix.clone();    matrix[i    -    1][col++]    =    f.getEntry(i,    i);    	non-compiled	[CE]  not  a  statement	59	None	replace
135	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)matrix.clone();  matrix[i  -  1][col++]  =  table.getEntry(i,  i);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)matrix.clone();  matrix[i  -  1][col++]  =  table.getEntry(i,  i);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)matrix.clone();  matrix[i  -  1][col++]  =  table.getEntry(i,  i);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)matrix.clone();    matrix[i    -    1][col++]    =    f.getEntry(i,    i);    	non-compiled	[CE]  not  a  statement	59	None	replace
136	[BUG]  [BUGGY]  col  >  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  col  >  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	col  >  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i	  if(col    >=    0)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  not  a  statement	73	None	replace
137	[BUG]  [BUGGY]  col  >  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  col  >  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	col  >  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][	  if(col    >=    0)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  not  a  statement	73	None	replace
138	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  3);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  3);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  3);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i    +    1);    	non-compiled	[CE]  not  a  statement	40	None	replace
139	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  For(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	For(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	  For(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  not  a  statement	28	None	replace
140	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnsCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getColumnsCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getColumnsCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j    	non-compiled	[CE]  not  a  statement	50	None	replace
141	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j    	non-compiled	[CE]  not  a  statement	50	None	replace
142	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumns();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getColumns();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getColumns();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j    	non-compiled	[CE]  not  a  statement	50	None	replace
143	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnsCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getColumnsCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getColumnsCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j    	non-compiled	[CE]  not  a  statement	50	None	replace
144	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumns();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getColumns();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getColumns();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  not  a  statement	27	None	replace
145	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!table.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  not  a  statement	55	None	replace
146	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumns();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getColumns();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getColumns();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!table.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  not  a  statement	55	None	replace
147	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columns.get(i);  matrix[0][col]  =  f.getEntry(i,  col);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columns.get(i);  matrix[0][col]  =  f.getEntry(i,  col);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columns.get(i);  matrix[0][col]  =  f.getEntry(i,  col);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)matrix.get(i);    matrix[0][col]    =    f.getEntry(i,    col);    	non-compiled	[CE]  not  a  statement	79	None	replace
148	[BUG]  [BUGGY]  if(column!=  null)  {  for(int  j  =  0;  j  <  getColumnCount();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  if(column!=  null)  {  for(int  j  =  0;  j  <  getColumnCount();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	if(column!=  null)  {  for(int  j  =  0;  j  <  getColumnCount();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  column	  if(column!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!table.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  not  a  statement	58	None	replace
149	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[1][col]  =  f.getEntry(i,  col);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[1][col]  =  f.getEntry(i,  col);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[1][col]  =  f.getEntry(i,  col);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[1][col]    =    f.getEntry(i,    col);    	non-compiled	[CE]  not  a  statement	10	None	replace
150	[BUG]  [BUGGY]  col  =  columnLabels.get(col);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  col  =  columnLabels.get(col);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	col  =  columnLabels.get(col);	  if(column!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  not  a  statement	74	None	replace
151	[BUG]  [BUGGY]  col  =  table.getEntry(i,  j);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  col  =  table.getEntry(i,  j);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	col  =  table.getEntry(i,  j);	  if(column!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  not  a  statement	74	None	replace
152	[BUG]  [BUGGY]  ColumnLabels.remove(col);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  ColumnLabels.remove(col);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	ColumnLabels.remove(col);	  if(column!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  not  a  statement	74	None	replace
153	[BUG]  [BUGGY]  col  =  table.getEntry(i,  i);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  col  =  table.getEntry(i,  i);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	col  =  table.getEntry(i,  i);	  if(column!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  not  a  statement	74	None	replace
154	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnsCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getColumnsCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getColumnsCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  not  a  statement	16	None	replace
155	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getMaxUlps();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  For(int  j  =  0;  j  <  getMaxUlps();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	For(int  j  =  0;  j  <  getMaxUlps();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =	  For(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  not  a  statement	21	None	replace
156	[BUG]  [BUGGY]  int  j  =  columns.size();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  int  j  =  columns.size();  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	int  j  =  columns.size();	  int    j    =    columnLabels.size()    -    1;    	non-compiled	[CE]  not  a  statement	42	None	replace
157	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  table.getEntry(i,  i  +  1);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  table.getEntry(i,  i  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  table.getEntry(i,  i  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.clone();    matrix[i    -    1][col++]    =    f.getEntry(i,    i    +    1);    	non-compiled	[CE]  not  a  statement	75	None	replace
158	[BUG]  [BUGGY]  if(column!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  if(column!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	if(column!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table	  if(column!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  not  a  statement	17	None	replace
159	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  table.getEntryFunction(i,  columnsToDrop,  col);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =  table.getEntryFunction(i,  columnsToDrop,  col);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =  table.getEntryFunction(i,  columnsToDrop,  col);	  LinearObjectiveFunction    f    =    table.getEntryFunction(i,    columnsToDrop);    	non-compiled	[CE]  not  a  statement	36	None	replace
160	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  tableau.getEntryFunction(i,  col);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =  tableau.getEntryFunction(i,  col);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =  tableau.getEntryFunction(i,  col);	  LinearObjectiveFunction    f    =    table.getEntryFunction(i,    columnsToDrop);    	non-compiled	[CE]  not  a  statement	36	None	replace
161	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)matrix.get(i);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)matrix.get(i);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)matrix.get(i);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.columnsToDrop.get(i);    	non-compiled	[CE]  not  a  statement	65	None	replace
162	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i  +  1);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnLabels.get(i);    	non-compiled	[CE]  not  a  statement	66	None	replace
163	[BUG]  [BUGGY]  col  =  columnsToDrop.size();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  col  =  columnsToDrop.size();  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	col  =  columnsToDrop.size();	  if(col    >=    col)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  not  a  statement	71	None	replace
164	[BUG]  [BUGGY]  col  =  columnLabels.size();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  col  =  columnLabels.size();  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	col  =  columnLabels.size();	  if(col    >=    col)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  not  a  statement	71	None	replace
165	[BUG]  [BUGGY]  col  =  columnsToDrop.size()  -  1;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  col  =  columnsToDrop.size()  -  1;  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	col  =  columnsToDrop.size()  -  1;	  if(col    >=    col)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  not  a  statement	71	None	replace
166	[BUG]  [BUGGY]  col  =  columnLabels.get(i);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  col  =  columnLabels.get(i);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	col  =  columnLabels.get(i);	  if(column!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  not  a  statement	56	None	replace
167	[BUG]  [BUGGY]  col  =  columnsToDrop.get(i);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  col  =  columnsToDrop.get(i);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	col  =  columnsToDrop.get(i);	  if(column!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  not  a  statement	56	None	replace
168	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  table.getEntry(i,  j);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  not  a  statement	48	None	replace
169	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  not  a  statement	48	None	replace
170	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnCount();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getColumnCount();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getColumnCount();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    getWidth();    j++)    {    matrix[i    -    1][col++]    =    column.getEntry(i,    j);    }    	non-compiled	[CE]  not  a  statement	53	None	replace
171	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[0][col]  =  f.getEntry(i,  col  +  1);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[0][col]  =  f.getEntry(i,  col  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[0][col]  =  f.getEntry(i,  col  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[0][col]    =    f.getEntry(i,    col    +    1);    	non-compiled	[CE]  not  a  statement	11	None	replace
172	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  this.columnsToDrop.size();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  this.columnsToDrop.size();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  this.columnsToDrop.size();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =	  for(int    j    =    0;    j    <    getColumnsToDrop.size();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  not  a  statement	54	None	replace
173	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumns();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getColumns();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getColumns();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!table.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  not  a  statement	51	None	replace
174	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnCount();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getColumnCount();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getColumnCount();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!table.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  not  a  statement	51	None	replace
175	[BUG]  [BUGGY]  matrix[i  -  1][col++]  =  tableau.getEntry(i,  col);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  matrix[i  -  1][col++]  =  tableau.getEntry(i,  col);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	matrix[i  -  1][col++]  =  tableau.getEntry(i,  col);	  matrix[i    -    1][col++]    =    table.getEntry(i,    j);    	non-compiled	[CE]  not  a  statement	68	None	replace
176	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i  +  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i  +  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i  +  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i    +    1);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  not  a  statement	15	None	replace
177	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i    +    1);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  not  a  statement	15	None	replace
178	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(i,  j);  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(i,  j);  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getEntry(i,  j);  matrix[i  -  1][col++]  =  table.getEntry(i,  j);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    	non-compiled	[CE]  not  a  statement	14	None	replace
179	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  this.columnLabels.size();  j++)  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  this.columnLabels.size();  j++)  {  [BUGGY]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  this.columnLabels.size();  j++)  {	  for(int    j    =    0;    j    <    columnLabels.size();    j++)    {    	non-compiled	[CE]  not  a  statement	67	None	replace
180	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  tableau.getEntry(i,  col  +  1);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  tableau.getEntry(i,  col  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  tableau.getEntry(i,  col  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.clone();    matrix[i    -    1][col++]    =    f.getEntry(i,    col    +    1);    	non-compiled	[CE]  not  a  statement	39	None	replace
181	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  graph.getEntry(i,  col  +  1);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  graph.getEntry(i,  col  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  graph.getEntry(i,  col  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.clone();    matrix[i    -    1][col++]    =    f.getEntry(i,    col    +    1);    	non-compiled	[CE]  not  a  statement	39	None	replace
182	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getSize();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getSize();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getSize();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    getWidth();    j++)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  not  a  statement	6	None	replace
183	[BUG]  [BUGGY]  Integer  j  =  columnsToDrop.size();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  Integer  j  =  columnsToDrop.size();  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	Integer  j  =  columnsToDrop.size();	  int    j    =    columnsToDrop.size()    +    1;    	non-compiled	[CE]  not  a  statement	26	None	replace
184	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  table.getEntryFunction(i,  columns);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =  table.getEntryFunction(i,  columns);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =  table.getEntryFunction(i,  columns);	  LinearObjectiveFunction    f    =    table.getEntryFunction(i,    column);    	non-compiled	[CE]  not  a  statement	35	None	replace
185	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  table.getEntryFunction(i,  column  +  1);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =  table.getEntryFunction(i,  column  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =  table.getEntryFunction(i,  column  +  1);	  LinearObjectiveFunction    f    =    table.getEntryFunction(i,    column);    	non-compiled	[CE]  not  a  statement	35	None	replace
186	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  table.getEntry(i,  col  -  1);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =  table.getEntry(i,  col  -  1);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =  table.getEntry(i,  col  -  1);	  LinearObjectiveFunction    f    =    table.getEntry(i,    col);    	non-compiled	[CE]  not  a  statement	2	None	replace
187	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  table.getEntry(i,  i);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =  table.getEntry(i,  i);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =  table.getEntry(i,  i);	  LinearObjectiveFunction    f    =    table.getEntry(i,    col);    	non-compiled	[CE]  not  a  statement	2	None	replace
188	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  this.columnsToDrop.size()  +  1;  j++)  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  this.columnsToDrop.size()  +  1;  j++)  {  [BUGGY]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  this.columnsToDrop.size()  +  1;  j++)  {	  for(int    j    =    0;    j    <    this.columnsToDrop.size();    j++)    {    	non-compiled	[CE]  not  a  statement	32	None	replace
189	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnCount();  j++)  {  matrix[i  -  1][col++]  =  Table.getEntry(i,  j);  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getColumnCount();  j++)  {  matrix[i  -  1][col++]  =  Table.getEntry(i,  j);  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getColumnCount();  j++)  {  matrix[i  -  1][col++]  =  Table.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    getWidth();    j++)    {    matrix[i    -    1][col++]    =    Table.getEntry(i,    j);    }    	non-compiled	[CE]  not  a  statement	52	None	replace
190	[BUG]  [BUGGY]  if(column!=  null)  {  for(int  j  =  0;  j  <  getColumnCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  if(column!=  null)  {  for(int  j  =  0;  j  <  getColumnCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	if(column!=  null)  {  for(int  j  =  0;  j  <  getColumnCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column	  if(column!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  not  a  statement	57	None	replace
191	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)matrix.get(i);  matrix[0][col]  =  f.getEntry(i,  column);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)matrix.get(i);  matrix[0][col]  =  f.getEntry(i,  column);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)matrix.get(i);  matrix[0][col]  =  f.getEntry(i,  column);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[0][col]    =    f.getEntry(i,    column);    	non-compiled	[CE]  not  a  statement	12	None	replace
192	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnLabels.length;  j++)  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  columnLabels.length;  j++)  {  [BUGGY]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  columnLabels.length;  j++)  {	  for(int    j    =    0;    j    <    getColumns().length;    j++)    {    	non-compiled	[CE]  not  a  statement	44	None	replace
193	[BUG]  [BUGGY]  col  >=  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  col  >=  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	col  >=  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,	  if(col    >=    col)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  not  a  statement	71	None	replace
194	[BUG]  [BUGGY]  col  >=  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  col  >=  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	col  >=  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(	  if(col    >=    col)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  not  a  statement	71	None	replace
195	[BUG]  [BUGGY]  col  >=  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  col  >=  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	col  >=  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i	  if(col    >=    col)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  not  a  statement	71	None	replace
196	[BUG]  [BUGGY]  int  j  =  matrix.size();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  int  j  =  matrix.size();  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	int  j  =  matrix.size();	  int    j    =    this.columnLabels.size();    	non-compiled	[CE]  not  a  statement	43	None	replace
197	[BUG]  [BUGGY]  if(col  <  =  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  if(col  <  =  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	if(col  <  =  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column	  if(column!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  not  a  statement	57	None	replace
198	[BUG]  [BUGGY]  if(col!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  if(col!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	if(col!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column	  if(column!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  not  a  statement	57	None	replace
199	[BUG]  [BUGGY]  if(col  <  =  0)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  if(col  <  =  0)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	if(col  <  =  0)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column	  if(column!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  not  a  statement	57	None	replace
200	[BUG]  [BUGGY]  if(col  <  columnsToDrop.size())  {  if(col!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  if(col  <  columnsToDrop.size())  {  if(col!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	if(col  <  columnsToDrop.size())  {  if(col!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i	  if(column!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  not  a  statement	57	None	replace
201	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)matrix.get(i);  matrix[0][col]  =  f.getEntry(i,  col  +  1);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)matrix.get(i);  matrix[0][col]  =  f.getEntry(i,  col  +  1);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)matrix.get(i);  matrix[0][col]  =  f.getEntry(i,  col  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[0][col]    =    f.getEntry(i,    col    +    1);    	non-compiled	[CE]  not  a  statement	11	None	replace
202	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(col))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(col))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(col))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }	  For(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  not  a  statement	28	None	replace
203	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(col))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  For(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(col))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	For(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(col))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }	  For(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  not  a  statement	28	None	replace
204	[BUG]  [BUGGY]  if(col  <  =  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  if(col  <  =  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	if(col  <  =  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  column	  if(column!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!table.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  not  a  statement	58	None	replace
205	[BUG]  [BUGGY]  if(col  <  columnsToDrop.size())  {  if(column!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  if(col  <  columnsToDrop.size())  {  if(column!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	if(col  <  columnsToDrop.size())  {  if(column!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  column	  if(column!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!table.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  not  a  statement	58	None	replace
206	[BUG]  [BUGGY]  if(col!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  if(col!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	if(col!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  column	  if(column!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!table.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  not  a  statement	58	None	replace
207	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =	  for(int    j    =    0;    j    <    getColumnsToDrop.size();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  not  a  statement	54	None	replace
208	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnToDrop.contains(j))  {  matrix[i  -  1][col++]  =	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnToDrop.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  not  a  statement	78	None	replace
209	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getSize();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getSize();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getSize();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  not  a  statement	16	None	replace
210	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  tablesToDrop.size();  j++)  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  tablesToDrop.size();  j++)  {  [BUGGY]      if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  tablesToDrop.size();  j++)  {	  for(int    j    =    0;    j    <    this.columnsToDrop.size();    j++)    {    	non-compiled	[CE]  not  a  statement	32	None	replace
211	[BUG]  [BUGGY]  if(col  <  columnsToDrop.size())  {  if(col!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  if(col  <  columnsToDrop.size())  {  if(col!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	if(col  <  columnsToDrop.size())  {  if(col!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  not  a  statement	18	None	replace
212	[BUG]  [BUGGY]  if(col  <  =  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnLabels.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  if(col  <  =  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnLabels.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	if(col  <  =  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnLabels.contains(j))  {  matrix[i  -  1][col++]  =  column	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnLabels.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  not  a  statement	19	None	replace
213	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  column.getEntry(i,  j);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    tableau.getEntry(i,    j);    	non-compiled	[CE]  not  a  statement	49	None	replace
214	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(col))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(col))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(col))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }	  for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  not  a  statement	29	None	replace
215	[BUG]  [BUGGY]  col  +=  columnsToDrop.size();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  col  +=  columnsToDrop.size();  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	col  +=  columnsToDrop.size();	  if(col    >=    col)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j    	non-compiled	[CE]  not  a  statement	72	None	replace
216	[BUG]  [BUGGY]  col  +=  columnsToDrop.size()  -  1;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  col  +=  columnsToDrop.size()  -  1;  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	col  +=  columnsToDrop.size()  -  1;	  if(col    >=    col)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j    	non-compiled	[CE]  not  a  statement	72	None	replace
217	[BUG]  [BUGGY]  col  +=  columnLabels.size();  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  col  +=  columnLabels.size();  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	col  +=  columnLabels.size();	  if(col    >=    col)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j    	non-compiled	[CE]  not  a  statement	72	None	replace
218	[BUG]  [BUGGY]  col  =  table.getEntry(i,  j  +  getHeight());  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  col  =  table.getEntry(i,  j  +  getHeight());  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	col  =  table.getEntry(i,  j  +  getHeight());	  if(col    >=    col)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j    	non-compiled	[CE]  not  a  statement	72	None	replace
219	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(col))  {  matrix[i  -  1][col++]  =  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(col))  {  matrix[i  -  1][col++]  =  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(col))  {  matrix[i  -  1][col++]  =	  for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  not  a  statement	22	None	replace
220	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getSize();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getSize();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getSize();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  }	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    }    	non-compiled	[CE]  not  a  statement	77	None	replace
221	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  }	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    }    	non-compiled	[CE]  not  a  statement	77	None	replace
222	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)scale.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  i);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)scale.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  i);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)scale.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  i);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)matrix.clone();    matrix[i    -    1][col++]    =    f.getEntry(i,    i);    	non-compiled	[CE]  not  a  statement	59	None	replace
223	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(i);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(i);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(i);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnLabels.get(i);    	non-compiled	[CE]  not  a  statement	66	None	replace
224	[BUG]  [BUGGY]  Int  j  =  columnsToDrop.size();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  Int  j  =  columnsToDrop.size();  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	Int  j  =  columnsToDrop.size();	  int    j    =    columnsToDrop.size()    +    1;    	non-compiled	[CE]  not  a  statement	26	None	replace
225	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  table.getEntryFunction(i,  columnLabels);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =  table.getEntryFunction(i,  columnLabels);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =  table.getEntryFunction(i,  columnLabels);	  LinearObjectiveFunction    f    =    table.getEntryFunction(i,    columnsToDrop);    	non-compiled	[CE]  not  a  statement	36	None	replace
226	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  table.getEntryFunction(i,  columnsToDrop,  columnLabels);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =  table.getEntryFunction(i,  columnsToDrop,  columnLabels);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =  table.getEntryFunction(i,  columnsToDrop,  columnLabels);	  LinearObjectiveFunction    f    =    table.getEntryFunction(i,    columnsToDrop);    	non-compiled	[CE]  not  a  statement	36	None	replace
227	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!columnsToDrop.contains(col))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!columnsToDrop.contains(col))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!columnsToDrop.contains(col))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  not  a  statement	27	None	replace
228	[BUG]  [BUGGY]  if(col  <  =  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  if(col  <  =  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	if(col  <  =  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =	  if(column!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  not  a  statement	56	None	replace
229	[BUG]  [BUGGY]  if(col!=  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  if(col!=  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	if(col!=  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =	  if(column!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  not  a  statement	56	None	replace
230	[BUG]  [BUGGY]  if(col!=  0)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  if(col!=  0)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	if(col!=  0)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =	  if(column!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  not  a  statement	56	None	replace
231	[BUG]  [BUGGY]  if(col  <  =  0)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  if(col  <  =  0)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	if(col  <  =  0)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =	  if(column!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  not  a  statement	56	None	replace
232	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getSize();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getSize();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getSize();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!table.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  not  a  statement	55	None	replace
233	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!table.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  not  a  statement	51	None	replace
234	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!table.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  not  a  statement	51	None	replace
235	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(col))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(col))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(col))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j    	non-compiled	[CE]  not  a  statement	50	None	replace
236	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  column.getEntry(i,  j);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    	non-compiled	[CE]  not  a  statement	14	None	replace
237	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  i);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  i);  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  i);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    col);    	non-compiled	[CE]  not  a  statement	13	None	replace
238	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  Table.getEntry(i,  j);  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  For(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  Table.getEntry(i,  j);  }  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	For(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  Table.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    getWidth();    j++)    {    matrix[i    -    1][col++]    =    Table.getEntry(i,    j);    }    	non-compiled	[CE]  not  a  statement	52	None	replace
239	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(col))  {  matrix[i  -  1][col++]  =  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(col))  {  matrix[i  -  1][col++]  =  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(col))  {  matrix[i  -  1][col++]  =	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  not  a  statement	20	None	replace
240	[BUG]  [BUGGY]  if(col  <  =  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  if(col  <  =  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	if(col  <  =  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry	  if(column!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  not  a  statement	74	None	replace
241	[BUG]  [BUGGY]  if(col!=  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  if(col!=  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	if(col!=  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry	  if(column!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  not  a  statement	74	None	replace
242	[BUG]  [BUGGY]  if(col  ==  col)  {  if(col!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  if(col  ==  col)  {  if(col!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	if(col  ==  col)  {  if(col!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.	  if(column!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  not  a  statement	74	None	replace
243	[BUG]  [BUGGY]  if(col  ==  col)  {  if(col!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;      [BUGGY]  if(col  ==  col)  {  if(col!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [BUGGY]      for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	if(col  ==  col)  {  if(col!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry	  if(column!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  not  a  statement	74	None	replace
