bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {  [BUGGY]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  columnsToDrop.size();  j++)  {	  for(int    j    =    0;    j    <    getHeight();    j++)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
2	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  table.getEntry(i,  col);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  LinearObjectiveFunction  f  =  table.getEntry(i,  col);  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =  table.getEntry(i,  col);	      LinearObjectiveFunction    f    =    table.getEntryFunction(i);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
3	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  table.getEntryFunction(i,  col);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  LinearObjectiveFunction  f  =  table.getEntryFunction(i,  col);  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =  table.getEntryFunction(i,  col);	      LinearObjectiveFunction    f    =    table.getEntryFunction(i);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
4	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  matrix.getEntryFunction(i);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  LinearObjectiveFunction  f  =  matrix.getEntryFunction(i);  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =  matrix.getEntryFunction(i);	      LinearObjectiveFunction    f    =    table.getEntryFunction(i);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
5	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnsCount();  j++)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  for(int  j  =  0;  j  <  getColumnsCount();  j++)  {  [BUGGY]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getColumnsCount();  j++)  {	  for(int    j    =    0;    j    <    getSize();    j++)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
6	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
7	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  For(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	For(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
8	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	For(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
9	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
10	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[1][col]  =  f.getEntry(i,  col);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[1][col]  =  f.getEntry(i,  col);  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[1][col]  =  f.getEntry(i,  col);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[0][col]    =    f.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
11	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[0][col]  =  f.getEntry(i,  col  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[0][col]  =  f.getEntry(i,  col  +  1);  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[0][col]  =  f.getEntry(i,  col  +  1);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[0][col]    =    f.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
12	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[0][col]  =  f.getEntry(i,  column);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[0][col]  =  f.getEntry(i,  column);  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[0][col]  =  f.getEntry(i,  column);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[0][col]    =    f.getEntry(i,    col);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
13	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  col);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
14	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  table.getEntry(i,  j);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
15	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
16	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
17	[BUG]  [BUGGY]  if(column!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  if(column!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	if(column!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
18	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  <identifier>  expected	1	None	replace
19	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnLabels.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnLabels.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnLabels.contains(j))  {  matrix[i  -  1][col++]  =  column	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
20	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
21	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  For(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	For(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
22	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
23	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  if(columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
24	[BUG]  [BUGGY]  int  j  =  rowsToDrop.size();  [CE]  ']'  expected  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  int  j  =  rowsToDrop.size();  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	int  j  =  rowsToDrop.size();	      int    j    =    columnsToDrop.size()    -    1;    	non-compiled	[CE]  ']'  expected	19	None	replace
25	[BUG]  [BUGGY]  int  j  =  columnsToDrop.size()  -  2;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  int  j  =  columnsToDrop.size()  -  2;  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	int  j  =  columnsToDrop.size()  -  2;	      int    j    =    columnsToDrop.size();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
26	[BUG]  [BUGGY]  int  j  =  columnsToDrop.size()  +  1;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  int  j  =  columnsToDrop.size()  +  1;  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	int  j  =  columnsToDrop.size()  +  1;	      int    j    =    columnsToDrop.size();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
27	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
28	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  For(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	For(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
29	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  ']'  expected  [FE]                  AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  ']'  expected	4	None	replace
30	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  ']'  expected  [FE]                    AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	For(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  ']'  expected	4	None	replace
31	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getRowsToDrop.size();  j++)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  for(int  j  =  0;  j  <  getRowsToDrop.size();  j++)  {  [BUGGY]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getRowsToDrop.size();  j++)  {	  for(int    j    =    0;    j    <    getColumnsToDrop.size();    j++)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
32	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  this.columnsToDrop.size();  j++)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  for(int  j  =  0;  j  <  this.columnsToDrop.size();  j++)  {  [BUGGY]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  this.columnsToDrop.size();  j++)  {	  for(int    j    =    0;    j    <    getColumnsToDrop.size();    j++)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
33	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  col);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.clone();    matrix[i    -    1][col++]    =    f.getEntry(i,    i);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
34	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.clone();  matrix[i  -  1][col++]  =  table.getEntry(i,  i);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.clone();  matrix[i  -  1][col++]  =  table.getEntry(i,  i);  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.clone();  matrix[i  -  1][col++]  =  table.getEntry(i,  i);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.clone();    matrix[i    -    1][col++]    =    f.getEntry(i,    i);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
35	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  table.getEntryFunction(i,  column);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  LinearObjectiveFunction  f  =  table.getEntryFunction(i,  column);  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =  table.getEntryFunction(i,  column);	      LinearObjectiveFunction    f    =    table.getEntryFunction(i,    i);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
36	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  table.getEntryFunction(i,  columnsToDrop);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  LinearObjectiveFunction  f  =  table.getEntryFunction(i,  columnsToDrop);  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =  table.getEntryFunction(i,  columnsToDrop);	      LinearObjectiveFunction    f    =    table.getEntryFunction(i,    i);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
37	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  col);  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  col);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.clone();    matrix[i    -    1][col++]    =    f.getEntry(i,    i);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
38	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  table.getEntry(i,  col);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.clone();    matrix[i    -    1][col++]    =    f.getEntry(i,    i);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
39	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  col  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  col  +  1);  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  col  +  1);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.clone();    matrix[i    -    1][col++]    =    f.getEntry(i,    i);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
40	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
41	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i-1);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i-1);  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i-1);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
42	[BUG]  [BUGGY]  int  j  =  columnLabels.size()  -  1;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  int  j  =  columnLabels.size()  -  1;  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	int  j  =  columnLabels.size()  -  1;	      int    j    =    columnLabels.size();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
43	[BUG]  [BUGGY]  int  j  =  this.columnLabels.size();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  int  j  =  this.columnLabels.size();  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	int  j  =  this.columnLabels.size();	      int    j    =    columnLabels.size();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
44	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumns().length;  j++)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  for(int  j  =  0;  j  <  getColumns().length;  j++)  {  [BUGGY]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getColumns().length;  j++)  {	  for(int    j    =    0;    j    <    getColumns();    j++)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
45	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getRows();  j++)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  for(int  j  =  0;  j  <  getRows();  j++)  {  [BUGGY]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getRows();  j++)  {	  for(int    j    =    0;    j    <    getColumns();    j++)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
46	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
47	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  Table.getEntry(i,  j);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  Table.getEntry(i,  j);  }  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  Table.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
48	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i);  matrix[i  -  1][col++]  =  f.getEntry(i,  j);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
49	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[i    -    1][col++]    =    f.getEntry(i,    j);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
50	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
51	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
52	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  Table.getEntry(i,  j);  }  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  Table.getEntry(i,  j);  }  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  Table.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
53	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
54	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
55	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  <identifier>  expected	2	None	replace
56	[BUG]  [BUGGY]  if(column!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  if(column!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	if(column!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  <identifier>  expected	1	None	replace
57	[BUG]  [BUGGY]  if(column!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  if(column!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	if(column!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  <identifier>  expected	1	None	replace
58	[BUG]  [BUGGY]  if(column!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  if(column!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	if(column!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  column	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  <identifier>  expected	1	None	replace
59	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)matrix.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  i);  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)matrix.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  i);  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)matrix.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  i);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.clone();    matrix[i    -    1][col++]    =    f.getEntry(i,    i);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
60	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  table.getEntryFunction(i,  matrix);  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  LinearObjectiveFunction  f  =  table.getEntryFunction(i,  matrix);  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =  table.getEntryFunction(i,  matrix);	      LinearObjectiveFunction    f    =    table.getEntryFunction(i,    i);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
61	[BUG]  [BUGGY]  int  j  =  this.columnsToDrop.size();  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  int  j  =  this.columnsToDrop.size();  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	int  j  =  this.columnsToDrop.size();	      int    j    =    columnsToDrop.size();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
62	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  table.getEntry(i,  i);  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  table.getEntry(i,  i);  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  table.getEntry(i,  i);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.clone();    matrix[i    -    1][col++]    =    f.getEntry(i,    i);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
63	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  tableau.getEntry(i,  i);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  tableau.getEntry(i,  i);  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  tableau.getEntry(i,  i);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.clone();    matrix[i    -    1][col++]    =    f.getEntry(i,    i);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
64	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);  matrix[0][col]  =  f.getEntry(i,  col);  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);  matrix[0][col]  =  f.getEntry(i,  col);  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);  matrix[0][col]  =  f.getEntry(i,  col);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[0][col]    =    f.getEntry(i,    col);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
65	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnsToDrop.get(i);  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnsToDrop.get(i);  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnsToDrop.get(i);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
66	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i);  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i);  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
67	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  for(int  j  =  0;  j  <  columnLabels.size();  j++)  {  [BUGGY]    if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  columnLabels.size();  j++)  {	  for(int    j    =    0;    j    <    getColumnsToDrop.size();    j++)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
68	[BUG]  [BUGGY]  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	matrix[i  -  1][col++]  =  table.getEntry(i,  j);	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
69	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
70	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
71	[BUG]  [BUGGY]  if(col  >=  col)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  if(col  >=  col)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	if(col  >=  col)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
72	[BUG]  [BUGGY]  if(col  >=  col)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  if(col  >=  col)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	if(col  >=  col)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
73	[BUG]  [BUGGY]  if(col  >=  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  if(col  >=  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	if(col  >=  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
74	[BUG]  [BUGGY]  if(column!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  if(column!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	if(column!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  <identifier>  expected	1	None	replace
75	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  i  +  1);  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  i  +  1);  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  i  +  1);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.clone();    matrix[i    -    1][col++]    =    f.getEntry(i,    i);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
76	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  column);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  column);  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  matrix[i  -  1][col++]  =  f.getEntry(i,  column);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.clone();    matrix[i    -    1][col++]    =    f.getEntry(i,    i);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
77	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  }  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  }  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  }	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  <identifier>  expected	2	None	replace
78	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnToDrop.contains(j))  {  matrix[i  -  1][col++]  =	      if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  <identifier>  expected	2	None	replace
79	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)matrix.get(i);  matrix[0][col]  =  f.getEntry(i,  col);  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)matrix.get(i);  matrix[0][col]  =  f.getEntry(i,  col);  [BUGGY]    for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)matrix.get(i);  matrix[0][col]  =  f.getEntry(i,  col);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    matrix[0][col]    =    f.getEntry(i,    col);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
