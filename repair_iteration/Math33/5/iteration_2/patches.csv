bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i  +  1);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i  +  1);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.list.get(i    +    1);    	non-compiled	[CE]  ')'  expected	2	None	replace
2	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.list.get(i  +  2);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.list.get(i  +  2);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.list.get(i  +  2);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.list.get(i    +    1);    	non-compiled	[CE]  ')'  expected	2	None	replace
3	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  DEFAULT_ULPS,  maxUlps);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  DEFAULT_ULPS,  maxUlps);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  DEFAULT_ULPS,  maxUlps);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.initialize(f,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	66	None	replace
4	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  0,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  0,  DEFAULT_ULPS);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  0,  DEFAULT_ULPS);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.initialize(f,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	66	None	replace
5	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.initialize(f,  DEFAULT_ULPS);  [CE]  '('  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.initialize(f,  DEFAULT_ULPS);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.initialize(f,  DEFAULT_ULPS);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.initialize(f,    DEFAULT_ULPS);    	non-compiled	[CE]  '('  expected	66	None	replace
6	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  DEFAULT_ULPS,  epsilon);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  DEFAULT_ULPS,  epsilon);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  DEFAULT_ULPS,  epsilon);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.initialize(f,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	66	None	replace
7	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  this.columnLabels);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  this.columnLabels);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  this.columnLabels);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)initialize(f,    columnLabels);    	non-compiled	[CE]  ')'  expected	12	None	replace
8	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  NEGATIVE_VAR_COLUMN_LABEL);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)initialize(f,    columnLabels);    	non-compiled	[CE]  ')'  expected	12	None	replace
9	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  columnLabels,  constraints);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  columnLabels,  constraints);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  columnLabels,  constraints);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)initialize(f,    columnLabels);    	non-compiled	[CE]  ')'  expected	12	None	replace
10	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(columnLabels);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(columnLabels);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(columnLabels);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)initialize(null);    	non-compiled	[CE]  ')'  expected	48	None	replace
11	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(null,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(null,  DEFAULT_ULPS);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(null,  DEFAULT_ULPS);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)initialize(null);    	non-compiled	[CE]  ')'  expected	48	None	replace
12	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(NEGATIVE_VAR_COLUMN_LABEL);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(NEGATIVE_VAR_COLUMN_LABEL);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	75	None	replace
13	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(NEGATIVE_VAR_COLUMN_LABEL,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(NEGATIVE_VAR_COLUMN_LABEL,  DEFAULT_ULPS);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(NEGATIVE_VAR_COLUMN_LABEL,  DEFAULT_ULPS);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	75	None	replace
14	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  NEGATIVE_VAR_COLUMN_LABEL);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    null,    columnLabels);    	non-compiled	[CE]  ')'  expected	40	None	replace
15	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  columnLabels,  constraintToNonNegative);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  columnLabels,  constraintToNonNegative);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  columnLabels,  constraintToNonNegative);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    null,    columnLabels);    	non-compiled	[CE]  ')'  expected	40	None	replace
16	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  columnLabels,  constraints);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  columnLabels,  constraints);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  columnLabels,  constraints);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    null,    columnLabels);    	non-compiled	[CE]  ')'  expected	40	None	replace
17	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  columnLabels,  restrictToNonNegative);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  columnLabels,  restrictToNonNegative);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  columnLabels,  restrictToNonNegative);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    null,    columnLabels);    	non-compiled	[CE]  ')'  expected	40	None	replace
18	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i++);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i++);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i++);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.list.get(i++);    	non-compiled	[CE]  ')'  expected	68	None	replace
19	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  double  epsilon);  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  double  epsilon);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  double  epsilon);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    epsilon);    	non-compiled	[CE]  '.class'  expected	53	None	replace
20	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.restrictToNonNegative.create(columnLabels);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.restrictToNonNegative.create(columnLabels);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.restrictToNonNegative.create(columnLabels);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.restrictToNonNegative.create(f);    	non-compiled	[CE]  ')'  expected	15	None	replace
21	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.restrictToNonNegative.create(null);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.restrictToNonNegative.create(null);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.restrictToNonNegative.create(null);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.restrictToNonNegative.create(f);    	non-compiled	[CE]  ')'  expected	15	None	replace
22	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.restrictToNonNegative.create(f,  this.maxUlpsilon);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.restrictToNonNegative.create(f,  this.maxUlpsilon);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.restrictToNonNegative.create(f,  this.maxUlpsilon);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.restrictToNonNegative.create(f);    	non-compiled	[CE]  ')'  expected	15	None	replace
23	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  true);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  true);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  true);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    null,    false);    	non-compiled	[CE]  ')'  expected	39	None	replace
24	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  false,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  false,  DEFAULT_ULPS);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  false,  DEFAULT_ULPS);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    null,    false);    	non-compiled	[CE]  ')'  expected	39	None	replace
25	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  false,  columnLabels);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  false,  columnLabels);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  false,  columnLabels);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    null,    false);    	non-compiled	[CE]  ')'  expected	39	None	replace
26	[BUG]  [BUGGY]  columnLabels.add( "Negative ",  null);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  columnLabels.add( "Negative ",  null);  [BUGGY]      }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	columnLabels.add( "Negative ",  null);	  columnLabels.add(   "Negative,   ");    	non-compiled	[CE]  ')'  expected	27	None	replace
27	[BUG]  [BUGGY]  columnLabels.add( "Negative ",  true);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  columnLabels.add( "Negative ",  true);  [BUGGY]      }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	columnLabels.add( "Negative ",  true);	  columnLabels.add(   "Negative,   ");    	non-compiled	[CE]  ')'  expected	27	None	replace
28	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(1);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)initialize(0);    	non-compiled	[CE]  ')'  expected	31	None	replace
29	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(2);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(2);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(2);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)initialize(0);    	non-compiled	[CE]  ')'  expected	31	None	replace
30	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  1);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  1);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	69	None	replace
31	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  2);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  2);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  2);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	69	None	replace
32	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  0);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  0);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  0);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	69	None	replace
33	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  DEFAULT_ULPS,  maxUlps);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  DEFAULT_ULPS,  maxUlps);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  DEFAULT_ULPS,  maxUlps);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	69	None	replace
34	[BUG]  [BUGGY]  columnLabels.add( "negative,   "  +  constrainToNonNegative);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  columnLabels.add( "negative,   "  +  constrainToNonNegative);  [BUGGY]      }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	columnLabels.add( "negative,   "  +  constrainToNonNegative);	  columnLabels.add(   "negative,   "    +    i);    	non-compiled	[CE]  ')'  expected	52	None	replace
35	[BUG]  [BUGGY]  columnLabels.add( "Negative_VAR_COLUMN_LABEL "  +  i);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  columnLabels.add( "Negative_VAR_COLUMN_LABEL "  +  i);  [BUGGY]      }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	columnLabels.add( "Negative_VAR_COLUMN_LABEL "  +  i);	  columnLabels.add(   "NEGATIVE_VAR_COLUMN_LABEL   "    +    i);    	non-compiled	[CE]  ')'  expected	58	None	replace
36	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(i  +  1);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(i  +  1);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(i  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.columnLabels.get(i);    	non-compiled	[CE]  ')'  expected	26	None	replace
37	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(0);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(0);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(0);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.columnLabels.get(i);    	non-compiled	[CE]  ')'  expected	26	None	replace
38	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getNegativeObjectiveFunctions().clone();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getNegativeObjectiveFunctions().clone();  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getNegativeObjectiveFunctions().clone();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)getRestrictedObjectiveFunctions().clone();    	non-compiled	[CE]  ')'  expected	20	None	replace
39	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getRestrictedObjectiveFunctions().toArray(new  LinearObjectiveFunction[columnLabels.size()  ]);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getRestrictedObjectiveFunctions().toArray(new  LinearObjectiveFunction[columnLabels.size()  ]);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getRestrictedObjectiveFunctions().toArray(new  LinearObjectiveFunction[columnLabels.size()  ]);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)getRestrictedObjectiveFunctions().clone();    	non-compiled	[CE]  ')'  expected	20	None	replace
40	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getRestrictedObjectiveFunctions();  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getRestrictedObjectiveFunctions();  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getRestrictedObjectiveFunctions();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)getRestrictedObjectiveFunctions().clone();    	non-compiled	[CE]  ')'  expected	20	None	replace
41	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.initialize(0);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.initialize(0);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.initialize(0);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.initialize();    	non-compiled	[CE]  ')'  expected	33	None	replace
42	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.initialize(f,  constraints);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.initialize(f,  constraints);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.initialize(f,  constraints);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.initialize(f,    constraints);    	non-compiled	[CE]  ')'  expected	47	None	replace
43	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)constructs.initialize(f,  super);  [CE]  '.'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)constructs.initialize(f,  super);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)constructs.initialize(f,  super);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.initialize(f,    constraints);    	non-compiled	[CE]  '.'  expected	47	None	replace
44	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)constraints.initialize(f,  super);  [CE]  '.'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)constraints.initialize(f,  super);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)constraints.initialize(f,  super);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.initialize(f,    constraints);    	non-compiled	[CE]  '.'  expected	47	None	replace
45	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(columnLabels);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(columnLabels);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(columnLabels);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(linearVariables);    	non-compiled	[CE]  ')'  expected	64	None	replace
46	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(linearVariables,  columnLabels);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(linearVariables,  columnLabels);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(linearVariables,  columnLabels);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(linearVariables);    	non-compiled	[CE]  ')'  expected	64	None	replace
47	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  NEGATIVE_VAR_COLUMN_LABEL,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  NEGATIVE_VAR_COLUMN_LABEL,  DEFAULT_ULPS);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  NEGATIVE_VAR_COLUMN_LABEL,  DEFAULT_ULPS);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    NEGATIVE_VAR_COLUMN_LABEL);    	non-compiled	[CE]  ')'  expected	55	None	replace
48	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(this,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(this,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(this,  NEGATIVE_VAR_COLUMN_LABEL);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    NEGATIVE_VAR_COLUMN_LABEL);    	non-compiled	[CE]  ')'  expected	55	None	replace
49	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  this.columns);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  this.columns);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  this.columns);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)initialize(f,    columns);    	non-compiled	[CE]  ')'  expected	13	None	replace
50	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  columns,  columnLabels);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  columns,  columnLabels);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  columns,  columnLabels);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)initialize(f,    columns);    	non-compiled	[CE]  ')'  expected	13	None	replace
51	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  columns,  false);  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  columns,  false);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  columns,  false);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)initialize(f,    columns);    	non-compiled	[CE]  ')'  expected	13	None	replace
52	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.strictToNonNegative.get(columnLabels);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.strictToNonNegative.get(columnLabels);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.strictToNonNegative.get(columnLabels);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.strictToNonNegative.get(restrictToNonNegative);    	non-compiled	[CE]  ')'  expected	61	None	replace
53	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.strictToNonNegative.get(0);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.strictToNonNegative.get(0);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.strictToNonNegative.get(0);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.strictToNonNegative.get(restrictToNonNegative);    	non-compiled	[CE]  ')'  expected	61	None	replace
54	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.strictToNonNegative.get(i);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.strictToNonNegative.get(i);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.strictToNonNegative.get(i);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.strictToNonNegative.get(restrictToNonNegative);    	non-compiled	[CE]  ')'  expected	61	None	replace
55	[BUG]  [BUGGY]  columnLabels.add( "Negative "  +  i,  constrainToNonNegative);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  columnLabels.add( "Negative "  +  i,  constrainToNonNegative);  [BUGGY]      }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	columnLabels.add( "Negative "  +  i,  constrainToNonNegative);	  columnLabels.add(   "Negative   "    +    i,    restrictToNonNegative);    	non-compiled	[CE]  ')'  expected	43	None	replace
56	[BUG]  [BUGGY]  columnLabels.add( "Negative "  +  i,  constraints);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  columnLabels.add( "Negative "  +  i,  constraints);  [BUGGY]      }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	columnLabels.add( "Negative "  +  i,  constraints);	  columnLabels.add(   "Negative   "    +    i,    restrictToNonNegative);    	non-compiled	[CE]  ')'  expected	43	None	replace
57	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps()  /  DEFAULT_ULPS;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  int  maxUlps  =  getMaxUlps()  /  DEFAULT_ULPS;  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	int  maxUlps  =  getMaxUlps()  /  DEFAULT_ULPS;	  int    maxUlps    =    getMaxUlps()    *    DEFAULT_ULPS;    	non-compiled	[CE]  ')'  expected	51	None	replace
58	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps()  *  2;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  int  maxUlps  =  getMaxUlps()  *  2;  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	int  maxUlps  =  getMaxUlps()  *  2;	  int    maxUlps    =    getMaxUlps()    *    DEFAULT_ULPS;    	non-compiled	[CE]  ')'  expected	51	None	replace
59	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps()  *  4;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  int  maxUlps  =  getMaxUlps()  *  4;  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	int  maxUlps  =  getMaxUlps()  *  4;	  int    maxUlps    =    getMaxUlps()    *    DEFAULT_ULPS;    	non-compiled	[CE]  ')'  expected	51	None	replace
60	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.list.get(i-2);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.list.get(i-2);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.list.get(i-2);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.list.get(i-1);    	non-compiled	[CE]  ')'  expected	46	None	replace
61	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(columnLabels);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(columnLabels);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(columnLabels);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnLabels.get(this);    	non-compiled	[CE]  ')'  expected	24	None	replace
62	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(0);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(0);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(0);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnLabels.get(this);    	non-compiled	[CE]  ')'  expected	24	None	replace
63	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initializeNegativeObjectives();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initializeNegativeObjectives();  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)initializeNegativeObjectives();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)initializeAllObjectives();    	non-compiled	[CE]  ')'  expected	60	None	replace
64	[BUG]  [BUGGY]  columnLabels.add( ",Negative, "  +  i);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  columnLabels.add( ",Negative, "  +  i);  [BUGGY]      }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	columnLabels.add( ",Negative, "  +  i);	  columnLabels.add(   ",Negative   "    +    i);    	non-compiled	[CE]  ')'  expected	78	None	replace
65	[BUG]  [BUGGY]  int  maxUlps  =  getMinUlps();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  int  maxUlps  =  getMinUlps();  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	int  maxUlps  =  getMinUlps();	  int    maxUlps    =    getMaxUlps()    -    2;    	non-compiled	[CE]  ')'  expected	8	None	replace
66	[BUG]  [BUGGY]  int  maxUlps  =  getmaxUlps();  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  int  maxUlps  =  getmaxUlps();  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	int  maxUlps  =  getmaxUlps();	  int    maxUlps    =    getMaxUlps()    -    2;    	non-compiled	[CE]  ')'  expected	8	None	replace
67	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  DEFAULT_ULPS,  maxUlps);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  DEFAULT_ULPS,  maxUlps);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  DEFAULT_ULPS,  maxUlps);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    null,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	56	None	replace
68	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  1);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  1);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  1);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    null,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	56	None	replace
69	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  2);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  2);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  2);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    null,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	56	None	replace
70	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  0,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  0,  DEFAULT_ULPS);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  0,  DEFAULT_ULPS);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    null,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	56	None	replace
71	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  1);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  1);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	54	None	replace
72	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  0);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  0);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  0);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	54	None	replace
73	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  DEFAULT_ULPS,  maxUlps);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  DEFAULT_ULPS,  maxUlps);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  DEFAULT_ULPS,  maxUlps);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	54	None	replace
74	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  2);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  2);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  2);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	54	None	replace
75	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.restrictToNonNegative.get(0);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.restrictToNonNegative.get(0);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.restrictToNonNegative.get(0);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.restrictToNonNegative.get(restrictToNonNegative);    	non-compiled	[CE]  ')'  expected	25	None	replace
76	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.restrictToNonNegative.get(columnLabels);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.restrictToNonNegative.get(columnLabels);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.restrictToNonNegative.get(columnLabels);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.restrictToNonNegative.get(restrictToNonNegative);    	non-compiled	[CE]  ')'  expected	25	None	replace
77	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(restrictToNonNegative);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(restrictToNonNegative);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(restrictToNonNegative);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.restrictToNonNegative.get(restrictToNonNegative);    	non-compiled	[CE]  ')'  expected	25	None	replace
78	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i  +  2);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i  +  2);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i  +  2);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i    +    1);    	non-compiled	[CE]  ')'  expected	21	None	replace
79	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i  +  3);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i  +  3);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i  +  3);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i    +    1);    	non-compiled	[CE]  ')'  expected	21	None	replace
80	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.initialize(f,  this.maxUlps);  [CE]  '('  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.initialize(f,  this.maxUlps);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.initialize(f,  this.maxUlps);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.super.initialize(f);    	non-compiled	[CE]  '('  expected	35	None	replace
81	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.initialize(f,  columnLabels);  [CE]  '('  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.initialize(f,  columnLabels);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.initialize(f,  columnLabels);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.super.initialize(f);    	non-compiled	[CE]  '('  expected	35	None	replace
82	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.initialize(columnLabels);  [CE]  '('  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.initialize(columnLabels);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.initialize(columnLabels);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.super.initialize(f);    	non-compiled	[CE]  '('  expected	35	None	replace
83	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.create(this);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.create(this);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.create(this);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)restrictToNonNegative.create(null);    	non-compiled	[CE]  ')'  expected	17	None	replace
84	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getRestrictToNonNegative().create(null);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getRestrictToNonNegative().create(null);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getRestrictToNonNegative().create(null);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)restrictToNonNegative.create(null);    	non-compiled	[CE]  ')'  expected	17	None	replace
85	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.create(table);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.create(table);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.create(table);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)restrictToNonNegative.create(null);    	non-compiled	[CE]  ')'  expected	17	None	replace
86	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.initialize(f,  super);  [CE]  '.'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.initialize(f,  super);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.initialize(f,  super);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.initialize(f,    columnLabels);    	non-compiled	[CE]  '.'  expected	36	None	replace
87	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  this.columnLabels);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  this.columnLabels);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  this.columnLabels);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.initialize(f,    columnLabels);    	non-compiled	[CE]  ')'  expected	36	None	replace
88	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  columnLabels,  constraints);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  columnLabels,  constraints);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  columnLabels,  constraints);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.initialize(f,    columnLabels);    	non-compiled	[CE]  ')'  expected	36	None	replace
89	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  columnLabels,  constraintToNonNegative);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  columnLabels,  constraintToNonNegative);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  columnLabels,  constraintToNonNegative);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.initialize(f,    columnLabels);    	non-compiled	[CE]  ')'  expected	36	None	replace
90	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  NEGATIVE_VAR_COLUMN_LABEL);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i,    columnLabels);    	non-compiled	[CE]  ')'  expected	22	None	replace
91	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  this.columnLabels);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  this.columnLabels);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  this.columnLabels);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i,    columnLabels);    	non-compiled	[CE]  ')'  expected	22	None	replace
92	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnLabels,  constraintToNonNegative);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnLabels,  constraintToNonNegative);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnLabels,  constraintToNonNegative);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i,    columnLabels);    	non-compiled	[CE]  ')'  expected	22	None	replace
93	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(restrictToNonNegative);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(restrictToNonNegative);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(restrictToNonNegative);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)restrictToNonNegative.get(restrictToNonNegative);    	non-compiled	[CE]  ')'  expected	50	None	replace
94	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.get(0);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.get(0);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.get(0);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)restrictToNonNegative.get(restrictToNonNegative);    	non-compiled	[CE]  ')'  expected	50	None	replace
95	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)objects.get(restrictToNonNegative);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)objects.get(restrictToNonNegative);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)objects.get(restrictToNonNegative);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)restrictToNonNegative.get(restrictToNonNegative);    	non-compiled	[CE]  ')'  expected	50	None	replace
96	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objectiveFunctions.get(i);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objectiveFunctions.get(i);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objectiveFunctions.get(i);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.objectiveFunctions.get(restrictToNonNegative);    	non-compiled	[CE]  ')'  expected	74	None	replace
97	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objectiveFunctions.get(0);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objectiveFunctions.get(0);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objectiveFunctions.get(0);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.objectiveFunctions.get(restrictToNonNegative);    	non-compiled	[CE]  ')'  expected	74	None	replace
98	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  true);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  true);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  true);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    false);    	non-compiled	[CE]  ')'  expected	10	None	replace
99	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(NEGATIVE_VAR_COLUMN_LABEL,  false);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(NEGATIVE_VAR_COLUMN_LABEL,  false);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(NEGATIVE_VAR_COLUMN_LABEL,  false);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    false);    	non-compiled	[CE]  ')'  expected	10	None	replace
100	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  false,  null);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  false,  null);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  false,  null);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    false);    	non-compiled	[CE]  ')'  expected	10	None	replace
101	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(lineno,  columnLabels);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(lineno,  columnLabels);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(lineno,  columnLabels);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(lineno);    	non-compiled	[CE]  ')'  expected	38	None	replace
102	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.clone();  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.clone();  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.clone();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)linearObjectives.clone();    	non-compiled	[CE]  ')'  expected	19	None	replace
103	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.linearObjectives.clone();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.linearObjectives.clone();  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.linearObjectives.clone();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)linearObjectives.clone();    	non-compiled	[CE]  ')'  expected	19	None	replace
104	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.clone();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.clone();  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.clone();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)linearObjectives.clone();    	non-compiled	[CE]  ')'  expected	19	None	replace
105	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)linearObjectives.get(i);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)linearObjectives.get(i);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)linearObjectives.get(i);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)linearObjectives.clone();    	non-compiled	[CE]  ')'  expected	19	None	replace
106	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.initialize(0);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.initialize(0);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.initialize(0);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.table.initialize();    	non-compiled	[CE]  ')'  expected	72	None	replace
107	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.get();  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.get();  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.get();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.table.initialize();    	non-compiled	[CE]  ')'  expected	72	None	replace
108	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  columns);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  columns);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  columns);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    columnLabels);    	non-compiled	[CE]  ')'  expected	11	None	replace
109	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  columnLabels,  constraintToNonNegative);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  columnLabels,  constraintToNonNegative);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  columnLabels,  constraintToNonNegative);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    columnLabels);    	non-compiled	[CE]  ')'  expected	11	None	replace
110	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getNumberObjectiveFunction(i  +  1);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  getNumberObjectiveFunction(i  +  1);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  getNumberObjectiveFunction(i  +  1);	  LinearObjectiveFunction    f    =    getNumberObjectiveFunction(i);    	non-compiled	[CE]  ')'  expected	23	None	replace
111	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getNumberObjectiveFunction(i,  columnLabels);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  getNumberObjectiveFunction(i,  columnLabels);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  getNumberObjectiveFunction(i,  columnLabels);	  LinearObjectiveFunction    f    =    getNumberObjectiveFunction(i);    	non-compiled	[CE]  ')'  expected	23	None	replace
112	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.create(f);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.create(f);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.create(f);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.create(f);    	non-compiled	[CE]  ')'  expected	45	None	replace
113	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.create(epsilon);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.create(epsilon);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.create(epsilon);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.create(f);    	non-compiled	[CE]  ')'  expected	45	None	replace
114	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.create(this.epsilon);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.create(this.epsilon);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.create(this.epsilon);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.create(f);    	non-compiled	[CE]  ')'  expected	45	None	replace
115	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objectives.get(i);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objectives.get(i);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objectives.get(i);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.objectives.clone();    	non-compiled	[CE]  ')'  expected	77	None	replace
116	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objectives.get(0);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objectives.get(0);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objectives.get(0);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.objectives.clone();    	non-compiled	[CE]  ')'  expected	77	None	replace
117	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  epsilon);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  epsilon);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  epsilon);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.initialize(f,    defsilon);    	non-compiled	[CE]  ')'  expected	67	None	replace
118	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)defsilon.initialize(f,  super);  [CE]  '.'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)defsilon.initialize(f,  super);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)defsilon.initialize(f,  super);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.initialize(f,    defsilon);    	non-compiled	[CE]  '.'  expected	67	None	replace
119	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  0,  defsilon);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  0,  defsilon);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  0,  defsilon);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.initialize(f,    defsilon);    	non-compiled	[CE]  ')'  expected	67	None	replace
120	[BUG]  [BUGGY]  columnLabels.add( "Null "  +  i);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  columnLabels.add( "Null "  +  i);  [BUGGY]      }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	columnLabels.add( "Null "  +  i);	  columnLabels.add(   "null   "    +    i);    	non-compiled	[CE]  ')'  expected	57	None	replace
121	[BUG]  [BUGGY]  columnLabels.add( "maxUlps   "  +  i);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  columnLabels.add( "maxUlps   "  +  i);  [BUGGY]      }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	columnLabels.add( "maxUlps   "  +  i);	  columnLabels.add(   "null   "    +    i);    	non-compiled	[CE]  ')'  expected	57	None	replace
122	[BUG]  [BUGGY]  columnLabels.add( "Negative ",   "  +  i);  [CE]  unclosed  string  literal  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  columnLabels.add( "Negative ",   "  +  i);  [BUGGY]      }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	columnLabels.add( "Negative ",   "  +  i);	  columnLabels.add(   "Negative,   "    +    i);    	non-compiled	[CE]  unclosed  string  literal	28	None	replace
123	[BUG]  [BUGGY]  columnLabels.add( "Negative ",  i);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  columnLabels.add( "Negative ",  i);  [BUGGY]      }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	columnLabels.add( "Negative ",  i);	  columnLabels.add(   "Negative,   "    +    i);    	non-compiled	[CE]  ')'  expected	28	None	replace
124	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(table,  0,  epsilon);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(table,  0,  epsilon);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(table,  0,  epsilon);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(table,    epsilon);    	non-compiled	[CE]  ')'  expected	37	None	replace
125	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(table,  columnLabels);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(table,  columnLabels);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(table,  columnLabels);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(table,    epsilon);    	non-compiled	[CE]  ')'  expected	37	None	replace
126	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(table,  constraints);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(table,  constraints);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(table,  constraints);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(table,    epsilon);    	non-compiled	[CE]  ')'  expected	37	None	replace
127	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.initializeAllObjectives();  [CE]  '('  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.initializeAllObjectives();  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.initializeAllObjectives();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.initializeAllObjectives();    	non-compiled	[CE]  '('  expected	59	None	replace
128	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(i,  columnLabels);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(i,  columnLabels);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(i,  columnLabels);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(i);    	non-compiled	[CE]  ')'  expected	9	None	replace
129	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(i  +  1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(i  +  1);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(i  +  1);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(i);    	non-compiled	[CE]  ')'  expected	9	None	replace
130	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createColumnObjectiveFunction(i);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createColumnObjectiveFunction(i);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createColumnObjectiveFunction(i);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(i);    	non-compiled	[CE]  ')'  expected	9	None	replace
131	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(i,  false);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(i,  false);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(i,  false);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(i);    	non-compiled	[CE]  ')'  expected	9	None	replace
132	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.initialize(0);  [CE]  '('  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.initialize(0);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.initialize(0);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.super.initialize();    	non-compiled	[CE]  '('  expected	29	None	replace
133	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.list.get(1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.list.get(1);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.list.get(1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.list.get(0);    	non-compiled	[CE]  ')'  expected	3	None	replace
134	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  this,  columnLabels);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  this,  columnLabels);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  this,  columnLabels);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)initialize(f,    this);    	non-compiled	[CE]  ')'  expected	14	None	replace
135	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  null);  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  null);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  null);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)initialize(f,    this);    	non-compiled	[CE]  ')'  expected	14	None	replace
136	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getNumObjectiveFunctions(i);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  getNumObjectiveFunctions(i);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  getNumObjectiveFunctions(i);	  LinearObjectiveFunction    f    =    getNumObjectiveFunction(i);    	non-compiled	[CE]  ')'  expected	41	None	replace
137	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getNumObjectiveFunction(i  +  1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  getNumObjectiveFunction(i  +  1);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  getNumObjectiveFunction(i  +  1);	  LinearObjectiveFunction    f    =    getNumObjectiveFunction(i);    	non-compiled	[CE]  ')'  expected	41	None	replace
138	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(1);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(1);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.initialize(0);    	non-compiled	[CE]  ')'  expected	30	None	replace
139	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  graph);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  graph);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  graph);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i,    epsilon);    	non-compiled	[CE]  ')'  expected	70	None	replace
140	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(initializeValues);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(initializeValues);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(initializeValues);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(double);    	non-compiled	[CE]  ')'  expected	63	None	replace
141	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.create(f);  [CE]  '('  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.create(f);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.create(f);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.create(f);    	non-compiled	[CE]  '('  expected	16	None	replace
142	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.create(f,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.create(f,  DEFAULT_ULPS);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.create(f,  DEFAULT_ULPS);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.create(f);    	non-compiled	[CE]  ')'  expected	16	None	replace
143	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objectiveFunctions.clone();  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objectiveFunctions.clone();  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objectiveFunctions.clone();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.restrictToNonNegative.clone();    	non-compiled	[CE]  ')'  expected	18	None	replace
144	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.epsilon.clone();  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.epsilon.clone();  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.epsilon.clone();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.restrictToNonNegative.clone();    	non-compiled	[CE]  ')'  expected	18	None	replace
145	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)constraints.get(f);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)constraints.get(f);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)constraints.get(f);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)constraints.create(f);    	non-compiled	[CE]  ')'  expected	71	None	replace
146	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.create(f);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.create(f);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.create(f);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)constraints.create(f);    	non-compiled	[CE]  ')'  expected	71	None	replace
147	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.create(f);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.create(f);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.create(f);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)constraints.create(f);    	non-compiled	[CE]  ')'  expected	71	None	replace
148	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)constraints.get(i);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)constraints.get(i);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)constraints.get(i);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)constraints.get(this);    	non-compiled	[CE]  ')'  expected	62	None	replace
149	[BUG]  [BUGGY]  columnLabels.add( "Negative "  +  i,  constraintToNonNegative);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  columnLabels.add( "Negative "  +  i,  constraintToNonNegative);  [BUGGY]      }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	columnLabels.add( "Negative "  +  i,  constraintToNonNegative);	  columnLabels.add(   "Negative   "    +    i,    restrictiveToNonNegative);    	non-compiled	[CE]  ')'  expected	42	None	replace
150	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  DEFAULT_ULPS,  maxUlps);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  DEFAULT_ULPS,  maxUlps);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  DEFAULT_ULPS,  maxUlps);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)initialize(f,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	65	None	replace
151	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  0,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  0,  DEFAULT_ULPS);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  0,  DEFAULT_ULPS);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)initialize(f,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	65	None	replace
152	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  1);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  1);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)initialize(f,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	65	None	replace
153	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  2);  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  2);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  2);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)initialize(f,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	65	None	replace
154	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.create(f,  DEFAULT_ULPS,  maxUlps);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.create(f,  DEFAULT_ULPS,  maxUlps);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.create(f,  DEFAULT_ULPS,  maxUlps);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)restrictToNonNegative.create(f,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	44	None	replace
155	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.create(f,  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.create(f,  1);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.create(f,  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)restrictToNonNegative.create(f,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	44	None	replace
156	[BUG]  [BUGGY]  columnLabels.add( "Negative ".toString());  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  columnLabels.add( "Negative ".toString());  [BUGGY]      }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	columnLabels.add( "Negative ".toString());	  columnLabels.add(   "Negative.   ");    	non-compiled	[CE]  ')'  expected	73	None	replace
157	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getInitialize().clone();  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getInitialize().clone();  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getInitialize().clone();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)getInitialize();    	non-compiled	[CE]  ')'  expected	32	None	replace
158	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getSecond();  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getSecond();  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getSecond();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)getInitialize();    	non-compiled	[CE]  ')'  expected	32	None	replace
159	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps()  /  1;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  int  maxUlps  =  getMaxUlps()  /  1;  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	int  maxUlps  =  getMaxUlps()  /  1;	  int    maxUlps    =    getMaxUlps()    +    1;    	non-compiled	[CE]  ')'  expected	5	None	replace
160	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(0);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(0);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(0);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(double);    	non-compiled	[CE]  ')'  expected	63	None	replace
161	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(table,  i);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(table,  i);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(table,  i);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(table,    epsilon);    	non-compiled	[CE]  ')'  expected	37	None	replace
162	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(table,  epsilon,  maxUlps);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(table,  epsilon,  maxUlps);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(table,  epsilon,  maxUlps);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(table,    epsilon);    	non-compiled	[CE]  ')'  expected	37	None	replace
163	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  4);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  4);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  4);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	69	None	replace
164	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(DEFAULT_ULPS,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(DEFAULT_ULPS,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(DEFAULT_ULPS,  NEGATIVE_VAR_COLUMN_LABEL);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	75	None	replace
165	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.restrictToNonNegative.get(restrictToNonNegative  +  1);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.restrictToNonNegative.get(restrictToNonNegative  +  1);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.restrictToNonNegative.get(restrictToNonNegative  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.restrictToNonNegative.get(restrictToNonNegative);    	non-compiled	[CE]  ')'  expected	25	None	replace
166	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(columnLabels);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(columnLabels);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(columnLabels);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnLabels.get(this);    	non-compiled	[CE]  ')'  expected	24	None	replace
167	[BUG]  [BUGGY]  columnLabels.add( "Null. ");  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  columnLabels.add( "Null. ");  [BUGGY]      }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	columnLabels.add( "Null. ");	  columnLabels.add(   "Null   ");    	non-compiled	[CE]  ')'  expected	34	None	replace
168	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initializeValues();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initializeValues();  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)initializeValues();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)initializeAllObjectives();    	non-compiled	[CE]  ')'  expected	60	None	replace
169	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initializeAllVariables();  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initializeAllVariables();  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)initializeAllVariables();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)initializeAllObjectives();    	non-compiled	[CE]  ')'  expected	60	None	replace
170	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.create(null);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.create(null);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.create(null);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)restrictToNonNegative.create(null);    	non-compiled	[CE]  ')'  expected	17	None	replace
171	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.create(null,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.create(null,  DEFAULT_ULPS);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.create(null,  DEFAULT_ULPS);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)restrictToNonNegative.create(null);    	non-compiled	[CE]  ')'  expected	17	None	replace
172	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(getNumObjectiveFunctions(),  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(getNumObjectiveFunctions(),  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(getNumObjectiveFunctions(),  NEGATIVE_VAR_COLUMN_LABEL);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    NEGATIVE_VAR_COLUMN_LABEL);    	non-compiled	[CE]  ')'  expected	55	None	replace
173	[BUG]  [BUGGY]  columnLabels.add( "null "  +  i,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  columnLabels.add( "null "  +  i,  DEFAULT_ULPS);  [BUGGY]      }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	columnLabels.add( "null "  +  i,  DEFAULT_ULPS);	  columnLabels.add(   "null   "    +    i);    	non-compiled	[CE]  ')'  expected	57	None	replace
174	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.create(f,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.create(f,  DEFAULT_ULPS);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.create(f,  DEFAULT_ULPS);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)restrictToNonNegative.create(f,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	44	None	replace
175	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.create(f,  0);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.create(f,  0);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.create(f,  0);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)restrictToNonNegative.create(f,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	44	None	replace
176	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)list.create(f,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)list.create(f,  DEFAULT_ULPS);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)list.create(f,  DEFAULT_ULPS);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)restrictToNonNegative.create(f,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	44	None	replace
177	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.create(f,  2);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.create(f,  2);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.create(f,  2);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)restrictToNonNegative.create(f,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	44	None	replace
178	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  columnLabels,  false);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  columnLabels,  false);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  columnLabels,  false);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    null,    false);    	non-compiled	[CE]  ')'  expected	39	None	replace
179	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  constraints);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  constraints);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  constraints);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    columnLabels);    	non-compiled	[CE]  ')'  expected	11	None	replace
180	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  getNumObjectiveFunctions());  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  getNumObjectiveFunctions());  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  getNumObjectiveFunctions());	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    columnLabels);    	non-compiled	[CE]  ')'  expected	11	None	replace
181	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objectiveFunctions.get(restrictToNonNegative  +  1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objectiveFunctions.get(restrictToNonNegative  +  1);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objectiveFunctions.get(restrictToNonNegative  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.objectiveFunctions.get(restrictToNonNegative);    	non-compiled	[CE]  ')'  expected	74	None	replace
182	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.nonNegative.clone();  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.nonNegative.clone();  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.nonNegative.clone();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.restrictToNonNegative.clone();    	non-compiled	[CE]  ')'  expected	18	None	replace
183	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.restrictToNonNegative.get(i);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.restrictToNonNegative.get(i);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.restrictToNonNegative.get(i);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.restrictToNonNegative.clone();    	non-compiled	[CE]  ')'  expected	18	None	replace
184	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  this.maxUlps);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  this.maxUlps);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  this.maxUlps);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.initialize(f,    constraints);    	non-compiled	[CE]  ')'  expected	47	None	replace
185	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  this.maxUlps);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  this.maxUlps);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  this.maxUlps);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)initialize(f,    columnLabels);    	non-compiled	[CE]  ')'  expected	12	None	replace
186	[BUG]  [BUGGY]  columnLabels.add( "NEGATIVE_VAR_COLUMN_LABEL   "  +  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  columnLabels.add( "NEGATIVE_VAR_COLUMN_LABEL   "  +  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	columnLabels.add( "NEGATIVE_VAR_COLUMN_LABEL   "  +  NEGATIVE_VAR_COLUMN_LABEL);	  columnLabels.add(   "NEGATIVE_VAR_COLUMN_LABEL   "    +    i);    	non-compiled	[CE]  ')'  expected	58	None	replace
187	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initializeValues();  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initializeValues();  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initializeValues();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.initializeAllObjectives();    	non-compiled	[CE]  ')'  expected	59	None	replace
188	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initializeAllVariables();  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initializeAllVariables();  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initializeAllVariables();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.initializeAllObjectives();    	non-compiled	[CE]  ')'  expected	59	None	replace
189	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  constraints);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  constraints);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  constraints);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    null,    columnLabels);    	non-compiled	[CE]  ')'  expected	40	None	replace
190	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  getNumObjectiveFunctions());  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  getNumObjectiveFunctions());  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  getNumObjectiveFunctions());	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    null,    columnLabels);    	non-compiled	[CE]  ')'  expected	40	None	replace
191	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaxUlps();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  Integer  maxUlps  =  getMaxUlps();  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	Integer  maxUlps  =  getMaxUlps();	  int    maxUlps    =    getMaxUlps()    +    2;    	non-compiled	[CE]  ')'  expected	7	None	replace
192	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnObjectives.clone();  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnObjectives.clone();  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnObjectives.clone();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)linearObjectives.clone();    	non-compiled	[CE]  ')'  expected	19	None	replace
193	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  columns,  epsilon);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  columns,  epsilon);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  columns,  epsilon);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)initialize(f,    columns);    	non-compiled	[CE]  ')'  expected	13	None	replace
194	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.create(f,  constraints);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.create(f,  constraints);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.create(f,  constraints);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.create(f);    	non-compiled	[CE]  ')'  expected	16	None	replace
195	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.list.get(i-1  +  1);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.list.get(i-1  +  1);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.list.get(i-1  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.list.get(i-1);    	non-compiled	[CE]  ')'  expected	46	None	replace
196	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.create(f,  epsilon);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.create(f,  epsilon);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.create(f,  epsilon);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.create(f);    	non-compiled	[CE]  ')'  expected	45	None	replace
197	[BUG]  [BUGGY]  columnLabels.add( "Negative ".);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  columnLabels.add( "Negative ".);  [BUGGY]      }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	columnLabels.add( "Negative ".);	  columnLabels.add(   "Negative.   ");    	non-compiled	[CE]  <identifier>  expected	73	None	replace
198	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objectives.get(1);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objectives.get(1);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objectives.get(1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.objectives.clone();    	non-compiled	[CE]  ')'  expected	77	None	replace
199	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.list.get(i  +  3);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.list.get(i  +  3);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.list.get(i  +  3);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.list.get(i    +    1);    	non-compiled	[CE]  ')'  expected	2	None	replace
200	[BUG]  [BUGGY]  columnLabels.add( "Negative "  +  i,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  columnLabels.add( "Negative "  +  i,  DEFAULT_ULPS);  [BUGGY]      }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	columnLabels.add( "Negative "  +  i,  DEFAULT_ULPS);	  columnLabels.add(   "Negative   "    +    i,    restrictiveToNonNegative);    	non-compiled	[CE]  ')'  expected	42	None	replace
201	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getRestrictedVariableFunctions().clone();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getRestrictedVariableFunctions().clone();  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getRestrictedVariableFunctions().clone();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)getRestrictedObjectiveFunctions().clone();    	non-compiled	[CE]  ')'  expected	20	None	replace
202	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getNegativeFunctions().clone();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getNegativeFunctions().clone();  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getNegativeFunctions().clone();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)getRestrictedObjectiveFunctions().clone();    	non-compiled	[CE]  ')'  expected	20	None	replace
203	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getRestrictedObjectiveFunctions().toArray(new  LinearObjectiveFunction[0]);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getRestrictedObjectiveFunctions().toArray(new  LinearObjectiveFunction[0]);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getRestrictedObjectiveFunctions().toArray(new  LinearObjectiveFunction[0]);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)getRestrictedObjectiveFunctions().clone();    	non-compiled	[CE]  ')'  expected	20	None	replace
204	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getNumberObjectiveFunction(i,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  getNumberObjectiveFunction(i,  DEFAULT_ULPS);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  getNumberObjectiveFunction(i,  DEFAULT_ULPS);	  LinearObjectiveFunction    f    =    getNumberObjectiveFunction(i);    	non-compiled	[CE]  ')'  expected	23	None	replace
205	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getNumberObjectiveFunctions(i);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  getNumberObjectiveFunctions(i);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  getNumberObjectiveFunctions(i);	  LinearObjectiveFunction    f    =    getNumberObjectiveFunction(i);    	non-compiled	[CE]  ')'  expected	23	None	replace
206	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.restrictToNonNegative.create(f,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.restrictToNonNegative.create(f,  DEFAULT_ULPS);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.restrictToNonNegative.create(f,  DEFAULT_ULPS);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.restrictToNonNegative.create(f);    	non-compiled	[CE]  ')'  expected	15	None	replace
207	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.restrictToNonNegative.create(f,  this.maxUlps);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.restrictToNonNegative.create(f,  this.maxUlps);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.restrictToNonNegative.create(f,  this.maxUlps);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.restrictToNonNegative.create(f);    	non-compiled	[CE]  ')'  expected	15	None	replace
208	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  epsilon);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  epsilon);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  epsilon);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)initialize(f,    constraints);    	non-compiled	[CE]  ')'  expected	49	None	replace
209	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.initialize(f,  constraints);  [CE]  '('  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.initialize(f,  constraints);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.initialize(f,  constraints);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.super.initialize(f);    	non-compiled	[CE]  '('  expected	35	None	replace
210	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)constraints.get(restrictToNonNegative);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)constraints.get(restrictToNonNegative);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)constraints.get(restrictToNonNegative);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)restrictToNonNegative.get(restrictToNonNegative);    	non-compiled	[CE]  ')'  expected	50	None	replace
211	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  0);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  0);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  0);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)initialize(f,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	65	None	replace
212	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.strictToNonNegative.get(region);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.strictToNonNegative.get(region);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.strictToNonNegative.get(region);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.strictToNonNegative.get(restrictToNonNegative);    	non-compiled	[CE]  ')'  expected	61	None	replace
213	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps()  *  NEGATIVE_VAR_COLUMN_LABEL;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  int  maxUlps  =  getMaxUlps()  *  NEGATIVE_VAR_COLUMN_LABEL;  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	int  maxUlps  =  getMaxUlps()  *  NEGATIVE_VAR_COLUMN_LABEL;	  int    maxUlps    =    getMaxUlps()    *    DEFAULT_ULPS;    	non-compiled	[CE]  ')'  expected	51	None	replace
214	[BUG]  [BUGGY]  columnLabels.add( "Negative ",  false);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  columnLabels.add( "Negative ",  false);  [BUGGY]      }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	columnLabels.add( "Negative ",  false);	  columnLabels.add(   "Negative,   ");    	non-compiled	[CE]  ')'  expected	27	None	replace
215	[BUG]  [BUGGY]  columnLabels.add( "Negative "  +  i,  getNumSlackVariables());  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  columnLabels.add( "Negative "  +  i,  getNumSlackVariables());  [BUGGY]      }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	columnLabels.add( "Negative "  +  i,  getNumSlackVariables());	  columnLabels.add(   "Negative   "    +    i,    restrictToNonNegative);    	non-compiled	[CE]  ')'  expected	43	None	replace
216	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getNegativeFunctions();  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getNegativeFunctions();  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getNegativeFunctions();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)getInitialize();    	non-compiled	[CE]  ')'  expected	32	None	replace
217	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getDecision();  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getDecision();  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getDecision();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)getInitialize();    	non-compiled	[CE]  ')'  expected	32	None	replace
218	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.initializeAllObjectives();  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.initializeAllObjectives();  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.initializeAllObjectives();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.initialize();    	non-compiled	[CE]  ')'  expected	33	None	replace
219	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)constraints.create(f,  constraints);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)constraints.create(f,  constraints);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)constraints.create(f,  constraints);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)constraints.create(f);    	non-compiled	[CE]  ')'  expected	71	None	replace
220	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)constraints.create(f,  epsilon);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)constraints.create(f,  epsilon);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)constraints.create(f,  epsilon);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)constraints.create(f);    	non-compiled	[CE]  ')'  expected	71	None	replace
221	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i-1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i-1);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i-1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnLabels.get(i);    	non-compiled	[CE]  ')'  expected	4	None	replace
222	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(getNumObjectiveFunctions());  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(getNumObjectiveFunctions());  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(getNumObjectiveFunctions());	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)initialize(null);    	non-compiled	[CE]  ')'  expected	48	None	replace
223	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(null,  constraints);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(null,  constraints);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(null,  constraints);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)initialize(null);    	non-compiled	[CE]  ')'  expected	48	None	replace
224	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(i,  constraints);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(i,  constraints);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(i,  constraints);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(i);    	non-compiled	[CE]  ')'  expected	9	None	replace
225	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(i-1);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(i-1);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(i-1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.columnLabels.get(i);    	non-compiled	[CE]  ')'  expected	26	None	replace
226	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  columns);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  columns);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  columns);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.initialize(f,    columnLabels);    	non-compiled	[CE]  ')'  expected	36	None	replace
227	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  0);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  0);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  0);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.initialize(f,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	66	None	replace
228	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  this,  constraints);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  this,  constraints);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  this,  constraints);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)initialize(f,    this);    	non-compiled	[CE]  ')'  expected	14	None	replace
229	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getNumObjectiveFunctions(0);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  getNumObjectiveFunctions(0);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  getNumObjectiveFunctions(0);	  LinearObjectiveFunction    f    =    getNumObjectiveFunction(i);    	non-compiled	[CE]  ')'  expected	41	None	replace
230	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getNumObjectiveFunctions(1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  getNumObjectiveFunctions(1);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  getNumObjectiveFunctions(1);	  LinearObjectiveFunction    f    =    getNumObjectiveFunction(i);    	non-compiled	[CE]  ')'  expected	41	None	replace
231	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getNumObjectiveFunctions(2);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  getNumObjectiveFunctions(2);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  getNumObjectiveFunctions(2);	  LinearObjectiveFunction    f    =    getNumObjectiveFunction(i);    	non-compiled	[CE]  ')'  expected	41	None	replace
232	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  i);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  i);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  i);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i,    epsilon);    	non-compiled	[CE]  ')'  expected	70	None	replace
233	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  column);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  column);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  column);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i,    epsilon);    	non-compiled	[CE]  ')'  expected	70	None	replace
234	[BUG]  [BUGGY]  columnLabels.add( "Negative ",  0);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  columnLabels.add( "Negative ",  0);  [BUGGY]      }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	columnLabels.add( "Negative ",  0);	  columnLabels.add(   "Negative,   "    +    i);    	non-compiled	[CE]  ')'  expected	28	None	replace
235	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)construct(f,  constraints);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)construct(f,  constraints);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)construct(f,  constraints);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.initialize(f,    constraints);    	non-compiled	[CE]  ')'  expected	47	None	replace
236	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)constraints.create(f,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)constraints.create(f,  DEFAULT_ULPS);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)constraints.create(f,  DEFAULT_ULPS);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)constraints.create(f);    	non-compiled	[CE]  ')'  expected	71	None	replace
237	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.constraints.create(f);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.constraints.create(f);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.constraints.create(f);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)constraints.create(f);    	non-compiled	[CE]  ')'  expected	71	None	replace
238	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  3);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  3);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  3);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	69	None	replace
239	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getNumObjectiveFunction(i,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  getNumObjectiveFunction(i,  DEFAULT_ULPS);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  getNumObjectiveFunction(i,  DEFAULT_ULPS);	  LinearObjectiveFunction    f    =    getNumObjectiveFunction(i);    	non-compiled	[CE]  ')'  expected	41	None	replace
240	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getNumObjectiveFunctions();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  getNumObjectiveFunctions();  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  getNumObjectiveFunctions();	  LinearObjectiveFunction    f    =    getNumObjectiveFunction(i);    	non-compiled	[CE]  ')'  expected	41	None	replace
241	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.create(f);    	non-compiled	[CE]  ')'  expected	45	None	replace
242	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.initialize();  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.initialize();  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.initialize();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.initialize();    	non-compiled	[CE]  ')'  expected	33	None	replace
243	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  INEGATIVE_VAR_COLUMN_LABEL);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  INEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  INEGATIVE_VAR_COLUMN_LABEL);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    columnLabels);    	non-compiled	[CE]  ')'  expected	11	None	replace
244	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(DEFAULT_ULPS,  columnLabels);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(DEFAULT_ULPS,  columnLabels);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(DEFAULT_ULPS,  columnLabels);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    columnLabels);    	non-compiled	[CE]  ')'  expected	11	None	replace
245	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.plot.get(restrictToNonNegative);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.plot.get(restrictToNonNegative);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.plot.get(restrictToNonNegative);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.restrictToNonNegative.get(restrictToNonNegative);    	non-compiled	[CE]  ')'  expected	25	None	replace
246	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  double);  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  double);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  double);	  LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i,    epsilon);    	non-compiled	[CE]  '.class'  expected	70	None	replace
247	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.constraints.get(constraints);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.constraints.get(constraints);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.constraints.get(constraints);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)constraints.get(this);    	non-compiled	[CE]  ')'  expected	62	None	replace
248	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(constraints);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(constraints);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(constraints);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)constraints.get(this);    	non-compiled	[CE]  ')'  expected	62	None	replace
249	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  DEFAULT_ULPS,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  DEFAULT_ULPS,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  DEFAULT_ULPS,  NEGATIVE_VAR_COLUMN_LABEL);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	54	None	replace
250	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(i,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(i,  DEFAULT_ULPS);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(i,  DEFAULT_ULPS);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(i);    	non-compiled	[CE]  ')'  expected	9	None	replace
251	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(i,  getNumDecisionVariables());  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(i,  getNumDecisionVariables());  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(i,  getNumDecisionVariables());	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(i);    	non-compiled	[CE]  ')'  expected	9	None	replace
252	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(columno);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(columno);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(columno);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(lineno);    	non-compiled	[CE]  ')'  expected	38	None	replace
253	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(int);  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(int);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(int);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(double);    	non-compiled	[CE]  '.class'  expected	63	None	replace
254	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(double,  DEFAULT_ULPS);  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(double,  DEFAULT_ULPS);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(double,  DEFAULT_ULPS);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(double);    	non-compiled	[CE]  '.class'  expected	63	None	replace
255	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objectiveFunctions.get(epsilon);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objectiveFunctions.get(epsilon);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objectiveFunctions.get(epsilon);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.objectiveFunctions.get(restrictToNonNegative);    	non-compiled	[CE]  ')'  expected	74	None	replace
256	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)strictToNonNegative.get(restrictToNonNegative);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)strictToNonNegative.get(restrictToNonNegative);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)strictToNonNegative.get(restrictToNonNegative);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)restrictToNonNegative.get(restrictToNonNegative);    	non-compiled	[CE]  ')'  expected	50	None	replace
257	[BUG]  [BUGGY]  columnLabels.add( "Negative ",  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  columnLabels.add( "Negative ",  DEFAULT_ULPS);  [BUGGY]      }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	columnLabels.add( "Negative ",  DEFAULT_ULPS);	  columnLabels.add(   "Negative.   ");    	non-compiled	[CE]  ')'  expected	73	None	replace
258	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  columnLabels,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  columnLabels,  DEFAULT_ULPS);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  columnLabels,  DEFAULT_ULPS);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    null,    columnLabels);    	non-compiled	[CE]  ')'  expected	40	None	replace
259	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  defsilon);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  defsilon);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  defsilon);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    null,    columnLabels);    	non-compiled	[CE]  ')'  expected	40	None	replace
260	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  DEFAULT_ULPS,  epsilon);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  DEFAULT_ULPS,  epsilon);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  DEFAULT_ULPS,  epsilon);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)initialize(f,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	65	None	replace
261	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.initialize(f,  defsilon);  [CE]  '('  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.initialize(f,  defsilon);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.initialize(f,  defsilon);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.super.initialize(f);    	non-compiled	[CE]  '('  expected	35	None	replace
262	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objectiveFunctions.create(f);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objectiveFunctions.create(f);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objectiveFunctions.create(f);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.restrictToNonNegative.create(f);    	non-compiled	[CE]  ')'  expected	15	None	replace
263	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.nonNegative.create(f,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.nonNegative.create(f,  DEFAULT_ULPS);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.nonNegative.create(f,  DEFAULT_ULPS);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.restrictToNonNegative.create(f);    	non-compiled	[CE]  ')'  expected	15	None	replace
264	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  columns,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  columns,  DEFAULT_ULPS);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  columns,  DEFAULT_ULPS);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)initialize(f,    columns);    	non-compiled	[CE]  ')'  expected	13	None	replace
265	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.restrictToNonNegative.get();  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.restrictToNonNegative.get();  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.restrictToNonNegative.get();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.restrictToNonNegative.clone();    	non-compiled	[CE]  ')'  expected	18	None	replace
266	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.create(DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.create(DEFAULT_ULPS);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.create(DEFAULT_ULPS);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)restrictToNonNegative.create(null);    	non-compiled	[CE]  ')'  expected	17	None	replace
267	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.initializeAllObjects();  [CE]  '('  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.initializeAllObjects();  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.initializeAllObjects();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.super.initialize();    	non-compiled	[CE]  '('  expected	29	None	replace
268	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  double);  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  double);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  double);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    epsilon);    	non-compiled	[CE]  '.class'  expected	53	None	replace
269	[BUG]  [BUGGY]  columnLabels.add( "null "  +  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  columnLabels.add( "null "  +  DEFAULT_ULPS);  [BUGGY]      }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	columnLabels.add( "null "  +  DEFAULT_ULPS);	  columnLabels.add(   "null   "    +    i);    	non-compiled	[CE]  ')'  expected	57	None	replace
270	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.create(f,  DEFAULT_ULPS,  epsilon);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.create(f,  DEFAULT_ULPS,  epsilon);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.create(f,  DEFAULT_ULPS,  epsilon);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)restrictToNonNegative.create(f,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	44	None	replace
271	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.create(f,  DEFAULT_ULPS,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.create(f,  DEFAULT_ULPS,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.create(f,  DEFAULT_ULPS,  NEGATIVE_VAR_COLUMN_LABEL);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)restrictToNonNegative.create(f,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	44	None	replace
272	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.create(f,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.create(f,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.create(f,  NEGATIVE_VAR_COLUMN_LABEL);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)restrictToNonNegative.create(f,    DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	44	None	replace
273	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(DEFAULT_ULPS,  DEFAULT_VAR_COLUMN_LABEL);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(DEFAULT_ULPS,  DEFAULT_VAR_COLUMN_LABEL);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(DEFAULT_ULPS,  DEFAULT_VAR_COLUMN_LABEL);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(DEFAULT_ULPS);    	non-compiled	[CE]  ')'  expected	75	None	replace
274	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(table,  double  epsilon);  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(table,  double  epsilon);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(table,  double  epsilon);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(table,    epsilon);    	non-compiled	[CE]  '.class'  expected	37	None	replace
275	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(table,  epsilon,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(table,  epsilon,  DEFAULT_ULPS);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(table,  epsilon,  DEFAULT_ULPS);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(table,    epsilon);    	non-compiled	[CE]  ')'  expected	37	None	replace
276	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getConstructor();  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getConstructor();  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getConstructor();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)getInitialize();    	non-compiled	[CE]  ')'  expected	32	None	replace
277	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getInitialize(0);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getInitialize(0);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getInitialize(0);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)getInitialize();    	non-compiled	[CE]  ')'  expected	32	None	replace
278	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(DEFAULT_ULPS);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(DEFAULT_ULPS);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)initialize(null);    	non-compiled	[CE]  ')'  expected	48	None	replace
279	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps()  *  DEFAULT_ULPS  +  1;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  int  maxUlps  =  getMaxUlps()  *  DEFAULT_ULPS  +  1;  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	int  maxUlps  =  getMaxUlps()  *  DEFAULT_ULPS  +  1;	  int    maxUlps    =    getMaxUlps()    *    DEFAULT_ULPS;    	non-compiled	[CE]  ')'  expected	51	None	replace
280	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getDecisionFunctions().clone();  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getDecisionFunctions().clone();  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getDecisionFunctions().clone();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)getRestrictedObjectiveFunctions().clone();    	non-compiled	[CE]  ')'  expected	20	None	replace
281	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getRestrictedObjectiveFunctions().toArray(new  LinearObjectiveFunction[size()  ]);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getRestrictedObjectiveFunctions().toArray(new  LinearObjectiveFunction[size()  ]);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getRestrictedObjectiveFunctions().toArray(new  LinearObjectiveFunction[size()  ]);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)getRestrictedObjectiveFunctions().clone();    	non-compiled	[CE]  ')'  expected	20	None	replace
282	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  false,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  false,  DEFAULT_ULPS);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  false,  DEFAULT_ULPS);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    false);    	non-compiled	[CE]  ')'  expected	10	None	replace
283	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(DEFAULT_ULPS,  false);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(     "W     ");  }  columnLabels.add(     "Z     ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(     "x     "  +  i);  }  if  (!restrictToNonNegative)  {      [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(DEFAULT_ULPS,  false);  [BUGGY]      columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(     "s     "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(     "a     "  +  i);  }  columnLabels.add(     "RHS     ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(DEFAULT_ULPS,  false);	  LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    false);    	non-compiled	[CE]  ')'  expected	10	None	replace
