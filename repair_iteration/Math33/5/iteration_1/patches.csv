bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  columnLabels.add( "Negative_VAR_COLUMN_LABEL ");  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  columnLabels.add( "Negative_VAR_COLUMN_LABEL ");  [BUGGY]    }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	columnLabels.add( "Negative_VAR_COLUMN_LABEL ");	  columnLabels.add(   "NEGATIVE_VAR_COLUMN_LABEL   ");    	non-compiled	[CE]  ')'  expected	6	None	replace
2	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.list.get(i  +  1);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.list.get(i  +  1);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.list.get(i  +  1);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.list.get(i);    	non-compiled	[CE]  ')'  expected	17	None	replace
3	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.list.get(0);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.list.get(0);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.list.get(0);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.list.get(i);    	non-compiled	[CE]  ')'  expected	17	None	replace
4	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i);  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(i);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.list.get(i);    	non-compiled	[CE]  ')'  expected	17	None	replace
5	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps()  +  1;  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  int  maxUlps  =  getMaxUlps()  +  1;  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	int  maxUlps  =  getMaxUlps()  +  1;	      int    maxUlps    =    getMaxUlps();    	non-compiled	[CE]  ')'  expected	1	None	replace
6	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps()  -  1;  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  int  maxUlps  =  getMaxUlps()  -  1;  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	int  maxUlps  =  getMaxUlps()  -  1;	      int    maxUlps    =    getMaxUlps();    	non-compiled	[CE]  ')'  expected	1	None	replace
7	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps()  +  2;  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  int  maxUlps  =  getMaxUlps()  +  2;  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	int  maxUlps  =  getMaxUlps()  +  2;	      int    maxUlps    =    getMaxUlps();    	non-compiled	[CE]  ')'  expected	1	None	replace
8	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps()  -  2;  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  int  maxUlps  =  getMaxUlps()  -  2;  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	int  maxUlps  =  getMaxUlps()  -  2;	      int    maxUlps    =    getMaxUlps();    	non-compiled	[CE]  ')'  expected	1	None	replace
9	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(i);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(i);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(i);	      LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null);    	non-compiled	[CE]  ')'  expected	13	None	replace
10	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  false);  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  false);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  false);	      LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null);    	non-compiled	[CE]  ')'  expected	13	None	replace
11	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  columnLabels);  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  columnLabels);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  columnLabels);	      LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null);    	non-compiled	[CE]  ')'  expected	13	None	replace
12	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  columnLabels);  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  columnLabels);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  columnLabels);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)initialize(f);    	non-compiled	[CE]  ')'  expected	15	None	replace
13	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  columns);  [CE]  ')'  expected  [FE]                  AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  columns);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  columns);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)initialize(f);    	non-compiled	[CE]  ')'  expected	15	None	replace
14	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  this);  [CE]  ')'  expected  [FE]                    AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  this);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  this);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)initialize(f);    	non-compiled	[CE]  ')'  expected	15	None	replace
15	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.restrictToNonNegative.create(f);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.restrictToNonNegative.create(f);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.restrictToNonNegative.create(f);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)restrictToNonNegative.create(f);    	non-compiled	[CE]  ')'  expected	12	None	replace
16	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.create(f);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.create(f);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.create(f);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)restrictToNonNegative.create(f);    	non-compiled	[CE]  ')'  expected	12	None	replace
17	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.create(null);  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.create(null);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.create(null);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)restrictToNonNegative.create(f);    	non-compiled	[CE]  ')'  expected	12	None	replace
18	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.restrictToNonNegative.clone();  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.restrictToNonNegative.clone();  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.restrictToNonNegative.clone();	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)restrictToNonNegative.clone();    	non-compiled	[CE]  ')'  expected	11	None	replace
19	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)linearObjectives.clone();  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)linearObjectives.clone();  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)linearObjectives.clone();	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)restrictToNonNegative.clone();    	non-compiled	[CE]  ')'  expected	11	None	replace
20	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getRestrictedObjectiveFunctions().clone();  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getRestrictedObjectiveFunctions().clone();  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getRestrictedObjectiveFunctions().clone();	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)restrictToNonNegative.clone();    	non-compiled	[CE]  ')'  expected	11	None	replace
21	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i  +  1);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i  +  1);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i  +  1);	      LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i);    	non-compiled	[CE]  ')'  expected	3	None	replace
22	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnLabels);  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnLabels);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  columnLabels);	      LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i);    	non-compiled	[CE]  ')'  expected	3	None	replace
23	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getNumberObjectiveFunction(i);  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =  getNumberObjectiveFunction(i);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  getNumberObjectiveFunction(i);	      LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i);    	non-compiled	[CE]  ')'  expected	3	None	replace
24	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(this);  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(this);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnLabels.get(this);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)restrictToNonNegative.get(this);    	non-compiled	[CE]  ')'  expected	14	None	replace
25	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.restrictToNonNegative.get(restrictToNonNegative);  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.restrictToNonNegative.get(restrictToNonNegative);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.restrictToNonNegative.get(restrictToNonNegative);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)restrictToNonNegative.get(this);    	non-compiled	[CE]  ')'  expected	14	None	replace
26	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(i);  [CE]  ')'  expected  [FE]                  AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(i);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(i);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)restrictToNonNegative.get(this);    	non-compiled	[CE]  ')'  expected	14	None	replace
27	[BUG]  [BUGGY]  columnLabels.add( "Negative, ");  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  columnLabels.add( "Negative, ");  [BUGGY]    }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	columnLabels.add( "Negative, ");	  columnLabels.add(   "Negative   ");    	non-compiled	[CE]  ')'  expected	7	None	replace
28	[BUG]  [BUGGY]  columnLabels.add( "Negative, "  +  i);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  columnLabels.add( "Negative, "  +  i);  [BUGGY]    }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	columnLabels.add( "Negative, "  +  i);	  columnLabels.add(   "Negative   "    +    i);    	non-compiled	[CE]  ')'  expected	8	None	replace
29	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.initialize();  [CE]  '('  expected  [FE]                AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.initialize();  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.initialize();	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.initialize();    	non-compiled	[CE]  '('  expected	5	None	replace
30	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(0);  [CE]  ')'  expected  [FE]                  AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(0);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(0);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.initialize();    	non-compiled	[CE]  ')'  expected	5	None	replace
31	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(0);  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(0);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(0);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)initialize();    	non-compiled	[CE]  ')'  expected	4	None	replace
32	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getInitialize();  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getInitialize();  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getInitialize();	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)initialize();    	non-compiled	[CE]  ')'  expected	4	None	replace
33	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.initialize();  [CE]  ')'  expected  [FE]                  AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.initialize();  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.initialize();	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)initialize();    	non-compiled	[CE]  ')'  expected	4	None	replace
34	[BUG]  [BUGGY]  columnLabels.add( "Null ");  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  columnLabels.add( "Null ");  [BUGGY]    }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	columnLabels.add( "Null ");	  columnLabels.add(   "null   ");    	non-compiled	[CE]  ')'  expected	19	None	replace
35	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.initialize(f);  [CE]  '('  expected  [FE]          AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.initialize(f);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.super.initialize(f);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.initialize(f);    	non-compiled	[CE]  '('  expected	2	None	replace
36	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  columnLabels);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  columnLabels);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  columnLabels);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.initialize(f);    	non-compiled	[CE]  ')'  expected	2	None	replace
37	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(table,  epsilon);  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(table,  epsilon);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(table,  epsilon);	      LinearObjectiveFunction    f    =    createLinearObjectiveFunction(epsilon);    	non-compiled	[CE]  ')'  expected	16	None	replace
38	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(lineno);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(lineno);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(lineno);	      LinearObjectiveFunction    f    =    createLinearObjectiveFunction(epsilon);    	non-compiled	[CE]  ')'  expected	16	None	replace
39	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  false);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  false);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  false);	      LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    null);    	non-compiled	[CE]  ')'  expected	18	None	replace
40	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  columnLabels);  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  columnLabels);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  columnLabels);	      LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    null);    	non-compiled	[CE]  ')'  expected	18	None	replace
41	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getNumObjectiveFunction(i);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =  getNumObjectiveFunction(i);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  getNumObjectiveFunction(i);	      LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i);    	non-compiled	[CE]  ')'  expected	3	None	replace
42	[BUG]  [BUGGY]  columnLabels.add( "Negative "  +  i,  restrictiveToNonNegative);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  columnLabels.add( "Negative "  +  i,  restrictiveToNonNegative);  [BUGGY]    }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	columnLabels.add( "Negative "  +  i,  restrictiveToNonNegative);	  columnLabels.add(   "Negative   "    +    i);    	non-compiled	[CE]  ')'  expected	8	None	replace
43	[BUG]  [BUGGY]  columnLabels.add( "Negative "  +  i,  restrictToNonNegative);  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  columnLabels.add( "Negative "  +  i,  restrictToNonNegative);  [BUGGY]    }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	columnLabels.add( "Negative "  +  i,  restrictToNonNegative);	  columnLabels.add(   "Negative   "    +    i);    	non-compiled	[CE]  ')'  expected	8	None	replace
44	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.create(f,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.create(f,  DEFAULT_ULPS);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.create(f,  DEFAULT_ULPS);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)restrictToNonNegative.create(f);    	non-compiled	[CE]  ')'  expected	12	None	replace
45	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.create(f);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.create(f);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.create(f);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)restrictToNonNegative.create(f);    	non-compiled	[CE]  ')'  expected	12	None	replace
46	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.list.get(i-1);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.list.get(i-1);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.list.get(i-1);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.list.get(i);    	non-compiled	[CE]  ')'  expected	17	None	replace
47	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  constraints);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  constraints);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  constraints);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.initialize(f);    	non-compiled	[CE]  ')'  expected	2	None	replace
48	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(null);  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(null);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(null);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)initialize(f);    	non-compiled	[CE]  ')'  expected	15	None	replace
49	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  constraints);  [CE]  ')'  expected  [FE]                  AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  constraints);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  constraints);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)initialize(f);    	non-compiled	[CE]  ')'  expected	15	None	replace
50	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.get(restrictToNonNegative);  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.get(restrictToNonNegative);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)restrictToNonNegative.get(restrictToNonNegative);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)restrictToNonNegative.clone();    	non-compiled	[CE]  ')'  expected	11	None	replace
51	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps()  *  DEFAULT_ULPS;  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  int  maxUlps  =  getMaxUlps()  *  DEFAULT_ULPS;  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	int  maxUlps  =  getMaxUlps()  *  DEFAULT_ULPS;	      int    maxUlps    =    getMaxUlps();    	non-compiled	[CE]  ')'  expected	1	None	replace
52	[BUG]  [BUGGY]  columnLabels.add( "negative, "  +  i);  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  columnLabels.add( "negative, "  +  i);  [BUGGY]    }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	columnLabels.add( "negative, "  +  i);	  columnLabels.add(   "negative   "    +    i);    	non-compiled	[CE]  ')'  expected	10	None	replace
53	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  epsilon);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  epsilon);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  epsilon);	      LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null);    	non-compiled	[CE]  ')'  expected	13	None	replace
54	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  DEFAULT_ULPS);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  DEFAULT_ULPS);	      LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null);    	non-compiled	[CE]  ')'  expected	13	None	replace
55	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  NEGATIVE_VAR_COLUMN_LABEL);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  NEGATIVE_VAR_COLUMN_LABEL);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  NEGATIVE_VAR_COLUMN_LABEL);	      LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    null);    	non-compiled	[CE]  ')'  expected	18	None	replace
56	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  DEFAULT_ULPS);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(null,  null,  DEFAULT_ULPS);	      LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null,    null);    	non-compiled	[CE]  ')'  expected	18	None	replace
57	[BUG]  [BUGGY]  columnLabels.add( "null "  +  i);  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  columnLabels.add( "null "  +  i);  [BUGGY]    }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	columnLabels.add( "null "  +  i);	  columnLabels.add(   "null   ");    	non-compiled	[CE]  ')'  expected	19	None	replace
58	[BUG]  [BUGGY]  columnLabels.add( "NEGATIVE_VAR_COLUMN_LABEL "  +  i);  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  columnLabels.add( "NEGATIVE_VAR_COLUMN_LABEL "  +  i);  [BUGGY]    }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	columnLabels.add( "NEGATIVE_VAR_COLUMN_LABEL "  +  i);	  columnLabels.add(   "NEGATIVE_VAR_COLUMN_LABEL   ");    	non-compiled	[CE]  ')'  expected	6	None	replace
59	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initializeAllObjectives();  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initializeAllObjectives();  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initializeAllObjectives();	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.initialize();    	non-compiled	[CE]  ')'  expected	5	None	replace
60	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initializeAllObjectives();  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initializeAllObjectives();  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)initializeAllObjectives();	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)initialize();    	non-compiled	[CE]  ')'  expected	4	None	replace
61	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.strictToNonNegative.get(restrictToNonNegative);  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.strictToNonNegative.get(restrictToNonNegative);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.strictToNonNegative.get(restrictToNonNegative);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)restrictToNonNegative.get(this);    	non-compiled	[CE]  ')'  expected	14	None	replace
62	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)constraints.get(this);  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)constraints.get(this);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)constraints.get(this);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)restrictToNonNegative.get(this);    	non-compiled	[CE]  ')'  expected	14	None	replace
63	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(double);  [CE]  '.class'  expected  [FE]        AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(double);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(double);	      LinearObjectiveFunction    f    =    createLinearObjectiveFunction(epsilon);    	non-compiled	[CE]  '.class'  expected	16	None	replace
64	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(linearVariables);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(linearVariables);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(linearVariables);	      LinearObjectiveFunction    f    =    createLinearObjectiveFunction(epsilon);    	non-compiled	[CE]  ')'  expected	16	None	replace
65	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  DEFAULT_ULPS);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)initialize(f,  DEFAULT_ULPS);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)initialize(f);    	non-compiled	[CE]  ')'  expected	15	None	replace
66	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  DEFAULT_ULPS);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  DEFAULT_ULPS);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.initialize(f);    	non-compiled	[CE]  ')'  expected	2	None	replace
67	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  defsilon);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  defsilon);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)super.initialize(f,  defsilon);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.initialize(f);    	non-compiled	[CE]  ')'  expected	2	None	replace
68	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.list.get(i++);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.list.get(i++);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.list.get(i++);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)this.list.get(i);    	non-compiled	[CE]  ')'  expected	17	None	replace
69	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  DEFAULT_ULPS);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  DEFAULT_ULPS);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  DEFAULT_ULPS);	      LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i);    	non-compiled	[CE]  ')'  expected	3	None	replace
70	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  epsilon);  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  epsilon);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  getLinearObjectiveFunction(i,  epsilon);	      LinearObjectiveFunction    f    =    getLinearObjectiveFunction(i);    	non-compiled	[CE]  ')'  expected	3	None	replace
71	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)constraints.create(f);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)constraints.create(f);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)constraints.create(f);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)restrictToNonNegative.create(f);    	non-compiled	[CE]  ')'  expected	12	None	replace
72	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.initialize();  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.initialize();  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.initialize();	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)super.initialize();    	non-compiled	[CE]  ')'  expected	5	None	replace
73	[BUG]  [BUGGY]  columnLabels.add( "Negative. ");  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  columnLabels.add( "Negative. ");  [BUGGY]    }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	columnLabels.add( "Negative. ");	  columnLabels.add(   "Negative   ");    	non-compiled	[CE]  ')'  expected	7	None	replace
74	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objectiveFunctions.get(restrictToNonNegative);  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objectiveFunctions.get(restrictToNonNegative);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objectiveFunctions.get(restrictToNonNegative);	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)restrictToNonNegative.get(this);    	non-compiled	[CE]  ')'  expected	14	None	replace
75	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(DEFAULT_ULPS);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =  createLinearObjectiveFunction(DEFAULT_ULPS);  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =  createLinearObjectiveFunction(DEFAULT_ULPS);	      LinearObjectiveFunction    f    =    createLinearObjectiveFunction(null);    	non-compiled	[CE]  ')'  expected	13	None	replace
76	[BUG]  [BUGGY]  columnLabels.add( ",negative "  +  i);  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  columnLabels.add( ",negative "  +  i);  [BUGGY]    }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	columnLabels.add( ",negative "  +  i);	  columnLabels.add(   "negative   "    +    i);    	non-compiled	[CE]  ')'  expected	10	None	replace
77	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objectives.clone();  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objectives.clone();  [BUGGY]    columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);  }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.objectives.clone();	      LinearObjectiveFunction    f    =(LinearObjectiveFunction)restrictToNonNegative.clone();    	non-compiled	[CE]  ')'  expected	11	None	replace
78	[BUG]  [BUGGY]  columnLabels.add( ",Negative "  +  i);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  initializeColumnLabels()  {  if  (getNumObjectiveFunctions()  ==  2)  {  columnLabels.add(   "W   ");  }  columnLabels.add(   "Z   ");  for  (int  i  =  0;  i  <  getOriginalNumDecisionVariables();  i++)  {  columnLabels.add(   "x   "  +  i);  }  if  (!restrictToNonNegative)  {    [BUGGY]  columnLabels.add( ",Negative "  +  i);  [BUGGY]    }  for  (int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  columnLabels.add(   "s   "  +  i);  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  columnLabels.add(   "a   "  +  i);  }  columnLabels.add(   "RHS   ");  }  [CLASS]  SimplexTableau  [METHOD]  initializeColumnLabels  [RETURN_TYPE]  void  [VARIABLES]  boolean  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  List  columnLabels  constraints  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	columnLabels.add( ",Negative "  +  i);	  columnLabels.add(   "Negative   "    +    i);    	non-compiled	[CE]  ')'  expected	8	None	replace
