bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Integer[]  coefficients  =  basicRows.toArray(new  Integer[baselineRows.size()  +  1]);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  coefficients  =  basicRows.toArray(new  Integer[baselineRows.size()  +  1]);  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  coefficients  =  basicRows.toArray(new  Integer[baselineRows.size()  +  1]);	      Integer[]    coefficients    =    basicRows.toArray(new    Integer[baselineRows.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
2	[BUG]  [BUGGY]  Integer[]  coefficients  =  basicRows.toArray(new  Integer[basicRows.size()  +  1]);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  coefficients  =  basicRows.toArray(new  Integer[basicRows.size()  +  1]);  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  coefficients  =  basicRows.toArray(new  Integer[basicRows.size()  +  1]);	      Integer[]    coefficients    =    basicRows.toArray(new    Integer[baselineRows.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
3	[BUG]  [BUGGY]  Set  <  Integer>  basicRows  =  Sets.newHashSet(mostNegative);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Set  <  Integer>  basicRows  =  Sets.newHashSet(mostNegative);  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Set  <  Integer>  basicRows  =  Sets.newHashSet(mostNegative);	      Set    <    Integer>    basicRows    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
4	[BUG]  [BUGGY]  ArrayList  <  Integer>  basicRows  =  Sets.newHashSet();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  ArrayList  <  Integer>  basicRows  =  Sets.newHashSet();  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	ArrayList  <  Integer>  basicRows  =  Sets.newHashSet();	      Set    <    Integer>    basicRows    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
5	[BUG]  [BUGGY]  List  <  Integer>  basicRows  =  Sets.newHashSet();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  List  <  Integer>  basicRows  =  Sets.newHashSet();  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	List  <  Integer>  basicRows  =  Sets.newHashSet();	      Set    <    Integer>    basicRows    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
6	[BUG]  [BUGGY]  int[]  coefficients  =  new  int[basicRows.length  ];  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  int[]  coefficients  =  new  int[basicRows.length  ];  [BUGGY]    for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	int[]  coefficients  =  new  int[basicRows.length  ];	  int[]    coefficients    =    new    int[getOriginalNumDecisionVariables()    ];    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
7	[BUG]  [BUGGY]  int[]  coefficients  =  new  int[basicRows.size()  ];  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  int[]  coefficients  =  new  int[basicRows.size()  ];  [BUGGY]    for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	int[]  coefficients  =  new  int[basicRows.size()  ];	  int[]    coefficients    =    new    int[getOriginalNumDecisionVariables()    ];    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
8	[BUG]  [BUGGY]  int[]  coefficients  =  new  int[getBasicRows()  ];  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  int[]  coefficients  =  new  int[getBasicRows()  ];  [BUGGY]    for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	int[]  coefficients  =  new  int[getBasicRows()  ];	  int[]    coefficients    =    new    int[getOriginalNumDecisionVariables()    ];    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
9	[BUG]  [BUGGY]  int[]  coefficients  =  new  int[getBasicRow()  ];  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  int[]  coefficients  =  new  int[getBasicRow()  ];  [BUGGY]    for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	int[]  coefficients  =  new  int[getBasicRow()  ];	  int[]    coefficients    =    new    int[getOriginalNumDecisionVariables()    ];    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
10	[BUG]  [BUGGY]  double[]  coefficients  =  new  double[basicRows.length];  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  double[]  coefficients  =  new  double[basicRows.length];  [BUGGY]    for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	double[]  coefficients  =  new  double[basicRows.length];	  double[]    coefficients    =    new    double[basicNegative];    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
11	[BUG]  [BUGGY]  int[]  coefficients  =  new  int[basicNegative];  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  int[]  coefficients  =  new  int[basicNegative];  [BUGGY]    for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	int[]  coefficients  =  new  int[basicNegative];	  double[]    coefficients    =    new    double[basicNegative];    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
12	[BUG]  [BUGGY]  double[]  coefficients  =  new  double[basicNegative  -  mostNegative];  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  double[]  coefficients  =  new  double[basicNegative  -  mostNegative];  [BUGGY]    for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	double[]  coefficients  =  new  double[basicNegative  -  mostNegative];	  double[]    coefficients    =    new    double[basicNegative];    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
13	[BUG]  [BUGGY]  double[]  coefficients  =  new  double[basicRows.size()  +  1];  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  double[]  coefficients  =  new  double[basicRows.size()  +  1];  [BUGGY]    for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	double[]  coefficients  =  new  double[basicRows.size()  +  1];	  double[]    coefficients    =    new    double[basicVarBasicRows.size()    ];    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
14	[BUG]  [BUGGY]  int[]  coefficients  =  new  int[basicVarBasicRows.size()  ];  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  int[]  coefficients  =  new  int[basicVarBasicRows.size()  ];  [BUGGY]    for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	int[]  coefficients  =  new  int[basicVarBasicRows.size()  ];	  double[]    coefficients    =    new    double[basicVarBasicRows.size()    ];    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
15	[BUG]  [BUGGY]  double[]  coefficients  =  new  double[basicRows.length()  +  1];  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  double[]  coefficients  =  new  double[basicRows.length()  +  1];  [BUGGY]    for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	double[]  coefficients  =  new  double[basicRows.length()  +  1];	  double[]    coefficients    =    new    double[basicRows.length()    ];    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
16	[BUG]  [BUGGY]  double[]  coefficients  =  new  double[basicRows.length()  *  2];  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  double[]  coefficients  =  new  double[basicRows.length()  *  2];  [BUGGY]    for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	double[]  coefficients  =  new  double[basicRows.length()  *  2];	  double[]    coefficients    =    new    double[basicRows.length()    ];    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
17	[BUG]  [BUGGY]  Integer[]  coefficients  =  new  int[getBasicRows()  ];  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  coefficients  =  new  int[getBasicRows()  ];  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  coefficients  =  new  int[getBasicRows()  ];	      Integer[]    coefficients    =    new    int[getOriginalNumDecisionVariables()    ];    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
18	[BUG]  [BUGGY]  Integer[]  coefficients  =  new  int[basicRows.length  ];  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  coefficients  =  new  int[basicRows.length  ];  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  coefficients  =  new  int[basicRows.length  ];	      Integer[]    coefficients    =    new    int[getOriginalNumDecisionVariables()    ];    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
19	[BUG]  [BUGGY]  Integer[]  coefficients  =  new  int[basicRows.size()  ];  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  coefficients  =  new  int[basicRows.size()  ];  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  coefficients  =  new  int[basicRows.size()  ];	      Integer[]    coefficients    =    new    int[getOriginalNumDecisionVariables()    ];    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
20	[BUG]  [BUGGY]  Integer[]  coefficients  =  new  int[getNumDecisionVariables()  ];  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  coefficients  =  new  int[getNumDecisionVariables()  ];  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  coefficients  =  new  int[getNumDecisionVariables()  ];	      Integer[]    coefficients    =    new    int[getOriginalNumDecisionVariables()    ];    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
21	[BUG]  [BUGGY]  Integer[]  coefficients  =  new  int[size()  ];  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  coefficients  =  new  int[size()  ];  [BUGGY]    for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  coefficients  =  new  int[size()  ];	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
22	[BUG]  [BUGGY]  Integer[]  coefficients  =  basicRows.toArray(new  Integer[columnLabels.size()  ]);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  coefficients  =  basicRows.toArray(new  Integer[columnLabels.size()  ]);  [BUGGY]    for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  coefficients  =  basicRows.toArray(new  Integer[columnLabels.size()  ]);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
23	[BUG]  [BUGGY]  Integer[]  coefficients  =  new  int[columnLabels.size()  ];  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  coefficients  =  new  int[columnLabels.size()  ];  [BUGGY]    for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  coefficients  =  new  int[columnLabels.size()  ];	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
24	[BUG]  [BUGGY]  double[]  coefficients  =  new  double[getBasicRows()  +  1];  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  double[]  coefficients  =  new  double[getBasicRows()  +  1];  [BUGGY]    for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	double[]  coefficients  =  new  double[getBasicRows()  +  1];	  double[]    coefficients    =    new    double[getBasicRows()    ];    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
25	[BUG]  [BUGGY]  Integer[]  basicRows  =  new  Integer[getBasicRows().size()  ];  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  basicRows  =  new  Integer[getBasicRows().size()  ];  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  basicRows  =  new  Integer[getBasicRows().size()  ];	      Integer[]    basicRows    =    new    Integer[getOriginalNumDecisionVariables().size()    ];    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
26	[BUG]  [BUGGY]  Integer[]  basicRows  =  new  Integer[getOriginalNumDecisionVariables().size()  +  1];  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  basicRows  =  new  Integer[getOriginalNumDecisionVariables().size()  +  1];  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  basicRows  =  new  Integer[getOriginalNumDecisionVariables().size()  +  1];	      Integer[]    basicRows    =    new    Integer[getOriginalNumDecisionVariables().size()    ];    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
27	[BUG]  [BUGGY]  Integer[]  basicRows  =  new  Integer[getOriginalVarBasicRows().size()  ];  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  basicRows  =  new  Integer[getOriginalVarBasicRows().size()  ];  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  basicRows  =  new  Integer[getOriginalVarBasicRows().size()  ];	      Integer[]    basicRows    =    new    Integer[getOriginalNumDecisionVariables().size()    ];    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
28	[BUG]  [BUGGY]  Integer[]  basicRows  =  new  Integer[getBasicRows()  ];  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  basicRows  =  new  Integer[getBasicRows()  ];  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  basicRows  =  new  Integer[getBasicRows()  ];	      Integer[]    basicRows    =    new    Integer[getOriginalNumDecisionVariables()    ];    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
29	[BUG]  [BUGGY]  Integer[]  basicRows  =  new  Integer[getBasicRowCount()  ];  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  basicRows  =  new  Integer[getBasicRowCount()  ];  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  basicRows  =  new  Integer[getBasicRowCount()  ];	      Integer[]    basicRows    =    new    Integer[getOriginalNumDecisionVariables()    ];    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
30	[BUG]  [BUGGY]  Integer[]  basicRows  =  new  Integer[getMatrix()  ];  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  basicRows  =  new  Integer[getMatrix()  ];  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  basicRows  =  new  Integer[getMatrix()  ];	      Integer[]    basicRows    =    new    Integer[getOriginalNumDecisionVariables()    ];    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
31	[BUG]  [BUGGY]  Integer[]  basicRows  =  new  Integer[getBasicRow()  ];  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  basicRows  =  new  Integer[getBasicRow()  ];  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  basicRows  =  new  Integer[getBasicRow()  ];	      Integer[]    basicRows    =    new    Integer[getOriginalNumDecisionVariables()    ];    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
32	[BUG]  [BUGGY]  Integer[]  coefficients  =  new  int[getBasicRows().size()  ];  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  coefficients  =  new  int[getBasicRows().size()  ];  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  coefficients  =  new  int[getBasicRows().size()  ];	      Integer[]    coefficients    =    new    int[getOriginalNumDecisionVariables().size()    ];    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
33	[BUG]  [BUGGY]  Integer[]  coefficients  =  new  int[getOriginalNumDecisionVariables().size()  +  1];  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  coefficients  =  new  int[getOriginalNumDecisionVariables().size()  +  1];  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  coefficients  =  new  int[getOriginalNumDecisionVariables().size()  +  1];	      Integer[]    coefficients    =    new    int[getOriginalNumDecisionVariables().size()    ];    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
34	[BUG]  [BUGGY]  double[]  coefficients  =  new  double[basicVarBasicRows.length()  +  1];  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  double[]  coefficients  =  new  double[basicVarBasicRows.length()  +  1];  [BUGGY]    for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	double[]  coefficients  =  new  double[basicVarBasicRows.length()  +  1];	  double[]    coefficients    =    new    double[basicVarBasicRows.length()    ];    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
35	[BUG]  [BUGGY]  Integer[]  coefficients  =  basicRows.toArray(new  Integer[basicRows.size()  -  1]);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  coefficients  =  basicRows.toArray(new  Integer[basicRows.size()  -  1]);  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  coefficients  =  basicRows.toArray(new  Integer[basicRows.size()  -  1]);	      Integer[]    coefficients    =    basicRows.toArray(new    Integer[basicRows.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
36	[BUG]  [BUGGY]  Integer[]  coefficients  =  basicRows.toArray(new  Integer[baseNegative.size()  ]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  coefficients  =  basicRows.toArray(new  Integer[baseNegative.size()  ]);  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  coefficients  =  basicRows.toArray(new  Integer[baseNegative.size()  ]);	      Integer[]    coefficients    =    basicRows.toArray(new    Integer[basicRows.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
37	[BUG]  [BUGGY]  Integer[]  coefficients  =  new  Integer[getBasicRows()  ];  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  coefficients  =  new  Integer[getBasicRows()  ];  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  coefficients  =  new  Integer[getBasicRows()  ];	      Integer[]    coefficients    =    new    Integer[getOriginalNumDecisionVariables()    ];    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
38	[BUG]  [BUGGY]  Integer[]  coefficients  =  new  Integer[getRhsOffset()  ];  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  coefficients  =  new  Integer[getRhsOffset()  ];  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  coefficients  =  new  Integer[getRhsOffset()  ];	      Integer[]    coefficients    =    new    Integer[getOriginalNumDecisionVariables()    ];    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
39	[BUG]  [BUGGY]  Integer[]  coefficients  =  new  Integer[basicRows.length  ];  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  coefficients  =  new  Integer[basicRows.length  ];  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  coefficients  =  new  Integer[basicRows.length  ];	      Integer[]    coefficients    =    new    Integer[getOriginalNumDecisionVariables()    ];    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
40	[BUG]  [BUGGY]  Integer[]  coefficients  =  new  Integer[basicRows.size()  ];  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  coefficients  =  new  Integer[basicRows.size()  ];  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  coefficients  =  new  Integer[basicRows.size()  ];	      Integer[]    coefficients    =    new    Integer[getOriginalNumDecisionVariables()    ];    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
41	[BUG]  [BUGGY]  Set  <  Integer>  basicRows  =  Sets.newHashSet(basicRows,  mostNegative);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Set  <  Integer>  basicRows  =  Sets.newHashSet(basicRows,  mostNegative);  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Set  <  Integer>  basicRows  =  Sets.newHashSet(basicRows,  mostNegative);	      Set    <    Integer>    basicRows    =    Sets.newHashSet(basicRows);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
42	[BUG]  [BUGGY]  Set  <  Integer>  basicRows  =  Sets.newHashSetWithBasicRows(basicRows);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Set  <  Integer>  basicRows  =  Sets.newHashSetWithBasicRows(basicRows);  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Set  <  Integer>  basicRows  =  Sets.newHashSetWithBasicRows(basicRows);	      Set    <    Integer>    basicRows    =    Sets.newHashSet(basicRows);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
43	[BUG]  [BUGGY]  double[]  coefficients  =  new  double[basicRows.size()  *  2];  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  double[]  coefficients  =  new  double[basicRows.size()  *  2];  [BUGGY]    for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	double[]  coefficients  =  new  double[basicRows.size()  *  2];	  double[]    coefficients    =    new    double[basicRows.size()    ];    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
44	[BUG]  [BUGGY]  Integer[]  coefficients  =  new  Integer[getBasicRows().size()  ];  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  coefficients  =  new  Integer[getBasicRows().size()  ];  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  coefficients  =  new  Integer[getBasicRows().size()  ];	      Integer[]    coefficients    =    new    Integer[getOriginalNumDecisionVariables().size()    ];    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
45	[BUG]  [BUGGY]  Integer[]  coefficients  =  new  Integer[getOriginalNumDecisionVariables().size()  +  1];  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  coefficients  =  new  Integer[getOriginalNumDecisionVariables().size()  +  1];  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  coefficients  =  new  Integer[getOriginalNumDecisionVariables().size()  +  1];	      Integer[]    coefficients    =    new    Integer[getOriginalNumDecisionVariables().size()    ];    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
46	[BUG]  [BUGGY]  Integer[]  coefficients  =  new  Integer[getRhsOffset().size()  ];  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  coefficients  =  new  Integer[getRhsOffset().size()  ];  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  coefficients  =  new  Integer[getRhsOffset().size()  ];	      Integer[]    coefficients    =    new    Integer[getOriginalNumDecisionVariables().size()    ];    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
47	[BUG]  [BUGGY]  Integer[]  coefficients  =  new  int[getRhsOffset().size()  ];  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  coefficients  =  new  int[getRhsOffset().size()  ];  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  coefficients  =  new  int[getRhsOffset().size()  ];	      Integer[]    coefficients    =    new    int[getOriginalNumDecisionVariables().size()    ];    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
48	[BUG]  [BUGGY]  Integer[]  coefficients  =  new  int[getNumDecisionVariables().size()  ];  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  coefficients  =  new  int[getNumDecisionVariables().size()  ];  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  coefficients  =  new  int[getNumDecisionVariables().size()  ];	      Integer[]    coefficients    =    new    int[getOriginalNumDecisionVariables().size()    ];    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
49	[BUG]  [BUGGY]  int[]  coefficients  =  new  int[BasicRow.getOriginalNumDecisionVariables()  ];  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  int[]  coefficients  =  new  int[BasicRow.getOriginalNumDecisionVariables()  ];  [BUGGY]    for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	int[]  coefficients  =  new  int[BasicRow.getOriginalNumDecisionVariables()  ];	  int[]    coefficients    =    new    int[getOriginalNumDecisionVariables()    ];    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
50	[BUG]  [BUGGY]  double[]  coefficients  =  new  double[basicRows.size()  -  1];  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  double[]  coefficients  =  new  double[basicRows.size()  -  1];  [BUGGY]    for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	double[]  coefficients  =  new  double[basicRows.size()  -  1];	  double[]    coefficients    =    new    double[basicVarBasicRows.size()    ];    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
51	[BUG]  [BUGGY]  double[]  coefficients  =  new  double[BasicRows.length  ];  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  double[]  coefficients  =  new  double[BasicRows.length  ];  [BUGGY]    for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	double[]  coefficients  =  new  double[BasicRows.length  ];	  double[]    coefficients    =    new    double[getBasicRows()    ];    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
52	[BUG]  [BUGGY]  Integer[]  coefficients  =  baseRows.toArray(new  Integer[basicRows.size()  ]);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  coefficients  =  baseRows.toArray(new  Integer[basicRows.size()  ]);  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  coefficients  =  baseRows.toArray(new  Integer[basicRows.size()  ]);	      Integer[]    coefficients    =    basicRows.toArray(new    Integer[basicRows.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
53	[BUG]  [BUGGY]  Integer[]  basicRows  =  new  Integer[getRhsOffset()  ];  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  basicRows  =  new  Integer[getRhsOffset()  ];  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  basicRows  =  new  Integer[getRhsOffset()  ];	      Integer[]    basicRows    =    new    Integer[getOriginalNumDecisionVariables()    ];    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
54	[BUG]  [BUGGY]  Integer[]  basicRows  =  new  Integer[getColumnDecisionVariables()  ];  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  basicRows  =  new  Integer[getColumnDecisionVariables()  ];  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  basicRows  =  new  Integer[getColumnDecisionVariables()  ];	      Integer[]    basicRows    =    new    Integer[getOriginalNumDecisionVariables()    ];    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
55	[BUG]  [BUGGY]  Integer[]  basicRows  =  new  Integer[getColumnVariables()  ];  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  basicRows  =  new  Integer[getColumnVariables()  ];  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  basicRows  =  new  Integer[getColumnVariables()  ];	      Integer[]    basicRows    =    new    Integer[getOriginalNumDecisionVariables()    ];    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
56	[BUG]  [BUGGY]  Set  <  Integer>  basicRows  =  Sets.newHashSetWithBasicRows();  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Set  <  Integer>  basicRows  =  Sets.newHashSetWithBasicRows();  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Set  <  Integer>  basicRows  =  Sets.newHashSetWithBasicRows();	      Set    <    Integer>    basicRows    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
57	[BUG]  [BUGGY]  Integer  coefficients  =  basicRows.get(mostNegative);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer  coefficients  =  basicRows.get(mostNegative);  [BUGGY]    for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer  coefficients  =  basicRows.get(mostNegative);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
58	[BUG]  [BUGGY]  Integer  coefficients[]  =  getBasicRows();  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer  coefficients[]  =  getBasicRows();  [BUGGY]    for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer  coefficients[]  =  getBasicRows();	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
59	[BUG]  [BUGGY]  Integer  coefficients  =  getBasicRows(basicRows);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer  coefficients  =  getBasicRows(basicRows);  [BUGGY]    for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer  coefficients  =  getBasicRows(basicRows);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
60	[BUG]  [BUGGY]  double[]  coefficients  =  new  double[basicRows.length()  -  1];  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  double[]  coefficients  =  new  double[basicRows.length()  -  1];  [BUGGY]    for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	double[]  coefficients  =  new  double[basicRows.length()  -  1];	  double[]    coefficients    =    new    double[basicRows.length()    ];    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
61	[BUG]  [BUGGY]  double[]  coefficients  =  new  double[basicRows];  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  double[]  coefficients  =  new  double[basicRows];  [BUGGY]    for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	double[]  coefficients  =  new  double[basicRows];	  double[]    coefficients    =    new    double[basicNegative];    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
62	[BUG]  [BUGGY]  double[]  coefficients  =  new  double[mostNegative];  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  double[]  coefficients  =  new  double[mostNegative];  [BUGGY]    for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	double[]  coefficients  =  new  double[mostNegative];	  double[]    coefficients    =    new    double[basicNegative];    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
63	[BUG]  [BUGGY]  Integer[]  coefficients  =  baselineRows.toArray(new  Integer[basicRows.size()  ]);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  coefficients  =  baselineRows.toArray(new  Integer[basicRows.size()  ]);  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  coefficients  =  baselineRows.toArray(new  Integer[basicRows.size()  ]);	      Integer[]    coefficients    =    basicRows.toArray(new    Integer[baselineRows.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
64	[BUG]  [BUGGY]  Integer[]  basicRows  =  new  Integer[getRhsOffset().size()  ];  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  basicRows  =  new  Integer[getRhsOffset().size()  ];  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  basicRows  =  new  Integer[getRhsOffset().size()  ];	      Integer[]    basicRows    =    new    Integer[getOriginalNumDecisionVariables().size()    ];    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
65	[BUG]  [BUGGY]  Integer[]  basicRows  =  new  Integer[getColumnDecisionVariables().size()  ];  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  basicRows  =  new  Integer[getColumnDecisionVariables().size()  ];  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  basicRows  =  new  Integer[getColumnDecisionVariables().size()  ];	      Integer[]    basicRows    =    new    Integer[getOriginalNumDecisionVariables().size()    ];    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
66	[BUG]  [BUGGY]  Integer[]  coefficients  =  new  Integer[getBasicNumDecisionVariables().size()  ];  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  coefficients  =  new  Integer[getBasicNumDecisionVariables().size()  ];  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  coefficients  =  new  Integer[getBasicNumDecisionVariables().size()  ];	      Integer[]    coefficients    =    new    Integer[getOriginalNumDecisionVariables().size()    ];    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
67	[BUG]  [BUGGY]  Integer[]  coefficients  =  new  Integer[getColumnDecisionVariables()  ];  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  coefficients  =  new  Integer[getColumnDecisionVariables()  ];  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  coefficients  =  new  Integer[getColumnDecisionVariables()  ];	      Integer[]    coefficients    =    new    Integer[getOriginalNumDecisionVariables()    ];    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
68	[BUG]  [BUGGY]  Integer[]  coefficients  =  new  Integer[getVariables()  ];  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  coefficients  =  new  Integer[getVariables()  ];  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  coefficients  =  new  Integer[getVariables()  ];	      Integer[]    coefficients    =    new    Integer[getOriginalNumDecisionVariables()    ];    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
69	[BUG]  [BUGGY]  Set  <  Integer>  basicRows  =  Sets.newHashSet(basicVarBasicRows);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Set  <  Integer>  basicRows  =  Sets.newHashSet(basicVarBasicRows);  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Set  <  Integer>  basicRows  =  Sets.newHashSet(basicVarBasicRows);	      Set    <    Integer>    basicRows    =    Sets.newHashSet(basicRows);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
70	[BUG]  [BUGGY]  Integer[]  basicRows  =  new  Integer[getBasicNumDecisionVariables().size()  ];  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  basicRows  =  new  Integer[getBasicNumDecisionVariables().size()  ];  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  basicRows  =  new  Integer[getBasicNumDecisionVariables().size()  ];	      Integer[]    basicRows    =    new    Integer[getOriginalNumDecisionVariables().size()    ];    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
71	[BUG]  [BUGGY]  Integer[]  basicRows  =  new  Integer[getBasicRow().size()  ];  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  basicRows  =  new  Integer[getBasicRow().size()  ];  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  basicRows  =  new  Integer[getBasicRow().size()  ];	      Integer[]    basicRows    =    new    Integer[getOriginalNumDecisionVariables().size()    ];    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
72	[BUG]  [BUGGY]  Integer[]  coefficients  =  basicRows.toArray(new  Integer[BasicRows.size()  ]);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  coefficients  =  basicRows.toArray(new  Integer[BasicRows.size()  ]);  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  coefficients  =  basicRows.toArray(new  Integer[BasicRows.size()  ]);	      Integer[]    coefficients    =    basicRows.toArray(new    Integer[baselineRows.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
73	[BUG]  [BUGGY]  Integer[]  coefficients  =  basicRows.toArray(new  Integer[modules.size()  ]);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  coefficients  =  basicRows.toArray(new  Integer[modules.size()  ]);  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  coefficients  =  basicRows.toArray(new  Integer[modules.size()  ]);	      Integer[]    coefficients    =    basicRows.toArray(new    Integer[baselineRows.size()    ]);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
74	[BUG]  [BUGGY]  Integer  coefficients[]  =  basicRows.toArray(new  Integer[basicRows.size()  ]);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer  coefficients[]  =  basicRows.toArray(new  Integer[basicRows.size()  ]);  [BUGGY]    for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer  coefficients[]  =  basicRows.toArray(new  Integer[basicRows.size()  ]);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
75	[BUG]  [BUGGY]  Integer  coefficients[]  =  basicRows.toArray(new  Integer[baselineRows.size()  ]);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer  coefficients[]  =  basicRows.toArray(new  Integer[baselineRows.size()  ]);  [BUGGY]    for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer  coefficients[]  =  basicRows.toArray(new  Integer[baselineRows.size()  ]);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
76	[BUG]  [BUGGY]  Integer  coefficients[]  =  basicRows.toArray(new  Integer[columnCount]);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer  coefficients[]  =  basicRows.toArray(new  Integer[columnCount]);  [BUGGY]    for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer  coefficients[]  =  basicRows.toArray(new  Integer[columnCount]);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
77	[BUG]  [BUGGY]  Integer  coefficients  =  basicRows.iterator().next();  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer  coefficients  =  basicRows.iterator().next();  [BUGGY]    for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer  coefficients  =  basicRows.iterator().next();	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
78	[BUG]  [BUGGY]  Integer[]  coefficients  =  new  int[getRhsOffset()  ];  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  coefficients  =  new  int[getRhsOffset()  ];  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  coefficients  =  new  int[getRhsOffset()  ];	      Integer[]    coefficients    =    new    int[getOriginalNumDecisionVariables()    ];    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
79	[BUG]  [BUGGY]  Integer[]  coefficients  =  new  int[getVariables()  ];  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  Integer[]  coefficients  =  new  int[getVariables()  ];  [BUGGY]    double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	Integer[]  coefficients  =  new  int[getVariables()  ];	      Integer[]    coefficients    =    new    int[getOriginalNumDecisionVariables()    ];    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
80	[BUG]  [BUGGY]  int[]  coefficients  =  new  int[getRhsOffset()  ];  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  int[]  coefficients  =  new  int[getRhsOffset()  ];  [BUGGY]    for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	int[]  coefficients  =  new  int[getRhsOffset()  ];	  int[]    coefficients    =    new    int[getOriginalNumDecisionVariables()    ];    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
81	[BUG]  [BUGGY]  double[]  coefficients  =  new  double[basicVarBasicRows.size()  +  1];  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  double[]  coefficients  =  new  double[basicVarBasicRows.size()  +  1];  [BUGGY]    for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	double[]  coefficients  =  new  double[basicVarBasicRows.size()  +  1];	  double[]    coefficients    =    new    double[basicVarBasicRows.size()    ];    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
82	[BUG]  [BUGGY]  double[]  coefficients  =  new  double[getBasicRows().length  ];  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  double[]  coefficients  =  new  double[getBasicRows().length  ];  [BUGGY]    for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	double[]  coefficients  =  new  double[getBasicRows().length  ];	  double[]    coefficients    =    new    double[getBasicRows()    ];    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
83	[BUG]  [BUGGY]  double[]  coefficients  =  new  double[getBasicRows().size()  ];  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();    [BUGGY]  double[]  coefficients  =  new  double[getBasicRows().size()  ];  [BUGGY]    for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	double[]  coefficients  =  new  double[getBasicRows().size()  ];	  double[]    coefficients    =    new    double[getBasicRows()    ];    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
