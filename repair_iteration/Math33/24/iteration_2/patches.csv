bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getSize();  i++)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  For(int  i  =  0;  i  <  getSize();  i++)  {  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	For(int  i  =  0;  i  <  getSize();  i++)  {	  For(int    i    =    0;    i    <    getMaxUlps();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  getWidth();  i++)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  2;  i  <  getWidth();  i++)  {  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  2;  i  <  getWidth();  i++)  {	  for(int    i    =    1;    i    <    getWidth();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
3	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(j));  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(j));  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(j));  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    columnLabels.remove((    int)columnsToDrop.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
4	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getWidth();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(j));  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  For(int  j  =  0;  j  <  getWidth();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(j));  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	For(int  j  =  0;  j  <  getWidth();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(j));  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    columnLabels.remove((    int)columnsToDrop.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
5	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  columnsToDrop.remove((  int)columnsToDrop.get(j));  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  columnsToDrop.remove((  int)columnsToDrop.get(j));  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  columnsToDrop.remove((  int)columnsToDrop.get(j));  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    columnLabels.remove((    int)columnsToDrop.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
6	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  For(int  i  =  0;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	For(int  i  =  0;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }	  For(int    i    =    0;    i    <    getWidth();    i++)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
7	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getSize();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getSize();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getSize();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry	  for(int    j    =    0;    j    <    getColumns();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
8	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getRows();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getRows();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getRows();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry	  for(int    j    =    0;    j    <    getColumns();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  matrix[i  -  1][col++]  =  columnLabels[i  -  1][  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  matrix[i  -  1][col++]  =  columnLabels[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  matrix[i  -  1][col++]  =  columnLabels[i  -  1][	  for(int    i    =    0;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    columnLabels[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.	  for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.	  for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
12	[BUG]  [BUGGY]  ColumnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  ColumnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	ColumnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.	  for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
13	[BUG]  [BUGGY]  col  =  matrix.getEntry(  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  col  =  matrix.getEntry(  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	col  =  matrix.getEntry(	  col    =    table.getEntry(    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
14	[BUG]  [BUGGY]  col  =  columnLabels.getEntry(  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  col  =  columnLabels.getEntry(  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	col  =  columnLabels.getEntry(	  col    =    table.getEntry(    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
15	[BUG]  [BUGGY]  col  =  table.getEntry(0,  col);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  col  =  table.getEntry(0,  col);  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	col  =  table.getEntry(0,  col);	  col    =    table.getEntry(    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
16	[BUG]  [BUGGY]  if(columnsToDrop!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(columnsToDrop!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(columnsToDrop!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][	  if(columnLabels!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columns[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getWidth();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getWidth();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getWidth();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][	  if(columnLabels!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columns[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getRowsToDrop.size();  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getRowsToDrop.size();  i++)  {  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getRowsToDrop.size();  i++)  {	  for(int    i    =    0;    i    <    getColumnsToDrop.size();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumnsToDrop.size()  -  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getColumnsToDrop.size()  -  1;  i++)  {  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getColumnsToDrop.size()  -  1;  i++)  {	  for(int    i    =    0;    i    <    getColumnsToDrop.size();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
20	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  columnsToDrop.remove((  int)columnsToDrop.get(i));  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  columnsToDrop.remove((  int)columnsToDrop.get(i));  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  columnsToDrop.remove((  int)columnsToDrop.get(i));  }	  for(int    j    =    0;    j    <    getHeight();    j++)    {    columnsToDrop.remove((    int)columnsToDrop.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
21	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  columnsToDrop.remove((  int)columnsToDrop.get(j));  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  columnsToDrop.remove((  int)columnsToDrop.get(j));  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  columnsToDrop.remove((  int)columnsToDrop.get(j));  }	  for(int    j    =    0;    j    <    getHeight();    j++)    {    columnsToDrop.remove((    int)columnsToDrop.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
22	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry	  for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!table.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
23	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry	  for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!table.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
24	[BUG]  [BUGGY]  For(int  i  =  1;  i  <  getWidth();  i++)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  For(int  i  =  1;  i  <  getWidth();  i++)  {  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	For(int  i  =  1;  i  <  getWidth();  i++)  {	  For(int    i    =    0;    i    <    getWidth();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
25	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getWidth()  -  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  For(int  i  =  0;  i  <  getWidth()  -  1;  i++)  {  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	For(int  i  =  0;  i  <  getWidth()  -  1;  i++)  {	  For(int    i    =    0;    i    <    getWidth();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
26	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  this.columnsToDrop.size();  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  For(int  i  =  0;  i  <  this.columnsToDrop.size();  i++)  {  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	For(int  i  =  0;  i  <  this.columnsToDrop.size();  i++)  {	  For(int    i    =    0;    i    <    columnsToDrop.size();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
27	[BUG]  [BUGGY]  ColumnLabels[i  -  1][col++]  =  matrix[i  -  1][  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  ColumnLabels[i  -  1][col++]  =  matrix[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	ColumnLabels[i  -  1][col++]  =  matrix[i  -  1][	  if(columnLabels!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
28	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  For(int  i  =  0;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	For(int  i  =  0;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }	  For(int    i    =    0;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    column.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
29	[BUG]  [BUGGY]  ColumnsToDrop  columns[i  -  1][col++]  =  matrix[i  -  1][  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  ColumnsToDrop  columns[i  -  1][col++]  =  matrix[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	ColumnsToDrop  columns[i  -  1][col++]  =  matrix[i  -  1][	  ColumnsToDrop    columnLabels[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
30	[BUG]  [BUGGY]  ColumnsToDrop  columnLabels[i  -  1][col++]  =  matrix[i  -  2][  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  ColumnsToDrop  columnLabels[i  -  1][col++]  =  matrix[i  -  2][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	ColumnsToDrop  columnLabels[i  -  1][col++]  =  matrix[i  -  2][	  ColumnsToDrop    columnLabels[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
31	[BUG]  [BUGGY]  ColumnsToDrop  columnLabels[i  -  1][col++]  =  matrix[i  +  1][  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  ColumnsToDrop  columnLabels[i  -  1][col++]  =  matrix[i  +  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	ColumnsToDrop  columnLabels[i  -  1][col++]  =  matrix[i  +  1][	  ColumnsToDrop    columnLabels[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
32	[BUG]  [BUGGY]  col  =  columnsToDrop.remove((  int)columnsToDrop.size()  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  col  =  columnsToDrop.remove((  int)columnsToDrop.size()  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	col  =  columnsToDrop.remove((  int)columnsToDrop.size()  -  1);	  col    =    columnLabels.remove((    int)columnsToDrop.size()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
33	[BUG]  [BUGGY]  col  =  columnLabels.remove((  int)columnsToDrop.size());  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  col  =  columnLabels.remove((  int)columnsToDrop.size());  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	col  =  columnLabels.remove((  int)columnsToDrop.size());	  col    =    columnLabels.remove((    int)columnsToDrop.size()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
34	[BUG]  [BUGGY]  col  =  columnLabels.get((  int)columnsToDrop.size());  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  col  =  columnLabels.get((  int)columnsToDrop.size());  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	col  =  columnLabels.get((  int)columnsToDrop.size());	  col    =    columnLabels.remove((    int)columnsToDrop.size()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
35	[BUG]  [BUGGY]  col  =  columnsToDrop.get((  int)columnsToDrop.size()  -  1);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  col  =  columnsToDrop.get((  int)columnsToDrop.size()  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	col  =  columnsToDrop.get((  int)columnsToDrop.size()  -  1);	  col    =    columnLabels.remove((    int)columnsToDrop.size()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
36	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(col  ==  columnsToDrop.size())  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!colum  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(col  ==  columnsToDrop.size())  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!colum  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  if(col  ==  columnsToDrop.size())  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!colum	  if(col    ==    columnsToDrop.size())    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
37	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(col  ==  columnsToDrop.size())  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(col  ==  columnsToDrop.size())  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  if(col  ==  columnsToDrop.size())  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.	  if(col    ==    columnsToDrop.size())    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
38	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  For(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	For(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }	  For(int    i    =    0;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
39	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }	  For(int    i    =    0;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
40	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getMaxU();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column!=  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getMaxU();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column!=  illegal  start  of  expression  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getMaxU();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column!=  illegal  start  of  expression	  for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column!=    illegal    start    of    expression    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
41	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column!=  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column!=  illegal  start  of  expression  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column!=  illegal  start  of  expression	  for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column!=    illegal    start    of    expression    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
42	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  ==  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  ==  illegal  start  of  expression  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  ==  illegal  start  of  expression	  for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column!=    illegal    start    of    expression    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
43	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    table.getEntry(j,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
44	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	For(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    table.getEntry(j,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
45	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    table.getEntry(j,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
46	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    table.getEntry(j,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
47	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	  for(int    i    =    0;    i    <    getWidth();    i++)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
48	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }	  for(int    i    =    0;    i    <    getWidth();    i++)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
49	[BUG]  [BUGGY]  For(int  j  =  1;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  For(int  j  =  1;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	For(int  j  =  1;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }	  For(int    i    =    1;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    column.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
50	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][	  for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
51	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][	  for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
52	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }	  if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    column.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
53	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	For(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }	  if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    column.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
54	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }	  for(int    j    =    0;    j    <    getHeight();    j++)    {    columnLabels.remove((    int)columnsToDrop.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
55	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(j));  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(j));  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(j));  }	  for(int    j    =    0;    j    <    getHeight();    j++)    {    columnLabels.remove((    int)columnsToDrop.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
56	[BUG]  [BUGGY]  ||  columnLabels.contains(col))  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  ||  columnLabels.contains(col))  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	||  columnLabels.contains(col))  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
57	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	For(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
58	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop[i  -  1][col++]  =  table.getEntry  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop[i  -  1][col++]  =  table.getEntry  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop[i  -  1][col++]  =  table.getEntry	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
59	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnLabels.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnLabels.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnLabels.contains(j))  {  matrix[i  -  1][col++]  =  column	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnLabels.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
60	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getColumnsToDrop.size()  -  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  For(int  i  =  0;  i  <  getColumnsToDrop.size()  -  1;  i++)  {  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	For(int  i  =  0;  i  <  getColumnsToDrop.size()  -  1;  i++)  {	  For(int    i    =    0;    i    <    getColumnsToDrop.size();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
61	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getRowsToDrop.size();  i++)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  For(int  i  =  0;  i  <  getRowsToDrop.size();  i++)  {  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	For(int  i  =  0;  i  <  getRowsToDrop.size();  i++)  {	  For(int    i    =    0;    i    <    getColumnsToDrop.size();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
62	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  For(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	For(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }	  For(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    column.getEntry(j,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
63	[BUG]  [BUGGY]  matrix[i  -  1][col++]  =  matrix[i  -  1][  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  matrix[i  -  1][col++]  =  matrix[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	matrix[i  -  1][col++]  =  matrix[i  -  1][	  matrix[i    -    1][col++]    =    columnLabels[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
64	[BUG]  [BUGGY]  matrix[i  -  1][col++]  =  columnsToDrop[i  -  1][  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  matrix[i  -  1][col++]  =  columnsToDrop[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	matrix[i  -  1][col++]  =  columnsToDrop[i  -  1][	  matrix[i    -    1][col++]    =    columnLabels[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
65	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
66	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	For(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
67	[BUG]  [BUGGY]  if(columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
68	[BUG]  [BUGGY]  col  =  columnsToDrop.size();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  col  =  columnsToDrop.size();  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	col  =  columnsToDrop.size();	  if(col    ==    columnsToDrop.size())    {    if(col!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
69	[BUG]  [BUGGY]  ColumnLabels.remove(col);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  ColumnLabels.remove(col);  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	ColumnLabels.remove(col);	  if(col    ==    columnsToDrop.size())    {    if(col!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
70	[BUG]  [BUGGY]  ColumnLabels.add(col);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  ColumnLabels.add(col);  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	ColumnLabels.add(col);	  if(col    ==    columnsToDrop.size())    {    if(col!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
71	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  For(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	For(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	  For(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    table.getEntry(j,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
72	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    column.getEntry(j,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
73	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	For(int  j  =  0;  j  <  getHeight();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }	  For(int    j    =    0;    j    <    getHeight();    j++)    {    columnLabels.remove((    int)columnsToDrop.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
74	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  columnsToDrop.add((  int)columnsToDrop.get(j));  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  columnsToDrop.add((  int)columnsToDrop.get(j));  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  columnsToDrop.add((  int)columnsToDrop.get(j));  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    columnsToDrop.remove((    int)columnsToDrop.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
75	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getMaxU();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getMaxU();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getMaxU();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(	  for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
76	[BUG]  [BUGGY]  ||  columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop[i  -  1][col++]  =  table.getEntry  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  ||  columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop[i  -  1][col++]  =  table.getEntry  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	||  columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop[i  -  1][col++]  =  table.getEntry	  ||    columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
77	[BUG]  [BUGGY]  ||  columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEnt  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  ||  columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEnt  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	||  columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEnt	  ||    columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
78	[BUG]  [BUGGY]  ||  columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  ||  columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	||  columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.	  ||    columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
79	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  columnsToDrop.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  columnsToDrop.getEntry(i,  j);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  columnsToDrop.getEntry(i,  j);  }	  for(int    i    =    1;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    column.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
80	[BUG]  [BUGGY]  for(int  j  =  1;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  1;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  1;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }	  for(int    i    =    1;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    column.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
81	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(j,  i);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(j,  i);  }  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(j,  i);  }	  if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    table.getEntry(j,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
82	[BUG]  [BUGGY]  col  =  columnsToDrop.remove((  int)columnsToDrop.get(i));  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  col  =  columnsToDrop.remove((  int)columnsToDrop.get(i));  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	col  =  columnsToDrop.remove((  int)columnsToDrop.get(i));	  col    =    columnLabels.remove((    int)columnsToDrop.get(i));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
83	[BUG]  [BUGGY]  col  =  columnLabels.get((  int)columnsToDrop.get(i));  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  col  =  columnLabels.get((  int)columnsToDrop.get(i));  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	col  =  columnLabels.get((  int)columnsToDrop.get(i));	  col    =    columnLabels.remove((    int)columnsToDrop.get(i));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
84	[BUG]  [BUGGY]  col  =  columnsToDrop.remove((  int)columnLabels.get(i));  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  col  =  columnsToDrop.remove((  int)columnLabels.get(i));  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	col  =  columnsToDrop.remove((  int)columnLabels.get(i));	  col    =    columnLabels.remove((    int)columnsToDrop.get(i));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
85	[BUG]  [BUGGY]  col  =  matrix[i  -  1][col++]  =  columnLabels[i  -  1][  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  col  =  matrix[i  -  1][col++]  =  columnLabels[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	col  =  matrix[i  -  1][col++]  =  columnLabels[i  -  1][	  col    =    columnLabels[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
86	[BUG]  [BUGGY]  col  =  matrix[i  -  1][col++]  =  columns[i  -  1][  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  col  =  matrix[i  -  1][col++]  =  columns[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	col  =  matrix[i  -  1][col++]  =  columns[i  -  1][	  col    =    columnLabels[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
87	[BUG]  [BUGGY]  col  =  columns[i  -  1][col++]  =  matrix[i  -  1][  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  col  =  columns[i  -  1][col++]  =  matrix[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	col  =  columns[i  -  1][col++]  =  matrix[i  -  1][	  col    =    columnLabels[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
88	[BUG]  [BUGGY]  col  =  columnsToDrop[i  -  1][col++]  =  matrix[i  -  1][  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  col  =  columnsToDrop[i  -  1][col++]  =  matrix[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	col  =  columnsToDrop[i  -  1][col++]  =  matrix[i  -  1][	  col    =    columnLabels[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
89	[BUG]  [BUGGY]  ColumnsToDrop  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  col.  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  ColumnsToDrop  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  col.  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	ColumnsToDrop  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  col.	  ColumnsToDrop    columnLabels[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
90	[BUG]  [BUGGY]  ColumnsToDrop  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  column.  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  ColumnsToDrop  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  column.  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	ColumnsToDrop  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  column.	  ColumnsToDrop    columnLabels[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
91	[BUG]  [BUGGY]  ColumnsToDrop  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getHeight()  -  columnsToDrop.  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  ColumnsToDrop  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getHeight()  -  columnsToDrop.  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	ColumnsToDrop  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getHeight()  -  columnsToDrop.	  ColumnsToDrop    columnLabels[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
92	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getSize();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getSize();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getSize();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(	  for(int    j    =    0;    j    <    getColumnsCount();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
93	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.	  if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
94	[BUG]  [BUGGY]  if(columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -	  if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
95	[BUG]  [BUGGY]  if(columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.	  if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
96	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getSize();  i++)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getSize();  i++)  {  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getSize();  i++)  {	  for(int    i    =    0;    i    <    getMaxUlps();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
97	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEnt  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEnt  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEnt	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
98	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column	  for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
99	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column	  for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
100	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getBasicRows();  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  For(int  i  =  0;  i  <  getBasicRows();  i++)  {  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	For(int  i  =  0;  i  <  getBasicRows();  i++)  {	  For(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
101	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getColumns();  i++)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  For(int  i  =  0;  i  <  getColumns();  i++)  {  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	For(int  i  =  0;  i  <  getColumns();  i++)  {	  For(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
102	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getHeight();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.	  if(columnLabels!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columns[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
103	[BUG]  [BUGGY]  if(columnsToDrop!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  column.  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(columnsToDrop!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  column.  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(columnsToDrop!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  column.	  if(columnLabels!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columns[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
104	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  }	  for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
105	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  }	  for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
106	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnsCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getColumnsCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getColumnsCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  }	  for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
107	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  columnsToDrop[i  -  1][col++]  =  matrix[i  -  1][  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  columnsToDrop[i  -  1][col++]  =  matrix[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  columnsToDrop[i  -  1][col++]  =  matrix[i  -  1][	  for(int    i    =    0;    i    <    getHeight();    i++)    {    columnsToDrop[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
108	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  columnsToDrop[i  -  1][col++]  =  matrix[i  -  1][  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  columnsToDrop[i  -  1][col++]  =  matrix[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  columnsToDrop[i  -  1][col++]  =  matrix[i  -  1][	  for(int    i    =    0;    i    <    getHeight();    i++)    {    columnsToDrop[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
109	[BUG]  [BUGGY]  ColumnsToDrop[i  -  1][col++]  =  matrix[i  -  1][  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  ColumnsToDrop[i  -  1][col++]  =  matrix[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	ColumnsToDrop[i  -  1][col++]  =  matrix[i  -  1][	  for(int    i    =    0;    i    <    getHeight();    i++)    {    columnsToDrop[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
110	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  matrix[i  -  1][col++]  =  columns[i  -  1][  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  matrix[i  -  1][col++]  =  columns[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  matrix[i  -  1][col++]  =  columns[i  -  1][	  for(int    i    =    0;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    columns[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
111	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  matrix[i  -  1][col++]  =  columns[i  -  1][  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  matrix[i  -  1][col++]  =  columns[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  matrix[i  -  1][col++]  =  columns[i  -  1][	  for(int    i    =    0;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    columns[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
112	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  matrix.getEntry(i,  j);  }	  if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
113	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	For(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  matrix.getEntry(i,  j);  }	  if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
114	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  matrix.getEntry(i,  j);  }	  if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
115	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  For(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	For(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  matrix.getEntry(i,  j);  }	  if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
116	[BUG]  [BUGGY]  ||  col!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  ||  col!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	||  col!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry	  ||    columnLabels!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
117	[BUG]  [BUGGY]  ||  columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEnt  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  ||  columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEnt  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	||  columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEnt	  ||    columnLabels!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
118	[BUG]  [BUGGY]  For(int  j  =  1;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  For(int  j  =  1;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	For(int  j  =  1;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }	  For(int    i    =    1;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
119	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(j,  j);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  For(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(j,  j);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	For(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(j,  j);  }	  if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    matrix[i    -    1][col++]    =    column.getEntry(j,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
120	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(j,  j);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(j,  j);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(j,  j);  }	  if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    matrix[i    -    1][col++]    =    column.getEntry(j,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
121	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(j,  j);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(j,  j);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(j,  j);  }	  if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    matrix[i    -    1][col++]    =    column.getEntry(j,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
122	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getMaxUlp();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getMaxUlp();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getMaxUlp();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry	  for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
123	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry	  for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
124	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  matrix[i  -  1][col++]  =  columnsToDrop[i  -  1][  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  matrix[i  -  1][col++]  =  columnsToDrop[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  matrix[i  -  1][col++]  =  columnsToDrop[i  -  1][	  for(int    i    =    0;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    columnsToDrop[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
125	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  matrix[i  -  1][col++]  =  columnsToDrop[i  -  1][  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  matrix[i  -  1][col++]  =  columnsToDrop[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  matrix[i  -  1][col++]  =  columnsToDrop[i  -  1][	  for(int    i    =    0;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    columnsToDrop[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
126	[BUG]  [BUGGY]  for(int  j  =  1;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  1;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  1;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }	  for(int    i    =    1;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
127	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }	  for(int    i    =    0;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    column.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
128	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }	  for(int    i    =    0;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    column.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
129	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  matrix[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  matrix[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  matrix[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.	  for(int    i    =    0;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
130	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  matrix[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  matrix[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  matrix[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.	  for(int    i    =    0;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
131	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.	  for(int    i    =    0;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
132	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getMaxUlps();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(	  for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!table.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
133	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(	  for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!table.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
134	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(	  for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!table.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
135	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  columnsToDrop.remove((  int)columnsToDrop.get(i));  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  columnsToDrop.remove((  int)columnsToDrop.get(i));  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	For(int  j  =  0;  j  <  getHeight();  j++)  {  columnsToDrop.remove((  int)columnsToDrop.get(i));  }	  For(int    j    =    0;    j    <    getHeight();    j++)    {    columnsToDrop.remove((    int)columnsToDrop.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
136	[BUG]  [BUGGY]  matrix[i  -  1][col++]  =  tableau.getEntry(  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  matrix[i  -  1][col++]  =  tableau.getEntry(  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	matrix[i  -  1][col++]  =  tableau.getEntry(	  matrix[i    -    1][col++]    =    table.getEntry(    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
137	[BUG]  [BUGGY]  matrix[i  -  1][col++]  =  table.getEntry(j,  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  matrix[i  -  1][col++]  =  table.getEntry(j,  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	matrix[i  -  1][col++]  =  table.getEntry(j,	  matrix[i    -    1][col++]    =    table.getEntry(    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
138	[BUG]  [BUGGY]  matrix[i  -  1][col++]  =  table.getEntry(0,  col  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  matrix[i  -  1][col++]  =  table.getEntry(0,  col  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	matrix[i  -  1][col++]  =  table.getEntry(0,  col	  matrix[i    -    1][col++]    =    table.getEntry(    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
139	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][	  for(int    i    =    0;    i    <    getHeight();    i++)    {    columns[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
140	[BUG]  [BUGGY]  Columns[i  -  1][col++]  =  matrix[i  -  1][  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  Columns[i  -  1][col++]  =  matrix[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	Columns[i  -  1][col++]  =  matrix[i  -  1][	  for(int    i    =    0;    i    <    getHeight();    i++)    {    columns[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
141	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumns();  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getColumns();  i++)  {  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getColumns();  i++)  {	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
142	[BUG]  [BUGGY]  [i  -  2][col++]  =  matrix[i  -  2][  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  [i  -  2][col++]  =  matrix[i  -  2][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	[i  -  2][col++]  =  matrix[i  -  2][	  [i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
143	[BUG]  [BUGGY]  [i  -  1][col++]  =  matrix[i  -  2][  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  [i  -  1][col++]  =  matrix[i  -  2][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	[i  -  1][col++]  =  matrix[i  -  2][	  [i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
144	[BUG]  [BUGGY]  [i  -  1][col++]  =  matrix[i  -  1].[  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  [i  -  1][col++]  =  matrix[i  -  1].[  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	[i  -  1][col++]  =  matrix[i  -  1].[	  [i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
145	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[j  -  1][col++]  =  column.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[j  -  1][col++]  =  column.getEntry(i,  j);  }  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[j  -  1][col++]  =  column.getEntry(i,  j);  }	  if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[j    -    1][col++]    =    column.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
146	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[j  -  1][col++]  =  column.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[j  -  1][col++]  =  column.getEntry(i,  j);  }  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	For(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[j  -  1][col++]  =  column.getEntry(i,  j);  }	  if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[j    -    1][col++]    =    column.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
147	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(i,  j);  }	  if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[j    -    1][col++]    =    column.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
148	[BUG]  [BUGGY]  for(int  j  =  1;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  1;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  1;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  col);  }	  for(int    i    =    1;    i    <    getWidth();    i++)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
149	[BUG]  [BUGGY]  for(int  j  =  1;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  1;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  1;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	  for(int    i    =    1;    i    <    getWidth();    i++)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
150	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getHeight();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -	  if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
151	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  columnsToDrop[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  columnsToDrop[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getHeight();  i++)  {  columnsToDrop[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -	  if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
152	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  Column[][col++]  =  matrix[i  -  1][getWidth()  -  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  Column[][col++]  =  matrix[i  -  1][getWidth()  -  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getHeight();  i++)  {  Column[][col++]  =  matrix[i  -  1][getWidth()  -	  if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
153	[BUG]  [BUGGY]  ColumnsToDrop[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  ColumnsToDrop[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	ColumnsToDrop[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -	  if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
154	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	For(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(i,  j);  }	  if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[j    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
155	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getHeight();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  For(int  i  =  0;  i  <  getHeight();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	For(int  i  =  0;  i  <  getHeight();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.	  if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columns[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
156	[BUG]  [BUGGY]  if(columnsToDrop!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnLabels.  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(columnsToDrop!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnLabels.  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(columnsToDrop!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnLabels.	  if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columns[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
157	[BUG]  [BUGGY]  col  =  columnsToDrop[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnLabels.  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  col  =  columnsToDrop[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnLabels.  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	col  =  columnsToDrop[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnLabels.	  col    =    columnLabels[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
158	[BUG]  [BUGGY]  col  =  matrix[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  col  =  matrix[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	col  =  matrix[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.	  col    =    columnLabels[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
159	[BUG]  [BUGGY]  col  =  matrix[i  -  1][col++]  =  columnsToDrop[i  -  1][getWidth()  -  columnLabels.  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  col  =  matrix[i  -  1][col++]  =  columnsToDrop[i  -  1][getWidth()  -  columnLabels.  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	col  =  matrix[i  -  1][col++]  =  columnsToDrop[i  -  1][getWidth()  -  columnLabels.	  col    =    columnLabels[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
160	[BUG]  [BUGGY]  col  =  matrix[i  -  1][col++]  =  columnLabels[i  -  1][getWidth()  -  columnsToDrop.  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  col  =  matrix[i  -  1][col++]  =  columnLabels[i  -  1][getWidth()  -  columnsToDrop.  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	col  =  matrix[i  -  1][col++]  =  columnLabels[i  -  1][getWidth()  -  columnsToDrop.	  col    =    columnLabels[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
161	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  columns[i  -  1][  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  columns[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  columns[i  -  1][	  if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    columns[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
162	[BUG]  [BUGGY]  ||  columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  ||  columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	||  columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i	  ||    columnLabels!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
163	[BUG]  [BUGGY]  ||  columns!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  ||  columns!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	||  columns!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry	  ||    columnLabels!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
164	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(j,  j);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(j,  j);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(j,  j);  }	  for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    column.getEntry(j,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
165	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    tableau.getEntry(j,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
166	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    tableau.getEntry(j,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
167	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.	  if(columnLabels!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
168	[BUG]  [BUGGY]  col  =  columnLabels.remove((  int)columnsToDrop.get(i  -  1));  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  col  =  columnLabels.remove((  int)columnsToDrop.get(i  -  1));  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	col  =  columnLabels.remove((  int)columnsToDrop.get(i  -  1));	  col    =    columnLabels.remove((    int)columnsToDrop.get(i));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
169	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][	  if(columnLabels!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
170	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getColumns();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getColumns();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getColumns();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][	  if(columnLabels!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
171	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getColumnCount();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getColumnCount();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getColumnCount();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][	  if(columnLabels!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
172	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumns();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getColumns();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getColumns();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(	  for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
173	[BUG]  [BUGGY]  for(int  j  =  1;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  1;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  1;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	  for(int    i    =    1;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
174	[BUG]  [BUGGY]  if(col  >  0)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(col  >  0)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(col  >  0)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
175	[BUG]  [BUGGY]  if(col  >  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(col  >  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(col  >  0)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
176	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(j  -  1));  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(j  -  1));  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(j  -  1));  }	  For(int    j    =    0;    j    <    getHeight();    j++)    {    columnLabels.remove((    int)columnsToDrop.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
177	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(j  -  1));  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(j  -  1));  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	For(int  j  =  0;  j  <  getHeight();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(j  -  1));  }	  For(int    j    =    0;    j    <    getHeight();    j++)    {    columnLabels.remove((    int)columnsToDrop.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
178	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  columnsToDrop.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  1;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  columnsToDrop.getEntry(i,  j);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  1;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  columnsToDrop.getEntry(i,  j);  }	  if(columnLabels!=    null)    {    for(int    i    =    1;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    column.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
179	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  1;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  1;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }	  if(columnLabels!=    null)    {    for(int    i    =    1;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    column.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
180	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -	  if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
181	[BUG]  [BUGGY]  ColumnsToDrop  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  ColumnsToDrop  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	ColumnsToDrop  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -	  if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
182	[BUG]  [BUGGY]  col  =  matrix[i  -  1][col++]  =  matrix[i  -  1][  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  col  =  matrix[i  -  1][col++]  =  matrix[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	col  =  matrix[i  -  1][col++]  =  matrix[i  -  1][	  col    =    columnLabels[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
183	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -	  if(columnLabels!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columns[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
184	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumnsCount();  i++)  {  matrix[i  -  1][col++]  =  columns[i  -  1][  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getColumnsCount();  i++)  {  matrix[i  -  1][col++]  =  columns[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getColumnsCount();  i++)  {  matrix[i  -  1][col++]  =  columns[i  -  1][	  for(int    i    =    0;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    columns[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
185	[BUG]  [BUGGY]  ColumnsToDrop  columns[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  ColumnsToDrop  columns[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	ColumnsToDrop  columns[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.	  if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columns[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
186	[BUG]  [BUGGY]  if(columnsToDrop!=  null)  {  for(int  i  =  0;  i  <  getColumns();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(columnsToDrop!=  null)  {  for(int  i  =  0;  i  <  getColumns();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(columnsToDrop!=  null)  {  for(int  i  =  0;  i  <  getColumns();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.	  if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columns[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
187	[BUG]  [BUGGY]  if(columnsToDrop!=  null)  {  for(int  i  =  0;  i  <  getColumns();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(columnsToDrop!=  null)  {  for(int  i  =  0;  i  <  getColumns();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(columnsToDrop!=  null)  {  for(int  i  =  0;  i  <  getColumns();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][	  if(columnLabels!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columns[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
188	[BUG]  [BUGGY]  if(columnsToDrop!=  null)  {  for(int  i  =  0;  i  <  getWidth();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(columnsToDrop!=  null)  {  for(int  i  =  0;  i  <  getWidth();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(columnsToDrop!=  null)  {  for(int  i  =  0;  i  <  getWidth();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][	  if(columnLabels!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columns[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
189	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnsCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column!=  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getColumnsCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column!=  illegal  start  of  expression  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getColumnsCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column!=  illegal  start  of  expression	  for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column!=    illegal    start    of    expression    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
190	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column!=  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getColumnCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column!=  illegal  start  of  expression  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getColumnCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column!=  illegal  start  of  expression	  for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column!=    illegal    start    of    expression    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
191	[BUG]  [BUGGY]  ColumnsToDrop  columnLabels[i  -  1][col++]  =  columnsToDrop[i  -  1][getWidth()  -  col.  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  ColumnsToDrop  columnLabels[i  -  1][col++]  =  columnsToDrop[i  -  1][getWidth()  -  col.  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	ColumnsToDrop  columnLabels[i  -  1][col++]  =  columnsToDrop[i  -  1][getWidth()  -  col.	  ColumnsToDrop    columnLabels[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
192	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumns();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getColumns();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getColumns();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	  for(int    i    =    0;    i    <    getWidth();    i++)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
193	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumns();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getColumns();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getColumns();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][	  for(int    i    =    0;    i    <    getHeight();    i++)    {    columns[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
194	[BUG]  [BUGGY]  if(column!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(column!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(column!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
195	[BUG]  [BUGGY]  ColumnsToDrop  columnLabels[i  -  1][col++]  =  matrix[j  -  1][  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  ColumnsToDrop  columnLabels[i  -  1][col++]  =  matrix[j  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	ColumnsToDrop  columnLabels[i  -  1][col++]  =  matrix[j  -  1][	  ColumnsToDrop    columnLabels[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
196	[BUG]  [BUGGY]  ||  columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  ||  columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	||  columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i	  ||    columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
197	[BUG]  [BUGGY]  ||  columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  ||  columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	||  columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table	  ||    columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
198	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnsCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getColumnsCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getColumnsCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
199	[BUG]  [BUGGY]  if(column!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(column!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(column!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
200	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnsCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getColumnsCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getColumnsCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
201	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getColumnCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getColumnCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
202	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  columnLabels.size();  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  For(int  i  =  0;  i  <  columnLabels.size();  i++)  {  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	For(int  i  =  0;  i  <  columnLabels.size();  i++)  {	  For(int    i    =    0;    i    <    columnsToDrop.size();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
203	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  columnsToDrop.size()  -  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  For(int  i  =  0;  i  <  columnsToDrop.size()  -  1;  i++)  {  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	For(int  i  =  0;  i  <  columnsToDrop.size()  -  1;  i++)  {	  For(int    i    =    0;    i    <    columnsToDrop.size();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
204	[BUG]  [BUGGY]  if(column!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnLabels.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(column!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnLabels.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(column!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnLabels.contains(j))  {  matrix[i  -  1][col++]  =  column	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnLabels.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
205	[BUG]  [BUGGY]  if(column  ==  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(column  ==  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(column  ==  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnLabels.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
206	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(col  ==  columnsToDrop.size())  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columns  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(col  ==  columnsToDrop.size())  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columns  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  if(col  ==  columnsToDrop.size())  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columns	  if(col    ==    columnsToDrop.size())    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
207	[BUG]  [BUGGY]  matrix[i  -  1][col++]  =  columns[j  -  1][  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  matrix[i  -  1][col++]  =  columns[j  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	matrix[i  -  1][col++]  =  columns[j  -  1][	  matrix[i    -    1][col++]    =    columns[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
208	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
209	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
210	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    column.getEntry(j,    i);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
211	[BUG]  [BUGGY]  col  =  columnsToDrop.remove((  int)columnsToDrop.size());  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  col  =  columnsToDrop.remove((  int)columnsToDrop.size());  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	col  =  columnsToDrop.remove((  int)columnsToDrop.size());	  col    =    columnLabels.remove((    int)columnsToDrop.size()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
212	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumns();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getColumns();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getColumns();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry	  for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!table.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
213	[BUG]  [BUGGY]  For(int  i  =  1;  i  <  getHeight();  i++)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  For(int  i  =  1;  i  <  getHeight();  i++)  {  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	For(int  i  =  1;  i  <  getHeight();  i++)  {	  For(int    i    =    0;    i    <    getWidth();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
214	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  columnsToDrop.size();  i++)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  1;  i  <  columnsToDrop.size();  i++)  {  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  1;  i  <  columnsToDrop.size();  i++)  {	  for(int    i    =    1;    i    <    getWidth();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
215	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicRows();  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getBasicRows();  i++)  {  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getBasicRows();  i++)  {	  for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
216	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][j++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][j++]  =  table.getEntry(i,  j);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][j++]  =  table.getEntry(i,  j);  }	  For(int    i    =    1;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
217	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnsCount();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getColumnsCount();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getColumnsCount();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(	  for(int    j    =    0;    j    <    getColumnsCount();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
218	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  columnsToDrop.remove((  int)columnsToDrop.get(j  -  1));  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  columnsToDrop.remove((  int)columnsToDrop.get(j  -  1));  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  columnsToDrop.remove((  int)columnsToDrop.get(j  -  1));  }	  for(int    j    =    0;    j    <    getHeight();    j++)    {    columnsToDrop.remove((    int)columnsToDrop.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
219	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWeeks();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getWeeks();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getWeeks();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry	  for(int    j    =    0;    j    <    getColumns();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
220	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.columnsToDrop.size()  -  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  this.columnsToDrop.size()  -  1;  i++)  {  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  this.columnsToDrop.size()  -  1;  i++)  {	  for(int    i    =    0;    i    <    this.columnsToDrop.size();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
221	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  columnsToDrop.remove((  int)columnsToDrop.get(j));  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  columnsToDrop.remove((  int)columnsToDrop.get(j));  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  columnsToDrop.remove((  int)columnsToDrop.get(j));  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    columnsToDrop.remove((    int)columnsToDrop.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
222	[BUG]  [BUGGY]  ColumnLabels.remove((  int)columnsToDrop.get(j));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  ColumnLabels.remove((  int)columnsToDrop.get(j));  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	ColumnLabels.remove((  int)columnsToDrop.get(j));	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    columnLabels.remove((    int)columnsToDrop.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
223	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  matrix[i  -  1][  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  matrix[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  matrix[i  -  1][	  for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
224	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  matrix[i  -  1][col++]  =  matrix[i  -  1][  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  matrix[i  -  1][col++]  =  matrix[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getColumnsToDrop.size();  i++)  {  matrix[i  -  1][col++]  =  matrix[i  -  1][	  for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
225	[BUG]  [BUGGY]  col  =  table.getEntry(i,  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  col  =  table.getEntry(i,  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	col  =  table.getEntry(i,	  col    =    table.getEntry(    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
226	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    table.getEntry(j,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
227	[BUG]  [BUGGY]  col  =  columnLabels.get((  int)columnsToDrop.get(j));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  col  =  columnLabels.get((  int)columnsToDrop.get(j));  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	col  =  columnLabels.get((  int)columnsToDrop.get(j));	  if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    columnLabels.remove((    int)columnsToDrop.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
228	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getBasicRowCount();  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  For(int  i  =  0;  i  <  getBasicRowCount();  i++)  {  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	For(int  i  =  0;  i  <  getBasicRowCount();  i++)  {	  For(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
229	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getWidth();  j++)  {  columnsToDrop.remove((  int)columnsToDrop.get(j));  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  For(int  j  =  0;  j  <  getWidth();  j++)  {  columnsToDrop.remove((  int)columnsToDrop.get(j));  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	For(int  j  =  0;  j  <  getWidth();  j++)  {  columnsToDrop.remove((  int)columnsToDrop.get(j));  }	  For(int    j    =    0;    j    <    getHeight();    j++)    {    columnsToDrop.remove((    int)columnsToDrop.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
230	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  columnsToDrop.remove((  int)columnsToDrop.get(j  -  1));  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  For(int  j  =  0;  j  <  getHeight();  j++)  {  columnsToDrop.remove((  int)columnsToDrop.get(j  -  1));  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	For(int  j  =  0;  j  <  getHeight();  j++)  {  columnsToDrop.remove((  int)columnsToDrop.get(j  -  1));  }	  For(int    j    =    0;    j    <    getHeight();    j++)    {    columnsToDrop.remove((    int)columnsToDrop.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
231	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(i,  j);  }	  if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[j    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
232	[BUG]  [BUGGY]  if(columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop	  if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
233	[BUG]  [BUGGY]  col  =  columnsToDrop[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  col  =  columnsToDrop[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	col  =  columnsToDrop[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.	  col    =    columnLabels[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
234	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  For(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	For(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	  For(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    table.getEntry(j,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
235	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumns();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getColumns();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getColumns();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(	  for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!table.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
236	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumns();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getColumns();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getColumns();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column	  for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
237	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(j));  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(j));  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getColumnsToDrop.size();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(j));  }	  for(int    j    =    0;    j    <    getHeight();    j++)    {    columnLabels.remove((    int)columnsToDrop.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
238	[BUG]  [BUGGY]  matrix[i  -  1][col++]  =  table.getEntry(0,  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  matrix[i  -  1][col++]  =  table.getEntry(0,  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	matrix[i  -  1][col++]  =  table.getEntry(0,	  matrix[i    -    1][col++]    =    table.getEntry(    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
239	[BUG]  [BUGGY]  ColumnsTable.this.remove(columnsToDrop.size()  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  ColumnsTable.this.remove(columnsToDrop.size()  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	ColumnsTable.this.remove(columnsToDrop.size()  -  1);	  if(col    ==    columnsToDrop.size())    {    if(col!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
240	[BUG]  [BUGGY]  col  =  columnsToDrop.size()  -  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  col  =  columnsToDrop.size()  -  1;  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	col  =  columnsToDrop.size()  -  1;	  if(col    ==    columnsToDrop.size())    {    if(col!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
241	[BUG]  [BUGGY]  [i  -  1][col++]  =  matrix[j  -  1][  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  [i  -  1][col++]  =  matrix[j  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	[i  -  1][col++]  =  matrix[j  -  1][	  [i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
242	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumns();  i++)  {  matrix[i  -  1][col++]  =  columns[i  -  1][  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getColumns();  i++)  {  matrix[i  -  1][col++]  =  columns[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getColumns();  i++)  {  matrix[i  -  1][col++]  =  columns[i  -  1][	  if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    columns[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
243	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getColumns();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getColumns();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getColumns();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  }	  for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
244	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.columnLabels.size();  i++)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  this.columnLabels.size();  i++)  {  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  this.columnLabels.size();  i++)  {	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
245	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  columns.size();  i++)  {  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  columns.size();  i++)  {	  for(int    i    =    0;    i    <    columnLabels.size();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
246	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getWidth();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getWidth();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getWidth();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][	  for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
247	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(j  +  1));  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(j  +  1));  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  columnLabels.remove((  int)columnsToDrop.get(j  +  1));  }	  for(int    j    =    0;    j    <    getHeight();    j++)    {    columnLabels.remove((    int)columnsToDrop.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
248	[BUG]  [BUGGY]  col  =  columnsToDrop.remove((  int)columnLabels.size()  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  col  =  columnsToDrop.remove((  int)columnLabels.size()  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	col  =  columnsToDrop.remove((  int)columnLabels.size()  -  1);	  col    =    columnLabels.remove((    int)columnsToDrop.size()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
249	[BUG]  [BUGGY]  if(col!=  columnsToDrop.size())  {  if(col!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(col!=  columnsToDrop.size())  {  if(col!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(col!=  columnsToDrop.size())  {  if(col!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i	  if(col    ==    columnsToDrop.size())    {    if(col!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
250	[BUG]  [BUGGY]  if(col  <  columnsToDrop.size())  {  if(col!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(col  <  columnsToDrop.size())  {  if(col!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(col  <  columnsToDrop.size())  {  if(col!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table	  if(col    ==    columnsToDrop.size())    {    if(col!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
251	[BUG]  [BUGGY]  if(col!=  columnsToDrop.size())  {  if(col!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(col!=  columnsToDrop.size())  {  if(col!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(col!=  columnsToDrop.size())  {  if(col!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table	  if(col    ==    columnsToDrop.size())    {    if(col!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
252	[BUG]  [BUGGY]  if(col  <  columnsToDrop.size())  {  if(col!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(col  <  columnsToDrop.size())  {  if(col!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(col  <  columnsToDrop.size())  {  if(col!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry	  if(col    ==    columnsToDrop.size())    {    if(col!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
253	[BUG]  [BUGGY]  if(col  <  columnsToDrop.size())  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(col  <  columnsToDrop.size())  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(col  <  columnsToDrop.size())  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry	  if(col    ==    columnsToDrop.size())    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
254	[BUG]  [BUGGY]  if(col  ==  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(col  ==  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(col  ==  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
255	[BUG]  [BUGGY]  if(col!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(col!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(col!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
256	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!table.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry	  for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!table.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
257	[BUG]  [BUGGY]  if(columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(j,  i);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(j,  i);  }  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(j,  i);  }	  if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    table.getEntry(j,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
258	[BUG]  [BUGGY]  col  =  columnLabels.remove((  int)columnsToDrop.get(col));  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  col  =  columnLabels.remove((  int)columnsToDrop.get(col));  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	col  =  columnLabels.remove((  int)columnsToDrop.get(col));	  col    =    columnLabels.remove((    int)columnsToDrop.get(i));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
259	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  columnsToDrop.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  columnsToDrop.getEntry(i,  j);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  matrix[i  -  1][col++]  =  columnsToDrop.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    column.getEntry(j,    i);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
260	[BUG]  [BUGGY]  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	matrix[i  -  1][col++]  =  table.getEntry(i,  j);	  matrix[i    -    1][col++]    =    columns[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
261	[BUG]  [BUGGY]  int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
262	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  1;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  1;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
263	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  columnsToDrop[i  -  1][  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  columnsToDrop[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getWidth();  i++)  {  matrix[i  -  1][col++]  =  columnsToDrop[i  -  1][	  for(int    i    =    0;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    columnsToDrop[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
264	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getWidth();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getWidth();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getWidth();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][	  if(columnLabels!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columns[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
265	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  1;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  1;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
266	[BUG]  [BUGGY]  ColumnsToDrop  columnLabels[i  -  1][col++]  =  matrix[i  /  1][  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  ColumnsToDrop  columnLabels[i  -  1][col++]  =  matrix[i  /  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	ColumnsToDrop  columnLabels[i  -  1][col++]  =  matrix[i  /  1][	  ColumnsToDrop    columnLabels[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
267	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }	  for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    tableau.getEntry(j,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
268	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -	  if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
269	[BUG]  [BUGGY]  col  =  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  col  =  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	col  =  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -	  if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
270	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -	  if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
271	[BUG]  [BUGGY]  matrix[i  -  1][col++]  =  column.getEntry(  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  matrix[i  -  1][col++]  =  column.getEntry(  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	matrix[i  -  1][col++]  =  column.getEntry(	  matrix[i    -    1][col++]    =    table.getEntry(    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
272	[BUG]  [BUGGY]  matrix[i  -  1][col++]  =  graph.getEntry(  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  matrix[i  -  1][col++]  =  graph.getEntry(  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	matrix[i  -  1][col++]  =  graph.getEntry(	  matrix[i    -    1][col++]    =    table.getEntry(    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
273	[BUG]  [BUGGY]  if(col!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(col!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(col!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
274	[BUG]  [BUGGY]  if(col  ==  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(col  ==  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(col  ==  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
275	[BUG]  [BUGGY]  if(col!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(col!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(col!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
276	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.	  if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
277	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.	  if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
278	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumHeight();  i++)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getNumHeight();  i++)  {  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getNumHeight();  i++)  {	  for(int    i    =    0;    i    <    getHeight()    -    1;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
279	[BUG]  [BUGGY]  ||  columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.get  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  ||  columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.get  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	||  columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.get	  ||    columnLabels!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
280	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop	  if(columnLabels!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
281	[BUG]  [BUGGY]  col  =  table.getEntryByName(  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  col  =  table.getEntryByName(  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	col  =  table.getEntryByName(	  col    =    table.getEntry(    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
282	[BUG]  [BUGGY]  int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
283	[BUG]  [BUGGY]  if(columnLabels.contains(col))  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(columnLabels.contains(col))  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(columnLabels.contains(col))  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =	  for(int    j    =    0;    j    <    getWidth();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
284	[BUG]  [BUGGY]  [j  -  1][col++]  =  matrix[i  -  1][  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  [j  -  1][col++]  =  matrix[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	[j  -  1][col++]  =  matrix[i  -  1][	  [i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
285	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getWidth();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getWidth();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getWidth();  i++)  {  columnLabels[i  -  1][col++]  =  matrix[i  -  1][	  if(columnLabels!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columnLabels[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
286	[BUG]  [BUGGY]  if(columnsToDrop!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(columnsToDrop!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(columnsToDrop!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  columns[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop	  if(columnsToDrop!=    null)    {    for(int    i    =    0;    i    <    getHeight();    i++)    {    columns[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
287	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  columnsToDrop.add((  int)columnsToDrop.get(j));  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  columnsToDrop.add((  int)columnsToDrop.get(j));  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(columnLabels!=  null)  {  for(int  j  =  0;  j  <  getHeight();  j++)  {  columnsToDrop.add((  int)columnsToDrop.get(j));  }	  if(columnLabels!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    columnsToDrop.remove((    int)columnsToDrop.get(j));    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
288	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  >>  illegal  start  of  expression  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  >>  illegal  start  of  expression  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  column  >>  illegal  start  of  expression	  for(int    j    =    0;    j    <    getHeight();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    column!=    illegal    start    of    expression    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
289	[BUG]  [BUGGY]  if(columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[j  -  1][col++]  =  table.getEntry(i,  j);  }	  if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[j    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
290	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(columnLabels!=  null)  {  for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }	  if(columnLabels!=    null)    {    for(int    i    =    1;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    column.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
291	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  1;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  1;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(columnLabels!=  null)  {  for(int  i  =  1;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	  if(columnLabels!=    null)    {    for(int    i    =    1;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    column.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
292	[BUG]  [BUGGY]  if(columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  matrix.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  matrix.getEntry(i,  j);  }  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  matrix.getEntry(i,  j);  }	  if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    matrix.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
293	[BUG]  [BUGGY]  int  j  =  0;  j  <  getColumnsCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  int  j  =  0;  j  <  getColumnsCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	int  j  =  0;  j  <  getColumnsCount();  j++)  {  if(!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  table.getEntry(	  for(int    j    =    0;    j    <    getColumnsCount();    j++)    {    if(!columnsToDrop.contains(j))    {    matrix[i    -    1][col++]    =    table.getEntry(    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
294	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnLabels.  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnLabels.  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnLabels.	  for(int    i    =    0;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
295	[BUG]  [BUGGY]  int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	int  i  =  0;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  matrix[i  -  1][getWidth()  -  columnsToDrop.	  for(int    i    =    0;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    matrix[i    -    1][getWidth()    -    columnsToDrop.    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
296	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  rowsToDrop.size();  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  For(int  i  =  0;  i  <  rowsToDrop.size();  i++)  {  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	For(int  i  =  0;  i  <  rowsToDrop.size();  i++)  {	  For(int    i    =    0;    i    <    columnsToDrop.size();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
297	[BUG]  [BUGGY]  if(columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	  if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getHeight();    j++)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
298	[BUG]  [BUGGY]  For(int  j  =  1;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  For(int  j  =  1;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	For(int  j  =  1;  i  <  getHeight();  i++)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	  For(int    i    =    1;    i    <    getHeight();    i++)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
299	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getWidth();  i++)  {  columnsToDrop[i  -  1][col++]  =  matrix[i  -  1][  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  for(int  i  =  0;  i  <  getWidth();  i++)  {  columnsToDrop[i  -  1][col++]  =  matrix[i  -  1][  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	for(int  i  =  0;  i  <  getWidth();  i++)  {  columnsToDrop[i  -  1][col++]  =  matrix[i  -  1][	  for(int    i    =    0;    i    <    getHeight();    i++)    {    columnsToDrop[i    -    1][col++]    =    matrix[i    -    1][    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
300	[BUG]  [BUGGY]  if(columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(j,  j);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];      [BUGGY]  if(columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(j,  j);  }  [BUGGY]      for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }  for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	if(columnsToDrop!=  null)  {  for(int  j  =  0;  j  <  getWidth();  j++)  {  matrix[i  -  1][col++]  =  table.getEntry(j,  j);  }	  if(columnsToDrop!=    null)    {    for(int    j    =    0;    j    <    getWidth();    j++)    {    matrix[i    -    1][col++]    =    column.getEntry(j,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
