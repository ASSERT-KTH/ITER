bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  columnsToDrop.add(  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	columnsToDrop.add(	      for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
2	[BUG]  [BUGGY]  Collections.sort(columnLabels);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  Collections.sort(columnLabels);  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	Collections.sort(columnLabels);	      for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
3	[BUG]  [BUGGY]  ColumnLabels.this.columnLabels  =  columnsToDrop.get(i);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  ColumnLabels.this.columnLabels  =  columnsToDrop.get(i);  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	ColumnLabels.this.columnLabels  =  columnsToDrop.get(i);	      for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
4	[BUG]  [BUGGY]  ColumnLabels.this.columnLabels  =  columnsToDrop.size();  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  ColumnLabels.this.columnLabels  =  columnsToDrop.size();  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	ColumnLabels.this.columnLabels  =  columnsToDrop.size();	      for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  [BUGGY]    int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getMaxUlps();  i++)  {	  for(int    i    =    0;    i    <    getNumColumns();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumnsCount();  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getColumnsCount();  i++)  {  [BUGGY]    int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getColumnsCount();  i++)  {	  for(int    i    =    0;    i    <    getNumColumns();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getItemCount();  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getItemCount();  i++)  {  [BUGGY]    int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getItemCount();  i++)  {	  for(int    i    =    0;    i    <    getNumColumns();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo	      for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)!=    null)    {    columnsToD    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsToD  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsToD  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsToD	      for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)!=    null)    {    columnsToD    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columns  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columns  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columns	      for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)!=    null)    {    columnsToD    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(	      for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }	      for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add	      for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
14	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  For(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	For(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add	      for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicRowCount();  i++)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getBasicRowCount();  i++)  {  [BUGGY]    int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getBasicRowCount();  i++)  {	  for(int    i    =    0;    i    <    getBasicRow();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicColumns();  i++)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getBasicColumns();  i++)  {  [BUGGY]    int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getBasicColumns();  i++)  {	  for(int    i    =    0;    i    <    getBasicRows();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
17	[BUG]  [BUGGY]  ColumnLabels.this.columnLabels();  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  ColumnLabels.this.columnLabels();  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	ColumnLabels.this.columnLabels();	      for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add	      for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add	      for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(	      for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.	      for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
22	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(maxUlps);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(maxUlps);  }  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(maxUlps);  }	      for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
23	[BUG]  [BUGGY]  int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(maxUlps);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(maxUlps);  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(maxUlps);	      for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
24	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumns();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(maxUlps);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getColumns();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(maxUlps);  }  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getColumns();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(maxUlps);  }	      for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getRows();  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getRows();  i++)  {  [BUGGY]    int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getRows();  i++)  {	  for(int    i    =    0;    i    <    getColumns();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getRowCount();  i++)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getRowCount();  i++)  {  [BUGGY]    int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getRowCount();  i++)  {	  for(int    i    =    0;    i    <    getColumns();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToD  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToD  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToD	      for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToD    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsTo  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsTo  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsTo	      for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToD    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsTo  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsTo  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsTo	      for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToD    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getArtificialVariableOffset();  i++)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getArtificialVariableOffset();  i++)  {  [BUGGY]    int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getArtificialVariableOffset();  i++)  {	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
31	[BUG]  [BUGGY]  final  double  maxUlps  =  i  +  getMaxUlps();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  final  double  maxUlps  =  i  +  getMaxUlps();  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	final  double  maxUlps  =  i  +  getMaxUlps();	      for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
32	[BUG]  [BUGGY]  final  double  maxUlps  =  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  final  double  maxUlps  =  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	final  double  maxUlps  =  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(	      for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
33	[BUG]  [BUGGY]  final  double  maxUlps  =  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  final  double  maxUlps  =  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	final  double  maxUlps  =  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(	      for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
34	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getSize();  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getSize();  i++)  {  [BUGGY]    int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getSize();  i++)  {	  for(int    i    =    0;    i    <    getArtificialVariables();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
35	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToD  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToD  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToD	      for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToD    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
36	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add	      for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToD    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
37	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  columnsTo  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  columnsTo  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  columnsTo	      for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)    ==    null)    {    columnsToD    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
38	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  columnsToD  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  columnsToD  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  columnsToD	      for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)    ==    null)    {    columnsToD    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
39	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getBasicVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getBasicVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo	      for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)!=    null)    {    columnsTo    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
40	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(maxUlps);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getBasicRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(maxUlps);  }  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getBasicRows();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(maxUlps);  }	      for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(maxUlps);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(maxUlps);  }  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(maxUlps);  }	      for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
42	[BUG]  [BUGGY]  ColumnLabels.this.add(columnLabelsToDrop);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  ColumnLabels.this.add(columnLabelsToDrop);  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	ColumnLabels.this.add(columnLabelsToDrop);	      for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
43	[BUG]  [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0d,  maxUlps));  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0d,  maxUlps));  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0d,  maxUlps));	      for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
44	[BUG]  [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(flate,  0d,  maxUlps));  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(flate,  0d,  maxUlps));  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	ColumnLabels.this.add(new  LinearObjectiveFunction(flate,  0d,  maxUlps));	      for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
45	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumRows();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToD  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNumRows();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToD  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumRows();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToD	      for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToD    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
46	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumColumns();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToD  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNumColumns();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToD  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumColumns();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToD	      for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToD    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
47	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsTo  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsTo  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsTo	      for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToD    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
48	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add	      for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
49	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(	      for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
50	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumColumns();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNumColumns();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumColumns();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(	      for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
51	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  getBasicVariables();  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  1;  i  <  getBasicVariables();  i++)  {  [BUGGY]    int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  1;  i  <  getBasicVariables();  i++)  {	  for(int    i    =    0;    i    <    getBasicVariables();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
52	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  getArtificialVariables();  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  1;  i  <  getArtificialVariables();  i++)  {  [BUGGY]    int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  1;  i  <  getArtificialVariables();  i++)  {	  for(int    i    =    0;    i    <    getArtificialVariables();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
53	[BUG]  [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0d,  maxUlps,  false));  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0d,  maxUlps,  false));  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	ColumnLabels.this.add(new  LinearObjectiveFunction(entry,  0d,  maxUlps,  false));	      for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
54	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumRows();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNumRows();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumRows();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(	      for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
55	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumColumns();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNumColumns();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumColumns();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add	      for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
56	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumRows();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNumRows();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumRows();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add	      for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
57	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumRows();  i++)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNumRows();  i++)  {  [BUGGY]    int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumRows();  i++)  {	  for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
58	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicColumn();  i++)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getBasicColumn();  i++)  {  [BUGGY]    int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getBasicColumn();  i++)  {	  for(int    i    =    0;    i    <    getBasicRow();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
59	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumDecisionVariables();  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNumDecisionVariables();  i++)  {  [BUGGY]    int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumDecisionVariables();  i++)  {	  for(int    i    =    0;    i    <    getNumSlackVariables();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
60	[BUG]  [BUGGY]  Columns.this.add(new  LinearObjectiveFunction(entry,  0d,  maxUlps));  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  Columns.this.add(new  LinearObjectiveFunction(entry,  0d,  maxUlps));  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	Columns.this.add(new  LinearObjectiveFunction(entry,  0d,  maxUlps));	      for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
61	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNegativeFunctions();  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNegativeFunctions();  i++)  {  [BUGGY]    int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNegativeFunctions();  i++)  {	  for(int    i    =    0;    i    <    getColumns();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
62	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  columns  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  columns  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  columns	      for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)    ==    null)    {    columnsToD    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
63	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {	      for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)    ==    null)    {    columnsToD    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
64	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {	      for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)!=    null)    {    columnsToD    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
65	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columns  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columns  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columns	      for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToD    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
66	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {	      for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToD    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
67	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(	      for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
68	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(minUlps);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(minUlps);  }  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(minUlps);  }	      for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
69	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }	      for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
70	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumns();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getColumns();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getColumns();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo	      for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)!=    null)    {    columnsTo    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
71	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumVariables();  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNumVariables();  i++)  {  [BUGGY]    int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumVariables();  i++)  {	  for(int    i    =    0;    i    <    getBasicVariables();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
72	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumberOfColumns();  i++)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNumberOfColumns();  i++)  {  [BUGGY]    int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumberOfColumns();  i++)  {	  for(int    i    =    0;    i    <    getNumColumns();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
73	[BUG]  [BUGGY]  int  maxUlps  =  0  +  getMaxUlps();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  int  maxUlps  =  0  +  getMaxUlps();  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	int  maxUlps  =  0  +  getMaxUlps();	      for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
74	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  int  maxUlps  =  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	int  maxUlps  =  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(	      for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
75	[BUG]  [BUGGY]  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(	      for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
76	[BUG]  [BUGGY]  int  maxUlps  =  i  +  getMaxUlps();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  int  maxUlps  =  i  +  getMaxUlps();  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	int  maxUlps  =  i  +  getMaxUlps();	      for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
77	[BUG]  [BUGGY]  col  =  i  +  getMaxUlps();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  col  =  i  +  getMaxUlps();  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	col  =  i  +  getMaxUlps();	      for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
78	[BUG]  [BUGGY]  int  maxUlps  =  columnLabels.size()  +  getMaxUlps();  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  int  maxUlps  =  columnLabels.size()  +  getMaxUlps();  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	int  maxUlps  =  columnLabels.size()  +  getMaxUlps();	      for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
79	[BUG]  [BUGGY]  int  maxUlps  =  i  +  getMinUlps();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  int  maxUlps  =  i  +  getMinUlps();  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	int  maxUlps  =  i  +  getMinUlps();	      for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)!=    null)    {    columnsToDrop.add(    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
80	[BUG]  [BUGGY]  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo	      for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    if(getBasicRow(maxUlps)!=    null)    {    columnsTo    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
81	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(col);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(col);  }  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(col);  }	      for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
82	[BUG]  [BUGGY]  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }	      for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(maxUlps    >    0)    {    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
83	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columnsToDrop.size();  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  columnsToDrop.size();  i++)  {  [BUGGY]    int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  columnsToDrop.size();  i++)  {	  for(int    i    =    0;    i    <    getArtificialVariables();    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
84	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop	      for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToD    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
85	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }	      for(int    i    =    0;    i    <    getNumObjectiveFunctions();    i++)    {    final    double    maxUlps    =    i    +    getMaxUlps();    if(getBasicRow(col)    ==    null)    {    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
86	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  int  maxUlps  =  0  +  getMinUlps();  columnsToDrop.add(maxUlps);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }      [BUGGY]  for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  int  maxUlps  =  0  +  getMinUlps();  columnsToDrop.add(maxUlps);  }  [BUGGY]    for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getMaxUlps();  i++)  {  int  maxUlps  =  0  +  getMinUlps();  columnsToDrop.add(maxUlps);  }	      for(int    i    =    0;    i    <    getNumArtificialVariables();    i++)    {    int    maxUlps    =    0    +    getMaxUlps();    columnsToDrop.add(maxUlps);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
