bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(maxUlps);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [BUGGY]    for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(maxUlps);  }  [BUGGY]  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	    for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  columnsToDrop.add(maxUlps);  }		non-compiled	[CE]  illegal  start  of  expression	38	None	add
2	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [BUGGY]    for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(  [BUGGY]  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	    for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(		non-compiled	[CE]  illegal  start  of  expression	38	None	add
3	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsToD  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [BUGGY]    for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsToD  [BUGGY]  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	    for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsToD		non-compiled	[CE]  illegal  start  of  expression	38	None	add
4	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo  [CE]  illegal  start  of  expression  [FE]          AssertionError  [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [BUGGY]    for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo  [BUGGY]  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	    for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)!=  null)  {  columnsTo		non-compiled	[CE]  illegal  start  of  expression	38	None	add
5	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  columnsToD  [CE]  illegal  start  of  expression  [FE]            AssertionError  [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [BUGGY]    for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  columnsToD  [BUGGY]  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	    for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  0  +  getMaxUlps();  if(getBasicRow(maxUlps)  ==  null)  {  columnsToD		non-compiled	[CE]  illegal  start  of  expression	38	None	add
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicRows();  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [BUGGY]  for(int  i  =  0;  i  <  getBasicRows();  i++)  {  [BUGGY]  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getBasicRows();  i++)  {	for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getArtificialVariables();  i++)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [BUGGY]  for(int  i  =  0;  i  <  getArtificialVariables();  i++)  {  [BUGGY]  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getArtificialVariables();  i++)  {	for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getColumns();  i++)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [BUGGY]  for(int  i  =  0;  i  <  getColumns();  i++)  {  [BUGGY]  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getColumns();  i++)  {	for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicRow();  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError  [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [BUGGY]  for(int  i  =  0;  i  <  getBasicRow();  i++)  {  [BUGGY]  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getBasicRow();  i++)  {	for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
10	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [BUGGY]    for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(  [BUGGY]  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	    for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(		non-compiled	[CE]  illegal  start  of  expression	38	None	add
11	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [BUGGY]    for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(  [BUGGY]  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	    for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(		non-compiled	[CE]  illegal  start  of  expression	38	None	add
12	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [BUGGY]    for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(  [BUGGY]  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	    for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(		non-compiled	[CE]  illegal  start  of  expression	38	None	add
13	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToD  [CE]  illegal  start  of  expression  [FE]          AssertionError  [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [BUGGY]    for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToD  [BUGGY]  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	    for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToD		non-compiled	[CE]  illegal  start  of  expression	38	None	add
14	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToD  [CE]  illegal  start  of  expression  [FE]            AssertionError  [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [BUGGY]    for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToD  [BUGGY]  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	    for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToD		non-compiled	[CE]  illegal  start  of  expression	38	None	add
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [BUGGY]  for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  [BUGGY]  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {	for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getBasicVariables();  i++)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [BUGGY]  for(int  i  =  0;  i  <  getBasicVariables();  i++)  {  [BUGGY]  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getBasicVariables();  i++)  {	for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [BUGGY]  for(int  i  =  0;  i  <  getNumSlackVariables();  i++)  {  [BUGGY]  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumSlackVariables();  i++)  {	for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
18	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [BUGGY]    for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }  [BUGGY]  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	    for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(maxUlps  >  0)  {  columnsToDrop.add(maxUlps);  }		non-compiled	[CE]  illegal  start  of  expression	38	None	add
19	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [BUGGY]    for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(  [BUGGY]  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	    for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(		non-compiled	[CE]  illegal  start  of  expression	38	None	add
20	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [BUGGY]    for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(  [BUGGY]  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	    for(int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)!=  null)  {  columnsToDrop.add(		non-compiled	[CE]  illegal  start  of  expression	38	None	add
21	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(maxUlps);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError  [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [BUGGY]    for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(maxUlps);  }  [BUGGY]  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	    for(int  i  =  0;  i  <  getNumObjectiveFunctions();  i++)  {  final  double  maxUlps  =  i  +  getMaxUlps();  if(getBasicRow(col)  ==  null)  {  columnsToDrop.add(maxUlps);  }		non-compiled	[CE]  illegal  start  of  expression	38	None	add
22	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  getNumColumns();  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]    for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {  final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }    [BUGGY]  for(int  i  =  0;  i  <  getNumColumns();  i++)  {  [BUGGY]  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  }  }  double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	for(int  i  =  0;  i  <  getNumColumns();  i++)  {	for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
