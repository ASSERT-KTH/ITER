bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  entry  =  table.getEntry(i,  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  table.getEntry(i,  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  table.getEntry(i,  1);	  final    double    entry    =    table.getEntry(i,    0);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
2	[BUG]  [BUGGY]  final  double  entry  =  table.getEntry(i,  0,  maxUlps);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  table.getEntry(i,  0,  maxUlps);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  table.getEntry(i,  0,  maxUlps);	  final    double    entry    =    table.getEntry(i,    0);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
3	[BUG]  [BUGGY]  final  double  entry  =  table.getEntry(0);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  table.getEntry(0);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  table.getEntry(0);	  final    double    entry    =    table.getEntry(0,    i    +    2);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
4	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)columnLabels.get(i  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)columnLabels.get(i  -  1);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)columnLabels.get(i  -  1);	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)columnLabels.get(i);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
5	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)columnLabels.get(i  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)columnLabels.get(i  +  1);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)columnLabels.get(i  +  1);	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)columnLabels.get(i);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
6	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicVar(i  +  1,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicVar(i  +  1,  columnsToDrop);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicVar(i  +  1,  columnsToDrop);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)getBasicVar(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
7	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicVar(i  +  2);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicVar(i  +  2);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicVar(i  +  2);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)getBasicVar(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
8	[BUG]  [BUGGY]  Integer[]  maxUlps  =  getMaxUlps(i,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  Integer[]  maxUlps  =  getMaxUlps(i,  columnsToDrop);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	Integer[]  maxUlps  =  getMaxUlps(i,  columnsToDrop);	  Integer[]    maxUlps    =    getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
9	[BUG]  [BUGGY]  Integer[]  maxUlps  =  getMaxUlps(i  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  Integer[]  maxUlps  =  getMaxUlps(i  -  1);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	Integer[]  maxUlps  =  getMaxUlps(i  -  1);	  Integer[]    maxUlps    =    getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
10	[BUG]  [BUGGY]  Integer[]  maxUlps  =  getMaxUlps(i  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  Integer[]  maxUlps  =  getMaxUlps(i  +  1);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	Integer[]  maxUlps  =  getMaxUlps(i  +  1);	  Integer[]    maxUlps    =    getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
11	[BUG]  [BUGGY]  Integer[]  maxUlps  =  getMaxUlps(i,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  Integer[]  maxUlps  =  getMaxUlps(i,  columnLabels);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	Integer[]  maxUlps  =  getMaxUlps(i,  columnLabels);	  Integer[]    maxUlps    =    getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
12	[BUG]  [BUGGY]  int  maxUlps  =  matrix.getMaxUlps()  /  i;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  matrix.getMaxUlps()  /  i;  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  matrix.getMaxUlps()  /  i;	  int    maxUlps    =    matrix.getMaxUlps()    +    i;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
13	[BUG]  [BUGGY]  int  maxUlps  =  matrix.getMaxUlps()  *  i;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  matrix.getMaxUlps()  *  i;  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  matrix.getMaxUlps()  *  i;	  int    maxUlps    =    matrix.getMaxUlps()    +    i;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
14	[BUG]  [BUGGY]  int  maxUlps  =  matrix.getMaxUlps()  +  i  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  matrix.getMaxUlps()  +  i  +  1;  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  matrix.getMaxUlps()  +  i  +  1;	  int    maxUlps    =    matrix.getMaxUlps()    +    i;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
15	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps()  /  DEFAULT_ULPS;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  getMaxUlps()  /  DEFAULT_ULPS;  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  getMaxUlps()  /  DEFAULT_ULPS;	  int    maxUlps    =    getMaxUlps()    *    DEFAULT_ULPS;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
16	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps()  *  2;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  getMaxUlps()  *  2;  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  getMaxUlps()  *  2;	  int    maxUlps    =    getMaxUlps()    *    DEFAULT_ULPS;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
17	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps()  *  height;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  getMaxUlps()  *  height;  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  getMaxUlps()  *  height;	  int    maxUlps    =    getMaxUlps()    *    DEFAULT_ULPS;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
18	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps()  *  4;  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  getMaxUlps()  *  4;  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  getMaxUlps()  *  4;	  int    maxUlps    =    getMaxUlps()    *    DEFAULT_ULPS;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
19	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.table.clone();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.table.clone();  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.table.clone();	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)table.clone();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
20	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.getGraph();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.getGraph();  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.getGraph();	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.getGraph().clone();    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
21	[BUG]  [BUGGY]  final  double  entry  =  columnsToDrop.getEntry(0,  i  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  columnsToDrop.getEntry(0,  i  +  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  columnsToDrop.getEntry(0,  i  +  1);	  final    double    entry    =    columnsToDrop.getEntry(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
22	[BUG]  [BUGGY]  final  double  entry  =  columnsToDrop.getEntry(i,  0);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  columnsToDrop.getEntry(i,  0);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  columnsToDrop.getEntry(i,  0);	  final    double    entry    =    columnsToDrop.getEntry(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
23	[BUG]  [BUGGY]  int  maxUlps  =  matrix.getMaxUlps()  -  i  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  matrix.getMaxUlps()  -  i  +  1;  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  matrix.getMaxUlps()  -  i  +  1;	  int    maxUlps    =    matrix.getMaxUlps()    -    i;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
24	[BUG]  [BUGGY]  int  maxUlps  =  columnLabels.getMaxUlps()  -  i;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  columnLabels.getMaxUlps()  -  i;  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  columnLabels.getMaxUlps()  -  i;	  int    maxUlps    =    matrix.getMaxUlps()    -    i;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
25	[BUG]  [BUGGY]  final  double  entry  =  columnsToDrop.getEntry(i);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  columnsToDrop.getEntry(i);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  columnsToDrop.getEntry(i);	  final    double    entry    =    columnsToDrop.getEntry(0);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
26	[BUG]  [BUGGY]  final  double  entry  =  columnsToDrop.size();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  columnsToDrop.size();  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  columnsToDrop.size();	  final    double    entry    =    columnsToDrop.getEntry(0);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
27	[BUG]  [BUGGY]  final  double  entry  =  columnLabels.getEntry(0);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  columnLabels.getEntry(0);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  columnLabels.getEntry(0);	  final    double    entry    =    columnsToDrop.getEntry(0);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
28	[BUG]  [BUGGY]  Integer[]  maxUlps  =  getMinUlps();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  Integer[]  maxUlps  =  getMinUlps();  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	Integer[]  maxUlps  =  getMinUlps();	  Integer[]    maxUlps    =    getMaxUlps()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
29	[BUG]  [BUGGY]  Integer[]  maxUlps  =  getMaxUlps()  /  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  Integer[]  maxUlps  =  getMaxUlps()  /  1;  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	Integer[]  maxUlps  =  getMaxUlps()  /  1;	  Integer[]    maxUlps    =    getMaxUlps()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
30	[BUG]  [BUGGY]  final  double  entry  =  columnLabels.getEntry(i,  maxUlps);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  columnLabels.getEntry(i,  maxUlps);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  columnLabels.getEntry(i,  maxUlps);	  final    double    entry    =    table.getEntry(i,    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
31	[BUG]  [BUGGY]  final  double  entry  =  matrix.getEntry(0,  i  +  1,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  matrix.getEntry(0,  i  +  1,  columnsToDrop);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  matrix.getEntry(0,  i  +  1,  columnsToDrop);	  final    double    entry    =    matrix.getEntry(0,    i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
32	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)columns.get(i  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)columns.get(i  -  1);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)columns.get(i  -  1);	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)columns.get(i);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
33	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.columnsToDrop.get(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
34	[BUG]  [BUGGY]  final  double  entry  =  columns.getEntry(0,  i  +  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  columns.getEntry(0,  i  +  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  columns.getEntry(0,  i  +  1);	  final    double    entry    =    columnLabels.getEntry(0,    i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
35	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)getGraph().set(i);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)getGraph().set(i);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)getGraph().set(i);	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)getGraph().reset();    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
36	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicRow(i,  i);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicRow(i,  i);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicRow(i,  i);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)getBasicRow(i,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
37	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicRow(i,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicRow(i,  columnLabels);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicRow(i,  columnLabels);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)getBasicRow(i,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
38	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicRow(i,  columnLabelsToDrop);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicRow(i,  columnLabelsToDrop);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicRow(i,  columnLabelsToDrop);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)getBasicRow(i,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
39	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicRow(i,  columnLabels[i]);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicRow(i,  columnLabels[i]);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicRow(i,  columnLabels[i]);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)getBasicRow(i,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
40	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps(i);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  getMaximumUlps(i);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  getMaximumUlps(i);	  int    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
41	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  +  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  getMaximumUlps()  +  1;  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  getMaximumUlps()  +  1;	  int    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
42	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  -  1;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  getMaximumUlps()  -  1;  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  getMaximumUlps()  -  1;	  int    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
43	[BUG]  [BUGGY]  int  maxUlps  =  getMinimumUlps();  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  getMinimumUlps();  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  getMinimumUlps();	  int    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
44	[BUG]  [BUGGY]  final  double  entry  =  table.getEntry(i,  maxUlps  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  table.getEntry(i,  maxUlps  +  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  table.getEntry(i,  maxUlps  +  1);	  final    double    entry    =    table.getEntry(i,    i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
45	[BUG]  [BUGGY]  final  double  entry  =  table.getEntry(i,  i  +  1,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  table.getEntry(i,  i  +  1,  columnsToDrop);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  table.getEntry(i,  i  +  1,  columnsToDrop);	  final    double    entry    =    table.getEntry(i,    i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
46	[BUG]  [BUGGY]  final  double  entry  =  table.getEntry(i,  i  +  1,  maxUlps);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  table.getEntry(i,  i  +  1,  maxUlps);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  table.getEntry(i,  i  +  1,  maxUlps);	  final    double    entry    =    table.getEntry(i,    i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
47	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicVar(i,  i);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicVar(i,  i);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicVar(i,  i);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)getBasicVar(i,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
48	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicVar(i,  columnLabelsToDrop);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicVar(i,  columnLabelsToDrop);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicVar(i,  columnLabelsToDrop);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)getBasicVar(i,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
49	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicVar(i,  0);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicVar(i,  0);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicVar(i,  0);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)getBasicVar(i,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
50	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicVar(i,  i  +  1);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicVar(i,  i  +  1);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicVar(i,  i  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)getBasicVar(i,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
51	[BUG]  [BUGGY]  int  maxUlps  =  table.getMaxUlps()  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  table.getMaxUlps()  +  1;  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  table.getMaxUlps()  +  1;	  int    maxUlps    =    table.getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
52	[BUG]  [BUGGY]  int  maxUlps  =  table.getMaxUlps()  -  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  table.getMaxUlps()  -  1;  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  table.getMaxUlps()  -  1;	  int    maxUlps    =    table.getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
53	[BUG]  [BUGGY]  int  maxUlps  =  table.getMaxUlps(i);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  table.getMaxUlps(i);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  table.getMaxUlps(i);	  int    maxUlps    =    table.getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
54	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)columnsToDrop.get(i  -  1);	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.columns.get(i    -    1);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
55	[BUG]  [BUGGY]  final  double  entry  =  table.getEntry(0,  i  +  1,  columnLabels);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  table.getEntry(0,  i  +  1,  columnLabels);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  table.getEntry(0,  i  +  1,  columnLabels);	  final    double    entry    =    table.getEntry(0,    i    +    1,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
56	[BUG]  [BUGGY]  final  double  entry  =  table.getEntry(0,  i  +  1,  columnsToDrop,  i);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  table.getEntry(0,  i  +  1,  columnsToDrop,  i);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  table.getEntry(0,  i  +  1,  columnsToDrop,  i);	  final    double    entry    =    table.getEntry(0,    i    +    1,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
57	[BUG]  [BUGGY]  final  double  entry  =  table.getEntry(0,  i  +  1,  getArtificialVariableOffset());  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  table.getEntry(0,  i  +  1,  getArtificialVariableOffset());  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  table.getEntry(0,  i  +  1,  getArtificialVariableOffset());	  final    double    entry    =    table.getEntry(0,    i    +    1,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
58	[BUG]  [BUGGY]  final  double  entry  =  matrix.getEntry(0,  i)/  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  matrix.getEntry(0,  i)/  1;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  matrix.getEntry(0,  i)/  1;	  final    double    entry    =    matrix.getEntry(0,    i)+    1;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
59	[BUG]  [BUGGY]  final  double  entry  =  matrix.getEntry(0,  i)+  2;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  matrix.getEntry(0,  i)+  2;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  matrix.getEntry(0,  i)+  2;	  final    double    entry    =    matrix.getEntry(0,    i)+    1;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
60	[BUG]  [BUGGY]  final  double  entry  =  matrix.getEntry(0,  i)+  3;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  matrix.getEntry(0,  i)+  3;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  matrix.getEntry(0,  i)+  3;	  final    double    entry    =    matrix.getEntry(0,    i)+    1;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
61	[BUG]  [BUGGY]  final  double  entry  =  matrix.getEntry(i,  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  matrix.getEntry(i,  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  matrix.getEntry(i,  1);	  final    double    entry    =    matrix.getEntry(i,    0);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
62	[BUG]  [BUGGY]  final  double  entry  =  matrix.getEntry(i,  0d);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  matrix.getEntry(i,  0d);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  matrix.getEntry(i,  0d);	  final    double    entry    =    matrix.getEntry(i,    0);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
63	[BUG]  [BUGGY]  final  double  entry  =  matrix.getEntry(i,  0,  maxUlps);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  matrix.getEntry(i,  0,  maxUlps);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  matrix.getEntry(i,  0,  maxUlps);	  final    double    entry    =    matrix.getEntry(i,    0);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
64	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)columnLabels.clone();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)columnLabels.clone();  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)columnLabels.clone();	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.columnLabels.clone();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
65	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)columns.clone();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)columns.clone();  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)columns.clone();	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.columnLabels.clone();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
66	[BUG]  [BUGGY]  final  double  entry  =  table.getEntry(0,  i)/  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  table.getEntry(0,  i)/  1;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  table.getEntry(0,  i)/  1;	  final    double    entry    =    table.getEntry(0,    i)+    1;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
67	[BUG]  [BUGGY]  final  double  entry  =  table.getEntry(0,  i)+  2;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  table.getEntry(0,  i)+  2;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  table.getEntry(0,  i)+  2;	  final    double    entry    =    table.getEntry(0,    i)+    1;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
68	[BUG]  [BUGGY]  final  double  entry  =  table.getEntry(0,  i)+  3;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  table.getEntry(0,  i)+  3;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  table.getEntry(0,  i)+  3;	  final    double    entry    =    table.getEntry(0,    i)+    1;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
69	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)in.get();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)in.get();  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)in.get();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)in.next();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
70	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.in.next();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.in.next();  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.in.next();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)in.next();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
71	[BUG]  [BUGGY]  int  maxUlps  =  columnLabels.getMaxUlps()  -  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  columnLabels.getMaxUlps()  -  1;  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  columnLabels.getMaxUlps()  -  1;	  int    maxUlps    =    matrix.getMaxUlps()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
72	[BUG]  [BUGGY]  Integer[]  maxUlps  =  getMaximumUlps(i);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  Integer[]  maxUlps  =  getMaximumUlps(i);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	Integer[]  maxUlps  =  getMaximumUlps(i);	  Integer[]    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
73	[BUG]  [BUGGY]  Integer[]  maxUlps  =  getMaximumUlps()  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  Integer[]  maxUlps  =  getMaximumUlps()  +  1;  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	Integer[]  maxUlps  =  getMaximumUlps()  +  1;	  Integer[]    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
74	[BUG]  [BUGGY]  Integer[]  maxUlps  =  getMinimumUlps();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  Integer[]  maxUlps  =  getMinimumUlps();  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	Integer[]  maxUlps  =  getMinimumUlps();	  Integer[]    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
75	[BUG]  [BUGGY]  final  double  entry  =  table.getEntry(0,  i  +  1,  col);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  table.getEntry(0,  i  +  1,  col);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  table.getEntry(0,  i  +  1,  col);	  final    double    entry    =    table.getEntry(0,    i    +    1,    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
76	[BUG]  [BUGGY]  Integer  maxUlps  =  getMinUlps();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  Integer  maxUlps  =  getMinUlps();  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	Integer  maxUlps  =  getMinUlps();	  Integer    maxUlps    =    getMaxUlps()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
77	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps()  /  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  getMaxUlps()  /  1;  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  getMaxUlps()  /  1;	  int    maxUlps    =    getMaxUlps()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
78	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicRow(i  +  1,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicRow(i  +  1,  columnsToDrop);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicRow(i  +  1,  columnsToDrop);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)getBasicRow(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
79	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicColumn(i  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicColumn(i  +  1);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicColumn(i  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)getBasicRow(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
80	[BUG]  [BUGGY]  int  maxUlps  =  columnsToDrop.getMaxUlps();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  columnsToDrop.getMaxUlps();  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  columnsToDrop.getMaxUlps();	  int    maxUlps    =    columnLabels.getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
81	[BUG]  [BUGGY]  int  maxUlps  =  columns.getMaxUlps();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  columns.getMaxUlps();  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  columns.getMaxUlps();	  int    maxUlps    =    columnLabels.getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
82	[BUG]  [BUGGY]  int  maxUlps  =  columnLabels.getMaxUlps()  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  columnLabels.getMaxUlps()  +  1;  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  columnLabels.getMaxUlps()  +  1;	  int    maxUlps    =    columnLabels.getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
83	[BUG]  [BUGGY]  final  double  entry  =  this.table.getEntry(i,  0);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  this.table.getEntry(i,  0);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  this.table.getEntry(i,  0);	  final    double    entry    =    this.table.getEntry(i,    i);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
84	[BUG]  [BUGGY]  final  double  entry  =  this.table.getEntry(i,  0d);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  this.table.getEntry(i,  0d);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  this.table.getEntry(i,  0d);	  final    double    entry    =    this.table.getEntry(i,    i);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
85	[BUG]  [BUGGY]  final  double  entry  =  this.table.getEntry(i,  maxUlps);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  this.table.getEntry(i,  maxUlps);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  this.table.getEntry(i,  maxUlps);	  final    double    entry    =    this.table.getEntry(i,    i);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
86	[BUG]  [BUGGY]  final  double  entry  =  columnsToDrop.getEntry(i,  i);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  columnsToDrop.getEntry(i,  i);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  columnsToDrop.getEntry(i,  i);	  final    double    entry    =    this.table.getEntry(i,    i);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
87	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.next();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.next();  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.next();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.next();    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
88	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getValue(i);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getValue(i);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.getValue(i);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.next();    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
89	[BUG]  [BUGGY]  int  maxUlps  =  columnLabels.getMaxUlps(i);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  columnLabels.getMaxUlps(i);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  columnLabels.getMaxUlps(i);	  int    maxUlps    =    matrix.getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
90	[BUG]  [BUGGY]  int  maxUlps  =  columnsToDrop.getMaxUlps(i);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  columnsToDrop.getMaxUlps(i);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  columnsToDrop.getMaxUlps(i);	  int    maxUlps    =    matrix.getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
91	[BUG]  [BUGGY]  int  maxUlps  =  matrix.getMaxUlps(i  +  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  matrix.getMaxUlps(i  +  1);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  matrix.getMaxUlps(i  +  1);	  int    maxUlps    =    matrix.getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
92	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getArtificialVar(i  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getArtificialVar(i  +  1);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getArtificialVar(i  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)getArtificialVar(i);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
93	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getArtificialVar(i,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getArtificialVar(i,  columnsToDrop);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getArtificialVar(i,  columnsToDrop);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)getArtificialVar(i);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
94	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
95	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i-1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i-1);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i-1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.get(i);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
96	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.graph.get(i);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.graph.get(i);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.graph.get(i);	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.graph.clone();    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
97	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaxUlps(i  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  Integer  maxUlps  =  getMaxUlps(i  +  1);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	Integer  maxUlps  =  getMaxUlps(i  +  1);	  Integer    maxUlps    =    getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
98	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaxUlps(i,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  Integer  maxUlps  =  getMaxUlps(i,  columnsToDrop);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	Integer  maxUlps  =  getMaxUlps(i,  columnsToDrop);	  Integer    maxUlps    =    getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
99	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaxUlps(i  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  Integer  maxUlps  =  getMaxUlps(i  -  1);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	Integer  maxUlps  =  getMaxUlps(i  -  1);	  Integer    maxUlps    =    getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
100	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaxUlps(i,  columnsToDrop.size());  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  Integer  maxUlps  =  getMaxUlps(i,  columnsToDrop.size());  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	Integer  maxUlps  =  getMaxUlps(i,  columnsToDrop.size());	  Integer    maxUlps    =    getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
101	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicColumn(i,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicColumn(i,  columnsToDrop);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicColumn(i,  columnsToDrop);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)getBasicColumn(i);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
102	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.get(i);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.get(i);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.table.get(i);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.get(i);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
103	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnsToDrop.get(i);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnsToDrop.get(i);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnsToDrop.get(i);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.get(i);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
104	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaxUlps(2);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  Integer  maxUlps  =  getMaxUlps(2);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	Integer  maxUlps  =  getMaxUlps(2);	  Integer    maxUlps    =    getMaxUlps(1);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
105	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaxUlps(1)  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  Integer  maxUlps  =  getMaxUlps(1)  +  1;  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	Integer  maxUlps  =  getMaxUlps(1)  +  1;	  Integer    maxUlps    =    getMaxUlps(1);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
106	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaxUlps()  /  DEFAULT_ULPS;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  Integer  maxUlps  =  getMaxUlps()  /  DEFAULT_ULPS;  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	Integer  maxUlps  =  getMaxUlps()  /  DEFAULT_ULPS;	  Integer    maxUlps    =    getMaxUlps()    *    DEFAULT_ULPS;    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
107	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaxUlps()  *  2;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  Integer  maxUlps  =  getMaxUlps()  *  2;  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	Integer  maxUlps  =  getMaxUlps()  *  2;	  Integer    maxUlps    =    getMaxUlps()    *    DEFAULT_ULPS;    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
108	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaxUlps()  *  4;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  Integer  maxUlps  =  getMaxUlps()  *  4;  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	Integer  maxUlps  =  getMaxUlps()  *  4;	  Integer    maxUlps    =    getMaxUlps()    *    DEFAULT_ULPS;    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
109	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaxUlps()  *  height;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  Integer  maxUlps  =  getMaxUlps()  *  height;  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	Integer  maxUlps  =  getMaxUlps()  *  height;	  Integer    maxUlps    =    getMaxUlps()    *    DEFAULT_ULPS;    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
110	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.clone();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.clone();  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.clone();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.next();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
111	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnsToDrop.next();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnsToDrop.next();  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnsToDrop.next();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.next();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
112	[BUG]  [BUGGY]  final  double  entry  =  matrix.getEntry(0,  i)-  2;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  matrix.getEntry(0,  i)-  2;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  matrix.getEntry(0,  i)-  2;	  final    double    entry    =    matrix.getEntry(0,    i)-    1;    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
113	[BUG]  [BUGGY]  final  double  entry  =  matrix.getEntry(0);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  matrix.getEntry(0);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  matrix.getEntry(0);	  final    double    entry    =    matrix.getEntry(0,    i)-    1;    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
114	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)getGraph().get(i  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)getGraph().get(i  -  1);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)getGraph().get(i  -  1);	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)getGraph().get(i);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
115	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)getGraph().get(i  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)getGraph().get(i  +  1);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)getGraph().get(i  +  1);	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)getGraph().get(i);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
116	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.getGraph().get(i);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.getGraph().get(i);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.getGraph().get(i);	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)getGraph().get(i);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
117	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps(i,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  getMaxUlps(i,  columnsToDrop);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  getMaxUlps(i,  columnsToDrop);	  int    maxUlps    =    getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
118	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps(i  -  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  getMaxUlps(i  -  1);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  getMaxUlps(i  -  1);	  int    maxUlps    =    getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
119	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps(i  +  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  getMaxUlps(i  +  1);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  getMaxUlps(i  +  1);	  int    maxUlps    =    getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
120	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps(i,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  getMaxUlps(i,  columnLabels);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  getMaxUlps(i,  columnLabels);	  int    maxUlps    =    getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
121	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaxUlps()  /  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  Integer  maxUlps  =  getMaxUlps()  /  1;  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	Integer  maxUlps  =  getMaxUlps()  /  1;	  Integer    maxUlps    =    getMaxUlps()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
122	[BUG]  [BUGGY]  final  double  entry  =  table.getEntry(i,  0,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  table.getEntry(i,  0,  DEFAULT_ULPS);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  table.getEntry(i,  0,  DEFAULT_ULPS);	  final    double    entry    =    table.getEntry(i,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
123	[BUG]  [BUGGY]  final  double  entry  =  table.getEntry(i,  0d,  maxUlps);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  table.getEntry(i,  0d,  maxUlps);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  table.getEntry(i,  0d,  maxUlps);	  final    double    entry    =    table.getEntry(i,    0d);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
124	[BUG]  [BUGGY]  final  double  entry  =  columnsToDrop.getEntry(i,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  columnsToDrop.getEntry(i,  columnLabels);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  columnsToDrop.getEntry(i,  columnLabels);	  final    double    entry    =    columnLabels.getEntry(i,    i);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
125	[BUG]  [BUGGY]  final  double  entry  =  columnLabels.getEntry(i,  0);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  columnLabels.getEntry(i,  0);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  columnLabels.getEntry(i,  0);	  final    double    entry    =    columnLabels.getEntry(i,    i);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
126	[BUG]  [BUGGY]  final  double  entry  =  columns.getEntry(i,  i);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  columns.getEntry(i,  i);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  columns.getEntry(i,  i);	  final    double    entry    =    columnLabels.getEntry(i,    i);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
127	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)columns.get(i  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)columns.get(i  +  1);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)columns.get(i  +  1);	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.columns.get(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
128	[BUG]  [BUGGY]  int  maxUlps  =  matrix.getMaxUlps()  /  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  matrix.getMaxUlps()  /  1;  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  matrix.getMaxUlps()  /  1;	  int    maxUlps    =    matrix.getMaxUlps()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
129	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(i  -  1  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(i  -  1  +  1);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(i  -  1  +  1);	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.columnLabels.get(i    -    1);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
130	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(i  -  2);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(i  -  2);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.get(i  -  2);	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.columnLabels.get(i    -    1);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
131	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getPhase(i);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getPhase(i);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getPhase(i);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)getArtificialVar(i);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
132	[BUG]  [BUGGY]  Integer[]  maxUlps  =  getMaximumUlps()  -  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  Integer[]  maxUlps  =  getMaximumUlps()  -  1;  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	Integer[]  maxUlps  =  getMaximumUlps()  -  1;	  Integer[]    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
133	[BUG]  [BUGGY]  Integer  maxUlps  =  getmaxUlps();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  Integer  maxUlps  =  getmaxUlps();  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	Integer  maxUlps  =  getmaxUlps();	  Integer    maxUlps    =    getMaxUlps()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
134	[BUG]  [BUGGY]  int  maxUlps  =  matrix.getMaxUlps(i  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  matrix.getMaxUlps(i  -  1);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  matrix.getMaxUlps(i  -  1);	  int    maxUlps    =    matrix.getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
135	[BUG]  [BUGGY]  int  maxUlps  =  matrix.getMaxUlps(i,  columnsToDrop);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  matrix.getMaxUlps(i,  columnsToDrop);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  matrix.getMaxUlps(i,  columnsToDrop);	  int    maxUlps    =    matrix.getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
136	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i  +  1);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.get(i  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.get(i);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
137	[BUG]  [BUGGY]  final  double  entry  =  matrix.getEntry(0,  i)-  3;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  matrix.getEntry(0,  i)-  3;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  matrix.getEntry(0,  i)-  3;	  final    double    entry    =    matrix.getEntry(0,    i)-    1;    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
138	[BUG]  [BUGGY]  Integer[]  maxUlps  =  getmaxUlps();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  Integer[]  maxUlps  =  getmaxUlps();  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	Integer[]  maxUlps  =  getmaxUlps();	  Integer[]    maxUlps    =    getMaxUlps()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
139	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)table.clone();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.next();    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
140	[BUG]  [BUGGY]  final  double  entry  =  table.getEntry(0d,  maxUlps);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  table.getEntry(0d,  maxUlps);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  table.getEntry(0d,  maxUlps);	  final    double    entry    =    table.getEntry(i,    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
141	[BUG]  [BUGGY]  final  double  entry  =  this.table.getEntry(0,  i);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  this.table.getEntry(0,  i);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  this.table.getEntry(0,  i);	  final    double    entry    =    this.table.getEntry(i,    i);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
142	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  +  i;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  getMaximumUlps()  +  i;  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  getMaximumUlps()  +  i;	  int    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
143	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps()  *  NEGATIVE_VAR_COLUMN_LABEL;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  getMaxUlps()  *  NEGATIVE_VAR_COLUMN_LABEL;  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  getMaxUlps()  *  NEGATIVE_VAR_COLUMN_LABEL;	  int    maxUlps    =    getMaxUlps()    *    DEFAULT_ULPS;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
144	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicRow(i  +  1,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicRow(i  +  1,  columnLabels);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicRow(i  +  1,  columnLabels);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)getBasicRow(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
145	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)in.get(i);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)in.get(i);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)in.get(i);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)in.next();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
146	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.peek();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.peek();  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnLabels.peek();	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.columnLabels.clone();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
147	[BUG]  [BUGGY]  int  maxUlps  =  table.getMaxUlps()  -  i;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  table.getMaxUlps()  -  i;  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  table.getMaxUlps()  -  i;	  int    maxUlps    =    table.getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
148	[BUG]  [BUGGY]  int  maxUlps  =  table.getMaxUlps()  +  i;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  table.getMaxUlps()  +  i;  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  table.getMaxUlps()  +  i;	  int    maxUlps    =    table.getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
149	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicColumn(i,  column);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicColumn(i,  column);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicColumn(i,  column);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)getBasicColumn(i);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
150	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columns.get(i  -  1  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columns.get(i  -  1  +  1);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columns.get(i  -  1  +  1);	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.columns.get(i    -    1);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
151	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)table.get(i);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)table.get(i);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)table.get(i);	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)table.clone();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
152	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)dataset.clone();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)dataset.clone();  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)dataset.clone();	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)table.clone();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
153	[BUG]  [BUGGY]  final  double  entry  =  this.table.getEntry(i,  i  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  this.table.getEntry(i,  i  +  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  this.table.getEntry(i,  i  +  1);	  final    double    entry    =    table.getEntry(i,    i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
154	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicVar(i,  getNumObjectiveFunctions());  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicVar(i,  getNumObjectiveFunctions());  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicVar(i,  getNumObjectiveFunctions());	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)getBasicVar(i,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
155	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)columnsToDrop.peek();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)columnsToDrop.peek();  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)columnsToDrop.peek();	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)columnsToDrop.clone();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
156	[BUG]  [BUGGY]  final  double  entry  =  matrix.getEntry(0,  i  +  1,  maxUlps);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  matrix.getEntry(0,  i  +  1,  maxUlps);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  matrix.getEntry(0,  i  +  1,  maxUlps);	  final    double    entry    =    matrix.getEntry(0,    i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
157	[BUG]  [BUGGY]  final  double  entry  =  matrix.getEntry(i,  i  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  matrix.getEntry(i,  i  +  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  matrix.getEntry(i,  i  +  1);	  final    double    entry    =    matrix.getEntry(0,    i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
158	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.getGraph().reset();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.getGraph().reset();  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.getGraph().reset();	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.getGraph().clone();    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
159	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaxUlps()  *  i;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  Integer  maxUlps  =  getMaxUlps()  *  i;  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	Integer  maxUlps  =  getMaxUlps()  *  i;	  Integer    maxUlps    =    getMaxUlps()    *    DEFAULT_ULPS;    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
160	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaxUlps(i  +  2);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  Integer  maxUlps  =  getMaxUlps(i  +  2);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	Integer  maxUlps  =  getMaxUlps(i  +  2);	  Integer    maxUlps    =    getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
161	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnsToDrop.get(i  -  1  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnsToDrop.get(i  -  1  +  1);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.columnsToDrop.get(i  -  1  +  1);	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.columnsToDrop.get(i    -    1);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
162	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)graph.clone();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)graph.clone();  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)graph.clone();	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.graph.clone();    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
163	[BUG]  [BUGGY]  final  double  entry  =  matrix.getEntry(i,  i);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  matrix.getEntry(i,  i);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  matrix.getEntry(i,  i);	  final    double    entry    =    columnLabels.getEntry(i,    i);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
164	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicRow(i,  0);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicRow(i,  0);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicRow(i,  0);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)getBasicRow(i,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
165	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.peek();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.peek();  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.peek();	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)columnsToDrop.next();    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
166	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicVar(i  +  1,  columnLabels);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicVar(i  +  1,  columnLabels);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicVar(i  +  1,  columnLabels);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)getBasicVar(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
167	[BUG]  [BUGGY]  final  double  entry  =  table.getEntry(0,  i  +  3);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  table.getEntry(0,  i  +  3);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  table.getEntry(0,  i  +  3);	  final    double    entry    =    table.getEntry(0,    i    +    2);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
168	[BUG]  [BUGGY]  final  double  entry  =  table.getEntry(0,  i  +  1,  column);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  table.getEntry(0,  i  +  1,  column);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  table.getEntry(0,  i  +  1,  column);	  final    double    entry    =    table.getEntry(0,    i    +    1,    maxUlps);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
169	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaxUlps(0);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  Integer  maxUlps  =  getMaxUlps(0);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	Integer  maxUlps  =  getMaxUlps(0);	  Integer    maxUlps    =    getMaxUlps(1);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
170	[BUG]  [BUGGY]  final  double  entry  =  i.getEntry(1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  i.getEntry(1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  i.getEntry(1);	  final    double    entry    =    columnsToDrop.getEntry(0);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
171	[BUG]  [BUGGY]  final  double  entry  =  columnsToDrop.getEntryCount(0);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  columnsToDrop.getEntryCount(0);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  columnsToDrop.getEntryCount(0);	  final    double    entry    =    columnsToDrop.getEntry(0);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
172	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.graph.remove(i);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.graph.remove(i);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.graph.remove(i);	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.graph.clone();    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
173	[BUG]  [BUGGY]  final  double  entry  =  table.getEntry(i,  DEFAULT_ULPS,  maxUlps);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  table.getEntry(i,  DEFAULT_ULPS,  maxUlps);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  table.getEntry(i,  DEFAULT_ULPS,  maxUlps);	  final    double    entry    =    table.getEntry(i,    DEFAULT_ULPS);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
174	[BUG]  [BUGGY]  final  double  entry  =  matrix.getEntry(i,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  matrix.getEntry(i,  DEFAULT_ULPS);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  matrix.getEntry(i,  DEFAULT_ULPS);	  final    double    entry    =    matrix.getEntry(i,    0);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
175	[BUG]  [BUGGY]  final  double  entry  =  this.table.getEntry(i,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  this.table.getEntry(i,  DEFAULT_ULPS);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  this.table.getEntry(i,  DEFAULT_ULPS);	  final    double    entry    =    this.table.getEntry(i,    i);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
176	[BUG]  [BUGGY]  Integer[]  maxUlps  =  getMaxUlps(i  *  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  Integer[]  maxUlps  =  getMaxUlps(i  *  DEFAULT_ULPS);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	Integer[]  maxUlps  =  getMaxUlps(i  *  DEFAULT_ULPS);	  Integer[]    maxUlps    =    getMaxUlps(i);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
177	[BUG]  [BUGGY]  final  double  entry  =  matrix.getEntry(i,  i  +  2);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  matrix.getEntry(i,  i  +  2);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  matrix.getEntry(i,  i  +  2);	  final    double    entry    =    matrix.getEntry(0,    i    +    2);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
178	[BUG]  [BUGGY]  final  double  entry  =  columnsToDrop.getEntry(1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  columnsToDrop.getEntry(1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  columnsToDrop.getEntry(1);	  final    double    entry    =    columnsToDrop.getEntry(0);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
179	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicRow(i,  i  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicRow(i,  i  +  1);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)getBasicRow(i,  i  +  1);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)getBasicRow(i,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
180	[BUG]  [BUGGY]  int  maxUlps  =  column.getMaxUlps()  -  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  column.getMaxUlps()  -  1;  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  column.getMaxUlps()  -  1;	  int    maxUlps    =    matrix.getMaxUlps()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
181	[BUG]  [BUGGY]  final  double  entry  =  matrix.getEntry(i,  i)-  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  matrix.getEntry(i,  i)-  1;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  matrix.getEntry(i,  i)-  1;	  final    double    entry    =    matrix.getEntry(0,    i)-    1;    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
182	[BUG]  [BUGGY]  final  double  entry  =  columnsToDrop.getEntry(i,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  columnsToDrop.getEntry(i,  DEFAULT_ULPS);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  columnsToDrop.getEntry(i,  DEFAULT_ULPS);	  final    double    entry    =    columnsToDrop.getEntry(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
183	[BUG]  [BUGGY]  final  double  entry  =  matrix.getEntry(i,  i)+  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  matrix.getEntry(i,  i)+  1;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  matrix.getEntry(i,  i)+  1;	  final    double    entry    =    matrix.getEntry(0,    i)+    1;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
184	[BUG]  [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.getGraph().remove(i);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.getGraph().remove(i);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  graph  =(LinearObjectiveFunction)this.getGraph().remove(i);	  LinearObjectiveFunction    graph    =(LinearObjectiveFunction)this.getGraph().clone();    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
185	[BUG]  [BUGGY]  int  maxUlps  =  table.getMaxUlps()  *  DEFAULT_ULPS;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  table.getMaxUlps()  *  DEFAULT_ULPS;  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  table.getMaxUlps()  *  DEFAULT_ULPS;	  int    maxUlps    =    table.getMaxUlps();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
186	[BUG]  [BUGGY]  final  double  entry  =  columnLabels.getEntry(i,  DEFAULT_ULPS);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  columnLabels.getEntry(i,  DEFAULT_ULPS);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  columnLabels.getEntry(i,  DEFAULT_ULPS);	  final    double    entry    =    columnLabels.getEntry(i,    i);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
187	[BUG]  [BUGGY]  int  maxUlps  =  getMaximumUlps()  *  DEFAULT_ULPS;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  getMaximumUlps()  *  DEFAULT_ULPS;  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  getMaximumUlps()  *  DEFAULT_ULPS;	  int    maxUlps    =    getMaximumUlps();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
188	[BUG]  [BUGGY]  int  maxUlps  =  getMaxUlps()  *  DEFAULT_ULPS  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  getMaxUlps()  *  DEFAULT_ULPS  +  1;  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  getMaxUlps()  *  DEFAULT_ULPS  +  1;	  int    maxUlps    =    getMaxUlps()    *    DEFAULT_ULPS;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
189	[BUG]  [BUGGY]  Integer  maxUlps  =  getMaxUlps()  *  DEFAULT_ULPS  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  Integer  maxUlps  =  getMaxUlps()  *  DEFAULT_ULPS  +  1;  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	Integer  maxUlps  =  getMaxUlps()  *  DEFAULT_ULPS  +  1;	  Integer    maxUlps    =    getMaxUlps()    *    DEFAULT_ULPS;    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
190	[BUG]  [BUGGY]  final  double  entry  =  columnsToDrop.getEntry(0,  i  +  1,  tablesToDrop);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  columnsToDrop.getEntry(0,  i  +  1,  tablesToDrop);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  columnsToDrop.getEntry(0,  i  +  1,  tablesToDrop);	  final    double    entry    =    table.getEntry(0,    i    +    1,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
191	[BUG]  [BUGGY]  final  double  entry  =  columnsToDrop.getEntry(0,  i  +  1,  table);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  columnsToDrop.getEntry(0,  i  +  1,  table);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  columnsToDrop.getEntry(0,  i  +  1,  table);	  final    double    entry    =    table.getEntry(0,    i    +    1,    columnsToDrop);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
192	[BUG]  [BUGGY]  int  maxUlps  =  column.getMaxUlps()  -  i;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  int  maxUlps  =  column.getMaxUlps()  -  i;  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	int  maxUlps  =  column.getMaxUlps()  -  i;	  int    maxUlps    =    matrix.getMaxUlps()    -    i;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
193	[BUG]  [BUGGY]  final  double  entry  =  table.getEntry(i,  i)+  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  table.getEntry(i,  i)+  1;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  table.getEntry(i,  i)+  1;	  final    double    entry    =    table.getEntry(0,    i)+    1;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
194	[BUG]  [BUGGY]  final  double  entry  =  table.getEntry(0,  i)-  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  table.getEntry(0,  i)-  1;  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  table.getEntry(0,  i)-  1;	  final    double    entry    =    table.getEntry(0,    i)+    1;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
195	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(i);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(i);  [BUGGY]      final  double  entry  =  tableau.getEntry(0,  i);  if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)this.columnLabels.get(i);	  LinearObjectiveFunction    f    =(LinearObjectiveFunction)table.get(i);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
196	[BUG]  [BUGGY]  final  double  entry  =  table.getEntry(i,  i  +  2);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  table.getEntry(i,  i  +  2);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  table.getEntry(i,  i  +  2);	  final    double    entry    =    table.getEntry(0,    i    +    2);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
197	[BUG]  [BUGGY]  final  double  entry  =  columnLabels.getEntry(i,  i  +  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  dropPhase1Objective()  {  if  (getNumObjectiveFunctions()  ==  1)  {  return;  }  List<Integer>  columnsToDrop  =  new  ArrayList<Integer>();  columnsToDrop.add(0);  for  (int  i  =  getNumObjectiveFunctions();  i  <  getArtificialVariableOffset();  i++)  {      [BUGGY]  final  double  entry  =  columnLabels.getEntry(i,  i  +  1);  [BUGGY]      if  (Precision.compareTo(entry,  0d,  maxUlps)  >  0)  {  columnsToDrop.add(i);  }  }  for  (int  i  =  0;  i  <  getNumArtificialVariables();  i++)  {  int  col  =  i  +  getArtificialVariableOffset();  if  (getBasicRow(col)  ==  null)  {  columnsToDrop.add(col);  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	final  double  entry  =  columnLabels.getEntry(i,  i  +  1);	  final    double    entry    =    columnLabels.getEntry(0,    i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
