bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] coefficients[i] = 0; [FE] AssertionError testMath781 [CONTEXT] protected PointValuePair getSolution() { int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL); Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null; double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); Set<Integer> basicRows = new HashSet<Integer>(); double[] coefficients = new double[getOriginalNumDecisionVariables()]; for (int i = 0; i < coefficients.length; i++) { int colIndex = columnLabels.indexOf("x" + i); if (colIndex < 0) { [BUGGY] coefficients[i] = 0; [BUGGY] continue; } Integer basicRow = getBasicRow(colIndex); if (basicRow != null && basicRow == 0) {    coefficients[i] = 0; } else if (basicRows.contains(basicRow)) {  [CLASS] SimplexTableau [METHOD] getSolution [RETURN_TYPE] PointValuePair  [VARIABLES] Integer basicRow negativeVarBasicRow boolean maximize restrictToNonNegative Set basicRows RealMatrix tableau double[] coefficients double coefficient entry epsilon mostNegative sum LinearObjectiveFunction f List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col colIndex count height i j maxUlps negativeVarColumn numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	
2	[BUG] [BUGGY] [FE] AssertionError testMath781 [CONTEXT] protected PointValuePair getSolution() { int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL); Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null; double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); Set<Integer> basicRows = new HashSet<Integer>(); double[] coefficients = new double[getOriginalNumDecisionVariables()]; for (int i = 0; i < coefficients.length; i++) { int colIndex = columnLabels.indexOf("x" + i); if (colIndex < 0) { [BUGGY] [BUGGY] coefficients[i] = 0; continue; } Integer basicRow = getBasicRow(colIndex); if (basicRow != null && basicRow == 0) {    coefficients[i] = 0; } else if (basicRows.contains(basicRow)) {  [CLASS] SimplexTableau [METHOD] getSolution [RETURN_TYPE] PointValuePair  [VARIABLES] Integer basicRow negativeVarBasicRow boolean maximize restrictToNonNegative Set basicRows RealMatrix tableau double[] coefficients double coefficient entry epsilon mostNegative sum LinearObjectiveFunction f List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col colIndex count height i j maxUlps negativeVarColumn numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	
3	[BUG] [BUGGY] continue; [FE] AssertionError testMath781 [CONTEXT] int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL); Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null; double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); Set<Integer> basicRows = new HashSet<Integer>(); double[] coefficients = new double[getOriginalNumDecisionVariables()]; for (int i = 0; i < coefficients.length; i++) { int colIndex = columnLabels.indexOf("x" + i); if (colIndex < 0) { coefficients[i] = 0; [BUGGY] continue; [BUGGY] } Integer basicRow = getBasicRow(colIndex); if (basicRow != null && basicRow == 0) {    coefficients[i] = 0; } else if (basicRows.contains(basicRow)) {   [CLASS] SimplexTableau [METHOD] getSolution [RETURN_TYPE] PointValuePair  [VARIABLES] Integer basicRow negativeVarBasicRow boolean maximize restrictToNonNegative Set basicRows RealMatrix tableau double[] coefficients double coefficient entry epsilon mostNegative sum LinearObjectiveFunction f List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col colIndex count height i j maxUlps negativeVarColumn numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	
4	[BUG] [BUGGY] [FE] AssertionError testMath781 [CONTEXT] int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL); Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null; double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); Set<Integer> basicRows = new HashSet<Integer>(); double[] coefficients = new double[getOriginalNumDecisionVariables()]; for (int i = 0; i < coefficients.length; i++) { int colIndex = columnLabels.indexOf("x" + i); if (colIndex < 0) { coefficients[i] = 0; [BUGGY] [BUGGY] continue; } Integer basicRow = getBasicRow(colIndex); if (basicRow != null && basicRow == 0) {    coefficients[i] = 0; } else if (basicRows.contains(basicRow)) {   [CLASS] SimplexTableau [METHOD] getSolution [RETURN_TYPE] PointValuePair  [VARIABLES] Integer basicRow negativeVarBasicRow boolean maximize restrictToNonNegative Set basicRows RealMatrix tableau double[] coefficients double coefficient entry epsilon mostNegative sum LinearObjectiveFunction f List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col colIndex count height i j maxUlps negativeVarColumn numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	add	
5	[BUG] [BUGGY] columnsToDrop.add(i); [FE] AssertionError testMath781 [CONTEXT] return; } List<Integer> columnsToDrop = new ArrayList<Integer>(); columnsToDrop.add(0);  for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { [BUGGY] columnsToDrop.add(i); [BUGGY] } }  for (int i = 0; i < getNumArtificialVariables(); i++) { int col = i + getArtificialVariableOffset(); if (getBasicRow(col) == null) { columnsToDrop.add(col); } } [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	
6	[BUG] [BUGGY] [FE] AssertionError testMath781 [CONTEXT] return; } List<Integer> columnsToDrop = new ArrayList<Integer>(); columnsToDrop.add(0);  for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { [BUGGY] [BUGGY] columnsToDrop.add(i); } }  for (int i = 0; i < getNumArtificialVariables(); i++) { int col = i + getArtificialVariableOffset(); if (getBasicRow(col) == null) { columnsToDrop.add(col); } } [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	add	
7	[BUG] [BUGGY] return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),   constraint.getRelationship().oppositeRelationship(),     -1 * constraint.getValue()); [FE] AssertionError testMath781 [CONTEXT] private LinearConstraint normalize(final LinearConstraint constraint) { if (constraint.getValue() < 0) { [BUGGY] return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1 * constraint.getValue()); [BUGGY] constraint.getRelationship().oppositeRelationship(), -1 * constraint.getValue()); } return new LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue()); } [CLASS] SimplexTableau [METHOD] normalize [RETURN_TYPE] LinearConstraint  LinearConstraint constraint [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double epsilon LinearObjectiveFunction f LinearConstraint constraint List columnLabels constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	
8	[BUG] [BUGGY] [FE] AssertionError testMath781 [CONTEXT] private LinearConstraint normalize(final LinearConstraint constraint) { if (constraint.getValue() < 0) { [BUGGY] [BUGGY] return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1 * constraint.getValue()); constraint.getRelationship().oppositeRelationship(), -1 * constraint.getValue()); } return new LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue()); } [CLASS] SimplexTableau [METHOD] normalize [RETURN_TYPE] LinearConstraint  LinearConstraint constraint [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double epsilon LinearObjectiveFunction f LinearConstraint constraint List columnLabels constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	add	
9	[BUG] [BUGGY] columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL); [FE] AssertionError testMath781 [CONTEXT] protected void initializeColumnLabels() { if (getNumObjectiveFunctions() == 2) { columnLabels.add("W"); } columnLabels.add("Z"); for (int i = 0; i < getOriginalNumDecisionVariables(); i++) { columnLabels.add("x" + i); } if (!restrictToNonNegative) { [BUGGY] columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL); [BUGGY] } for (int i = 0; i < getNumSlackVariables(); i++) { columnLabels.add("s" + i); } for (int i = 0; i < getNumArtificialVariables(); i++) { columnLabels.add("a" + i); } columnLabels.add("RHS"); } [CLASS] SimplexTableau [METHOD] initializeColumnLabels [RETURN_TYPE] void  [VARIABLES] boolean restrictToNonNegative RealMatrix tableau double epsilon LinearObjectiveFunction f List columnLabels constraints String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS i maxUlps numArtificialVariables numDecisionVariables numSlackVariables long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	
10	[BUG] [BUGGY] [FE] AssertionError testMath781 [CONTEXT] protected void initializeColumnLabels() { if (getNumObjectiveFunctions() == 2) { columnLabels.add("W"); } columnLabels.add("Z"); for (int i = 0; i < getOriginalNumDecisionVariables(); i++) { columnLabels.add("x" + i); } if (!restrictToNonNegative) { [BUGGY] [BUGGY] columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL); } for (int i = 0; i < getNumSlackVariables(); i++) { columnLabels.add("s" + i); } for (int i = 0; i < getNumArtificialVariables(); i++) { columnLabels.add("a" + i); } columnLabels.add("RHS"); } [CLASS] SimplexTableau [METHOD] initializeColumnLabels [RETURN_TYPE] void  [VARIABLES] boolean restrictToNonNegative RealMatrix tableau double epsilon LinearObjectiveFunction f List columnLabels constraints String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS i maxUlps numArtificialVariables numDecisionVariables numSlackVariables long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	add	
11	[BUG] [BUGGY] matrix.setEntry(zIndex, getSlackVariableOffset() - 1, getInvertedCoefficientSum(objectiveCoefficients)); [FE] AssertionError testMath781 [CONTEXT] } int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1; matrix.setEntry(zIndex, zIndex, maximize ? 1 : -1); RealVector objectiveCoefficients = maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients(); copyArray(objectiveCoefficients.toArray(), matrix.getDataRef()[zIndex]); matrix.setEntry(zIndex, width - 1, maximize ? f.getConstantTerm() : -1 * f.getConstantTerm()); if (!restrictToNonNegative) { [BUGGY] matrix.setEntry(zIndex, getSlackVariableOffset() - 1,    getInvertedCoefficientSum(objectiveCoefficients)); [BUGGY] getInvertedCoefficientSum(objectiveCoefficients)); }  int slackVar = 0; int artificialVar = 0; for (int i = 0; i < constraints.size(); i++) { LinearConstraint constraint = constraints.get(i); int row = getNumObjectiveFunctions() + i;  [CLASS] SimplexTableau [METHOD] createTableau [RETURN_TYPE] RealMatrix  final boolean maximize [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau Array2DRowRealMatrix matrix double epsilon RealVector objectiveCoefficients LinearObjectiveFunction f LinearConstraint constraint List columnLabels constraints String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	199	200	1	replace	
12	[BUG] [BUGGY] [FE] AssertionError testMath781 [CONTEXT] } int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1; matrix.setEntry(zIndex, zIndex, maximize ? 1 : -1); RealVector objectiveCoefficients = maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients(); copyArray(objectiveCoefficients.toArray(), matrix.getDataRef()[zIndex]); matrix.setEntry(zIndex, width - 1, maximize ? f.getConstantTerm() : -1 * f.getConstantTerm()); if (!restrictToNonNegative) { [BUGGY] [BUGGY] matrix.setEntry(zIndex, getSlackVariableOffset() - 1,    getInvertedCoefficientSum(objectiveCoefficients)); getInvertedCoefficientSum(objectiveCoefficients)); }  int slackVar = 0; int artificialVar = 0; for (int i = 0; i < constraints.size(); i++) { LinearConstraint constraint = constraints.get(i); int row = getNumObjectiveFunctions() + i;  [CLASS] SimplexTableau [METHOD] createTableau [RETURN_TYPE] RealMatrix  final boolean maximize [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau Array2DRowRealMatrix matrix double epsilon RealVector objectiveCoefficients LinearObjectiveFunction f LinearConstraint constraint List columnLabels constraints String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	199	200	1	add	
13	[BUG] [BUGGY] matrix.setEntry(row, getSlackVariableOffset() - 1,  getInvertedCoefficientSum(constraint.getCoefficients())); [FE] AssertionError testMath781 [CONTEXT] int artificialVar = 0; for (int i = 0; i < constraints.size(); i++) { LinearConstraint constraint = constraints.get(i); int row = getNumObjectiveFunctions() + i;  copyArray(constraint.getCoefficients().toArray(), matrix.getDataRef()[row]);  if (!restrictToNonNegative) { [BUGGY] matrix.setEntry(row, getSlackVariableOffset() - 1,     getInvertedCoefficientSum(constraint.getCoefficients())); [BUGGY] getInvertedCoefficientSum(constraint.getCoefficients())); }  matrix.setEntry(row, width - 1, constraint.getValue());  if (constraint.getRelationship() == Relationship.LEQ) { matrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1);// slack } else if (constraint.getRelationship() == Relationship.GEQ) { [CLASS] SimplexTableau [METHOD] createTableau [RETURN_TYPE] RealMatrix  final boolean maximize [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau Array2DRowRealMatrix matrix double epsilon RealVector objectiveCoefficients LinearObjectiveFunction f LinearConstraint constraint List columnLabels constraints String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	215	216	1	replace	
14	[BUG] [BUGGY] [FE] AssertionError testMath781 [CONTEXT] int artificialVar = 0; for (int i = 0; i < constraints.size(); i++) { LinearConstraint constraint = constraints.get(i); int row = getNumObjectiveFunctions() + i;  copyArray(constraint.getCoefficients().toArray(), matrix.getDataRef()[row]);  if (!restrictToNonNegative) { [BUGGY] [BUGGY] matrix.setEntry(row, getSlackVariableOffset() - 1,     getInvertedCoefficientSum(constraint.getCoefficients())); getInvertedCoefficientSum(constraint.getCoefficients())); }  matrix.setEntry(row, width - 1, constraint.getValue());  if (constraint.getRelationship() == Relationship.LEQ) { matrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1);// slack } else if (constraint.getRelationship() == Relationship.GEQ) { [CLASS] SimplexTableau [METHOD] createTableau [RETURN_TYPE] RealMatrix  final boolean maximize [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau Array2DRowRealMatrix matrix double epsilon RealVector objectiveCoefficients LinearObjectiveFunction f LinearConstraint constraint List columnLabels constraints String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	215	216	1	add	
15	[BUG] [BUGGY] double sum = 0; [FE] AssertionError testMath781 [CONTEXT] protected static double getInvertedCoefficientSum(final RealVector coefficients) { [BUGGY] double sum = 0; [BUGGY] for (double coefficient : coefficients.toArray()) { sum -= coefficient; } return sum; } [CLASS] SimplexTableau [METHOD] getInvertedCoefficientSum [RETURN_TYPE] double  RealVector coefficients [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient epsilon sum RealVector coefficients LinearObjectiveFunction f List columnLabels constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar count height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	298	298	1	replace	
16	[BUG] [BUGGY] [FE] AssertionError testMath781 [CONTEXT] protected static double getInvertedCoefficientSum(final RealVector coefficients) { [BUGGY] [BUGGY] double sum = 0; for (double coefficient : coefficients.toArray()) { sum -= coefficient; } return sum; } [CLASS] SimplexTableau [METHOD] getInvertedCoefficientSum [RETURN_TYPE] double  RealVector coefficients [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient epsilon sum RealVector coefficients LinearObjectiveFunction f List columnLabels constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar count height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	298	298	1	add	
17	[BUG] [BUGGY] for (double coefficient : coefficients.toArray()) { [FE] AssertionError testMath781 [CONTEXT] protected static double getInvertedCoefficientSum(final RealVector coefficients) { double sum = 0; [BUGGY] for (double coefficient : coefficients.toArray()) { [BUGGY] sum -= coefficient; } return sum; } [CLASS] SimplexTableau [METHOD] getInvertedCoefficientSum [RETURN_TYPE] double  RealVector coefficients [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient epsilon sum RealVector coefficients LinearObjectiveFunction f List columnLabels constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar count height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	299	299	1	replace	
18	[BUG] [BUGGY] [FE] AssertionError testMath781 [CONTEXT] protected static double getInvertedCoefficientSum(final RealVector coefficients) { double sum = 0; [BUGGY] [BUGGY] for (double coefficient : coefficients.toArray()) { sum -= coefficient; } return sum; } [CLASS] SimplexTableau [METHOD] getInvertedCoefficientSum [RETURN_TYPE] double  RealVector coefficients [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient epsilon sum RealVector coefficients LinearObjectiveFunction f List columnLabels constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar count height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	299	299	1	add	
19	[BUG] [BUGGY] sum -= coefficient; [FE] AssertionError testMath781 [CONTEXT] protected static double getInvertedCoefficientSum(final RealVector coefficients) { double sum = 0; for (double coefficient : coefficients.toArray()) { [BUGGY] sum -= coefficient; [BUGGY] } return sum; } [CLASS] SimplexTableau [METHOD] getInvertedCoefficientSum [RETURN_TYPE] double  RealVector coefficients [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient epsilon sum RealVector coefficients LinearObjectiveFunction f List columnLabels constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar count height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	300	300	1	replace	
20	[BUG] [BUGGY] [FE] AssertionError testMath781 [CONTEXT] protected static double getInvertedCoefficientSum(final RealVector coefficients) { double sum = 0; for (double coefficient : coefficients.toArray()) { [BUGGY] [BUGGY] sum -= coefficient; } return sum; } [CLASS] SimplexTableau [METHOD] getInvertedCoefficientSum [RETURN_TYPE] double  RealVector coefficients [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient epsilon sum RealVector coefficients LinearObjectiveFunction f List columnLabels constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar count height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	300	300	1	add	
