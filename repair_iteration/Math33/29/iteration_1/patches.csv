bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  For(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  For(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	For(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }	      if(col    >    0)    {    for(int    i    =    columnLabels.size()    -    1;    i    >=    0;    i--)    {    columnLabels.remove((    int)columnsToDrop.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }	      if(col    >    0)    {    for(int    i    =    columnLabels.size()    -    1;    i    >=    0;    i--)    {    columnLabels.remove((    int)columnsToDrop.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
3	[BUG]  [BUGGY]  col  >  0)  {  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  col  >  0)  {  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	col  >  0)  {  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }	      if(col    >    0)    {    for(int    i    =    columnLabels.size()    -    1;    i    >=    0;    i--)    {    columnLabels.remove((    int)columnsToDrop.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
4	[BUG]  [BUGGY]  LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getHeight()  +  1][getWidth()  -  columnsToDrop.size()];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.contains(  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getHeight()  +  1][getWidth()  -  columnsToDrop.size()];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.contains(  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getHeight()  +  1][getWidth()  -  columnsToDrop.size()];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.contains(	      LinearObjectiveFunction[][]    matrix    =    new    LinearObjectiveFunction[getHeight()    -    1][getWidth()    -    columnsToDrop.size()    ];    for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!columnsToDrop.contains(    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
5	[BUG]  [BUGGY]  LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnLabels.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnLabels.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnLabels.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.	      LinearObjectiveFunction[][]    matrix    =    new    LinearObjectiveFunction[getHeight()    -    1][getWidth()    -    columnsToDrop.size()    ];    for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!columnsToDrop.contains(    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
6	[BUG]  [BUGGY]  LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnLabels.size()];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.contains(  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnLabels.size()];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.contains(  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnLabels.size()];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.contains(	      LinearObjectiveFunction[][]    matrix    =    new    LinearObjectiveFunction[getHeight()    -    1][getWidth()    -    columnsToDrop.size()    ];    for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!columnsToDrop.contains(    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels.remove((    int)columnsToDrop.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels.remove((    int)columnsToDrop.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels[i  -  1][col++]  =  table.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
11	[BUG]  [BUGGY]  For(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  For(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	For(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  col.size()  -  1;  i  >=  0;  i--)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  for(int  i  =  col.size()  -  1;  i  >=  0;  i--)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	for(int  i  =  col.size()  -  1;  i  >=  0;  i--)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.add((  int)columnsToDrop.get(i));  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.add((  int)columnsToDrop.get(i));  }  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.add((  int)columnsToDrop.get(i));  }	      if(col    >    0)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels.add((    int)columnsToDrop.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
14	[BUG]  [BUGGY]  For(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.add((  int)columnsToDrop.get(i));  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  For(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.add((  int)columnsToDrop.get(i));  }  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	For(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.add((  int)columnsToDrop.get(i));  }	      if(col    >    0)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels.add((    int)columnsToDrop.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
15	[BUG]  [BUGGY]  col  >  0)  {  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels.add((  int)columnsToDrop.get(i));  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  col  >  0)  {  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels.add((  int)columnsToDrop.get(i));  }  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	col  >  0)  {  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels.add((  int)columnsToDrop.get(i));  }	      if(col    >    0)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels.add((    int)columnsToDrop.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
16	[BUG]  [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[columnsToDrop.size()  ];  for(int  i  =  0,  col  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels.remove((  int)columns  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[columnsToDrop.size()  ];  for(int  i  =  0,  col  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels.remove((  int)columns  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[columnsToDrop.size()  ];  for(int  i  =  0,  col  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels.remove((  int)columns	      LinearObjectiveFunction[][]    columns    =    new    LinearObjectiveFunction[columnsToDrop.size()    ];    for(int    i    =    0,    col    =    columnsToDrop.size();    i    >=    0;    i--)    {    columnLabels.remove((    int)columnsToDrop.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
17	[BUG]  [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[columnsToDrop.size()  ];  for(int  i  =  0,  col  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[columnsToDrop.size()  ];  for(int  i  =  0,  col  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[columnsToDrop.size()  ];  for(int  i  =  0,  col  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i	      LinearObjectiveFunction[][]    columns    =    new    LinearObjectiveFunction[columnsToDrop.size()    ];    for(int    i    =    0,    col    =    columnsToDrop.size();    i    >=    0;    i--)    {    columnLabels.remove((    int)columnsToDrop.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
18	[BUG]  [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[columnsToDrop.size()  ];  for(int  i  =  0,  col  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i)  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[columnsToDrop.size()  ];  for(int  i  =  0,  col  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i)  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[columnsToDrop.size()  ];  for(int  i  =  0,  col  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i)	      LinearObjectiveFunction[][]    columns    =    new    LinearObjectiveFunction[columnsToDrop.size()    ];    for(int    i    =    0,    col    =    columnsToDrop.size();    i    >=    0;    i--)    {    columnLabels.remove((    int)columnsToDrop.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  columnLabels.size();  i  >=  0;  i--)  {  columnLabels[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  for(int  i  =  columnLabels.size();  i  >=  0;  i--)  {  columnLabels[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	for(int  i  =  columnLabels.size();  i  >=  0;  i--)  {  columnLabels[i  -  1][col++]  =  table.getEntry(i,  j);  }	      for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  col.size();  i  >=  0;  i--)  {  columnLabels[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  for(int  i  =  col.size();  i  >=  0;  i--)  {  columnLabels[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	for(int  i  =  col.size();  i  >=  0;  i--)  {  columnLabels[i  -  1][col++]  =  table.getEntry(i,  j);  }	      for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  columnsToDrop.size()  -  2;  i  >=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  for(int  i  =  columnsToDrop.size()  -  2;  i  >=  0;  i--)  {  [BUGGY]    columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	for(int  i  =  columnsToDrop.size()  -  2;  i  >=  0;  i--)  {	  for(int    i    =    columnsToDrop.size();    i    >=    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
22	[BUG]  [BUGGY]  col  >  0)  {  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  col  >  0)  {  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	col  >  0)  {  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels[i  -  1][col++]  =  table.getEntry(i,  j);  }	      if(col    >    0)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
23	[BUG]  [BUGGY]  for(int  i  =  col.size();  i  >=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  for(int  i  =  col.size();  i  >=  0;  i--)  {  [BUGGY]    columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	for(int  i  =  col.size();  i  >=  0;  i--)  {	  for(int    i    =    rowsToDrop.size();    i    >=    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
24	[BUG]  [BUGGY]  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  [BUGGY]    columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {	  for(int    i    =    columnLabels.size();    i    >=    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  columnsToDrop.size();  i!=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  for(int  i  =  columnsToDrop.size();  i!=  0;  i--)  {  [BUGGY]    columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	for(int  i  =  columnsToDrop.size();  i!=  0;  i--)  {	  for(int    i    =    columnLabels.size();    i    >=    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  columnLabels.size();  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  for(int  i  =  columnLabels.size();  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	for(int  i  =  columnLabels.size();  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }	      for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels.remove((    int)columnsToDrop.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  col.size();  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  for(int  i  =  col.size();  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	for(int  i  =  col.size();  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }	      for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels.remove((    int)columnsToDrop.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
28	[BUG]  [BUGGY]  For(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  For(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	For(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }	      for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels.remove((    int)columnsToDrop.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
29	[BUG]  [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  col.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.contains(  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  col.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.contains(  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  col.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.contains(	      LinearObjectiveFunction[][]    columns    =    new    LinearObjectiveFunction[getHeight()    -    1][getWidth()    -    columnsToDrop.size()    ];    for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!columnsToDrop.contains(j)    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
30	[BUG]  [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  col.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.contains(j)  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  col.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.contains(j)  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  col.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.contains(j)	      LinearObjectiveFunction[][]    columns    =    new    LinearObjectiveFunction[getHeight()    -    1][getWidth()    -    columnsToDrop.size()    ];    for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!columnsToDrop.contains(j)    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
31	[BUG]  [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  col.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  col.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  col.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.	      LinearObjectiveFunction[][]    columns    =    new    LinearObjectiveFunction[getHeight()    -    1][getWidth()    -    columnsToDrop.size()    ];    for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!columnsToDrop.contains(j)    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
32	[BUG]  [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getHeight()  +  1][getWidth()  -  columnsToDrop.size()];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.contains(  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getHeight()  +  1][getWidth()  -  columnsToDrop.size()];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.contains(  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getHeight()  +  1][getWidth()  -  columnsToDrop.size()];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.contains(	      LinearObjectiveFunction[][]    columns    =    new    LinearObjectiveFunction[getHeight()    -    1][getWidth()    -    columnsToDrop.size()    ];    for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!columnsToDrop.contains(j)    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
33	[BUG]  [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  columnLabels.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.contains(  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  columnLabels.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.contains(  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  columnLabels.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.contains(	      LinearObjectiveFunction[][]    columns    =    new    LinearObjectiveFunction[getHeight()    -    1][getWidth()    -    columnsToDrop.size()    ];    for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!columnsToDrop.contains(    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
34	[BUG]  [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnLabels.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnLabels.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnLabels.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.	      LinearObjectiveFunction[][]    columns    =    new    LinearObjectiveFunction[getHeight()    -    1][getWidth()    -    columnsToDrop.size()    ];    for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!columnsToDrop.contains(    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
35	[BUG]  [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnLabels.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columns  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnLabels.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columns  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnLabels.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columns	      LinearObjectiveFunction[][]    columns    =    new    LinearObjectiveFunction[getHeight()    -    1][getWidth()    -    columnsToDrop.size()    ];    for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!columnsToDrop.contains(    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
36	[BUG]  [BUGGY]  col  =(int)columnsToDrop.get(i);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  col  =(int)columnsToDrop.get(i);  [BUGGY]    columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	col  =(int)columnsToDrop.get(i);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
37	[BUG]  [BUGGY]  int  maxUlps  =(int)columnsToDrop.get(i);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  int  maxUlps  =(int)columnsToDrop.get(i);  [BUGGY]    columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	int  maxUlps  =(int)columnsToDrop.get(i);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
38	[BUG]  [BUGGY]  col  =(int)columnsToDrop.get(i  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  col  =(int)columnsToDrop.get(i  -  1);  [BUGGY]    columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	col  =(int)columnsToDrop.get(i  -  1);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
39	[BUG]  [BUGGY]  int  maxUlps  =(int)columnsToDrop.size();  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  int  maxUlps  =(int)columnsToDrop.size();  [BUGGY]    columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	int  maxUlps  =(int)columnsToDrop.size();	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
40	[BUG]  [BUGGY]  LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  col.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.contains(  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  col.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.contains(  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  col.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.contains(	      LinearObjectiveFunction[][]    matrix    =    new    LinearObjectiveFunction[getHeight()    -    1][getWidth()    -    columnsToDrop.size()    ];    for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!columnsToDrop.contains(j)    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
41	[BUG]  [BUGGY]  LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  col.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.contains(j)  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  col.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.contains(j)  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  col.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.contains(j)	      LinearObjectiveFunction[][]    matrix    =    new    LinearObjectiveFunction[getHeight()    -    1][getWidth()    -    columnsToDrop.size()    ];    for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!columnsToDrop.contains(j)    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
42	[BUG]  [BUGGY]  LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  col.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  col.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  col.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.	      LinearObjectiveFunction[][]    matrix    =    new    LinearObjectiveFunction[getHeight()    -    1][getWidth()    -    columnsToDrop.size()    ];    for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!columnsToDrop.contains(j)    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
43	[BUG]  [BUGGY]  ColumnsToDrop  columnLabels[i  -  1][col++]  =  table.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  ColumnsToDrop  columnLabels[i  -  1][col++]  =  table.getEntry(i,  j);  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	ColumnsToDrop  columnLabels[i  -  1][col++]  =  table.getEntry(i,  j);	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
44	[BUG]  [BUGGY]  col  >  0)  {  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  col  >  0)  {  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	col  >  0)  {  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }	      if(col    >    0)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels.remove((    int)columnsToDrop.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
45	[BUG]  [BUGGY]  col  >  0)  {  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  col  >  0)  {  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	col  >  0)  {  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }	      if(col    >    0)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels.remove((    int)columnsToDrop.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
46	[BUG]  [BUGGY]  col  >  0)  {  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.add((  int)columnsToDrop.get(i));  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  col  >  0)  {  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.add((  int)columnsToDrop.get(i));  }  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	col  >  0)  {  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.add((  int)columnsToDrop.get(i));  }	      if(col    >    0)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels.add((    int)columnsToDrop.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
47	[BUG]  [BUGGY]  col  >  0)  {  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels.add((  int)columnsToDrop.get(i));  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  col  >  0)  {  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels.add((  int)columnsToDrop.get(i));  }  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	col  >  0)  {  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels.add((  int)columnsToDrop.get(i));  }	      if(col    >    0)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels.add((    int)columnsToDrop.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
48	[BUG]  [BUGGY]  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  matrix[i  -  1][col++]  =  Table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  matrix[i  -  1][col++]  =  Table.getEntry(i,  j);  }  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  matrix[i  -  1][col++]  =  Table.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
49	[BUG]  [BUGGY]  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
50	[BUG]  [BUGGY]  for(int  i  =  rowsToDrop.size()  -  1;  i  >=  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  for(int  i  =  rowsToDrop.size()  -  1;  i  >=  0;  i--)  {  [BUGGY]    columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	for(int  i  =  rowsToDrop.size()  -  1;  i  >=  0;  i--)  {	  for(int    i    =    rowsToDrop.size();    i    >=    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
51	[BUG]  [BUGGY]  LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnsToDrop.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columns  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnsToDrop.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columns  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnsToDrop.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columns	      LinearObjectiveFunction[][]    matrix    =    new    LinearObjectiveFunction[getHeight()    -    1][getWidth()    -    columnsToDrop.size()    ];    for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!columnsToDrop.contains(j)    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
52	[BUG]  [BUGGY]  LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnsToDrop.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnsToDrop.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnsToDrop.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {	      LinearObjectiveFunction[][]    matrix    =    new    LinearObjectiveFunction[getHeight()    -    1][getWidth()    -    columnsToDrop.size()    ];    for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!columnsToDrop.contains(j)    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
53	[BUG]  [BUGGY]  LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnsToDrop.size()  ];  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columns  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnsToDrop.size()  ];  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columns  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnsToDrop.size()  ];  for(int  j  =  0;  j  <  getHeight();  j++)  {  if(!columns	      LinearObjectiveFunction[][]    matrix    =    new    LinearObjectiveFunction[getHeight()    -    1][getWidth()    -    columnsToDrop.size()    ];    for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!columnsToDrop.contains(j)    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
54	[BUG]  [BUGGY]  LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnsToDrop.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToD  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnsToDrop.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToD  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnsToDrop.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToD	      LinearObjectiveFunction[][]    matrix    =    new    LinearObjectiveFunction[getHeight()    -    1][getWidth()    -    columnsToDrop.size()    ];    for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!columnsToDrop.contains(j)    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
55	[BUG]  [BUGGY]  int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }	      for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels.remove((    int)columnsToDrop.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
56	[BUG]  [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnsToDrop.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columns  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnsToDrop.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columns  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnsToDrop.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columns	      LinearObjectiveFunction[][]    columns    =    new    LinearObjectiveFunction[getHeight()    -    1][getWidth()    -    columnsToDrop.size()    ];    for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!columnsToDrop.contains(    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
57	[BUG]  [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnsToDrop.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!colum  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnsToDrop.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!colum  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnsToDrop.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!colum	      LinearObjectiveFunction[][]    columns    =    new    LinearObjectiveFunction[getHeight()    -    1][getWidth()    -    columnsToDrop.size()    ];    for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!columnsToDrop.contains(    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
58	[BUG]  [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  columnsToDrop.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columns  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  columnsToDrop.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columns  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  columnsToDrop.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columns	      LinearObjectiveFunction[][]    columns    =    new    LinearObjectiveFunction[getHeight()    -    1][getWidth()    -    columnsToDrop.size()    ];    for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!columnsToDrop.contains(    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
59	[BUG]  [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnsToDrop.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnsToDrop.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnsToDrop.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {	      LinearObjectiveFunction[][]    columns    =    new    LinearObjectiveFunction[getHeight()    -    1][getWidth()    -    columnsToDrop.size()    ];    for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!columnsToDrop.contains(    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
60	[BUG]  [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnsToDrop.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToD  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnsToDrop.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToD  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnsToDrop.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToD	      LinearObjectiveFunction[][]    columns    =    new    LinearObjectiveFunction[getHeight()    -    1][getWidth()    -    columnsToDrop.size()    ];    for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!columnsToDrop.contains(j)    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
61	[BUG]  [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnsToDrop.size()  ];  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnsToDrop.size()  ];  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnsToDrop.size()  ];	      LinearObjectiveFunction[][]    columns    =    new    LinearObjectiveFunction[getHeight()    -    1][getWidth()    -    columnsToDrop.size()    ];    for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!columnsToDrop.contains(j)    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
62	[BUG]  [BUGGY]  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels.remove((    int)columnsToDrop.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
63	[BUG]  [BUGGY]  LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnsToDrop.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!colum  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnsToDrop.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!colum  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getWidth()  -  1][getWidth()  -  columnsToDrop.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!colum	      LinearObjectiveFunction[][]    matrix    =    new    LinearObjectiveFunction[getHeight()    -    1][getWidth()    -    columnsToDrop.size()    ];    for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!columnsToDrop.contains(    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
64	[BUG]  [BUGGY]  LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  columnsToDrop.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columns  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  columnsToDrop.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columns  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  columnsToDrop.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columns	      LinearObjectiveFunction[][]    matrix    =    new    LinearObjectiveFunction[getHeight()    -    1][getWidth()    -    columnsToDrop.size()    ];    for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!columnsToDrop.contains(    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
65	[BUG]  [BUGGY]  col  >  0)  {  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  col  >  0)  {  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	col  >  0)  {  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i  -  1][col++]  =  table.getEntry(i,  j);  }	      if(col    >    0)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
66	[BUG]  [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[columnsToDrop.size()  ];  for(int  i  =  0,  col  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels.remov  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[columnsToDrop.size()  ];  for(int  i  =  0,  col  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels.remov  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[columnsToDrop.size()  ];  for(int  i  =  0,  col  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels.remov	      LinearObjectiveFunction[][]    columns    =    new    LinearObjectiveFunction[columnsToDrop.size()    ];    for(int    i    =    0,    col    =    columnsToDrop.size();    i    >=    0;    i--)    {    columnLabels.remove((    int)columnsToDrop.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
67	[BUG]  [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);  [BUGGY]    columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	LinearObjectiveFunction  f  =(LinearObjectiveFunction)columnsToDrop.get(i);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
68	[BUG]  [BUGGY]  col  =(int)columnsToDrop.get(i  -  1][col++];  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  col  =(int)columnsToDrop.get(i  -  1][col++];  [BUGGY]    columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	col  =(int)columnsToDrop.get(i  -  1][col++];	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
69	[BUG]  [BUGGY]  int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels[i  -  1][col++]  =  table.getEntry(i,  j);  }	      for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
70	[BUG]  [BUGGY]  for(int  i  =  columnsToDrop.size();  i  >  0;  i--)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  for(int  i  =  columnsToDrop.size();  i  >  0;  i--)  {  [BUGGY]    columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	for(int  i  =  columnsToDrop.size();  i  >  0;  i--)  {	  for(int    i    =    rowsToDrop.size();    i    >=    0;    i--)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
71	[BUG]  [BUGGY]  col  >  0)  {  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(0));  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  col  >  0)  {  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(0));  }  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	col  >  0)  {  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(0));  }	      if(col    >    0)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels.remove((    int)columnsToDrop.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
72	[BUG]  [BUGGY]  col  =  Math.max(col,  columnsToDrop.size());  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  col  =  Math.max(col,  columnsToDrop.size());  [BUGGY]    columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	col  =  Math.max(col,  columnsToDrop.size());	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
73	[BUG]  [BUGGY]  col  =  Math.max(col,  columnsToDrop.size()  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  col  =  Math.max(col,  columnsToDrop.size()  -  1);  [BUGGY]    columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	col  =  Math.max(col,  columnsToDrop.size()  -  1);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
74	[BUG]  [BUGGY]  for(int  i  =  rowsToDrop.size();  i  >=  0;  i--)  {  columnLabels[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  for(int  i  =  rowsToDrop.size();  i  >=  0;  i--)  {  columnLabels[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	for(int  i  =  rowsToDrop.size();  i  >=  0;  i--)  {  columnLabels[i  -  1][col++]  =  table.getEntry(i,  j);  }	      for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
75	[BUG]  [BUGGY]  LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  columnLabels.size()];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  columnLabels.size()];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  columnLabels.size()];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.	      LinearObjectiveFunction[][]    matrix    =    new    LinearObjectiveFunction[getHeight()    -    1][getWidth()    -    columnsToDrop.size()    ];    for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!columnsToDrop.contains(    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
76	[BUG]  [BUGGY]  LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  columnsToDrop.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  columnsToDrop.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  columnsToDrop.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.	      LinearObjectiveFunction[][]    matrix    =    new    LinearObjectiveFunction[getHeight()    -    1][getWidth()    -    columnsToDrop.size()    ];    for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!columnsToDrop.contains(    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
77	[BUG]  [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[columnsToDrop.size()  ];  for(int  i  =  0,  col  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[columnsToDrop.size()  ];  for(int  i  =  0,  col  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[columnsToDrop.size()  ];  for(int  i  =  0,  col  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.	      LinearObjectiveFunction[][]    columns    =    new    LinearObjectiveFunction[columnsToDrop.size()    ];    for(int    i    =    0,    col    =    columnsToDrop.size();    i    >=    0;    i--)    {    columnLabels.remove((    int)columnsToDrop.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
78	[BUG]  [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[columnsToDrop.size()  ];  for(int  i  =  0,  col  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[columnsToDrop.size()  ];  for(int  i  =  0,  col  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[columnsToDrop.size()  ];  for(int  i  =  0,  col  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get	      LinearObjectiveFunction[][]    columns    =    new    LinearObjectiveFunction[columnsToDrop.size()    ];    for(int    i    =    0,    col    =    columnsToDrop.size();    i    >=    0;    i--)    {    columnLabels.remove((    int)columnsToDrop.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
79	[BUG]  [BUGGY]  col  >  0)  {  columnLabels.add((  int)columnsToDrop.get(i));  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  col  >  0)  {  columnLabels.add((  int)columnsToDrop.get(i));  }  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	col  >  0)  {  columnLabels.add((  int)columnsToDrop.get(i));  }	      if(col    >    0)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels.add((    int)columnsToDrop.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
80	[BUG]  [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  matrix.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  matrix.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  matrix.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.	      LinearObjectiveFunction[][]    columns    =    new    LinearObjectiveFunction[getHeight()    -    1][getWidth()    -    columnsToDrop.size()    ];    for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!columnsToDrop.contains(j)    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
81	[BUG]  [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  matrix.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.contains  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  matrix.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.contains  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  matrix.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.contains	      LinearObjectiveFunction[][]    columns    =    new    LinearObjectiveFunction[getHeight()    -    1][getWidth()    -    columnsToDrop.size()    ];    for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!columnsToDrop.contains(j)    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
82	[BUG]  [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  columnLabels.size()];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  columnLabels.size()];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  columnLabels.size()];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.	      LinearObjectiveFunction[][]    columns    =    new    LinearObjectiveFunction[getHeight()    -    1][getWidth()    -    columnsToDrop.size()    ];    for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!columnsToDrop.contains(j)    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
83	[BUG]  [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  matrix.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.contains(  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  matrix.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.contains(  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	LinearObjectiveFunction[][]  columns  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  matrix.size()  ];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.contains(	      LinearObjectiveFunction[][]    columns    =    new    LinearObjectiveFunction[getHeight()    -    1][getWidth()    -    columnsToDrop.size()    ];    for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!columnsToDrop.contains(j)    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
84	[BUG]  [BUGGY]  col  >  0)  {  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i  -  1][col++]  =  table.getEntry(i,  j  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  col  >  0)  {  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i  -  1][col++]  =  table.getEntry(i,  j  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	col  >  0)  {  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels[i  -  1][col++]  =  table.getEntry(i,  j	      if(col    >    0)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
85	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	if(columnLabels!=  null)  {  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
86	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	if(columnLabels!=  null)  {  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  matrix[i  -  1][col++]  =  table.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
87	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	if(columnLabels!=  null)  {  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  matrix[i  -  1][col++]  =  column.getEntry(i,  j);  }	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    matrix[i    -    1][col++]    =    table.getEntry(i,    j);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
88	[BUG]  [BUGGY]  col  >  0)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  col  >  0)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	col  >  0)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }	      if(col    >    0)    {    for(int    i    =    columnLabels.size()    -    1;    i    >=    0;    i--)    {    columnLabels.remove((    int)columnsToDrop.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
89	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	if(columnLabels!=  null)  {  for(int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels.remove((    int)columnsToDrop.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
90	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	if(columnLabels!=  null)  {  for(int  i  =  columnsToDrop.size();  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels.remove((    int)columnsToDrop.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
91	[BUG]  [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  if(columnLabels!=  null)  {  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	if(columnLabels!=  null)  {  for(int  i  =  columnLabels.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((  int)columnsToDrop.get(i));  }	      if(columnsToDrop!=    null)    {    for(int    i    =    columnsToDrop.size()    -    1;    i    >=    0;    i--)    {    columnLabels.remove((    int)columnsToDrop.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
92	[BUG]  [BUGGY]  LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  columnLabels.size()];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.contains  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    double[][]  matrix  =  new  double[getHeight()  -  1][getWidth()  -  columnsToDrop.size()];  for  (int  i  =  1;  i  <  getHeight();  i++)  {  int  col  =  0;  for  (int  j  =  0;  j  <  getWidth();  j++)  {  if  (!columnsToDrop.contains(j))  {  matrix[i  -  1][col++]  =  tableau.getEntry(i,  j);  }  }  }    [BUGGY]  LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  columnLabels.size()];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.contains  [BUGGY]    for  (int  i  =  columnsToDrop.size()  -  1;  i  >=  0;  i--)  {  columnLabels.remove((int)  columnsToDrop.get(i));  }  this.tableau  =  new  Array2DRowRealMatrix(matrix);  this.numArtificialVariables  =  0;  }  [CLASS]  SimplexTableau  [METHOD]  dropPhase1Objective  [RETURN_TYPE]  void  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  entry  epsilon  sum  LinearObjectiveFunction  f  double[][]  matrix  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  count  height  i  j  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	LinearObjectiveFunction[][]  matrix  =  new  LinearObjectiveFunction[getHeight()  -  1][getWidth()  -  columnLabels.size()];  for(int  i  =  0;  i  <  getHeight();  i++)  {  if(!columnsToDrop.contains	      LinearObjectiveFunction[][]    matrix    =    new    LinearObjectiveFunction[getHeight()    -    1][getWidth()    -    columnsToDrop.size()    ];    for(int    i    =    0;    i    <    getHeight();    i++)    {    if(!columnsToDrop.contains(j)    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
