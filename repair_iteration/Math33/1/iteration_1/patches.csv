bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  baseRow  =  getBasicRow(colIndex  +  1);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	int  baseRow  =  getBasicRow(colIndex  +  1);	      int    baseRow    =    getBasicRow(colIndex);    	compilable	  [FE]  AssertionError  	24	2	replace
2	[BUG]  [BUGGY]  int  baseRow  =  getBasicRow(colIndex  +  1);  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  baseRow  =  getBasicRow(colIndex  +  1);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	int  baseRow  =  getBasicRow(colIndex  +  1);	      int    baseRow    =    getBasicRow(colIndex);    	compilable	  [FE]  AssertionError  	24	2	replace
3	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  baseRow  =  getBasicRow(colIndex  -  1);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	int  baseRow  =  getBasicRow(colIndex  -  1);	      int    baseRow    =    getBasicRow(colIndex);    	compilable	  [FE]  OutOfRangeException  	24	3	replace
4	[BUG]  [BUGGY]  int  baseRow  =  getBasicRow(colIndex  -  1);  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  baseRow  =  getBasicRow(colIndex  -  1);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	int  baseRow  =  getBasicRow(colIndex  -  1);	      int    baseRow    =    getBasicRow(colIndex);    	compilable	  [FE]  OutOfRangeException  	24	3	replace
5	[BUG]  [BUGGY]  int  baseRow  =  getBasicColumn(colIndex);  [CE]  cannot  find  symbol  [FE]        OutOfRangeException    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  baseRow  =  getBasicColumn(colIndex);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	int  baseRow  =  getBasicColumn(colIndex);	      int    baseRow    =    getBasicRow(colIndex);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  =  1;  coefficients[i]  =  1;  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	coefficients[i]    =    1;    coefficients[i]  =  1;	  	compilable	  [FE]  AssertionError  	3	1	add
7	[BUG]  [BUGGY]  coefficients[i]  =  1;  coefficients[i]  =  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  =  1;  coefficients[i]  =  1;  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	coefficients[i]    =    1;    coefficients[i]  =  1;	  	compilable	  [FE]  AssertionError  	3	1	add
8	[BUG]  [BUGGY]  coefficients[i]  =  1;  int  colIndex  =  columnLabels.indexOf( "x   "  +  i);  [CE]  variable  colIndex  is  already  defined  in  method  getSolution()  [FE]      AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  =  1;  int  colIndex  =  columnLabels.indexOf( "x   "  +  i);  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	coefficients[i]    =    1;    int  colIndex  =  columnLabels.indexOf( "x   "  +  i);	  	non-compiled	[CE]  variable  colIndex  is  already  defined  in  method  getSolution()	3	None	add
9	[BUG]  [BUGGY]  coefficients[i]  =  1;  int  colIndex  =  columnLabels.indexOf( "x   "  +  i);  coefficients[i]  =  1;  [CE]  variable  colIndex  is  already  defined  in  method  getSolution()  [FE]        AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  =  1;  int  colIndex  =  columnLabels.indexOf( "x   "  +  i);  coefficients[i]  =  1;  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	coefficients[i]    =    1;    int  colIndex  =  columnLabels.indexOf( "x   "  +  i);  coefficients[i]  =  1;	  	non-compiled	[CE]  variable  colIndex  is  already  defined  in  method  getSolution()	3	None	add
10	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  -=  colIndex;  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	coefficients[i]  -=  colIndex;	  coefficients[i]    =    1;    	compilable	  [FE]  AssertionError  	4	2	replace
11	[BUG]  [BUGGY]  coefficients[i]  -=  colIndex;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  -=  colIndex;  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	coefficients[i]  -=  colIndex;	  coefficients[i]    =    1;    	compilable	  [FE]  AssertionError  	4	2	replace
12	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue	      for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow))    {    continue;    	non-compiled	[CE]  ';'  expected	9	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue;  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue;	      for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow))    {    continue;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow)  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow)  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow)	      for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow))    {    continue;    	non-compiled	[CE]  ')'  expected	9	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicR  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicR  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicR	      for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow))    {    continue;    	non-compiled	[CE]  ')'  expected	9	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  baseRow  =  columnLabels.indexOf( "base   "  +  colIndex);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	int  baseRow  =  columnLabels.indexOf( "base   "  +  colIndex);	      int    baseRow    =    columnLabels.indexOf(   "base   "    +    i);    	compilable	  [FE]  AssertionError  	27	1	replace
17	[BUG]  [BUGGY]  int  baseRow  =  columnLabels.indexOf( "base   "  +  colIndex);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  baseRow  =  columnLabels.indexOf( "base   "  +  colIndex);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	int  baseRow  =  columnLabels.indexOf( "base   "  +  colIndex);	      int    baseRow    =    columnLabels.indexOf(   "base   "    +    i);    	compilable	  [FE]  AssertionError  	27	1	replace
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  baseRow  =  columnLabels.indexOf( ".base "  +  i);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	int  baseRow  =  columnLabels.indexOf( ".base "  +  i);	      int    baseRow    =    columnLabels.indexOf(   "base   "    +    i);    	compilable	  [FE]  AssertionError  	27	1	replace
19	[BUG]  [BUGGY]  int  baseRow  =  columnLabels.indexOf( ".base "  +  i);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  baseRow  =  columnLabels.indexOf( ".base "  +  i);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	int  baseRow  =  columnLabels.indexOf( ".base "  +  i);	      int    baseRow    =    columnLabels.indexOf(   "base   "    +    i);    	compilable	  [FE]  AssertionError  	27	1	replace
20	[BUG]  [BUGGY]  for(int  i  =  colIndex;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow.contains(basicRow))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  for(int  i  =  colIndex;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow.contains(basicRow))  {  continue;  }  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	for(int  i  =  colIndex;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow.contains(basicRow))  {  continue;  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
21	[BUG]  [BUGGY]      Integer  basicRow  =  getBasicRow(colIndex);  Integer  basicRow  =  getBasicRow(colIndex);  [CE]  variable  basicRow  is  already  defined  in  method  getSolution()  [FE]    OutOfRangeException    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]      Integer  basicRow  =  getBasicRow(colIndex);  Integer  basicRow  =  getBasicRow(colIndex);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	        Integer    basicRow    =    getBasicRow(colIndex);    Integer  basicRow  =  getBasicRow(colIndex);	  	non-compiled	[CE]  variable  basicRow  is  already  defined  in  method  getSolution()	16	None	add
22	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]      Integer  basicRow  =  getBasicRow(colIndex);  Integer  baseRow  =  getBasicRow(colIndex);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	        Integer    basicRow    =    getBasicRow(colIndex);    Integer  baseRow  =  getBasicRow(colIndex);	  	compilable	  [FE]  OutOfRangeException  	16	3	add
23	[BUG]  [BUGGY]      Integer  basicRow  =  getBasicRow(colIndex);  Integer  baseRow  =  getBasicRow(colIndex);  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]      Integer  basicRow  =  getBasicRow(colIndex);  Integer  baseRow  =  getBasicRow(colIndex);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	        Integer    basicRow    =    getBasicRow(colIndex);    Integer  baseRow  =  getBasicRow(colIndex);	  	compilable	  [FE]  OutOfRangeException  	16	3	add
24	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        OutOfRangeException    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]      Integer  basicRow  =  getBasicRow(colIndex);  Integer  elementRow  =  getBasicRow(colIndex);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	        Integer    basicRow    =    getBasicRow(colIndex);    Integer  elementRow  =  getBasicRow(colIndex);	  	compilable	  [FE]  OutOfRangeException  	16	3	add
25	[BUG]  [BUGGY]      Integer  basicRow  =  getBasicRow(colIndex);  Integer  elementRow  =  getBasicRow(colIndex);  [FE]  OutOfRangeException  [FE]        OutOfRangeException    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]      Integer  basicRow  =  getBasicRow(colIndex);  Integer  elementRow  =  getBasicRow(colIndex);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	        Integer    basicRow    =    getBasicRow(colIndex);    Integer  elementRow  =  getBasicRow(colIndex);	  	compilable	  [FE]  OutOfRangeException  	16	3	add
26	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]          OutOfRangeException    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]      Integer  basicRow  =  getBasicRow(colIndex);  Integer  primaryRow  =  getBasicRow(colIndex);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	        Integer    basicRow    =    getBasicRow(colIndex);    Integer  primaryRow  =  getBasicRow(colIndex);	  	compilable	  [FE]  OutOfRangeException  	16	3	add
27	[BUG]  [BUGGY]      Integer  basicRow  =  getBasicRow(colIndex);  Integer  primaryRow  =  getBasicRow(colIndex);  [FE]  OutOfRangeException  [FE]          OutOfRangeException    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]      Integer  basicRow  =  getBasicRow(colIndex);  Integer  primaryRow  =  getBasicRow(colIndex);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	        Integer    basicRow    =    getBasicRow(colIndex);    Integer  primaryRow  =  getBasicRow(colIndex);	  	compilable	  [FE]  OutOfRangeException  	16	3	add
28	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]            OutOfRangeException    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]      Integer  basicRow  =  getBasicRow(colIndex);  Integer  mainRow  =  getBasicRow(colIndex);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	        Integer    basicRow    =    getBasicRow(colIndex);    Integer  mainRow  =  getBasicRow(colIndex);	  	compilable	  [FE]  OutOfRangeException  	16	3	add
29	[BUG]  [BUGGY]      Integer  basicRow  =  getBasicRow(colIndex);  Integer  mainRow  =  getBasicRow(colIndex);  [FE]  OutOfRangeException  [FE]            OutOfRangeException    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]      Integer  basicRow  =  getBasicRow(colIndex);  Integer  mainRow  =  getBasicRow(colIndex);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	        Integer    basicRow    =    getBasicRow(colIndex);    Integer  mainRow  =  getBasicRow(colIndex);	  	compilable	  [FE]  OutOfRangeException  	16	3	add
30	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {	      for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
31	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  [CE]  '.class'  expected  [FE]                AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  For(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	For(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {	      for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow))    {    	non-compiled	[CE]  '.class'  expected	12	None	replace
32	[BUG]  [BUGGY]  coefficients[i]  =  0  +  basicRows.length;  [CE]  cannot  find  symbol  length  [FE]    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  =  0  +  basicRows.length;  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	coefficients[i]  =  0  +  basicRows.length;	  coefficients[i]    =    0    +    colIndex;    	non-compiled	[CE]  cannot  find  symbol  length	15	None	replace
33	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  =  0  +  colIndex  +  1;  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	coefficients[i]  =  0  +  colIndex  +  1;	  coefficients[i]    =    0    +    colIndex;    	compilable	  [FE]  AssertionError  	15	1	replace
34	[BUG]  [BUGGY]  coefficients[i]  =  0  +  colIndex  +  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  =  0  +  colIndex  +  1;  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	coefficients[i]  =  0  +  colIndex  +  1;	  coefficients[i]    =    0    +    colIndex;    	compilable	  [FE]  AssertionError  	15	1	replace
35	[BUG]  [BUGGY]  coefficients[i]  =  0  +  basicRows;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  =  0  +  basicRows;  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	coefficients[i]  =  0  +  basicRows;	  coefficients[i]    =    0    +    colIndex;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	15	None	replace
36	[BUG]  [BUGGY]  int  colIndex  =  coefficients.indexOf( "x   "  +  i);  [CE]  variable  colIndex  is  already  defined  in  method  getSolution()  [FE]          AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  colIndex  =  coefficients.indexOf( "x   "  +  i);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	int  colIndex  =  coefficients.indexOf( "x   "  +  i);	      int    colIndex    =    columnLabels.indexOf(   "x   "    +    i);    	non-compiled	[CE]  variable  colIndex  is  already  defined  in  method  getSolution()	10	None	replace
37	[BUG]  [BUGGY]  int  colIndex  =  columnLabels.indexOf( "x   "  +  i,  coefficients[i]);  [CE]  variable  colIndex  is  already  defined  in  method  getSolution()  [FE]            AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  colIndex  =  columnLabels.indexOf( "x   "  +  i,  coefficients[i]);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	int  colIndex  =  columnLabels.indexOf( "x   "  +  i,  coefficients[i]);	      int    colIndex    =    columnLabels.indexOf(   "x   "    +    i);    	non-compiled	[CE]  variable  colIndex  is  already  defined  in  method  getSolution()	10	None	replace
38	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  =  -1;  coefficients[i]  =  -1;  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	coefficients[i]    =    -1;    coefficients[i]  =  -1;	  	compilable	  [FE]  AssertionError  	5	1	add
39	[BUG]  [BUGGY]  coefficients[i]  =  -1;  coefficients[i]  =  -1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  =  -1;  coefficients[i]  =  -1;  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	coefficients[i]    =    -1;    coefficients[i]  =  -1;	  	compilable	  [FE]  AssertionError  	5	1	add
40	[BUG]  [BUGGY]  coefficients[i]  =  -1;  int  colIndex  =  columnLabels.indexOf( "x   "  +  i);  [CE]  variable  colIndex  is  already  defined  in  method  getSolution()  [FE]      AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  =  -1;  int  colIndex  =  columnLabels.indexOf( "x   "  +  i);  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	coefficients[i]    =    -1;    int  colIndex  =  columnLabels.indexOf( "x   "  +  i);	  	non-compiled	[CE]  variable  colIndex  is  already  defined  in  method  getSolution()	5	None	add
41	[BUG]  [BUGGY]  coefficients[i]  =  -1;  int  colIndex  =  columnLabels.indexOf( "y   "  +  i);  [CE]  variable  colIndex  is  already  defined  in  method  getSolution()  [FE]        AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  =  -1;  int  colIndex  =  columnLabels.indexOf( "y   "  +  i);  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	coefficients[i]    =    -1;    int  colIndex  =  columnLabels.indexOf( "y   "  +  i);	  	non-compiled	[CE]  variable  colIndex  is  already  defined  in  method  getSolution()	5	None	add
42	[BUG]  [BUGGY]  coefficients[i]  =  -1;  Coefficients[i]  =  -1;  [CE]  cannot  find  symbol  Coefficients  [FE]          AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  =  -1;  Coefficients[i]  =  -1;  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	coefficients[i]    =    -1;    Coefficients[i]  =  -1;	  	non-compiled	[CE]  cannot  find  symbol  Coefficients	5	None	add
43	[BUG]  [BUGGY]  coefficients[i]  =  0,  colIndex  =  0;  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  =  0,  colIndex  =  0;  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	coefficients[i]  =  0,  colIndex  =  0;	  coefficients[i]    =    colIndex;    	non-compiled	[CE]  ';'  expected	2	None	replace
44	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  =  colIndex  +  1;  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	coefficients[i]  =  colIndex  +  1;	  coefficients[i]    =    colIndex;    	compilable	  [FE]  AssertionError  	2	1	replace
45	[BUG]  [BUGGY]  coefficients[i]  =  colIndex  +  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  =  colIndex  +  1;  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	coefficients[i]  =  colIndex  +  1;	  coefficients[i]    =    colIndex;    	compilable	  [FE]  AssertionError  	2	1	replace
46	[BUG]  [BUGGY]      int  baseRow  =  getBasicRow(colIndex);  int  baseRow  =  getBasicRow(colIndex);  [CE]  variable  baseRow  is  already  defined  in  method  getSolution()  [FE]    OutOfRangeException    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]      int  baseRow  =  getBasicRow(colIndex);  int  baseRow  =  getBasicRow(colIndex);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	        int    baseRow    =    getBasicRow(colIndex);    int  baseRow  =  getBasicRow(colIndex);	  	non-compiled	[CE]  variable  baseRow  is  already  defined  in  method  getSolution()	23	None	add
47	[BUG]  [BUGGY]      int  baseRow  =  getBasicRow(colIndex);  Integer  baseRow  =  getBasicRow(colIndex);  [CE]  variable  baseRow  is  already  defined  in  method  getSolution()  [FE]      OutOfRangeException    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]      int  baseRow  =  getBasicRow(colIndex);  Integer  baseRow  =  getBasicRow(colIndex);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	        int    baseRow    =    getBasicRow(colIndex);    Integer  baseRow  =  getBasicRow(colIndex);	  	non-compiled	[CE]  variable  baseRow  is  already  defined  in  method  getSolution()	23	None	add
48	[BUG]  [BUGGY]      int  baseRow  =  getBasicRow(colIndex);  int  baseRow  =  getBasicColumn(colIndex);  [CE]  variable  baseRow  is  already  defined  in  method  getSolution()  [FE]        OutOfRangeException    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]      int  baseRow  =  getBasicRow(colIndex);  int  baseRow  =  getBasicColumn(colIndex);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	        int    baseRow    =    getBasicRow(colIndex);    int  baseRow  =  getBasicColumn(colIndex);	  	non-compiled	[CE]  variable  baseRow  is  already  defined  in  method  getSolution()	23	None	add
49	[BUG]  [BUGGY]  Integer  colIndex  =  getColumnIndex(column);  [CE]  variable  colIndex  is  already  defined  in  method  getSolution()  [FE]                AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  Integer  colIndex  =  getColumnIndex(column);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	Integer  colIndex  =  getColumnIndex(column);	      for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow))    {    continue;    }    	non-compiled	[CE]  variable  colIndex  is  already  defined  in  method  getSolution()	13	None	replace
50	[BUG]  [BUGGY]  Integer  columnIndex  =  getColumnIndex(column);  [CE]  cannot  find  symbol  column  [FE]                  AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  Integer  columnIndex  =  getColumnIndex(column);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	Integer  columnIndex  =  getColumnIndex(column);	      for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  column	13	None	replace
51	[BUG]  [BUGGY]  Integer[]  columns  =  getColumns();  [CE]  cannot  find  symbol  [FE]                    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  Integer[]  columns  =  getColumns();  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	Integer[]  columns  =  getColumns();	      for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
52	[BUG]  [BUGGY]  int  colIndex  =  coefficients.indexOf( "y   "  +  i);  [CE]  variable  colIndex  is  already  defined  in  method  getSolution()  [FE]                AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  colIndex  =  coefficients.indexOf( "y   "  +  i);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	int  colIndex  =  coefficients.indexOf( "y   "  +  i);	      int    colIndex    =    columnLabels.indexOf(   "y   "    +    i);    	non-compiled	[CE]  variable  colIndex  is  already  defined  in  method  getSolution()	22	None	replace
53	[BUG]  [BUGGY]  int  colIndex  =  columnLabels.indexOf( "y   "  +  i,  coefficients[i]);  [CE]  variable  colIndex  is  already  defined  in  method  getSolution()  [FE]                  AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  colIndex  =  columnLabels.indexOf( "y   "  +  i,  coefficients[i]);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	int  colIndex  =  columnLabels.indexOf( "y   "  +  i,  coefficients[i]);	      int    colIndex    =    columnLabels.indexOf(   "y   "    +    i);    	non-compiled	[CE]  variable  colIndex  is  already  defined  in  method  getSolution()	22	None	replace
54	[BUG]  [BUGGY]  int  colRow  =  getColumnRow(colIndex  +  1);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  colRow  =  getColumnRow(colIndex  +  1);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	int  colRow  =  getColumnRow(colIndex  +  1);	      int    colRow    =    getColumnRow(colIndex);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
55	[BUG]  [BUGGY]  int  colRow  =  getColumnRow(colIndex  -  1);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  colRow  =  getColumnRow(colIndex  -  1);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	int  colRow  =  getColumnRow(colIndex  -  1);	      int    colRow    =    getColumnRow(colIndex);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
56	[BUG]  [BUGGY]  int  colRow  =  getColumnRow(colIndex,  i);  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  colRow  =  getColumnRow(colIndex,  i);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	int  colRow  =  getColumnRow(colIndex,  i);	      int    colRow    =    getColumnRow(colIndex);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
57	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  =  0  +  colIndex;  coefficients[i]  =  0  +  colIndex;  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	coefficients[i]    =    0    +    colIndex;    coefficients[i]  =  0  +  colIndex;	  	compilable	  [FE]  AssertionError  	14	1	add
58	[BUG]  [BUGGY]  coefficients[i]  =  0  +  colIndex;  coefficients[i]  =  0  +  colIndex;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  =  0  +  colIndex;  coefficients[i]  =  0  +  colIndex;  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	coefficients[i]    =    0    +    colIndex;    coefficients[i]  =  0  +  colIndex;	  	compilable	  [FE]  AssertionError  	14	1	add
59	[BUG]  [BUGGY]  coefficients[i]  =  0  +  colIndex;  Coefficients[i]  =  0  +  colIndex;  [CE]  cannot  find  symbol  Coefficients  [FE]      AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  =  0  +  colIndex;  Coefficients[i]  =  0  +  colIndex;  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	coefficients[i]    =    0    +    colIndex;    Coefficients[i]  =  0  +  colIndex;	  	non-compiled	[CE]  cannot  find  symbol  Coefficients	14	None	add
60	[BUG]  [BUGGY]  coefficients[i]  =  0  +  colIndex;  int  colIndex  =  columnLabels.indexOf( "x   "  +  i);  [CE]  variable  colIndex  is  already  defined  in  method  getSolution()  [FE]        AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  =  0  +  colIndex;  int  colIndex  =  columnLabels.indexOf( "x   "  +  i);  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	coefficients[i]    =    0    +    colIndex;    int  colIndex  =  columnLabels.indexOf( "x   "  +  i);	  	non-compiled	[CE]  variable  colIndex  is  already  defined  in  method  getSolution()	14	None	add
61	[BUG]  [BUGGY]  coefficients[i]  =  0  +  colIndex;  int  colIndex  =  getColumnIndex(colIndex);  [CE]  variable  colIndex  is  already  defined  in  method  getSolution()  [FE]          AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  =  0  +  colIndex;  int  colIndex  =  getColumnIndex(colIndex);  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	coefficients[i]    =    0    +    colIndex;    int  colIndex  =  getColumnIndex(colIndex);	  	non-compiled	[CE]  variable  colIndex  is  already  defined  in  method  getSolution()	14	None	add
62	[BUG]  [BUGGY]  Integer[]  basicRows  =  getBasicRows(i);  [CE]  variable  basicRows  is  already  defined  in  method  getSolution()  [FE]              AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  Integer[]  basicRows  =  getBasicRows(i);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	Integer[]  basicRows  =  getBasicRows(i);	      Integer[]    basicRows    =    getBasicRows();    	non-compiled	[CE]  variable  basicRows  is  already  defined  in  method  getSolution()	28	None	replace
63	[BUG]  [BUGGY]  Integer[]  basicRows  =  getBasicRows(0);  [CE]  variable  basicRows  is  already  defined  in  method  getSolution()  [FE]                AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  Integer[]  basicRows  =  getBasicRows(0);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	Integer[]  basicRows  =  getBasicRows(0);	      Integer[]    basicRows    =    getBasicRows();    	non-compiled	[CE]  variable  basicRows  is  already  defined  in  method  getSolution()	28	None	replace
64	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  colRow  =  columnLabels.indexOf( ".s.IFJDCS "  +  i);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	int  colRow  =  columnLabels.indexOf( ".s.IFJDCS "  +  i);	      int    colRow    =    columnLabels.indexOf(   "x   "    +    i);    	compilable	  [FE]  AssertionError  	19	1	replace
65	[BUG]  [BUGGY]  int  colRow  =  columnLabels.indexOf( ".s.IFJDCS "  +  i);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  colRow  =  columnLabels.indexOf( ".s.IFJDCS "  +  i);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	int  colRow  =  columnLabels.indexOf( ".s.IFJDCS "  +  i);	      int    colRow    =    columnLabels.indexOf(   "x   "    +    i);    	compilable	  [FE]  AssertionError  	19	1	replace
66	[BUG]  [BUGGY]  int  colRow  =  basicRows.indexOf( "x "  +  i);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  colRow  =  basicRows.indexOf( "x "  +  i);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	int  colRow  =  basicRows.indexOf( "x "  +  i);	      int    colRow    =    columnLabels.indexOf(   "x   "    +    i);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
67	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  Integer  basicRow  =  getBasicRow(colIndex  +  1);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	Integer  basicRow  =  getBasicRow(colIndex  +  1);	      Integer    basicRow    =    getBasicRow(colIndex);    	compilable	  [FE]  AssertionError  	17	1	replace
68	[BUG]  [BUGGY]  Integer  basicRow  =  getBasicRow(colIndex  +  1);  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  Integer  basicRow  =  getBasicRow(colIndex  +  1);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	Integer  basicRow  =  getBasicRow(colIndex  +  1);	      Integer    basicRow    =    getBasicRow(colIndex);    	compilable	  [FE]  AssertionError  	17	1	replace
69	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      OutOfRangeException    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  Integer  basicRow  =  getBasicRow(i);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	Integer  basicRow  =  getBasicRow(i);	      Integer    basicRow    =    getBasicRow(colIndex);    	compilable	  [FE]  AssertionError  	17	1	replace
70	[BUG]  [BUGGY]  Integer  basicRow  =  getBasicRow(i);  [FE]  AssertionError  [FE]      OutOfRangeException    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  Integer  basicRow  =  getBasicRow(i);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	Integer  basicRow  =  getBasicRow(i);	      Integer    basicRow    =    getBasicRow(colIndex);    	compilable	  [FE]  AssertionError  	17	1	replace
71	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        OutOfRangeException    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  Integer  basicRow  =  getBasicRow(colIndex  -  1);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	Integer  basicRow  =  getBasicRow(colIndex  -  1);	      Integer    basicRow    =    getBasicRow(colIndex);    	compilable	  [FE]  OutOfRangeException  	17	3	replace
72	[BUG]  [BUGGY]  Integer  basicRow  =  getBasicRow(colIndex  -  1);  [FE]  OutOfRangeException  [FE]        OutOfRangeException    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  Integer  basicRow  =  getBasicRow(colIndex  -  1);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	Integer  basicRow  =  getBasicRow(colIndex  -  1);	      Integer    basicRow    =    getBasicRow(colIndex);    	compilable	  [FE]  OutOfRangeException  	17	3	replace
73	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue  [CE]  '.class'  expected  [FE]            AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  For(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	For(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue	      for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow))    {    continue    	non-compiled	[CE]  '.class'  expected	11	None	replace
74	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  =  colIndex;  coefficients[i]  =  colIndex;  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	coefficients[i]    =    colIndex;    coefficients[i]  =  colIndex;	  	compilable	  [FE]  AssertionError  	1	1	add
75	[BUG]  [BUGGY]  coefficients[i]  =  colIndex;  coefficients[i]  =  colIndex;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  =  colIndex;  coefficients[i]  =  colIndex;  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	coefficients[i]    =    colIndex;    coefficients[i]  =  colIndex;	  	compilable	  [FE]  AssertionError  	1	1	add
76	[BUG]  [BUGGY]  coefficients[i]  =  colIndex;  int  colIndex  =  colIndex;  [CE]  variable  colIndex  is  already  defined  in  method  getSolution()  [FE]      AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  =  colIndex;  int  colIndex  =  colIndex;  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	coefficients[i]    =    colIndex;    int  colIndex  =  colIndex;	  	non-compiled	[CE]  variable  colIndex  is  already  defined  in  method  getSolution()	1	None	add
77	[BUG]  [BUGGY]  coefficients[i]  =  colIndex;  Coefficients[i]  =  colIndex;  [CE]  cannot  find  symbol  Coefficients  [FE]        AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  =  colIndex;  Coefficients[i]  =  colIndex;  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	coefficients[i]    =    colIndex;    Coefficients[i]  =  colIndex;	  	non-compiled	[CE]  cannot  find  symbol  Coefficients	1	None	add
78	[BUG]  [BUGGY]  coefficients[i]  =  colIndex;  Coords.assertEquals(colIndex,  basicRows[i]);  [CE]  array  required,  but  Set<Integer>  found  [FE]          AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  =  colIndex;  Coords.assertEquals(colIndex,  basicRows[i]);  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	coefficients[i]    =    colIndex;    Coords.assertEquals(colIndex,  basicRows[i]);	  	non-compiled	[CE]  array  required,  but  Set<Integer>  found	1	None	add
79	[BUG]  [BUGGY]  coefficients[i]  =  colIndex;  Coords.assertEquals(colIndex,  mostNegative);  [CE]  cannot  find  symbol  Coords  [FE]            AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  =  colIndex;  Coords.assertEquals(colIndex,  mostNegative);  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	coefficients[i]    =    colIndex;    Coords.assertEquals(colIndex,  mostNegative);	  	non-compiled	[CE]  cannot  find  symbol  Coords	1	None	add
80	[BUG]  [BUGGY]      int  colRow  =  columnLabels.indexOf(   "x   "  +  i);  int  colRow  =  columnLabels.indexOf( "x   "  +  i);  [CE]  variable  colRow  is  already  defined  in  method  getSolution()  [FE]    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]      int  colRow  =  columnLabels.indexOf(   "x   "  +  i);  int  colRow  =  columnLabels.indexOf( "x   "  +  i);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	        int    colRow    =    columnLabels.indexOf(   "x   "    +    i);    int  colRow  =  columnLabels.indexOf( "x   "  +  i);	  	non-compiled	[CE]  variable  colRow  is  already  defined  in  method  getSolution()	18	None	add
81	[BUG]  [BUGGY]      int  colRow  =  columnLabels.indexOf(   "x   "  +  i);  int  colRow  =  columnLabels.indexOf( ".x   "  +  i);  [CE]  variable  colRow  is  already  defined  in  method  getSolution()  [FE]      AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]      int  colRow  =  columnLabels.indexOf(   "x   "  +  i);  int  colRow  =  columnLabels.indexOf( ".x   "  +  i);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	        int    colRow    =    columnLabels.indexOf(   "x   "    +    i);    int  colRow  =  columnLabels.indexOf( ".x   "  +  i);	  	non-compiled	[CE]  variable  colRow  is  already  defined  in  method  getSolution()	18	None	add
82	[BUG]  [BUGGY]      int  colRow  =  columnLabels.indexOf(   "x   "  +  i);  int  colRow  =  columnLabels.indexOf( ",x   "  +  i);  [CE]  variable  colRow  is  already  defined  in  method  getSolution()  [FE]        AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]      int  colRow  =  columnLabels.indexOf(   "x   "  +  i);  int  colRow  =  columnLabels.indexOf( ",x   "  +  i);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	        int    colRow    =    columnLabels.indexOf(   "x   "    +    i);    int  colRow  =  columnLabels.indexOf( ",x   "  +  i);	  	non-compiled	[CE]  variable  colRow  is  already  defined  in  method  getSolution()	18	None	add
83	[BUG]  [BUGGY]  int  columnRow  =  getColumnRow(colIndex  +  1);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  columnRow  =  getColumnRow(colIndex  +  1);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	int  columnRow  =  getColumnRow(colIndex  +  1);	      int    columnRow    =    getColumnRow(colIndex);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
84	[BUG]  [BUGGY]  int  columnRow  =  getColumnRow(colIndex,  colIndex);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  columnRow  =  getColumnRow(colIndex,  colIndex);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	int  columnRow  =  getColumnRow(colIndex,  colIndex);	      int    columnRow    =    getColumnRow(colIndex);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
85	[BUG]  [BUGGY]  int  columnRow  =  getColumnRow(colIndex  -  1);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  columnRow  =  getColumnRow(colIndex  -  1);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	int  columnRow  =  getColumnRow(colIndex  -  1);	      int    columnRow    =    getColumnRow(colIndex);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
86	[BUG]  [BUGGY]      int  baseRow  =  columnLabels.indexOf(   "base   "  +  i);  int  baseRow  =  columnLabels.indexOf( "base   "  +  i);  [CE]  variable  baseRow  is  already  defined  in  method  getSolution()  [FE]    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]      int  baseRow  =  columnLabels.indexOf(   "base   "  +  i);  int  baseRow  =  columnLabels.indexOf( "base   "  +  i);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	        int    baseRow    =    columnLabels.indexOf(   "base   "    +    i);    int  baseRow  =  columnLabels.indexOf( "base   "  +  i);	  	non-compiled	[CE]  variable  baseRow  is  already  defined  in  method  getSolution()	26	None	add
87	[BUG]  [BUGGY]      int  baseRow  =  columnLabels.indexOf(   "base   "  +  i);  int  baseRow  =  columnLabels.indexOf( ".base   "  +  i);  [CE]  variable  baseRow  is  already  defined  in  method  getSolution()  [FE]      AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]      int  baseRow  =  columnLabels.indexOf(   "base   "  +  i);  int  baseRow  =  columnLabels.indexOf( ".base   "  +  i);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	        int    baseRow    =    columnLabels.indexOf(   "base   "    +    i);    int  baseRow  =  columnLabels.indexOf( ".base   "  +  i);	  	non-compiled	[CE]  variable  baseRow  is  already  defined  in  method  getSolution()	26	None	add
88	[BUG]  [BUGGY]      int  baseRow  =  columnLabels.indexOf(   "base   "  +  i);  int  baseRow  =  columnLabels.indexOf( ",base   "  +  i);  [CE]  variable  baseRow  is  already  defined  in  method  getSolution()  [FE]        AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]      int  baseRow  =  columnLabels.indexOf(   "base   "  +  i);  int  baseRow  =  columnLabels.indexOf( ",base   "  +  i);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	        int    baseRow    =    columnLabels.indexOf(   "base   "    +    i);    int  baseRow  =  columnLabels.indexOf( ",base   "  +  i);	  	non-compiled	[CE]  variable  baseRow  is  already  defined  in  method  getSolution()	26	None	add
89	[BUG]  [BUGGY]  Integer[]  basicRows  =  getBasicRows(colIndex,  coefficients);  [CE]  variable  basicRows  is  already  defined  in  method  getSolution()  [FE]          AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  Integer[]  basicRows  =  getBasicRows(colIndex,  coefficients);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	Integer[]  basicRows  =  getBasicRows(colIndex,  coefficients);	      Integer[]    basicRows    =    getBasicRows(colIndex);    	non-compiled	[CE]  variable  basicRows  is  already  defined  in  method  getSolution()	25	None	replace
90	[BUG]  [BUGGY]  Integer[]  basicRows  =  getBasicRows(colIndex,  coefficients.length);  [CE]  variable  basicRows  is  already  defined  in  method  getSolution()  [FE]            AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  Integer[]  basicRows  =  getBasicRows(colIndex,  coefficients.length);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	Integer[]  basicRows  =  getBasicRows(colIndex,  coefficients.length);	      Integer[]    basicRows    =    getBasicRows(colIndex);    	non-compiled	[CE]  variable  basicRows  is  already  defined  in  method  getSolution()	25	None	replace
91	[BUG]  [BUGGY]  Integer[]  basicRows  =  getBasicRows(colIndex,  mostNegative);  [CE]  variable  basicRows  is  already  defined  in  method  getSolution()  [FE]              AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  Integer[]  basicRows  =  getBasicRows(colIndex,  mostNegative);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	Integer[]  basicRows  =  getBasicRows(colIndex,  mostNegative);	      Integer[]    basicRows    =    getBasicRows(colIndex);    	non-compiled	[CE]  variable  basicRows  is  already  defined  in  method  getSolution()	25	None	replace
92	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  =  1  +  colIndex;  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	coefficients[i]  =  1  +  colIndex;	  coefficients[i]    =    0    +    colIndex;    	compilable	  [FE]  AssertionError  	15	1	replace
93	[BUG]  [BUGGY]  coefficients[i]  =  1  +  colIndex;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  =  1  +  colIndex;  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	coefficients[i]  =  1  +  colIndex;	  coefficients[i]    =    0    +    colIndex;    	compilable	  [FE]  AssertionError  	15	1	replace
94	[BUG]  [BUGGY]      int  baseRow  =  columnLabels.indexOf(   "base   "  +  i);  Integer  baseRow  =  columnLabels.indexOf( "base   "  +  i);  [CE]  variable  baseRow  is  already  defined  in  method  getSolution()  [FE]    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]      int  baseRow  =  columnLabels.indexOf(   "base   "  +  i);  Integer  baseRow  =  columnLabels.indexOf( "base   "  +  i);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	        int    baseRow    =    columnLabels.indexOf(   "base   "    +    i);    Integer  baseRow  =  columnLabels.indexOf( "base   "  +  i);	  	non-compiled	[CE]  variable  baseRow  is  already  defined  in  method  getSolution()	26	None	add
95	[BUG]  [BUGGY]  int  colIndex  =  columnLabels.indexOf( "x   "  +  i  +  1);  [CE]  variable  colIndex  is  already  defined  in  method  getSolution()  [FE]          AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  colIndex  =  columnLabels.indexOf( "x   "  +  i  +  1);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	int  colIndex  =  columnLabels.indexOf( "x   "  +  i  +  1);	      int    colIndex    =    columnLabels.indexOf(   "x   "    +    i);    	non-compiled	[CE]  variable  colIndex  is  already  defined  in  method  getSolution()	10	None	replace
96	[BUG]  [BUGGY]  int  columnRow  =  getColumnRow(colIndex,  i);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  columnRow  =  getColumnRow(colIndex,  i);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	int  columnRow  =  getColumnRow(colIndex,  i);	      int    columnRow    =    getColumnRow(colIndex);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
97	[BUG]  [BUGGY]  coefficients[i]  =  colIndex;  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  [CE]  variable  colIndex  is  already  defined  in  method  getSolution()  [FE]    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  =  colIndex;  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	coefficients[i]    =    colIndex;    int  colIndex  =  columnLabels.indexOf( "x "  +  i);	  	non-compiled	[CE]  variable  colIndex  is  already  defined  in  method  getSolution()	1	None	add
98	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  colRow  =  columnLabels.indexOf( "x   "  +  colIndex);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	int  colRow  =  columnLabels.indexOf( "x   "  +  colIndex);	      int    colRow    =    columnLabels.indexOf(   "x   "    +    i);    	compilable	  [FE]  AssertionError  	19	1	replace
99	[BUG]  [BUGGY]  int  colRow  =  columnLabels.indexOf( "x   "  +  colIndex);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  colRow  =  columnLabels.indexOf( "x   "  +  colIndex);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	int  colRow  =  columnLabels.indexOf( "x   "  +  colIndex);	      int    colRow    =    columnLabels.indexOf(   "x   "    +    i);    	compilable	  [FE]  AssertionError  	19	1	replace
100	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  colRow  =  columnLabels.indexOf( "x   "  +  i  +  1);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	int  colRow  =  columnLabels.indexOf( "x   "  +  i  +  1);	      int    colRow    =    columnLabels.indexOf(   "x   "    +    i);    	compilable	  [FE]  AssertionError  	19	1	replace
101	[BUG]  [BUGGY]  int  colRow  =  columnLabels.indexOf( "x   "  +  i  +  1);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  colRow  =  columnLabels.indexOf( "x   "  +  i  +  1);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	int  colRow  =  columnLabels.indexOf( "x   "  +  i  +  1);	      int    colRow    =    columnLabels.indexOf(   "x   "    +    i);    	compilable	  [FE]  AssertionError  	19	1	replace
102	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    OutOfRangeException    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  baseRow  =  getBasicRow(i);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	int  baseRow  =  getBasicRow(i);	      int    baseRow    =    getBasicRow(colIndex);    	compilable	  [FE]  NullPointerException  	24	3	replace
103	[BUG]  [BUGGY]  int  baseRow  =  getBasicRow(i);  [FE]  NullPointerException  [FE]    OutOfRangeException    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  baseRow  =  getBasicRow(i);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	int  baseRow  =  getBasicRow(i);	      int    baseRow    =    getBasicRow(colIndex);    	compilable	  [FE]  NullPointerException  	24	3	replace
104	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  baseRow  =  columnLabels.indexOf( "base[ "  +  i);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	int  baseRow  =  columnLabels.indexOf( "base[ "  +  i);	      int    baseRow    =    columnLabels.indexOf(   "base   "    +    i);    	compilable	  [FE]  AssertionError  	27	1	replace
105	[BUG]  [BUGGY]  int  baseRow  =  columnLabels.indexOf( "base[ "  +  i);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  baseRow  =  columnLabels.indexOf( "base[ "  +  i);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	int  baseRow  =  columnLabels.indexOf( "base[ "  +  i);	      int    baseRow    =    columnLabels.indexOf(   "base   "    +    i);    	compilable	  [FE]  AssertionError  	27	1	replace
106	[BUG]  [BUGGY]  coefficients[i]  =  1;  Coefficients[i]  =  1;  [CE]  cannot  find  symbol  Coefficients  [FE]    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  =  1;  Coefficients[i]  =  1;  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	coefficients[i]    =    1;    Coefficients[i]  =  1;	  	non-compiled	[CE]  cannot  find  symbol  Coefficients	3	None	add
107	[BUG]  [BUGGY]  coefficients[i]  =  1;  int  i]  =  1;  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  =  1;  int  i]  =  1;  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	coefficients[i]    =    1;    int  i]  =  1;	  	non-compiled	[CE]  ';'  expected	3	None	add
108	[BUG]  [BUGGY]      if(colIndex  ==  colColumn)  {  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicVariable  baseRow  =  getBasicRow(i);  if(baseRow!=  null  &&  baseRow.equals(baseRow  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]      if(colIndex  ==  colColumn)  {  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicVariable  baseRow  =  getBasicRow(i);  if(baseRow!=  null  &&  baseRow.equals(baseRow  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	        if(colIndex  ==  colColumn)  {  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicVariable  baseRow  =  getBasicRow(i);  if(baseRow!=  null  &&  baseRow.equals(baseRow	  	non-compiled	[CE]  ')'  expected	7	None	add
109	[BUG]  [BUGGY]      if(colIndex  ==  colColumn)  {  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicVariable  baseRow  =  getBasicRow(i);  if(baseRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]      if(colIndex  ==  colColumn)  {  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicVariable  baseRow  =  getBasicRow(i);  if(baseRow.contains(basicRow))  {  continue  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	        if(colIndex  ==  colColumn)  {  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicVariable  baseRow  =  getBasicRow(i);  if(baseRow.contains(basicRow))  {  continue	  	non-compiled	[CE]  ';'  expected	7	None	add
110	[BUG]  [BUGGY]      if(colIndex  ==  colColumn)  {  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicVariable  baseRow  =  getBasicRow(i);  if(baseRow!=  null  &&  baseRow.equals(basicRow  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]      if(colIndex  ==  colColumn)  {  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicVariable  baseRow  =  getBasicRow(i);  if(baseRow!=  null  &&  baseRow.equals(basicRow  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	        if(colIndex  ==  colColumn)  {  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicVariable  baseRow  =  getBasicRow(i);  if(baseRow!=  null  &&  baseRow.equals(basicRow	  	non-compiled	[CE]  ')'  expected	7	None	add
111	[BUG]  [BUGGY]      if(colIndex  ==  colColumn)  {  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicVariable  baseRow  =  getBasicRow(i);  if(baseRow!=  null  &&  baseRow.equals(basicR  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]      if(colIndex  ==  colColumn)  {  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicVariable  baseRow  =  getBasicRow(i);  if(baseRow!=  null  &&  baseRow.equals(basicR  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	        if(colIndex  ==  colColumn)  {  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicVariable  baseRow  =  getBasicRow(i);  if(baseRow!=  null  &&  baseRow.equals(basicR	  	non-compiled	[CE]  ')'  expected	7	None	add
112	[BUG]  [BUGGY]      if(colIndex  ==  colColumn)  {  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicVariable  baseRow  =  getBasicRow(i);  if(baseRow!=  null  &&  baseRow.contains(basicR  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]      if(colIndex  ==  colColumn)  {  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicVariable  baseRow  =  getBasicRow(i);  if(baseRow!=  null  &&  baseRow.contains(basicR  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	        if(colIndex  ==  colColumn)  {  for(int  i  =  0;  i  <  colIndex;  i++)  {  BasicVariable  baseRow  =  getBasicRow(i);  if(baseRow!=  null  &&  baseRow.contains(basicR	  	non-compiled	[CE]  ')'  expected	7	None	add
113	[BUG]  [BUGGY]      int  baseRow  =  getBasicRow(colIndex);  Int  baseRow  =  getBasicRow(colIndex);  [CE]  cannot  find  symbol  [FE]    OutOfRangeException    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]      int  baseRow  =  getBasicRow(colIndex);  Int  baseRow  =  getBasicRow(colIndex);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	        int    baseRow    =    getBasicRow(colIndex);    Int  baseRow  =  getBasicRow(colIndex);	  	non-compiled	[CE]  cannot  find  symbol	23	None	add
114	[BUG]  [BUGGY]  int  colIndex  =  columnLabels.indexOf( "yyyy-MM-dd'T'HH:mm:ss.SSS "  +  i);  [CE]  variable  colIndex  is  already  defined  in  method  getSolution()  [FE]                AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  colIndex  =  columnLabels.indexOf( "yyyy-MM-dd'T'HH:mm:ss.SSS "  +  i);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	int  colIndex  =  columnLabels.indexOf( "yyyy-MM-dd'T'HH:mm:ss.SSS "  +  i);	      int    colIndex    =    columnLabels.indexOf(   "y   "    +    i);    	non-compiled	[CE]  variable  colIndex  is  already  defined  in  method  getSolution()	22	None	replace
115	[BUG]  [BUGGY]  int  colIndex  =  columnLabels.indexOf( "yyyy-MM-dd  HH:mm:ss.SSS "  +  i);  [CE]  variable  colIndex  is  already  defined  in  method  getSolution()  [FE]                  AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  colIndex  =  columnLabels.indexOf( "yyyy-MM-dd  HH:mm:ss.SSS "  +  i);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	int  colIndex  =  columnLabels.indexOf( "yyyy-MM-dd  HH:mm:ss.SSS "  +  i);	      int    colIndex    =    columnLabels.indexOf(   "y   "    +    i);    	non-compiled	[CE]  variable  colIndex  is  already  defined  in  method  getSolution()	22	None	replace
116	[BUG]  [BUGGY]  Integer[]  basicRows  =  getBasicRows(i,  colIndex);  [CE]  variable  basicRows  is  already  defined  in  method  getSolution()  [FE]          AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  Integer[]  basicRows  =  getBasicRows(i,  colIndex);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	Integer[]  basicRows  =  getBasicRows(i,  colIndex);	      Integer[]    basicRows    =    getBasicRows(colIndex);    	non-compiled	[CE]  variable  basicRows  is  already  defined  in  method  getSolution()	25	None	replace
117	[BUG]  [BUGGY]  Integer[]  basicRows  =  getBasicRows(colIndex  +  1);  [CE]  variable  basicRows  is  already  defined  in  method  getSolution()  [FE]            AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  Integer[]  basicRows  =  getBasicRows(colIndex  +  1);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	Integer[]  basicRows  =  getBasicRows(colIndex  +  1);	      Integer[]    basicRows    =    getBasicRows(colIndex);    	non-compiled	[CE]  variable  basicRows  is  already  defined  in  method  getSolution()	25	None	replace
118	[BUG]  [BUGGY]  coefficients[i]  =  -1;  int  i]  =  -1;  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  =  -1;  int  i]  =  -1;  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	coefficients[i]    =    -1;    int  i]  =  -1;	  	non-compiled	[CE]  ';'  expected	5	None	add
119	[BUG]  [BUGGY]  coefficients[i]  =  1;  int  colIndex  =  columnLabels.indexOf( "y   "  +  i);  [CE]  variable  colIndex  is  already  defined  in  method  getSolution()  [FE]    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  =  1;  int  colIndex  =  columnLabels.indexOf( "y   "  +  i);  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	coefficients[i]    =    1;    int  colIndex  =  columnLabels.indexOf( "y   "  +  i);	  	non-compiled	[CE]  variable  colIndex  is  already  defined  in  method  getSolution()	3	None	add
120	[BUG]  [BUGGY]  int  colIndex  =  columnLabels.indexOf( ".columns "  +  i);  [CE]  variable  colIndex  is  already  defined  in  method  getSolution()  [FE]                AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  colIndex  =  columnLabels.indexOf( ".columns "  +  i);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	int  colIndex  =  columnLabels.indexOf( ".columns "  +  i);	      int    colIndex    =    columnLabels.indexOf(   "y   "    +    i);    	non-compiled	[CE]  variable  colIndex  is  already  defined  in  method  getSolution()	22	None	replace
121	[BUG]  [BUGGY]  int  colIndex  =  columnLabels.indexOf( ".s.y "  +  i);  [CE]  variable  colIndex  is  already  defined  in  method  getSolution()  [FE]                  AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  colIndex  =  columnLabels.indexOf( ".s.y "  +  i);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	int  colIndex  =  columnLabels.indexOf( ".s.y "  +  i);	      int    colIndex    =    columnLabels.indexOf(   "y   "    +    i);    	non-compiled	[CE]  variable  colIndex  is  already  defined  in  method  getSolution()	22	None	replace
122	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue;  }  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	for(int  i  =  0;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue;  }	      for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
123	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  =  colIndex;  colIndex  =  colIndex;  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	coefficients[i]    =    colIndex;    colIndex  =  colIndex;	  	compilable	  [FE]  AssertionError  	1	1	add
124	[BUG]  [BUGGY]  coefficients[i]  =  colIndex;  colIndex  =  colIndex;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  =  colIndex;  colIndex  =  colIndex;  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	coefficients[i]    =    colIndex;    colIndex  =  colIndex;	  	compilable	  [FE]  AssertionError  	1	1	add
125	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  =  0  +  basicRows.size();  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	coefficients[i]  =  0  +  basicRows.size();	  coefficients[i]    =    0    +    colIndex;    	compilable	  [FE]  AssertionError  	15	2	replace
126	[BUG]  [BUGGY]  coefficients[i]  =  0  +  basicRows.size();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  coefficients[i]  =  0  +  basicRows.size();  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	coefficients[i]  =  0  +  basicRows.size();	  coefficients[i]    =    0    +    colIndex;    	compilable	  [FE]  AssertionError  	15	2	replace
127	[BUG]  [BUGGY]  Integer[]  basicRows  =  getBasicRows(colIndex,  basicRows);  [CE]  variable  basicRows  is  already  defined  in  method  getSolution()  [FE]          AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  Integer[]  basicRows  =  getBasicRows(colIndex,  basicRows);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	Integer[]  basicRows  =  getBasicRows(colIndex,  basicRows);	      Integer[]    basicRows    =    getBasicRows(colIndex);    	non-compiled	[CE]  variable  basicRows  is  already  defined  in  method  getSolution()	25	None	replace
128	[BUG]  [BUGGY]  Integer[]  basicRows  =  getBasicColumns();  [CE]  variable  basicRows  is  already  defined  in  method  getSolution()  [FE]              AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  Integer[]  basicRows  =  getBasicColumns();  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	Integer[]  basicRows  =  getBasicColumns();	      Integer[]    basicRows    =    getBasicRows();    	non-compiled	[CE]  variable  basicRows  is  already  defined  in  method  getSolution()	28	None	replace
129	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  colRow  =  columnLabels.indexOf( ".s.IFJDCS ".charAt(colIndex));  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	int  colRow  =  columnLabels.indexOf( ".s.IFJDCS ".charAt(colIndex));	      int    colRow    =    columnLabels.indexOf(   "x   "    +    i);    	compilable	  [FE]  StringIndexOutOfBoundsException  	19	3	replace
130	[BUG]  [BUGGY]  int  colRow  =  columnLabels.indexOf( ".s.IFJDCS ".charAt(colIndex));  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  colRow  =  columnLabels.indexOf( ".s.IFJDCS ".charAt(colIndex));  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	int  colRow  =  columnLabels.indexOf( ".s.IFJDCS ".charAt(colIndex));	      int    colRow    =    columnLabels.indexOf(   "x   "    +    i);    	compilable	  [FE]  StringIndexOutOfBoundsException  	19	3	replace
131	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  colRow  =  columnLabels.indexOf( ".s.IFJDCS ".charAt(i));  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	int  colRow  =  columnLabels.indexOf( ".s.IFJDCS ".charAt(i));	      int    colRow    =    columnLabels.indexOf(   "x   "    +    i);    	compilable	  [FE]  AssertionError  	19	1	replace
132	[BUG]  [BUGGY]  int  colRow  =  columnLabels.indexOf( ".s.IFJDCS ".charAt(i));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  colRow  =  columnLabels.indexOf( ".s.IFJDCS ".charAt(i));  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	int  colRow  =  columnLabels.indexOf( ".s.IFJDCS ".charAt(i));	      int    colRow    =    columnLabels.indexOf(   "x   "    +    i);    	compilable	  [FE]  AssertionError  	19	1	replace
133	[BUG]  [BUGGY]      for(int  i  =  0,  colIndex  =  basicRows.size();  i  <  colIndex;  ++i)  {  BasicVariable  baseRow  =  basicRows[i];  if(baseRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]      for(int  i  =  0,  colIndex  =  basicRows.size();  i  <  colIndex;  ++i)  {  BasicVariable  baseRow  =  basicRows[i];  if(baseRow.contains(basicRow))  {  continue  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	        for(int  i  =  0,  colIndex  =  basicRows.size();  i  <  colIndex;  ++i)  {  BasicVariable  baseRow  =  basicRows[i];  if(baseRow.contains(basicRow))  {  continue	  	non-compiled	[CE]  ';'  expected	7	None	add
134	[BUG]  [BUGGY]      for(int  i  =  0,  colIndex  =  basicRows.size();  i  <  colIndex;  ++i)  {  BasicVariable  baseRow  =  basicRows[i];  if(baseRow.contains(basicRow))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]      for(int  i  =  0,  colIndex  =  basicRows.size();  i  <  colIndex;  ++i)  {  BasicVariable  baseRow  =  basicRows[i];  if(baseRow.contains(basicRow))  {  continue;  }  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	        for(int  i  =  0,  colIndex  =  basicRows.size();  i  <  colIndex;  ++i)  {  BasicVariable  baseRow  =  basicRows[i];  if(baseRow.contains(basicRow))  {  continue;  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
135	[BUG]  [BUGGY]      for(int  i  =  0,  colIndex  =  basicRows.size();  i  <  colIndex;  ++i)  {  BasicVariable  baseRow  =  basicRows.get(i);  if(baseRow!=  null  &&  baseRow.contains(basicRow)  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]      for(int  i  =  0,  colIndex  =  basicRows.size();  i  <  colIndex;  ++i)  {  BasicVariable  baseRow  =  basicRows.get(i);  if(baseRow!=  null  &&  baseRow.contains(basicRow)  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	        for(int  i  =  0,  colIndex  =  basicRows.size();  i  <  colIndex;  ++i)  {  BasicVariable  baseRow  =  basicRows.get(i);  if(baseRow!=  null  &&  baseRow.contains(basicRow)	  	non-compiled	[CE]  ')'  expected	7	None	add
136	[BUG]  [BUGGY]      for(int  i  =  0,  colIndex  =  basicRows.size();  i  <  colIndex;  ++i)  {  BasicVariable  baseRow  =  basicRows[i];  if(baseRow.contains(basicRow))  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]      for(int  i  =  0,  colIndex  =  basicRows.size();  i  <  colIndex;  ++i)  {  BasicVariable  baseRow  =  basicRows[i];  if(baseRow.contains(basicRow))  {  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	        for(int  i  =  0,  colIndex  =  basicRows.size();  i  <  colIndex;  ++i)  {  BasicVariable  baseRow  =  basicRows[i];  if(baseRow.contains(basicRow))  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
137	[BUG]  [BUGGY]      for(int  i  =  0,  colIndex  =  basicRows.size();  i  <  colIndex;  ++i)  {  BasicVariable  baseRow  =  basicRows[i].getBasicVar(baseColumn);  if(baseRow.contains(basicRow)  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]      for(int  i  =  0,  colIndex  =  basicRows.size();  i  <  colIndex;  ++i)  {  BasicVariable  baseRow  =  basicRows[i].getBasicVar(baseColumn);  if(baseRow.contains(basicRow)  [BUGGY]    continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	        for(int  i  =  0,  colIndex  =  basicRows.size();  i  <  colIndex;  ++i)  {  BasicVariable  baseRow  =  basicRows[i].getBasicVar(baseColumn);  if(baseRow.contains(basicRow)	  	non-compiled	[CE]  ')'  expected	7	None	add
138	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  for(int  i  =  1;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	for(int  i  =  1;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {	      for(int    i    =    colIndex;    i    <    columns.length;    i++)    {    BasicMatrix    basicRow    =    getBasicMatrix(i);    if(basicRow!=    null    &&    basicRow.contains(basicRow))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
139	[BUG]  [BUGGY]      Integer  basicRow  =  getBasicRow(colIndex);  Integer  basicRow  =  getBasicColumn(colIndex);  [CE]  variable  basicRow  is  already  defined  in  method  getSolution()  [FE]    OutOfRangeException    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]      Integer  basicRow  =  getBasicRow(colIndex);  Integer  basicRow  =  getBasicColumn(colIndex);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	        Integer    basicRow    =    getBasicRow(colIndex);    Integer  basicRow  =  getBasicColumn(colIndex);	  	non-compiled	[CE]  variable  basicRow  is  already  defined  in  method  getSolution()	16	None	add
140	[BUG]  [BUGGY]      Integer  basicRow  =  getBasicRow(colIndex);  int  basicRow  =  getBasicRow(colIndex);  [CE]  variable  basicRow  is  already  defined  in  method  getSolution()  [FE]      OutOfRangeException    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]      Integer  basicRow  =  getBasicRow(colIndex);  int  basicRow  =  getBasicRow(colIndex);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	        Integer    basicRow    =    getBasicRow(colIndex);    int  basicRow  =  getBasicRow(colIndex);	  	non-compiled	[CE]  variable  basicRow  is  already  defined  in  method  getSolution()	16	None	add
141	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  Integer  baseRow  =  getBasicRow(colIndex);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	Integer  baseRow  =  getBasicRow(colIndex);	      int    baseRow    =    getBasicRow(colIndex);    	compilable	  [FE]  OutOfRangeException  	24	3	replace
142	[BUG]  [BUGGY]  Integer  baseRow  =  getBasicRow(colIndex);  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  Integer  baseRow  =  getBasicRow(colIndex);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	Integer  baseRow  =  getBasicRow(colIndex);	      int    baseRow    =    getBasicRow(colIndex);    	compilable	  [FE]  OutOfRangeException  	24	3	replace
143	[BUG]  [BUGGY]  int  baseRow  =  basicRows.indexOf( "base   "  +  i);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf(   "x   "  +  i);  if  (colIndex  <  0)  {    [BUGGY]  int  baseRow  =  basicRows.indexOf( "base   "  +  i);  [BUGGY]    coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	int  baseRow  =  basicRows.indexOf( "base   "  +  i);	      int    baseRow    =    columnLabels.indexOf(   "base   "    +    i);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
