bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  [BUGGY]  coefficients[i]  =  colIndex;  [BUGGY]  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	coefficients[i]  =  colIndex;	coefficients[i]  =  0;  	compilable	  [FE]  AssertionError  	1	3	replace
2	[BUG]  [BUGGY]  coefficients[i]  =  colIndex;  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  [BUGGY]  coefficients[i]  =  colIndex;  [BUGGY]  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	coefficients[i]  =  colIndex;	coefficients[i]  =  0;  	compilable	  [FE]  AssertionError  	1	3	replace
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  [BUGGY]  coefficients[i]  =  1;  [BUGGY]  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	coefficients[i]  =  1;	coefficients[i]  =  0;  	compilable	  [FE]  AssertionError  	1	2	replace
4	[BUG]  [BUGGY]  coefficients[i]  =  1;  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  [BUGGY]  coefficients[i]  =  1;  [BUGGY]  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	coefficients[i]  =  1;	coefficients[i]  =  0;  	compilable	  [FE]  AssertionError  	1	2	replace
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  [BUGGY]  coefficients[i]  =  -1;  [BUGGY]  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	coefficients[i]  =  -1;	coefficients[i]  =  0;  	compilable	  [FE]  AssertionError  	1	3	replace
6	[BUG]  [BUGGY]  coefficients[i]  =  -1;  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  [BUGGY]  coefficients[i]  =  -1;  [BUGGY]  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	coefficients[i]  =  -1;	coefficients[i]  =  0;  	compilable	  [FE]  AssertionError  	1	3	replace
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError  [CONTEXT]  protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  [BUGGY]    [BUGGY]  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	  	coefficients[i]  =  0;  	compilable	  [FE]  AssertionError  	1	1	replace
8	[BUG]  [BUGGY]    [FE]  AssertionError  [FE]          AssertionError  [CONTEXT]  protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  [BUGGY]    [BUGGY]  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	  	coefficients[i]  =  0;  	compilable	  [FE]  AssertionError  	1	1	replace
9	[BUG]  [BUGGY]    for(int  i  =  colIndex;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue;  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  [BUGGY]    for(int  i  =  colIndex;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue;  [BUGGY]  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	    for(int  i  =  colIndex;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue;		non-compiled	[CE]  illegal  start  of  expression	2	None	add
10	[BUG]  [BUGGY]    int  colIndex  =  columnLabels.indexOf( "x "  +  i);  [CE]  variable  colIndex  is  already  defined  in  method  getSolution()  [FE]      AssertionError  [CONTEXT]  protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  [BUGGY]    int  colIndex  =  columnLabels.indexOf( "x "  +  i);  [BUGGY]  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	    int  colIndex  =  columnLabels.indexOf( "x "  +  i);		non-compiled	[CE]  variable  colIndex  is  already  defined  in  method  getSolution()	2	None	add
11	[BUG]  [BUGGY]    for(int  i  =  colIndex;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue  [CE]  ';'  expected  [FE]        AssertionError  [CONTEXT]  protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  [BUGGY]    for(int  i  =  colIndex;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue  [BUGGY]  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	    for(int  i  =  colIndex;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue		non-compiled	[CE]  ';'  expected	2	None	add
12	[BUG]  [BUGGY]    for(int  i  =  colIndex;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  [CE]  illegal  start  of  expression  [FE]          AssertionError  [CONTEXT]  protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  [BUGGY]    for(int  i  =  colIndex;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  [BUGGY]  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	    for(int  i  =  colIndex;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {		non-compiled	[CE]  illegal  start  of  expression	2	None	add
13	[BUG]  [BUGGY]    for(int  i  =  colIndex;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError  [CONTEXT]  protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  [BUGGY]    for(int  i  =  colIndex;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue;  }  [BUGGY]  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	    for(int  i  =  colIndex;  i  <  columns.length;  i++)  {  BasicMatrix  basicRow  =  getBasicMatrix(i);  if(basicRow!=  null  &&  basicRow.contains(basicRow))  {  continue;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  [BUGGY]  coefficients[i]  =  0  +  colIndex;  [BUGGY]  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	coefficients[i]  =  0  +  colIndex;	coefficients[i]  =  0;  	compilable	  [FE]  AssertionError  	1	3	replace
15	[BUG]  [BUGGY]  coefficients[i]  =  0  +  colIndex;  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  [BUGGY]  coefficients[i]  =  0  +  colIndex;  [BUGGY]  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	coefficients[i]  =  0  +  colIndex;	coefficients[i]  =  0;  	compilable	  [FE]  AssertionError  	1	3	replace
16	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError  [CONTEXT]  protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  [BUGGY]    Integer  basicRow  =  getBasicRow(colIndex);  [BUGGY]  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	    Integer  basicRow  =  getBasicRow(colIndex);		compilable	  [FE]  OutOfRangeException  	2	3	add
17	[BUG]  [BUGGY]    Integer  basicRow  =  getBasicRow(colIndex);  [FE]  OutOfRangeException  [FE]    AssertionError  [CONTEXT]  protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  [BUGGY]    Integer  basicRow  =  getBasicRow(colIndex);  [BUGGY]  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	    Integer  basicRow  =  getBasicRow(colIndex);		compilable	  [FE]  OutOfRangeException  	2	3	add
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  [BUGGY]    int  colRow  =  columnLabels.indexOf( "x "  +  i);  [BUGGY]  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	    int  colRow  =  columnLabels.indexOf( "x "  +  i);		compilable	  [FE]  AssertionError  	2	1	add
19	[BUG]  [BUGGY]    int  colRow  =  columnLabels.indexOf( "x "  +  i);  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  [BUGGY]    int  colRow  =  columnLabels.indexOf( "x "  +  i);  [BUGGY]  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	    int  colRow  =  columnLabels.indexOf( "x "  +  i);		compilable	  [FE]  AssertionError  	2	1	add
20	[BUG]  [BUGGY]    int  columnRow  =  getColumnRow(colIndex);  [CE]  cannot  find  symbol  [FE]        AssertionError  [CONTEXT]  protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  [BUGGY]    int  columnRow  =  getColumnRow(colIndex);  [BUGGY]  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	    int  columnRow  =  getColumnRow(colIndex);		non-compiled	[CE]  cannot  find  symbol	2	None	add
21	[BUG]  [BUGGY]    int  colRow  =  getColumnRow(colIndex);  [CE]  cannot  find  symbol  [FE]          AssertionError  [CONTEXT]  protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  [BUGGY]    int  colRow  =  getColumnRow(colIndex);  [BUGGY]  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	    int  colRow  =  getColumnRow(colIndex);		non-compiled	[CE]  cannot  find  symbol	2	None	add
22	[BUG]  [BUGGY]    int  colIndex  =  columnLabels.indexOf( "y "  +  i);  [CE]  variable  colIndex  is  already  defined  in  method  getSolution()  [FE]            AssertionError  [CONTEXT]  protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  [BUGGY]    int  colIndex  =  columnLabels.indexOf( "y "  +  i);  [BUGGY]  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	    int  colIndex  =  columnLabels.indexOf( "y "  +  i);		non-compiled	[CE]  variable  colIndex  is  already  defined  in  method  getSolution()	2	None	add
23	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError  [CONTEXT]  protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  [BUGGY]    int  baseRow  =  getBasicRow(colIndex);  [BUGGY]  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	    int  baseRow  =  getBasicRow(colIndex);		compilable	  [FE]  OutOfRangeException  	2	3	add
24	[BUG]  [BUGGY]    int  baseRow  =  getBasicRow(colIndex);  [FE]  OutOfRangeException  [FE]    AssertionError  [CONTEXT]  protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  [BUGGY]    int  baseRow  =  getBasicRow(colIndex);  [BUGGY]  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	    int  baseRow  =  getBasicRow(colIndex);		compilable	  [FE]  OutOfRangeException  	2	3	add
25	[BUG]  [BUGGY]    Integer[]  basicRows  =  getBasicRows(colIndex);  [CE]  variable  basicRows  is  already  defined  in  method  getSolution()  [FE]      AssertionError  [CONTEXT]  protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  [BUGGY]    Integer[]  basicRows  =  getBasicRows(colIndex);  [BUGGY]  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	    Integer[]  basicRows  =  getBasicRows(colIndex);		non-compiled	[CE]  variable  basicRows  is  already  defined  in  method  getSolution()	2	None	add
26	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  [BUGGY]    int  baseRow  =  columnLabels.indexOf( "base "  +  i);  [BUGGY]  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	    int  baseRow  =  columnLabels.indexOf( "base "  +  i);		compilable	  [FE]  AssertionError  	2	1	add
27	[BUG]  [BUGGY]    int  baseRow  =  columnLabels.indexOf( "base "  +  i);  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  [BUGGY]    int  baseRow  =  columnLabels.indexOf( "base "  +  i);  [BUGGY]  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	    int  baseRow  =  columnLabels.indexOf( "base "  +  i);		compilable	  [FE]  AssertionError  	2	1	add
28	[BUG]  [BUGGY]    Integer[]  basicRows  =  getBasicRows();  [CE]  variable  basicRows  is  already  defined  in  method  getSolution()  [FE]          AssertionError  [CONTEXT]  protected  PointValuePair  getSolution()  {  int  negativeVarColumn  =  columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);  Integer  negativeVarBasicRow  =  negativeVarColumn  >  0  ?  getBasicRow(negativeVarColumn)  :  null;  double  mostNegative  =  negativeVarBasicRow  ==  null  ?  0  :  getEntry(negativeVarBasicRow,  getRhsOffset());  Set<Integer>  basicRows  =  new  HashSet<Integer>();  double[]  coefficients  =  new  double[getOriginalNumDecisionVariables()];  for  (int  i  =  0;  i  <  coefficients.length;  i++)  {  int  colIndex  =  columnLabels.indexOf( "x "  +  i);  if  (colIndex  <  0)  {  [BUGGY]    Integer[]  basicRows  =  getBasicRows();  [BUGGY]  coefficients[i]  =  0;  continue;  }  Integer  basicRow  =  getBasicRow(colIndex);  if  (basicRow  !=  null  &&  basicRow  ==  0)  {    coefficients[i]  =  0;  }  else  if  (basicRows.contains(basicRow))  {  [CLASS]  SimplexTableau  [METHOD]  getSolution  [RETURN_TYPE]  PointValuePair  [VARIABLES]  Integer  basicRow  negativeVarBasicRow  boolean  maximize  restrictToNonNegative  Set  basicRows  RealMatrix  tableau  double[]  coefficients  double  coefficient  entry  epsilon  mostNegative  sum  LinearObjectiveFunction  f  List  columnLabels  columnsToDrop  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  col  colIndex  count  height  i  j  maxUlps  negativeVarColumn  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	    Integer[]  basicRows  =  getBasicRows();		non-compiled	[CE]  variable  basicRows  is  already  defined  in  method  getSolution()	2	None	add
