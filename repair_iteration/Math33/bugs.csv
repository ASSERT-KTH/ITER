bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] coefficients[i] = 0; [FE] AssertionError [CONTEXT] protected PointValuePair getSolution() { int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL); Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null; double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); Set<Integer> basicRows = new HashSet<Integer>(); double[] coefficients = new double[getOriginalNumDecisionVariables()]; for (int i = 0; i < coefficients.length; i++) { int colIndex = columnLabels.indexOf("x" + i); if (colIndex < 0) { [BUGGY] coefficients[i] = 0; [BUGGY] continue; } Integer basicRow = getBasicRow(colIndex); if (basicRow != null && basicRow == 0) {    coefficients[i] = 0; } else if (basicRows.contains(basicRow)) {  [CLASS] SimplexTableau [METHOD] getSolution [RETURN_TYPE] PointValuePair  [VARIABLES] Integer basicRow negativeVarBasicRow boolean maximize restrictToNonNegative Set basicRows RealMatrix tableau double[] coefficients double coefficient entry epsilon mostNegative sum LinearObjectiveFunction f List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col colIndex count height i j maxUlps negativeVarColumn numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	replace	
2	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected PointValuePair getSolution() { int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL); Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null; double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); Set<Integer> basicRows = new HashSet<Integer>(); double[] coefficients = new double[getOriginalNumDecisionVariables()]; for (int i = 0; i < coefficients.length; i++) { int colIndex = columnLabels.indexOf("x" + i); if (colIndex < 0) { [BUGGY] [BUGGY] coefficients[i] = 0; continue; } Integer basicRow = getBasicRow(colIndex); if (basicRow != null && basicRow == 0) {    coefficients[i] = 0; } else if (basicRows.contains(basicRow)) {  [CLASS] SimplexTableau [METHOD] getSolution [RETURN_TYPE] PointValuePair  [VARIABLES] Integer basicRow negativeVarBasicRow boolean maximize restrictToNonNegative Set basicRows RealMatrix tableau double[] coefficients double coefficient entry epsilon mostNegative sum LinearObjectiveFunction f List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col colIndex count height i j maxUlps negativeVarColumn numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	406	406	1	add	
3	[BUG] [BUGGY] continue; [FE] AssertionError [CONTEXT] int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL); Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null; double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); Set<Integer> basicRows = new HashSet<Integer>(); double[] coefficients = new double[getOriginalNumDecisionVariables()]; for (int i = 0; i < coefficients.length; i++) { int colIndex = columnLabels.indexOf("x" + i); if (colIndex < 0) { coefficients[i] = 0; [BUGGY] continue; [BUGGY] } Integer basicRow = getBasicRow(colIndex); if (basicRow != null && basicRow == 0) {    coefficients[i] = 0; } else if (basicRows.contains(basicRow)) {   [CLASS] SimplexTableau [METHOD] getSolution [RETURN_TYPE] PointValuePair  [VARIABLES] Integer basicRow negativeVarBasicRow boolean maximize restrictToNonNegative Set basicRows RealMatrix tableau double[] coefficients double coefficient entry epsilon mostNegative sum LinearObjectiveFunction f List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col colIndex count height i j maxUlps negativeVarColumn numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	replace	
4	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL); Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null; double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); Set<Integer> basicRows = new HashSet<Integer>(); double[] coefficients = new double[getOriginalNumDecisionVariables()]; for (int i = 0; i < coefficients.length; i++) { int colIndex = columnLabels.indexOf("x" + i); if (colIndex < 0) { coefficients[i] = 0; [BUGGY] [BUGGY] continue; } Integer basicRow = getBasicRow(colIndex); if (basicRow != null && basicRow == 0) {    coefficients[i] = 0; } else if (basicRows.contains(basicRow)) {   [CLASS] SimplexTableau [METHOD] getSolution [RETURN_TYPE] PointValuePair  [VARIABLES] Integer basicRow negativeVarBasicRow boolean maximize restrictToNonNegative Set basicRows RealMatrix tableau double[] coefficients double coefficient entry epsilon mostNegative sum LinearObjectiveFunction f List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col colIndex count height i j maxUlps negativeVarColumn numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5773502691896258	407	407	1	add	
5	[BUG] [BUGGY] columnsToDrop.add(i); [FE] AssertionError [CONTEXT] return; } List<Integer> columnsToDrop = new ArrayList<Integer>(); columnsToDrop.add(0);  for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { [BUGGY] columnsToDrop.add(i); [BUGGY] } }  for (int i = 0; i < getNumArtificialVariables(); i++) { int col = i + getArtificialVariableOffset(); if (getBasicRow(col) == null) { columnsToDrop.add(col); } } [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	replace	
6	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] return; } List<Integer> columnsToDrop = new ArrayList<Integer>(); columnsToDrop.add(0);  for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { [BUGGY] [BUGGY] columnsToDrop.add(i); } }  for (int i = 0; i < getNumArtificialVariables(); i++) { int col = i + getArtificialVariableOffset(); if (getBasicRow(col) == null) { columnsToDrop.add(col); } } [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.5	339	339	1	add	
7	[BUG] [BUGGY] return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),   constraint.getRelationship().oppositeRelationship(),     -1 * constraint.getValue()); [FE] AssertionError [CONTEXT] private LinearConstraint normalize(final LinearConstraint constraint) { if (constraint.getValue() < 0) { [BUGGY] return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1 * constraint.getValue()); [BUGGY] constraint.getRelationship().oppositeRelationship(), -1 * constraint.getValue()); } return new LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue()); } [CLASS] SimplexTableau [METHOD] normalize [RETURN_TYPE] LinearConstraint  LinearConstraint constraint [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double epsilon LinearObjectiveFunction f LinearConstraint constraint List columnLabels constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	
8	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private LinearConstraint normalize(final LinearConstraint constraint) { if (constraint.getValue() < 0) { [BUGGY] [BUGGY] return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1 * constraint.getValue()); constraint.getRelationship().oppositeRelationship(), -1 * constraint.getValue()); } return new LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue()); } [CLASS] SimplexTableau [METHOD] normalize [RETURN_TYPE] LinearConstraint  LinearConstraint constraint [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double epsilon LinearObjectiveFunction f LinearConstraint constraint List columnLabels constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	add	
9	[BUG] [BUGGY] columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL); [FE] AssertionError [CONTEXT] protected void initializeColumnLabels() { if (getNumObjectiveFunctions() == 2) { columnLabels.add("W"); } columnLabels.add("Z"); for (int i = 0; i < getOriginalNumDecisionVariables(); i++) { columnLabels.add("x" + i); } if (!restrictToNonNegative) { [BUGGY] columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL); [BUGGY] } for (int i = 0; i < getNumSlackVariables(); i++) { columnLabels.add("s" + i); } for (int i = 0; i < getNumArtificialVariables(); i++) { columnLabels.add("a" + i); } columnLabels.add("RHS"); } [CLASS] SimplexTableau [METHOD] initializeColumnLabels [RETURN_TYPE] void  [VARIABLES] boolean restrictToNonNegative RealMatrix tableau double epsilon LinearObjectiveFunction f List columnLabels constraints String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS i maxUlps numArtificialVariables numDecisionVariables numSlackVariables long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	replace	
10	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected void initializeColumnLabels() { if (getNumObjectiveFunctions() == 2) { columnLabels.add("W"); } columnLabels.add("Z"); for (int i = 0; i < getOriginalNumDecisionVariables(); i++) { columnLabels.add("x" + i); } if (!restrictToNonNegative) { [BUGGY] [BUGGY] columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL); } for (int i = 0; i < getNumSlackVariables(); i++) { columnLabels.add("s" + i); } for (int i = 0; i < getNumArtificialVariables(); i++) { columnLabels.add("a" + i); } columnLabels.add("RHS"); } [CLASS] SimplexTableau [METHOD] initializeColumnLabels [RETURN_TYPE] void  [VARIABLES] boolean restrictToNonNegative RealMatrix tableau double epsilon LinearObjectiveFunction f List columnLabels constraints String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS i maxUlps numArtificialVariables numDecisionVariables numSlackVariables long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	162	162	1	add	
11	[BUG] [BUGGY] matrix.setEntry(zIndex, getSlackVariableOffset() - 1, getInvertedCoefficientSum(objectiveCoefficients)); [FE] AssertionError [CONTEXT] } int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1; matrix.setEntry(zIndex, zIndex, maximize ? 1 : -1); RealVector objectiveCoefficients = maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients(); copyArray(objectiveCoefficients.toArray(), matrix.getDataRef()[zIndex]); matrix.setEntry(zIndex, width - 1, maximize ? f.getConstantTerm() : -1 * f.getConstantTerm()); if (!restrictToNonNegative) { [BUGGY] matrix.setEntry(zIndex, getSlackVariableOffset() - 1,    getInvertedCoefficientSum(objectiveCoefficients)); [BUGGY] getInvertedCoefficientSum(objectiveCoefficients)); }  int slackVar = 0; int artificialVar = 0; for (int i = 0; i < constraints.size(); i++) { LinearConstraint constraint = constraints.get(i); int row = getNumObjectiveFunctions() + i;  [CLASS] SimplexTableau [METHOD] createTableau [RETURN_TYPE] RealMatrix  final boolean maximize [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau Array2DRowRealMatrix matrix double epsilon RealVector objectiveCoefficients LinearObjectiveFunction f LinearConstraint constraint List columnLabels constraints String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	199	200	1	replace	
12	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1; matrix.setEntry(zIndex, zIndex, maximize ? 1 : -1); RealVector objectiveCoefficients = maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients(); copyArray(objectiveCoefficients.toArray(), matrix.getDataRef()[zIndex]); matrix.setEntry(zIndex, width - 1, maximize ? f.getConstantTerm() : -1 * f.getConstantTerm()); if (!restrictToNonNegative) { [BUGGY] [BUGGY] matrix.setEntry(zIndex, getSlackVariableOffset() - 1,    getInvertedCoefficientSum(objectiveCoefficients)); getInvertedCoefficientSum(objectiveCoefficients)); }  int slackVar = 0; int artificialVar = 0; for (int i = 0; i < constraints.size(); i++) { LinearConstraint constraint = constraints.get(i); int row = getNumObjectiveFunctions() + i;  [CLASS] SimplexTableau [METHOD] createTableau [RETURN_TYPE] RealMatrix  final boolean maximize [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau Array2DRowRealMatrix matrix double epsilon RealVector objectiveCoefficients LinearObjectiveFunction f LinearConstraint constraint List columnLabels constraints String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	199	200	1	add	
13	[BUG] [BUGGY] matrix.setEntry(row, getSlackVariableOffset() - 1,  getInvertedCoefficientSum(constraint.getCoefficients())); [FE] AssertionError [CONTEXT] int artificialVar = 0; for (int i = 0; i < constraints.size(); i++) { LinearConstraint constraint = constraints.get(i); int row = getNumObjectiveFunctions() + i;  copyArray(constraint.getCoefficients().toArray(), matrix.getDataRef()[row]);  if (!restrictToNonNegative) { [BUGGY] matrix.setEntry(row, getSlackVariableOffset() - 1,     getInvertedCoefficientSum(constraint.getCoefficients())); [BUGGY] getInvertedCoefficientSum(constraint.getCoefficients())); }  matrix.setEntry(row, width - 1, constraint.getValue());  if (constraint.getRelationship() == Relationship.LEQ) { matrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1);// slack } else if (constraint.getRelationship() == Relationship.GEQ) { [CLASS] SimplexTableau [METHOD] createTableau [RETURN_TYPE] RealMatrix  final boolean maximize [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau Array2DRowRealMatrix matrix double epsilon RealVector objectiveCoefficients LinearObjectiveFunction f LinearConstraint constraint List columnLabels constraints String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	215	216	1	replace	
14	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] int artificialVar = 0; for (int i = 0; i < constraints.size(); i++) { LinearConstraint constraint = constraints.get(i); int row = getNumObjectiveFunctions() + i;  copyArray(constraint.getCoefficients().toArray(), matrix.getDataRef()[row]);  if (!restrictToNonNegative) { [BUGGY] [BUGGY] matrix.setEntry(row, getSlackVariableOffset() - 1,     getInvertedCoefficientSum(constraint.getCoefficients())); getInvertedCoefficientSum(constraint.getCoefficients())); }  matrix.setEntry(row, width - 1, constraint.getValue());  if (constraint.getRelationship() == Relationship.LEQ) { matrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1);// slack } else if (constraint.getRelationship() == Relationship.GEQ) { [CLASS] SimplexTableau [METHOD] createTableau [RETURN_TYPE] RealMatrix  final boolean maximize [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau Array2DRowRealMatrix matrix double epsilon RealVector objectiveCoefficients LinearObjectiveFunction f LinearConstraint constraint List columnLabels constraints String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	215	216	1	add	
15	[BUG] [BUGGY] double sum = 0; [FE] AssertionError [CONTEXT] protected static double getInvertedCoefficientSum(final RealVector coefficients) { [BUGGY] double sum = 0; [BUGGY] for (double coefficient : coefficients.toArray()) { sum -= coefficient; } return sum; } [CLASS] SimplexTableau [METHOD] getInvertedCoefficientSum [RETURN_TYPE] double  RealVector coefficients [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient epsilon sum RealVector coefficients LinearObjectiveFunction f List columnLabels constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar count height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	298	298	1	replace	
16	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected static double getInvertedCoefficientSum(final RealVector coefficients) { [BUGGY] [BUGGY] double sum = 0; for (double coefficient : coefficients.toArray()) { sum -= coefficient; } return sum; } [CLASS] SimplexTableau [METHOD] getInvertedCoefficientSum [RETURN_TYPE] double  RealVector coefficients [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient epsilon sum RealVector coefficients LinearObjectiveFunction f List columnLabels constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar count height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	298	298	1	add	
17	[BUG] [BUGGY] for (double coefficient : coefficients.toArray()) { [FE] AssertionError [CONTEXT] protected static double getInvertedCoefficientSum(final RealVector coefficients) { double sum = 0; [BUGGY] for (double coefficient : coefficients.toArray()) { [BUGGY] sum -= coefficient; } return sum; } [CLASS] SimplexTableau [METHOD] getInvertedCoefficientSum [RETURN_TYPE] double  RealVector coefficients [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient epsilon sum RealVector coefficients LinearObjectiveFunction f List columnLabels constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar count height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	299	299	1	replace	
18	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected static double getInvertedCoefficientSum(final RealVector coefficients) { double sum = 0; [BUGGY] [BUGGY] for (double coefficient : coefficients.toArray()) { sum -= coefficient; } return sum; } [CLASS] SimplexTableau [METHOD] getInvertedCoefficientSum [RETURN_TYPE] double  RealVector coefficients [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient epsilon sum RealVector coefficients LinearObjectiveFunction f List columnLabels constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar count height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	299	299	1	add	
19	[BUG] [BUGGY] sum -= coefficient; [FE] AssertionError [CONTEXT] protected static double getInvertedCoefficientSum(final RealVector coefficients) { double sum = 0; for (double coefficient : coefficients.toArray()) { [BUGGY] sum -= coefficient; [BUGGY] } return sum; } [CLASS] SimplexTableau [METHOD] getInvertedCoefficientSum [RETURN_TYPE] double  RealVector coefficients [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient epsilon sum RealVector coefficients LinearObjectiveFunction f List columnLabels constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar count height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	300	300	1	replace	
20	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected static double getInvertedCoefficientSum(final RealVector coefficients) { double sum = 0; for (double coefficient : coefficients.toArray()) { [BUGGY] [BUGGY] sum -= coefficient; } return sum; } [CLASS] SimplexTableau [METHOD] getInvertedCoefficientSum [RETURN_TYPE] double  RealVector coefficients [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient epsilon sum RealVector coefficients LinearObjectiveFunction f List columnLabels constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar count height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	300	300	1	add	
21	[BUG] [BUGGY] return sum; [FE] AssertionError [CONTEXT] protected static double getInvertedCoefficientSum(final RealVector coefficients) { double sum = 0; for (double coefficient : coefficients.toArray()) { sum -= coefficient; } [BUGGY] return sum; [BUGGY] } [CLASS] SimplexTableau [METHOD] getInvertedCoefficientSum [RETURN_TYPE] double  RealVector coefficients [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient epsilon sum RealVector coefficients LinearObjectiveFunction f List columnLabels constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar count height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	302	302	1	replace	
22	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected static double getInvertedCoefficientSum(final RealVector coefficients) { double sum = 0; for (double coefficient : coefficients.toArray()) { sum -= coefficient; } [BUGGY] [BUGGY] return sum; } [CLASS] SimplexTableau [METHOD] getInvertedCoefficientSum [RETURN_TYPE] double  RealVector coefficients [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient epsilon sum RealVector coefficients LinearObjectiveFunction f List columnLabels constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar count height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2886751345948129	302	302	1	add	
23	[BUG] [BUGGY] matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess } [FE] AssertionError [CONTEXT] getInvertedCoefficientSum(constraint.getCoefficients())); }  matrix.setEntry(row, width - 1, constraint.getValue());  if (constraint.getRelationship() == Relationship.LEQ) { matrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1);// slack } else if (constraint.getRelationship() == Relationship.GEQ) { [BUGGY] matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess   } [BUGGY] }  if ((constraint.getRelationship() == Relationship.EQ) || (constraint.getRelationship() == Relationship.GEQ)) { matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1); matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1); matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row))); } } [CLASS] SimplexTableau [METHOD] createTableau [RETURN_TYPE] RealMatrix  final boolean maximize [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau Array2DRowRealMatrix matrix double epsilon RealVector objectiveCoefficients LinearObjectiveFunction f LinearConstraint constraint List columnLabels constraints String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2773500981126146	226	227	1	replace	
24	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] getInvertedCoefficientSum(constraint.getCoefficients())); }  matrix.setEntry(row, width - 1, constraint.getValue());  if (constraint.getRelationship() == Relationship.LEQ) { matrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1);// slack } else if (constraint.getRelationship() == Relationship.GEQ) { [BUGGY] [BUGGY] matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess   } }  if ((constraint.getRelationship() == Relationship.EQ) || (constraint.getRelationship() == Relationship.GEQ)) { matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1); matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1); matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row))); } } [CLASS] SimplexTableau [METHOD] createTableau [RETURN_TYPE] RealMatrix  final boolean maximize [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau Array2DRowRealMatrix matrix double epsilon RealVector objectiveCoefficients LinearObjectiveFunction f LinearConstraint constraint List columnLabels constraints String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2773500981126146	226	227	1	add	
25	[BUG] [BUGGY] matrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1);// slack } else if (constraint.getRelationship() == Relationship.GEQ) { [FE] AssertionError [CONTEXT] if (!restrictToNonNegative) { matrix.setEntry(row, getSlackVariableOffset() - 1, getInvertedCoefficientSum(constraint.getCoefficients())); }  matrix.setEntry(row, width - 1, constraint.getValue());  if (constraint.getRelationship() == Relationship.LEQ) { [BUGGY] matrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1);// slack   } else if (constraint.getRelationship() == Relationship.GEQ) { [BUGGY] } else if (constraint.getRelationship() == Relationship.GEQ) { matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess }  if ((constraint.getRelationship() == Relationship.EQ) || (constraint.getRelationship() == Relationship.GEQ)) { matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1); matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1); matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row))); [CLASS] SimplexTableau [METHOD] createTableau [RETURN_TYPE] RealMatrix  final boolean maximize [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau Array2DRowRealMatrix matrix double epsilon RealVector objectiveCoefficients LinearObjectiveFunction f LinearConstraint constraint List columnLabels constraints String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2672612419124244	224	225	1	replace	
26	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (!restrictToNonNegative) { matrix.setEntry(row, getSlackVariableOffset() - 1, getInvertedCoefficientSum(constraint.getCoefficients())); }  matrix.setEntry(row, width - 1, constraint.getValue());  if (constraint.getRelationship() == Relationship.LEQ) { [BUGGY] [BUGGY] matrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1);// slack   } else if (constraint.getRelationship() == Relationship.GEQ) { } else if (constraint.getRelationship() == Relationship.GEQ) { matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess }  if ((constraint.getRelationship() == Relationship.EQ) || (constraint.getRelationship() == Relationship.GEQ)) { matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1); matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1); matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row))); [CLASS] SimplexTableau [METHOD] createTableau [RETURN_TYPE] RealMatrix  final boolean maximize [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau Array2DRowRealMatrix matrix double epsilon RealVector objectiveCoefficients LinearObjectiveFunction f LinearConstraint constraint List columnLabels constraints String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.2672612419124244	224	225	1	add	
27	[BUG] [BUGGY] List<Integer> columnsToDrop = new ArrayList<Integer>(); [FE] AssertionError [CONTEXT] protected void dropPhase1Objective() { if (getNumObjectiveFunctions() == 1) { return; } [BUGGY] List<Integer> columnsToDrop = new ArrayList<Integer>(); [BUGGY] columnsToDrop.add(0);  for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { columnsToDrop.add(i); } }  [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	332	332	1	replace	
28	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected void dropPhase1Objective() { if (getNumObjectiveFunctions() == 1) { return; } [BUGGY] [BUGGY] List<Integer> columnsToDrop = new ArrayList<Integer>(); columnsToDrop.add(0);  for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { columnsToDrop.add(i); } }  [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	332	332	1	add	
29	[BUG] [BUGGY] columnsToDrop.add(0); [FE] AssertionError [CONTEXT] protected void dropPhase1Objective() { if (getNumObjectiveFunctions() == 1) { return; } List<Integer> columnsToDrop = new ArrayList<Integer>(); [BUGGY] columnsToDrop.add(0); [BUGGY]   for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { columnsToDrop.add(i); } }   [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	333	333	1	replace	
30	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected void dropPhase1Objective() { if (getNumObjectiveFunctions() == 1) { return; } List<Integer> columnsToDrop = new ArrayList<Integer>(); [BUGGY] [BUGGY] columnsToDrop.add(0);  for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { columnsToDrop.add(i); } }   [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	333	333	1	add	
31	[BUG] [BUGGY] for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { [FE] AssertionError [CONTEXT] protected void dropPhase1Objective() { if (getNumObjectiveFunctions() == 1) { return; } List<Integer> columnsToDrop = new ArrayList<Integer>(); columnsToDrop.add(0);  [BUGGY] for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { [BUGGY] final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { columnsToDrop.add(i); } }  for (int i = 0; i < getNumArtificialVariables(); i++) { int col = i + getArtificialVariableOffset(); if (getBasicRow(col) == null) { [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	replace	
32	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected void dropPhase1Objective() { if (getNumObjectiveFunctions() == 1) { return; } List<Integer> columnsToDrop = new ArrayList<Integer>(); columnsToDrop.add(0);  [BUGGY] [BUGGY] for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { columnsToDrop.add(i); } }  for (int i = 0; i < getNumArtificialVariables(); i++) { int col = i + getArtificialVariableOffset(); if (getBasicRow(col) == null) { [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	336	336	1	add	
33	[BUG] [BUGGY] final double entry = tableau.getEntry(0, i); [FE] AssertionError [CONTEXT] protected void dropPhase1Objective() { if (getNumObjectiveFunctions() == 1) { return; } List<Integer> columnsToDrop = new ArrayList<Integer>(); columnsToDrop.add(0);  for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { [BUGGY] final double entry = tableau.getEntry(0, i); [BUGGY] if (Precision.compareTo(entry, 0d, maxUlps) > 0) { columnsToDrop.add(i); } }  for (int i = 0; i < getNumArtificialVariables(); i++) { int col = i + getArtificialVariableOffset(); if (getBasicRow(col) == null) { columnsToDrop.add(col); [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	replace	
34	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected void dropPhase1Objective() { if (getNumObjectiveFunctions() == 1) { return; } List<Integer> columnsToDrop = new ArrayList<Integer>(); columnsToDrop.add(0);  for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { [BUGGY] [BUGGY] final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { columnsToDrop.add(i); } }  for (int i = 0; i < getNumArtificialVariables(); i++) { int col = i + getArtificialVariableOffset(); if (getBasicRow(col) == null) { columnsToDrop.add(col); [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	337	337	1	add	
35	[BUG] [BUGGY] if (Precision.compareTo(entry, 0d, maxUlps) > 0) { [FE] AssertionError [CONTEXT] if (getNumObjectiveFunctions() == 1) { return; } List<Integer> columnsToDrop = new ArrayList<Integer>(); columnsToDrop.add(0);  for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); [BUGGY] if (Precision.compareTo(entry, 0d, maxUlps) > 0) { [BUGGY] columnsToDrop.add(i); } }  for (int i = 0; i < getNumArtificialVariables(); i++) { int col = i + getArtificialVariableOffset(); if (getBasicRow(col) == null) { columnsToDrop.add(col); } [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	338	338	1	replace	
36	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (getNumObjectiveFunctions() == 1) { return; } List<Integer> columnsToDrop = new ArrayList<Integer>(); columnsToDrop.add(0);  for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); [BUGGY] [BUGGY] if (Precision.compareTo(entry, 0d, maxUlps) > 0) { columnsToDrop.add(i); } }  for (int i = 0; i < getNumArtificialVariables(); i++) { int col = i + getArtificialVariableOffset(); if (getBasicRow(col) == null) { columnsToDrop.add(col); } [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	338	338	1	add	
37	[BUG] [BUGGY] for (int i = 0; i < getNumArtificialVariables(); i++) { [FE] AssertionError [CONTEXT]  for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { columnsToDrop.add(i); } }  [BUGGY] for (int i = 0; i < getNumArtificialVariables(); i++) { [BUGGY] int col = i + getArtificialVariableOffset(); if (getBasicRow(col) == null) { columnsToDrop.add(col); } } double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()]; for (int i = 1; i < getHeight(); i++) { int col = 0; for (int j = 0; j < getWidth(); j++) { [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	replace	
38	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { columnsToDrop.add(i); } }  [BUGGY] [BUGGY] for (int i = 0; i < getNumArtificialVariables(); i++) { int col = i + getArtificialVariableOffset(); if (getBasicRow(col) == null) { columnsToDrop.add(col); } } double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()]; for (int i = 1; i < getHeight(); i++) { int col = 0; for (int j = 0; j < getWidth(); j++) { [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	344	344	1	add	
39	[BUG] [BUGGY] int col = i + getArtificialVariableOffset(); [FE] AssertionError [CONTEXT]  for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { columnsToDrop.add(i); } }  for (int i = 0; i < getNumArtificialVariables(); i++) { [BUGGY] int col = i + getArtificialVariableOffset(); [BUGGY] if (getBasicRow(col) == null) { columnsToDrop.add(col); } } double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()]; for (int i = 1; i < getHeight(); i++) { int col = 0; for (int j = 0; j < getWidth(); j++) { if (!columnsToDrop.contains(j)) { [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	345	345	1	replace	
40	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { columnsToDrop.add(i); } }  for (int i = 0; i < getNumArtificialVariables(); i++) { [BUGGY] [BUGGY] int col = i + getArtificialVariableOffset(); if (getBasicRow(col) == null) { columnsToDrop.add(col); } } double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()]; for (int i = 1; i < getHeight(); i++) { int col = 0; for (int j = 0; j < getWidth(); j++) { if (!columnsToDrop.contains(j)) { [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	345	345	1	add	
41	[BUG] [BUGGY] if (getBasicRow(col) == null) { [FE] AssertionError [CONTEXT] for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { columnsToDrop.add(i); } }  for (int i = 0; i < getNumArtificialVariables(); i++) { int col = i + getArtificialVariableOffset(); [BUGGY] if (getBasicRow(col) == null) { [BUGGY] columnsToDrop.add(col); } } double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()]; for (int i = 1; i < getHeight(); i++) { int col = 0; for (int j = 0; j < getWidth(); j++) { if (!columnsToDrop.contains(j)) { matrix[i - 1][col++] = tableau.getEntry(i, j); [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	346	346	1	replace	
42	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { columnsToDrop.add(i); } }  for (int i = 0; i < getNumArtificialVariables(); i++) { int col = i + getArtificialVariableOffset(); [BUGGY] [BUGGY] if (getBasicRow(col) == null) { columnsToDrop.add(col); } } double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()]; for (int i = 1; i < getHeight(); i++) { int col = 0; for (int j = 0; j < getWidth(); j++) { if (!columnsToDrop.contains(j)) { matrix[i - 1][col++] = tableau.getEntry(i, j); [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	346	346	1	add	
43	[BUG] [BUGGY] columnsToDrop.add(col); [FE] AssertionError [CONTEXT] final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { columnsToDrop.add(i); } }  for (int i = 0; i < getNumArtificialVariables(); i++) { int col = i + getArtificialVariableOffset(); if (getBasicRow(col) == null) { [BUGGY] columnsToDrop.add(col); [BUGGY] } } double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()]; for (int i = 1; i < getHeight(); i++) { int col = 0; for (int j = 0; j < getWidth(); j++) { if (!columnsToDrop.contains(j)) { matrix[i - 1][col++] = tableau.getEntry(i, j); } [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	347	347	1	replace	
44	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { columnsToDrop.add(i); } }  for (int i = 0; i < getNumArtificialVariables(); i++) { int col = i + getArtificialVariableOffset(); if (getBasicRow(col) == null) { [BUGGY] [BUGGY] columnsToDrop.add(col); } } double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()]; for (int i = 1; i < getHeight(); i++) { int col = 0; for (int j = 0; j < getWidth(); j++) { if (!columnsToDrop.contains(j)) { matrix[i - 1][col++] = tableau.getEntry(i, j); } [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	347	347	1	add	
45	[BUG] [BUGGY] double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()]; [FE] AssertionError [CONTEXT] }  for (int i = 0; i < getNumArtificialVariables(); i++) { int col = i + getArtificialVariableOffset(); if (getBasicRow(col) == null) { columnsToDrop.add(col); } } [BUGGY] double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()]; [BUGGY] for (int i = 1; i < getHeight(); i++) { int col = 0; for (int j = 0; j < getWidth(); j++) { if (!columnsToDrop.contains(j)) { matrix[i - 1][col++] = tableau.getEntry(i, j); } } } for (int i = columnsToDrop.size() - 1; i >= 0; i--) { [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	351	351	1	replace	
46	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] }  for (int i = 0; i < getNumArtificialVariables(); i++) { int col = i + getArtificialVariableOffset(); if (getBasicRow(col) == null) { columnsToDrop.add(col); } } [BUGGY] [BUGGY] double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()]; for (int i = 1; i < getHeight(); i++) { int col = 0; for (int j = 0; j < getWidth(); j++) { if (!columnsToDrop.contains(j)) { matrix[i - 1][col++] = tableau.getEntry(i, j); } } } for (int i = columnsToDrop.size() - 1; i >= 0; i--) { [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	351	351	1	add	
47	[BUG] [BUGGY] for (int i = 1; i < getHeight(); i++) { [FE] AssertionError [CONTEXT]  for (int i = 0; i < getNumArtificialVariables(); i++) { int col = i + getArtificialVariableOffset(); if (getBasicRow(col) == null) { columnsToDrop.add(col); } } double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()]; [BUGGY] for (int i = 1; i < getHeight(); i++) { [BUGGY] int col = 0; for (int j = 0; j < getWidth(); j++) { if (!columnsToDrop.contains(j)) { matrix[i - 1][col++] = tableau.getEntry(i, j); } } } for (int i = columnsToDrop.size() - 1; i >= 0; i--) { columnLabels.remove((int) columnsToDrop.get(i)); [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	replace	
48	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  for (int i = 0; i < getNumArtificialVariables(); i++) { int col = i + getArtificialVariableOffset(); if (getBasicRow(col) == null) { columnsToDrop.add(col); } } double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()]; [BUGGY] [BUGGY] for (int i = 1; i < getHeight(); i++) { int col = 0; for (int j = 0; j < getWidth(); j++) { if (!columnsToDrop.contains(j)) { matrix[i - 1][col++] = tableau.getEntry(i, j); } } } for (int i = columnsToDrop.size() - 1; i >= 0; i--) { columnLabels.remove((int) columnsToDrop.get(i)); [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	352	352	1	add	
49	[BUG] [BUGGY] int col = 0; [FE] AssertionError [CONTEXT]  for (int i = 0; i < getNumArtificialVariables(); i++) { int col = i + getArtificialVariableOffset(); if (getBasicRow(col) == null) { columnsToDrop.add(col); } } double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()]; for (int i = 1; i < getHeight(); i++) { [BUGGY] int col = 0; [BUGGY] for (int j = 0; j < getWidth(); j++) { if (!columnsToDrop.contains(j)) { matrix[i - 1][col++] = tableau.getEntry(i, j); } } } for (int i = columnsToDrop.size() - 1; i >= 0; i--) { columnLabels.remove((int) columnsToDrop.get(i)); } [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	353	353	1	replace	
50	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  for (int i = 0; i < getNumArtificialVariables(); i++) { int col = i + getArtificialVariableOffset(); if (getBasicRow(col) == null) { columnsToDrop.add(col); } } double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()]; for (int i = 1; i < getHeight(); i++) { [BUGGY] [BUGGY] int col = 0; for (int j = 0; j < getWidth(); j++) { if (!columnsToDrop.contains(j)) { matrix[i - 1][col++] = tableau.getEntry(i, j); } } } for (int i = columnsToDrop.size() - 1; i >= 0; i--) { columnLabels.remove((int) columnsToDrop.get(i)); } [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	353	353	1	add	
51	[BUG] [BUGGY] for (int j = 0; j < getWidth(); j++) { [FE] AssertionError [CONTEXT] for (int i = 0; i < getNumArtificialVariables(); i++) { int col = i + getArtificialVariableOffset(); if (getBasicRow(col) == null) { columnsToDrop.add(col); } } double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()]; for (int i = 1; i < getHeight(); i++) { int col = 0; [BUGGY] for (int j = 0; j < getWidth(); j++) { [BUGGY] if (!columnsToDrop.contains(j)) { matrix[i - 1][col++] = tableau.getEntry(i, j); } } } for (int i = columnsToDrop.size() - 1; i >= 0; i--) { columnLabels.remove((int) columnsToDrop.get(i)); }  [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	replace	
52	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] for (int i = 0; i < getNumArtificialVariables(); i++) { int col = i + getArtificialVariableOffset(); if (getBasicRow(col) == null) { columnsToDrop.add(col); } } double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()]; for (int i = 1; i < getHeight(); i++) { int col = 0; [BUGGY] [BUGGY] for (int j = 0; j < getWidth(); j++) { if (!columnsToDrop.contains(j)) { matrix[i - 1][col++] = tableau.getEntry(i, j); } } } for (int i = columnsToDrop.size() - 1; i >= 0; i--) { columnLabels.remove((int) columnsToDrop.get(i)); }  [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	354	354	1	add	
53	[BUG] [BUGGY] if (!columnsToDrop.contains(j)) { [FE] AssertionError [CONTEXT] int col = i + getArtificialVariableOffset(); if (getBasicRow(col) == null) { columnsToDrop.add(col); } } double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()]; for (int i = 1; i < getHeight(); i++) { int col = 0; for (int j = 0; j < getWidth(); j++) { [BUGGY] if (!columnsToDrop.contains(j)) { [BUGGY] matrix[i - 1][col++] = tableau.getEntry(i, j); } } } for (int i = columnsToDrop.size() - 1; i >= 0; i--) { columnLabels.remove((int) columnsToDrop.get(i)); } this.tableau = new Array2DRowRealMatrix(matrix); [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	355	355	1	replace	
54	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] int col = i + getArtificialVariableOffset(); if (getBasicRow(col) == null) { columnsToDrop.add(col); } } double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()]; for (int i = 1; i < getHeight(); i++) { int col = 0; for (int j = 0; j < getWidth(); j++) { [BUGGY] [BUGGY] if (!columnsToDrop.contains(j)) { matrix[i - 1][col++] = tableau.getEntry(i, j); } } } for (int i = columnsToDrop.size() - 1; i >= 0; i--) { columnLabels.remove((int) columnsToDrop.get(i)); } this.tableau = new Array2DRowRealMatrix(matrix); [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	355	355	1	add	
55	[BUG] [BUGGY] matrix[i - 1][col++] = tableau.getEntry(i, j); [FE] AssertionError [CONTEXT] if (getBasicRow(col) == null) { columnsToDrop.add(col); } } double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()]; for (int i = 1; i < getHeight(); i++) { int col = 0; for (int j = 0; j < getWidth(); j++) { if (!columnsToDrop.contains(j)) { [BUGGY] matrix[i - 1][col++] = tableau.getEntry(i, j); [BUGGY] } } } for (int i = columnsToDrop.size() - 1; i >= 0; i--) { columnLabels.remove((int) columnsToDrop.get(i)); } this.tableau = new Array2DRowRealMatrix(matrix); this.numArtificialVariables = 0; [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	356	356	1	replace	
56	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (getBasicRow(col) == null) { columnsToDrop.add(col); } } double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()]; for (int i = 1; i < getHeight(); i++) { int col = 0; for (int j = 0; j < getWidth(); j++) { if (!columnsToDrop.contains(j)) { [BUGGY] [BUGGY] matrix[i - 1][col++] = tableau.getEntry(i, j); } } } for (int i = columnsToDrop.size() - 1; i >= 0; i--) { columnLabels.remove((int) columnsToDrop.get(i)); } this.tableau = new Array2DRowRealMatrix(matrix); this.numArtificialVariables = 0; [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	356	356	1	add	
57	[BUG] [BUGGY] for (int i = columnsToDrop.size() - 1; i >= 0; i--) { [FE] AssertionError [CONTEXT] double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()]; for (int i = 1; i < getHeight(); i++) { int col = 0; for (int j = 0; j < getWidth(); j++) { if (!columnsToDrop.contains(j)) { matrix[i - 1][col++] = tableau.getEntry(i, j); } } } [BUGGY] for (int i = columnsToDrop.size() - 1; i >= 0; i--) { [BUGGY] columnLabels.remove((int) columnsToDrop.get(i)); } this.tableau = new Array2DRowRealMatrix(matrix); this.numArtificialVariables = 0; } [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	replace	
58	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()]; for (int i = 1; i < getHeight(); i++) { int col = 0; for (int j = 0; j < getWidth(); j++) { if (!columnsToDrop.contains(j)) { matrix[i - 1][col++] = tableau.getEntry(i, j); } } } [BUGGY] [BUGGY] for (int i = columnsToDrop.size() - 1; i >= 0; i--) { columnLabels.remove((int) columnsToDrop.get(i)); } this.tableau = new Array2DRowRealMatrix(matrix); this.numArtificialVariables = 0; } [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	361	361	1	add	
59	[BUG] [BUGGY] columnLabels.remove((int) columnsToDrop.get(i)); [FE] AssertionError [CONTEXT] for (int i = 1; i < getHeight(); i++) { int col = 0; for (int j = 0; j < getWidth(); j++) { if (!columnsToDrop.contains(j)) { matrix[i - 1][col++] = tableau.getEntry(i, j); } } } for (int i = columnsToDrop.size() - 1; i >= 0; i--) { [BUGGY] columnLabels.remove((int) columnsToDrop.get(i)); [BUGGY] } this.tableau = new Array2DRowRealMatrix(matrix); this.numArtificialVariables = 0; } [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	362	362	1	replace	
60	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] for (int i = 1; i < getHeight(); i++) { int col = 0; for (int j = 0; j < getWidth(); j++) { if (!columnsToDrop.contains(j)) { matrix[i - 1][col++] = tableau.getEntry(i, j); } } } for (int i = columnsToDrop.size() - 1; i >= 0; i--) { [BUGGY] [BUGGY] columnLabels.remove((int) columnsToDrop.get(i)); } this.tableau = new Array2DRowRealMatrix(matrix); this.numArtificialVariables = 0; } [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	362	362	1	add	
61	[BUG] [BUGGY] this.tableau = new Array2DRowRealMatrix(matrix); [FE] AssertionError [CONTEXT] if (!columnsToDrop.contains(j)) { matrix[i - 1][col++] = tableau.getEntry(i, j); } } } for (int i = columnsToDrop.size() - 1; i >= 0; i--) { columnLabels.remove((int) columnsToDrop.get(i)); } [BUGGY] this.tableau = new Array2DRowRealMatrix(matrix); [BUGGY] this.numArtificialVariables = 0; } [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	replace	
62	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (!columnsToDrop.contains(j)) { matrix[i - 1][col++] = tableau.getEntry(i, j); } } } for (int i = columnsToDrop.size() - 1; i >= 0; i--) { columnLabels.remove((int) columnsToDrop.get(i)); } [BUGGY] [BUGGY] this.tableau = new Array2DRowRealMatrix(matrix); this.numArtificialVariables = 0; } [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	365	365	1	add	
63	[BUG] [BUGGY] this.numArtificialVariables = 0; [FE] AssertionError [CONTEXT] matrix[i - 1][col++] = tableau.getEntry(i, j); } } } for (int i = columnsToDrop.size() - 1; i >= 0; i--) { columnLabels.remove((int) columnsToDrop.get(i)); } this.tableau = new Array2DRowRealMatrix(matrix); [BUGGY] this.numArtificialVariables = 0; [BUGGY] } [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	replace	
64	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] matrix[i - 1][col++] = tableau.getEntry(i, j); } } } for (int i = columnsToDrop.size() - 1; i >= 0; i--) { columnLabels.remove((int) columnsToDrop.get(i)); } this.tableau = new Array2DRowRealMatrix(matrix); [BUGGY] [BUGGY] this.numArtificialVariables = 0; } [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	366	366	1	add	
65	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] } } } for (int i = columnsToDrop.size() - 1; i >= 0; i--) { columnLabels.remove((int) columnsToDrop.get(i)); } this.tableau = new Array2DRowRealMatrix(matrix); this.numArtificialVariables = 0; [BUGGY] } [BUGGY]  [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	367	367	1	replace	
66	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } } } for (int i = columnsToDrop.size() - 1; i >= 0; i--) { columnLabels.remove((int) columnsToDrop.get(i)); } this.tableau = new Array2DRowRealMatrix(matrix); this.numArtificialVariables = 0; [BUGGY] [BUGGY] } [CLASS] SimplexTableau [METHOD] dropPhase1Objective [RETURN_TYPE] void  [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f double[][] matrix List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i j maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.24253562503633297	367	367	1	add	
67	[BUG] [BUGGY] return row; [FE] AssertionError [CONTEXT] protected Integer getBasicRow(final int col) { Integer row = null; for (int i = 0; i < getHeight(); i++) { final double entry = getEntry(i, col); if (Precision.equals(entry, 1d, maxUlps) && (row == null)) { row = i; } else if (!Precision.equals(entry, 0d, maxUlps)) { return null; } } [BUGGY] return row; [BUGGY] } [CLASS] SimplexTableau [METHOD] getBasicRow [RETURN_TYPE] Integer  final int col [VARIABLES] Integer row boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f List columnLabels constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22941573387056174	320	320	1	replace	
68	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected Integer getBasicRow(final int col) { Integer row = null; for (int i = 0; i < getHeight(); i++) { final double entry = getEntry(i, col); if (Precision.equals(entry, 1d, maxUlps) && (row == null)) { row = i; } else if (!Precision.equals(entry, 0d, maxUlps)) { return null; } } [BUGGY] [BUGGY] return row; } [CLASS] SimplexTableau [METHOD] getBasicRow [RETURN_TYPE] Integer  final int col [VARIABLES] Integer row boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f List columnLabels constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22941573387056174	320	320	1	add	
69	[BUG] [BUGGY] columnLabels.add("W"); [FE] AssertionError [CONTEXT] protected void initializeColumnLabels() { if (getNumObjectiveFunctions() == 2) { [BUGGY] columnLabels.add("W"); [BUGGY] } columnLabels.add("Z"); for (int i = 0; i < getOriginalNumDecisionVariables(); i++) { columnLabels.add("x" + i); } if (!restrictToNonNegative) { columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL); } for (int i = 0; i < getNumSlackVariables(); i++) { columnLabels.add("s" + i); [CLASS] SimplexTableau [METHOD] initializeColumnLabels [RETURN_TYPE] void  [VARIABLES] boolean restrictToNonNegative RealMatrix tableau double epsilon LinearObjectiveFunction f List columnLabels constraints String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS i maxUlps numArtificialVariables numDecisionVariables numSlackVariables long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	155	155	1	replace	
70	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected void initializeColumnLabels() { if (getNumObjectiveFunctions() == 2) { [BUGGY] [BUGGY] columnLabels.add("W"); } columnLabels.add("Z"); for (int i = 0; i < getOriginalNumDecisionVariables(); i++) { columnLabels.add("x" + i); } if (!restrictToNonNegative) { columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL); } for (int i = 0; i < getNumSlackVariables(); i++) { columnLabels.add("s" + i); [CLASS] SimplexTableau [METHOD] initializeColumnLabels [RETURN_TYPE] void  [VARIABLES] boolean restrictToNonNegative RealMatrix tableau double epsilon LinearObjectiveFunction f List columnLabels constraints String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS i maxUlps numArtificialVariables numDecisionVariables numSlackVariables long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	155	155	1	add	
71	[BUG] [BUGGY] columnLabels.add("s" + i); [FE] AssertionError [CONTEXT] columnLabels.add("W"); } columnLabels.add("Z"); for (int i = 0; i < getOriginalNumDecisionVariables(); i++) { columnLabels.add("x" + i); } if (!restrictToNonNegative) { columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL); } for (int i = 0; i < getNumSlackVariables(); i++) { [BUGGY] columnLabels.add("s" + i); [BUGGY] } for (int i = 0; i < getNumArtificialVariables(); i++) { columnLabels.add("a" + i); } columnLabels.add("RHS"); } [CLASS] SimplexTableau [METHOD] initializeColumnLabels [RETURN_TYPE] void  [VARIABLES] boolean restrictToNonNegative RealMatrix tableau double epsilon LinearObjectiveFunction f List columnLabels constraints String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS i maxUlps numArtificialVariables numDecisionVariables numSlackVariables long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	165	165	1	replace	
72	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] columnLabels.add("W"); } columnLabels.add("Z"); for (int i = 0; i < getOriginalNumDecisionVariables(); i++) { columnLabels.add("x" + i); } if (!restrictToNonNegative) { columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL); } for (int i = 0; i < getNumSlackVariables(); i++) { [BUGGY] [BUGGY] columnLabels.add("s" + i); } for (int i = 0; i < getNumArtificialVariables(); i++) { columnLabels.add("a" + i); } columnLabels.add("RHS"); } [CLASS] SimplexTableau [METHOD] initializeColumnLabels [RETURN_TYPE] void  [VARIABLES] boolean restrictToNonNegative RealMatrix tableau double epsilon LinearObjectiveFunction f List columnLabels constraints String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS i maxUlps numArtificialVariables numDecisionVariables numSlackVariables long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	165	165	1	add	
73	[BUG] [BUGGY] columnLabels.add("a" + i); [FE] AssertionError [CONTEXT] for (int i = 0; i < getOriginalNumDecisionVariables(); i++) { columnLabels.add("x" + i); } if (!restrictToNonNegative) { columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL); } for (int i = 0; i < getNumSlackVariables(); i++) { columnLabels.add("s" + i); } for (int i = 0; i < getNumArtificialVariables(); i++) { [BUGGY] columnLabels.add("a" + i); [BUGGY] } columnLabels.add("RHS"); } [CLASS] SimplexTableau [METHOD] initializeColumnLabels [RETURN_TYPE] void  [VARIABLES] boolean restrictToNonNegative RealMatrix tableau double epsilon LinearObjectiveFunction f List columnLabels constraints String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS i maxUlps numArtificialVariables numDecisionVariables numSlackVariables long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	168	168	1	replace	
74	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] for (int i = 0; i < getOriginalNumDecisionVariables(); i++) { columnLabels.add("x" + i); } if (!restrictToNonNegative) { columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL); } for (int i = 0; i < getNumSlackVariables(); i++) { columnLabels.add("s" + i); } for (int i = 0; i < getNumArtificialVariables(); i++) { [BUGGY] [BUGGY] columnLabels.add("a" + i); } columnLabels.add("RHS"); } [CLASS] SimplexTableau [METHOD] initializeColumnLabels [RETURN_TYPE] void  [VARIABLES] boolean restrictToNonNegative RealMatrix tableau double epsilon LinearObjectiveFunction f List columnLabels constraints String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS i maxUlps numArtificialVariables numDecisionVariables numSlackVariables long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	168	168	1	add	
75	[BUG] [BUGGY] matrix.setEntry(0, 0, -1); [FE] AssertionError [CONTEXT] protected RealMatrix createTableau(final boolean maximize) {  int width = numDecisionVariables + numSlackVariables + numArtificialVariables + getNumObjectiveFunctions() + 1; // + 1 is for RHS int height = constraints.size() + getNumObjectiveFunctions(); Array2DRowRealMatrix matrix = new Array2DRowRealMatrix(height, width);  if (getNumObjectiveFunctions() == 2) { [BUGGY] matrix.setEntry(0, 0, -1); [BUGGY] } int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1; matrix.setEntry(zIndex, zIndex, maximize ? 1 : -1); RealVector objectiveCoefficients = maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients(); copyArray(objectiveCoefficients.toArray(), matrix.getDataRef()[zIndex]); matrix.setEntry(zIndex, width - 1, maximize ? f.getConstantTerm() : -1 * f.getConstantTerm()); if (!restrictToNonNegative) { [CLASS] SimplexTableau [METHOD] createTableau [RETURN_TYPE] RealMatrix  final boolean maximize [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau Array2DRowRealMatrix matrix double epsilon RealVector objectiveCoefficients LinearObjectiveFunction f LinearConstraint constraint List columnLabels constraints String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	188	188	1	replace	
76	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected RealMatrix createTableau(final boolean maximize) {  int width = numDecisionVariables + numSlackVariables + numArtificialVariables + getNumObjectiveFunctions() + 1; // + 1 is for RHS int height = constraints.size() + getNumObjectiveFunctions(); Array2DRowRealMatrix matrix = new Array2DRowRealMatrix(height, width);  if (getNumObjectiveFunctions() == 2) { [BUGGY] [BUGGY] matrix.setEntry(0, 0, -1); } int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1; matrix.setEntry(zIndex, zIndex, maximize ? 1 : -1); RealVector objectiveCoefficients = maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients(); copyArray(objectiveCoefficients.toArray(), matrix.getDataRef()[zIndex]); matrix.setEntry(zIndex, width - 1, maximize ? f.getConstantTerm() : -1 * f.getConstantTerm()); if (!restrictToNonNegative) { [CLASS] SimplexTableau [METHOD] createTableau [RETURN_TYPE] RealMatrix  final boolean maximize [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau Array2DRowRealMatrix matrix double epsilon RealVector objectiveCoefficients LinearObjectiveFunction f LinearConstraint constraint List columnLabels constraints String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	188	188	1	add	
77	[BUG] [BUGGY] } else if (constraint.getRelationship() == Relationship.GEQ) { [FE] AssertionError [CONTEXT] matrix.setEntry(row, getSlackVariableOffset() - 1, getInvertedCoefficientSum(constraint.getCoefficients())); }  matrix.setEntry(row, width - 1, constraint.getValue());  if (constraint.getRelationship() == Relationship.LEQ) { matrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1);// slack [BUGGY] } else if (constraint.getRelationship() == Relationship.GEQ) { [BUGGY] matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess }  if ((constraint.getRelationship() == Relationship.EQ) || (constraint.getRelationship() == Relationship.GEQ)) { matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1); matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1); matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row))); } [CLASS] SimplexTableau [METHOD] createTableau [RETURN_TYPE] RealMatrix  final boolean maximize [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau Array2DRowRealMatrix matrix double epsilon RealVector objectiveCoefficients LinearObjectiveFunction f LinearConstraint constraint List columnLabels constraints String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	225	225	1	replace	
78	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] matrix.setEntry(row, getSlackVariableOffset() - 1, getInvertedCoefficientSum(constraint.getCoefficients())); }  matrix.setEntry(row, width - 1, constraint.getValue());  if (constraint.getRelationship() == Relationship.LEQ) { matrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1);// slack [BUGGY] [BUGGY] } else if (constraint.getRelationship() == Relationship.GEQ) { matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess }  if ((constraint.getRelationship() == Relationship.EQ) || (constraint.getRelationship() == Relationship.GEQ)) { matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1); matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1); matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row))); } [CLASS] SimplexTableau [METHOD] createTableau [RETURN_TYPE] RealMatrix  final boolean maximize [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau Array2DRowRealMatrix matrix double epsilon RealVector objectiveCoefficients LinearObjectiveFunction f LinearConstraint constraint List columnLabels constraints String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	225	225	1	add	
79	[BUG] [BUGGY] matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1); [FE] AssertionError [CONTEXT]  if (constraint.getRelationship() == Relationship.LEQ) { matrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1);// slack } else if (constraint.getRelationship() == Relationship.GEQ) { matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess }  if ((constraint.getRelationship() == Relationship.EQ) || (constraint.getRelationship() == Relationship.GEQ)) { [BUGGY] matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1); [BUGGY] matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1); matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row))); } } return matrix; } [CLASS] SimplexTableau [METHOD] createTableau [RETURN_TYPE] RealMatrix  final boolean maximize [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau Array2DRowRealMatrix matrix double epsilon RealVector objectiveCoefficients LinearObjectiveFunction f LinearConstraint constraint List columnLabels constraints String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	232	232	1	replace	
80	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  if (constraint.getRelationship() == Relationship.LEQ) { matrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1);// slack } else if (constraint.getRelationship() == Relationship.GEQ) { matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess }  if ((constraint.getRelationship() == Relationship.EQ) || (constraint.getRelationship() == Relationship.GEQ)) { [BUGGY] [BUGGY] matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1); matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1); matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row))); } } return matrix; } [CLASS] SimplexTableau [METHOD] createTableau [RETURN_TYPE] RealMatrix  final boolean maximize [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau Array2DRowRealMatrix matrix double epsilon RealVector objectiveCoefficients LinearObjectiveFunction f LinearConstraint constraint List columnLabels constraints String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	232	232	1	add	
81	[BUG] [BUGGY] matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1); [FE] AssertionError [CONTEXT] if ((constraint.getRelationship() == Relationship.EQ) || (constraint.getRelationship() == Relationship.GEQ)) { matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1); [BUGGY] matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1); [BUGGY] matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row))); } [CLASS] SimplexTableau [METHOD] createTableau [RETURN_TYPE] RealMatrix  final boolean maximize [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau Array2DRowRealMatrix matrix double epsilon RealVector objectiveCoefficients LinearObjectiveFunction f LinearConstraint constraint List columnLabels constraints String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	233	233	1	replace	
82	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if ((constraint.getRelationship() == Relationship.EQ) || (constraint.getRelationship() == Relationship.GEQ)) { matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1); [BUGGY] [BUGGY] matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1); matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row))); } [CLASS] SimplexTableau [METHOD] createTableau [RETURN_TYPE] RealMatrix  final boolean maximize [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau Array2DRowRealMatrix matrix double epsilon RealVector objectiveCoefficients LinearObjectiveFunction f LinearConstraint constraint List columnLabels constraints String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	233	233	1	add	
83	[BUG] [BUGGY] matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row))); [FE] AssertionError [CONTEXT] if ((constraint.getRelationship() == Relationship.EQ) || (constraint.getRelationship() == Relationship.GEQ)) { matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1); matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1); [BUGGY] matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row))); [BUGGY] } [CLASS] SimplexTableau [METHOD] createTableau [RETURN_TYPE] RealMatrix  final boolean maximize [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau Array2DRowRealMatrix matrix double epsilon RealVector objectiveCoefficients LinearObjectiveFunction f LinearConstraint constraint List columnLabels constraints String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	234	234	1	replace	
84	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if ((constraint.getRelationship() == Relationship.EQ) || (constraint.getRelationship() == Relationship.GEQ)) { matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1); matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1); [BUGGY] [BUGGY] matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row))); } [CLASS] SimplexTableau [METHOD] createTableau [RETURN_TYPE] RealMatrix  final boolean maximize [VARIABLES] boolean maximize restrictToNonNegative RealMatrix tableau Array2DRowRealMatrix matrix double epsilon RealVector objectiveCoefficients LinearObjectiveFunction f LinearConstraint constraint List columnLabels constraints String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	234	234	1	add	
85	[BUG] [BUGGY] return null; [FE] AssertionError [CONTEXT] protected Integer getBasicRow(final int col) { Integer row = null; for (int i = 0; i < getHeight(); i++) { final double entry = getEntry(i, col); if (Precision.equals(entry, 1d, maxUlps) && (row == null)) { row = i; } else if (!Precision.equals(entry, 0d, maxUlps)) { [BUGGY] return null; [BUGGY] } } return row; } [CLASS] SimplexTableau [METHOD] getBasicRow [RETURN_TYPE] Integer  final int col [VARIABLES] Integer row boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f List columnLabels constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	317	317	1	replace	
86	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected Integer getBasicRow(final int col) { Integer row = null; for (int i = 0; i < getHeight(); i++) { final double entry = getEntry(i, col); if (Precision.equals(entry, 1d, maxUlps) && (row == null)) { row = i; } else if (!Precision.equals(entry, 0d, maxUlps)) { [BUGGY] [BUGGY] return null; } } return row; } [CLASS] SimplexTableau [METHOD] getBasicRow [RETURN_TYPE] Integer  final int col [VARIABLES] Integer row boolean maximize restrictToNonNegative RealMatrix tableau double coefficient entry epsilon sum LinearObjectiveFunction f List columnLabels constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col count height i maxUlps numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	317	317	1	add	
87	[BUG] [BUGGY] int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL); [FE] AssertionError [CONTEXT] protected PointValuePair getSolution() { [BUGGY] int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL); [BUGGY] Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null; double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); Set<Integer> basicRows = new HashSet<Integer>(); double[] coefficients = new double[getOriginalNumDecisionVariables()]; for (int i = 0; i < coefficients.length; i++) { int colIndex = columnLabels.indexOf("x" + i); if (colIndex < 0) { coefficients[i] = 0; continue; [CLASS] SimplexTableau [METHOD] getSolution [RETURN_TYPE] PointValuePair  [VARIABLES] Integer basicRow negativeVarBasicRow boolean maximize restrictToNonNegative Set basicRows RealMatrix tableau double[] coefficients double coefficient entry epsilon mostNegative sum LinearObjectiveFunction f List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col colIndex count height i j maxUlps negativeVarColumn numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	397	397	1	replace	
88	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected PointValuePair getSolution() { [BUGGY] [BUGGY] int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL); Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null; double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); Set<Integer> basicRows = new HashSet<Integer>(); double[] coefficients = new double[getOriginalNumDecisionVariables()]; for (int i = 0; i < coefficients.length; i++) { int colIndex = columnLabels.indexOf("x" + i); if (colIndex < 0) { coefficients[i] = 0; continue; [CLASS] SimplexTableau [METHOD] getSolution [RETURN_TYPE] PointValuePair  [VARIABLES] Integer basicRow negativeVarBasicRow boolean maximize restrictToNonNegative Set basicRows RealMatrix tableau double[] coefficients double coefficient entry epsilon mostNegative sum LinearObjectiveFunction f List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col colIndex count height i j maxUlps negativeVarColumn numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	397	397	1	add	
89	[BUG] [BUGGY] Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null; [FE] AssertionError [CONTEXT] protected PointValuePair getSolution() { int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL); [BUGGY] Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null; [BUGGY] double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); Set<Integer> basicRows = new HashSet<Integer>(); double[] coefficients = new double[getOriginalNumDecisionVariables()]; for (int i = 0; i < coefficients.length; i++) { int colIndex = columnLabels.indexOf("x" + i); if (colIndex < 0) { coefficients[i] = 0; continue; } [CLASS] SimplexTableau [METHOD] getSolution [RETURN_TYPE] PointValuePair  [VARIABLES] Integer basicRow negativeVarBasicRow boolean maximize restrictToNonNegative Set basicRows RealMatrix tableau double[] coefficients double coefficient entry epsilon mostNegative sum LinearObjectiveFunction f List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col colIndex count height i j maxUlps negativeVarColumn numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	398	398	1	replace	
90	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected PointValuePair getSolution() { int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL); [BUGGY] [BUGGY] Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null; double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); Set<Integer> basicRows = new HashSet<Integer>(); double[] coefficients = new double[getOriginalNumDecisionVariables()]; for (int i = 0; i < coefficients.length; i++) { int colIndex = columnLabels.indexOf("x" + i); if (colIndex < 0) { coefficients[i] = 0; continue; } [CLASS] SimplexTableau [METHOD] getSolution [RETURN_TYPE] PointValuePair  [VARIABLES] Integer basicRow negativeVarBasicRow boolean maximize restrictToNonNegative Set basicRows RealMatrix tableau double[] coefficients double coefficient entry epsilon mostNegative sum LinearObjectiveFunction f List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col colIndex count height i j maxUlps negativeVarColumn numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	398	398	1	add	
91	[BUG] [BUGGY] double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); [FE] AssertionError [CONTEXT] protected PointValuePair getSolution() { int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL); Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null; [BUGGY] double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); [BUGGY]  Set<Integer> basicRows = new HashSet<Integer>(); double[] coefficients = new double[getOriginalNumDecisionVariables()]; for (int i = 0; i < coefficients.length; i++) { int colIndex = columnLabels.indexOf("x" + i); if (colIndex < 0) { coefficients[i] = 0; continue; } Integer basicRow = getBasicRow(colIndex); [CLASS] SimplexTableau [METHOD] getSolution [RETURN_TYPE] PointValuePair  [VARIABLES] Integer basicRow negativeVarBasicRow boolean maximize restrictToNonNegative Set basicRows RealMatrix tableau double[] coefficients double coefficient entry epsilon mostNegative sum LinearObjectiveFunction f List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col colIndex count height i j maxUlps negativeVarColumn numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	399	399	1	replace	
92	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected PointValuePair getSolution() { int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL); Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null; [BUGGY] [BUGGY] double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); Set<Integer> basicRows = new HashSet<Integer>(); double[] coefficients = new double[getOriginalNumDecisionVariables()]; for (int i = 0; i < coefficients.length; i++) { int colIndex = columnLabels.indexOf("x" + i); if (colIndex < 0) { coefficients[i] = 0; continue; } Integer basicRow = getBasicRow(colIndex); [CLASS] SimplexTableau [METHOD] getSolution [RETURN_TYPE] PointValuePair  [VARIABLES] Integer basicRow negativeVarBasicRow boolean maximize restrictToNonNegative Set basicRows RealMatrix tableau double[] coefficients double coefficient entry epsilon mostNegative sum LinearObjectiveFunction f List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col colIndex count height i j maxUlps negativeVarColumn numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	399	399	1	add	
93	[BUG] [BUGGY] Set<Integer> basicRows = new HashSet<Integer>(); [FE] AssertionError [CONTEXT] protected PointValuePair getSolution() { int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL); Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null; double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); [BUGGY] Set<Integer> basicRows = new HashSet<Integer>(); [BUGGY] double[] coefficients = new double[getOriginalNumDecisionVariables()]; for (int i = 0; i < coefficients.length; i++) { int colIndex = columnLabels.indexOf("x" + i); if (colIndex < 0) { coefficients[i] = 0; continue; } Integer basicRow = getBasicRow(colIndex); if (basicRow != null && basicRow == 0) {  [CLASS] SimplexTableau [METHOD] getSolution [RETURN_TYPE] PointValuePair  [VARIABLES] Integer basicRow negativeVarBasicRow boolean maximize restrictToNonNegative Set basicRows RealMatrix tableau double[] coefficients double coefficient entry epsilon mostNegative sum LinearObjectiveFunction f List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col colIndex count height i j maxUlps negativeVarColumn numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	401	401	1	replace	
94	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected PointValuePair getSolution() { int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL); Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null; double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); [BUGGY] [BUGGY] Set<Integer> basicRows = new HashSet<Integer>(); double[] coefficients = new double[getOriginalNumDecisionVariables()]; for (int i = 0; i < coefficients.length; i++) { int colIndex = columnLabels.indexOf("x" + i); if (colIndex < 0) { coefficients[i] = 0; continue; } Integer basicRow = getBasicRow(colIndex); if (basicRow != null && basicRow == 0) {  [CLASS] SimplexTableau [METHOD] getSolution [RETURN_TYPE] PointValuePair  [VARIABLES] Integer basicRow negativeVarBasicRow boolean maximize restrictToNonNegative Set basicRows RealMatrix tableau double[] coefficients double coefficient entry epsilon mostNegative sum LinearObjectiveFunction f List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col colIndex count height i j maxUlps negativeVarColumn numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	401	401	1	add	
95	[BUG] [BUGGY] double[] coefficients = new double[getOriginalNumDecisionVariables()]; [FE] AssertionError [CONTEXT] protected PointValuePair getSolution() { int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL); Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null; double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); Set<Integer> basicRows = new HashSet<Integer>(); [BUGGY] double[] coefficients = new double[getOriginalNumDecisionVariables()]; [BUGGY] for (int i = 0; i < coefficients.length; i++) { int colIndex = columnLabels.indexOf("x" + i); if (colIndex < 0) { coefficients[i] = 0; continue; } Integer basicRow = getBasicRow(colIndex); if (basicRow != null && basicRow == 0) {   [CLASS] SimplexTableau [METHOD] getSolution [RETURN_TYPE] PointValuePair  [VARIABLES] Integer basicRow negativeVarBasicRow boolean maximize restrictToNonNegative Set basicRows RealMatrix tableau double[] coefficients double coefficient entry epsilon mostNegative sum LinearObjectiveFunction f List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col colIndex count height i j maxUlps negativeVarColumn numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	replace	
96	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected PointValuePair getSolution() { int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL); Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null; double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); Set<Integer> basicRows = new HashSet<Integer>(); [BUGGY] [BUGGY] double[] coefficients = new double[getOriginalNumDecisionVariables()]; for (int i = 0; i < coefficients.length; i++) { int colIndex = columnLabels.indexOf("x" + i); if (colIndex < 0) { coefficients[i] = 0; continue; } Integer basicRow = getBasicRow(colIndex); if (basicRow != null && basicRow == 0) {   [CLASS] SimplexTableau [METHOD] getSolution [RETURN_TYPE] PointValuePair  [VARIABLES] Integer basicRow negativeVarBasicRow boolean maximize restrictToNonNegative Set basicRows RealMatrix tableau double[] coefficients double coefficient entry epsilon mostNegative sum LinearObjectiveFunction f List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col colIndex count height i j maxUlps negativeVarColumn numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	402	402	1	add	
97	[BUG] [BUGGY] for (int i = 0; i < coefficients.length; i++) { [FE] AssertionError [CONTEXT] protected PointValuePair getSolution() { int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL); Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null; double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); Set<Integer> basicRows = new HashSet<Integer>(); double[] coefficients = new double[getOriginalNumDecisionVariables()]; [BUGGY] for (int i = 0; i < coefficients.length; i++) { [BUGGY] int colIndex = columnLabels.indexOf("x" + i); if (colIndex < 0) { coefficients[i] = 0; continue; } Integer basicRow = getBasicRow(colIndex); if (basicRow != null && basicRow == 0) {    [CLASS] SimplexTableau [METHOD] getSolution [RETURN_TYPE] PointValuePair  [VARIABLES] Integer basicRow negativeVarBasicRow boolean maximize restrictToNonNegative Set basicRows RealMatrix tableau double[] coefficients double coefficient entry epsilon mostNegative sum LinearObjectiveFunction f List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col colIndex count height i j maxUlps negativeVarColumn numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	403	403	1	replace	
98	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected PointValuePair getSolution() { int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL); Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null; double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); Set<Integer> basicRows = new HashSet<Integer>(); double[] coefficients = new double[getOriginalNumDecisionVariables()]; [BUGGY] [BUGGY] for (int i = 0; i < coefficients.length; i++) { int colIndex = columnLabels.indexOf("x" + i); if (colIndex < 0) { coefficients[i] = 0; continue; } Integer basicRow = getBasicRow(colIndex); if (basicRow != null && basicRow == 0) {    [CLASS] SimplexTableau [METHOD] getSolution [RETURN_TYPE] PointValuePair  [VARIABLES] Integer basicRow negativeVarBasicRow boolean maximize restrictToNonNegative Set basicRows RealMatrix tableau double[] coefficients double coefficient entry epsilon mostNegative sum LinearObjectiveFunction f List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col colIndex count height i j maxUlps negativeVarColumn numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	403	403	1	add	
99	[BUG] [BUGGY] int colIndex = columnLabels.indexOf("x" + i); [FE] AssertionError [CONTEXT] protected PointValuePair getSolution() { int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL); Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null; double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); Set<Integer> basicRows = new HashSet<Integer>(); double[] coefficients = new double[getOriginalNumDecisionVariables()]; for (int i = 0; i < coefficients.length; i++) { [BUGGY] int colIndex = columnLabels.indexOf("x" + i); [BUGGY] if (colIndex < 0) { coefficients[i] = 0; continue; } Integer basicRow = getBasicRow(colIndex); if (basicRow != null && basicRow == 0) {    coefficients[i] = 0; [CLASS] SimplexTableau [METHOD] getSolution [RETURN_TYPE] PointValuePair  [VARIABLES] Integer basicRow negativeVarBasicRow boolean maximize restrictToNonNegative Set basicRows RealMatrix tableau double[] coefficients double coefficient entry epsilon mostNegative sum LinearObjectiveFunction f List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col colIndex count height i j maxUlps negativeVarColumn numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	404	404	1	replace	
100	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected PointValuePair getSolution() { int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL); Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null; double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); Set<Integer> basicRows = new HashSet<Integer>(); double[] coefficients = new double[getOriginalNumDecisionVariables()]; for (int i = 0; i < coefficients.length; i++) { [BUGGY] [BUGGY] int colIndex = columnLabels.indexOf("x" + i); if (colIndex < 0) { coefficients[i] = 0; continue; } Integer basicRow = getBasicRow(colIndex); if (basicRow != null && basicRow == 0) {    coefficients[i] = 0; [CLASS] SimplexTableau [METHOD] getSolution [RETURN_TYPE] PointValuePair  [VARIABLES] Integer basicRow negativeVarBasicRow boolean maximize restrictToNonNegative Set basicRows RealMatrix tableau double[] coefficients double coefficient entry epsilon mostNegative sum LinearObjectiveFunction f List columnLabels columnsToDrop constraints normalized String NEGATIVE_VAR_COLUMN_LABEL int DEFAULT_ULPS artificialVar col colIndex count height i j maxUlps negativeVarColumn numArtificialVariables numDecisionVariables numSlackVariables row slackVar width zIndex long serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.22360679774997896	404	404	1	add	
