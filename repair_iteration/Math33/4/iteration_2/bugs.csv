bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1,  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1,  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [BUGGY]    constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1,  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0,    constraint.getRelationship().oppositeRelationship(),    0    *    constraint.getValue());    	non-compiled	[CE]  ')'  expected	5	None	replace
2	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship(),  1  *  constraint.getValue());  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship(),  1  *  constraint.getValue());  [BUGGY]    constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship(),  1  *  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0,    constraint.getRelationship().oppositeRelationship(),    0    *    constraint.getValue());    	non-compiled	[CE]  ')'  expected	5	None	replace
3	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [BUGGY]    constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0,    constraint.getRelationship().oppositeRelationship(),    0    *    constraint.getValue());    	non-compiled	[CE]  ')'  expected	5	None	replace
4	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0),  constraint.getRelationship().oppositeRelationship());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValu  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0),  constraint.getRelationship().oppositeRelationship());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValu  [BUGGY]    return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0),  constraint.getRelationship().oppositeRelationship());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValu	      LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(-1),    constraint.getRelationship().oppositeRelationship());    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValu    	non-compiled	[CE]  ';'  expected	11	None	replace
5	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship()),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValu  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship()),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValu  [BUGGY]    return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship()),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValu	      LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(-1),    constraint.getRelationship().oppositeRelationship());    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValu    	non-compiled	[CE]  ')'  expected	11	None	replace
6	[BUG]  [BUGGY]  constraint.getRelationship().mapMultiply(-1,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  constraint.getRelationship().mapMultiply(-1,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [BUGGY]    return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	constraint.getRelationship().mapMultiply(-1,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());	      constraint.getRelationship().mapMultiply(-1),    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValue());    constraints.getRelationship().oppositeRelationship()    	non-compiled	[CE]  ';'  expected	3	None	replace
7	[BUG]  [BUGGY]  constraint.getRelationship().mapMultiply(0,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  constraint.getRelationship().mapMultiply(0,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [BUGGY]    return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	constraint.getRelationship().mapMultiply(0,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());	      constraint.getRelationship().mapMultiply(-1),    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValue());    constraints.getRelationship().oppositeRelationship()    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
8	[BUG]  [BUGGY]  constraint.getRelationship().mapMultiply(0,  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  constraint.getRelationship().mapMultiply(0,  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [BUGGY]    return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	constraint.getRelationship().mapMultiply(0,  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());	      constraint.getRelationship().mapMultiply(-1),    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValue());    constraints.getRelationship().oppositeRelationship()    	non-compiled	[CE]  ';'  expected	3	None	replace
9	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [BUGGY]    constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients(),    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValue());    	non-compiled	[CE]  ';'  expected	8	None	replace
10	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().oppositeRelationship(),  1  *  constraint.getValue());  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().oppositeRelationship(),  1  *  constraint.getValue());  [BUGGY]    constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().oppositeRelationship(),  1  *  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients(),    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValue());    	non-compiled	[CE]  ';'  expected	8	None	replace
11	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().oppositeRelationship(),  0,  -1  *  constraint.getValue());  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().oppositeRelationship(),  0,  -1  *  constraint.getValue());  [BUGGY]    constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().oppositeRelationship(),  0,  -1  *  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients(),    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValue());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
12	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship()),  -1  *  constraint.getValue());  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship()),  -1  *  constraint.getValue());  [BUGGY]    constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship()),  -1  *  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients().mapMultiply(1,    constraint.getRelationship().oppositeRelationship()),    -1    *    constraint.getValue());    	non-compiled	[CE]  ';'  expected	16	None	replace
13	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(2,  constraint.getRelationship().oppositeRelationship()),  -1  *  constraint.getValue());  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(2,  constraint.getRelationship().oppositeRelationship()),  -1  *  constraint.getValue());  [BUGGY]    constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(2,  constraint.getRelationship().oppositeRelationship()),  -1  *  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients().mapMultiply(1,    constraint.getRelationship().oppositeRelationship()),    -1    *    constraint.getValue());    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
14	[BUG]  [BUGGY]  LinearConstraint  constraint  =(LinearConstraint)constraint.get();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  LinearConstraint  constraint  =(LinearConstraint)constraint.get();  [BUGGY]    return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =(LinearConstraint)constraint.get();	      LinearConstraint    constraint    =(LinearConstraint)constraint.clone();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
15	[BUG]  [BUGGY]  LinearConstraint  constraint  =(LinearConstraint)constraint.getValue();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  LinearConstraint  constraint  =(LinearConstraint)constraint.getValue();  [BUGGY]    return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =(LinearConstraint)constraint.getValue();	      LinearConstraint    constraint    =(LinearConstraint)constraint.clone();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
16	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().mapMultiply(-1  *  constraint.getValue());  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().mapMultiply(-1  *  constraint.getValue());  [BUGGY]    return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().mapMultiply(-1  *  constraint.getValue());	      LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().mapMultiply(-1    *    constraint.getValue());    	non-compiled	[CE]  >  expected	12	None	replace
17	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship().mapMultiply(-1  *  constraint.getValue());  [CE]  >  expected  [FE]          AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship().mapMultiply(-1  *  constraint.getValue());  [BUGGY]    return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship().mapMultiply(-1  *  constraint.getValue());	      LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().mapMultiply(-1    *    constraint.getValue());    	non-compiled	[CE]  >  expected	12	None	replace
18	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [CE]  >  expected  [FE]            AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [BUGGY]    return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());	      LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().mapMultiply(-1    *    constraint.getValue());    	non-compiled	[CE]  >  expected	12	None	replace
19	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(4,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(4,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [BUGGY]    constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(4,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients().mapMultiply(2,    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValue());    	non-compiled	[CE]  ')'  expected	15	None	replace
20	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().mapMultiply(-1);  [CE]  >  expected  [FE]          AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().mapMultiply(-1);  [BUGGY]    return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().mapMultiply(-1);	      LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().mapMultiply(-1);    	non-compiled	[CE]  >  expected	13	None	replace
21	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship();  [CE]  >  expected  [FE]            AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship();  [BUGGY]    return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship();	      LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().mapMultiply(-1);    	non-compiled	[CE]  >  expected	13	None	replace
22	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().mapMultiply(1);  [CE]  >  expected  [FE]              AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().mapMultiply(1);  [BUGGY]    return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().mapMultiply(1);	      LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().mapMultiply(-1);    	non-compiled	[CE]  >  expected	13	None	replace
23	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship().mapMultiply(0);  [CE]  >  expected  [FE]                AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship().mapMultiply(0);  [BUGGY]    return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship().mapMultiply(0);	      LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().mapMultiply(-1);    	non-compiled	[CE]  >  expected	13	None	replace
24	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [BUGGY]    return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());	      LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(-1),    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValue());    	non-compiled	[CE]  ')'  expected	10	None	replace
25	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [BUGGY]    return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());	      LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(-1),    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValue());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
26	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0),  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0),  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [BUGGY]    return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0),  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());	      LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(-1),    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValue());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
27	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().mapMultiply(-1  *  constraint.getValue()));  [CE]  >  expected  [FE]            AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().mapMultiply(-1  *  constraint.getValue()));  [BUGGY]    return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().mapMultiply(-1  *  constraint.getValue()));	      LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().mapMultiply(-1    *    constraint.getValue()));    	non-compiled	[CE]  >  expected	14	None	replace
28	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship().mapMultiply(-1  *  constraint.getValue()));  [CE]  >  expected  [FE]              AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship().mapMultiply(-1  *  constraint.getValue()));  [BUGGY]    return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship().mapMultiply(-1  *  constraint.getValue()));	      LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().mapMultiply(-1    *    constraint.getValue()));    	non-compiled	[CE]  >  expected	14	None	replace
29	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().mapMultiply(0  *  constraint.getValue()));  [CE]  >  expected  [FE]                AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().mapMultiply(0  *  constraint.getValue()));  [BUGGY]    return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().mapMultiply(0  *  constraint.getValue()));	      LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().mapMultiply(-1    *    constraint.getValue()));    	non-compiled	[CE]  >  expected	14	None	replace
30	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [BUGGY]    constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0),    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValue());    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
31	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(2),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(2),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [BUGGY]    constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(2),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0),    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValue());    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
32	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0),  constraint.getRelationship().oppositeRelationship(),  1  *  constraint.getValue());  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0),  constraint.getRelationship().oppositeRelationship(),  1  *  constraint.getValue());  [BUGGY]    constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0),  constraint.getRelationship().oppositeRelationship(),  1  *  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0),    constraint.getRelationship().oppositeRelationship(),    0    *    constraint.getValue());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
33	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1),  constraint.getRelationship().oppositeRelationship(),  1  *  constraint.getValue());  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1),  constraint.getRelationship().oppositeRelationship(),  1  *  constraint.getValue());  [BUGGY]    constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1),  constraint.getRelationship().oppositeRelationship(),  1  *  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0),    constraint.getRelationship().oppositeRelationship(),    0    *    constraint.getValue());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
34	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship(),  0,  -1  *  constraint.getValue());  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship(),  0,  -1  *  constraint.getValue());  [BUGGY]    constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship(),  0,  -1  *  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0,    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValue());    	non-compiled	[CE]  ')'  expected	6	None	replace
35	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship()  -  -1  *  constraint.getValue()));  [CE]  >  expected  [FE]            AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship()  -  -1  *  constraint.getValue()));  [BUGGY]    return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship()  -  -1  *  constraint.getValue()));	      LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().mapMultiply(-1    *    constraint.getValue()));    	non-compiled	[CE]  >  expected	14	None	replace
36	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship()  -  -1  *  constraint.getValue());  [CE]  >  expected  [FE]              AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship()  -  -1  *  constraint.getValue());  [BUGGY]    return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship()  -  -1  *  constraint.getValue());	      LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().mapMultiply(-1    *    constraint.getValue()));    	non-compiled	[CE]  >  expected	14	None	replace
37	[BUG]  [BUGGY]  constraint.getRelationship().mapMultiply(-2),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  constraint.getRelationship().mapMultiply(-2),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [BUGGY]    return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	constraint.getRelationship().mapMultiply(-2),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());	      constraint.getRelationship().mapMultiply(-1),    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValue());    	non-compiled	[CE]  ';'  expected	1	None	replace
38	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship());  [CE]  >  expected  [FE]          AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship());  [BUGGY]    return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship());	      LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().mapMultiply(-1);    	non-compiled	[CE]  >  expected	13	None	replace
39	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship()  -  1  *  constraint.getValue());  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship()  -  1  *  constraint.getValue());  [BUGGY]    return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship()  -  1  *  constraint.getValue());	      LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().mapMultiply(-1    *    constraint.getValue());    	non-compiled	[CE]  >  expected	12	None	replace
40	[BUG]  [BUGGY]  constraint.getRelationship().mapMultiply(0),  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  constraint.getRelationship().mapMultiply(0),  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [BUGGY]    return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	constraint.getRelationship().mapMultiply(0),  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());	      constraint.getRelationship().mapMultiply(-1),    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValue());    constraints.getRelationship().oppositeRelationship()    	non-compiled	[CE]  ';'  expected	3	None	replace
41	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-2),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-2),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [BUGGY]    return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-2),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());	      LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(-1),    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValue());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
42	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0),  constraint.getRelationship().oppositeRelationship());  constraint.getRelationship().oppositeRelationship()  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0),  constraint.getRelationship().oppositeRelationship());  constraint.getRelationship().oppositeRelationship()  [BUGGY]    return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0),  constraint.getRelationship().oppositeRelationship());  constraint.getRelationship().oppositeRelationship()	      LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(-1),    constraint.getRelationship().oppositeRelationship());    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValu    	non-compiled	[CE]  not  a  statement	11	None	replace
43	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0),  constraint.getRelationship().oppositeRelationship());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getVal  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0),  constraint.getRelationship().oppositeRelationship());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getVal  [BUGGY]    return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0),  constraint.getRelationship().oppositeRelationship());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getVal	      LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(-1),    constraint.getRelationship().oppositeRelationship());    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValu    	non-compiled	[CE]  ';'  expected	11	None	replace
44	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0),  constraint.getRelationship().oppositeRelationship());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.get  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0),  constraint.getRelationship().oppositeRelationship());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.get  [BUGGY]    return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0),  constraint.getRelationship().oppositeRelationship());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.get	      LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(-1),    constraint.getRelationship().oppositeRelationship());    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValu    	non-compiled	[CE]  ';'  expected	11	None	replace
45	[BUG]  [BUGGY]  constraint.getRelationship().mapMultiply(true),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  constraint.getRelationship().mapMultiply(true),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [BUGGY]    return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	constraint.getRelationship().mapMultiply(true),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());	      constraint.getRelationship().mapMultiply(-1),    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValue());    return    new    LinearConstraint(constraint.getCoefficients().mapMultiply(    	non-compiled	[CE]  ';'  expected	4	None	replace
46	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().relationship(),  -1  *  constraint.getValue());  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().relationship(),  -1  *  constraint.getValue());  [BUGGY]    constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().relationship(),  -1  *  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients(),    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValue());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
47	[BUG]  [BUGGY]  constraint.getRelationship().mapMultiply(0,  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  constraint.getRelationship().mapMultiply(0,  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(  [BUGGY]    return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	constraint.getRelationship().mapMultiply(0,  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(	      constraint.getRelationship().mapMultiply(-1),    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValue());    return    new    LinearConstraint(constraint.getCoefficients().mapMultiply(    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
48	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().relationship(),  -1  *  constraint.getValue());  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().relationship(),  -1  *  constraint.getValue());  [BUGGY]    constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().relationship(),  -1  *  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0,    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValue());    	non-compiled	[CE]  ')'  expected	6	None	replace
49	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship()),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getVal  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship()),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getVal  [BUGGY]    return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship()),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getVal	      LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(-1),    constraint.getRelationship().oppositeRelationship());    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValu    	non-compiled	[CE]  ')'  expected	11	None	replace
50	[BUG]  [BUGGY]  if(constraint.getRelationship()!=  null)  {  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValu  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  if(constraint.getRelationship()!=  null)  {  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValu  [BUGGY]    return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	if(constraint.getRelationship()!=  null)  {  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValu	      LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(-1),    constraint.getRelationship().oppositeRelationship());    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValu    	non-compiled	[CE]  ')'  expected	11	None	replace
51	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().mapMultiply(0);  [CE]  >  expected  [FE]          AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().mapMultiply(0);  [BUGGY]    return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().mapMultiply(0);	      LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().mapMultiply(-1);    	non-compiled	[CE]  >  expected	13	None	replace
52	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {    [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [BUGGY]    return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());	      LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(-1),    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValue());    	non-compiled	[CE]  ')'  expected	10	None	replace
