bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship().mapMultiply(-1  *  constraint.getValue()));  [CE]  >  expected  [FE]                  AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship().mapMultiply(-1  *  constraint.getValue()));  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship().mapMultiply(-1  *  constraint.getValue()));	  LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().oppositeRelationship().mapMultiply(-1    *    constraint.getValue()));    	non-compiled	[CE]  >  expected	28	None	replace
2	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship().mapMultiply(0  *  constraint.getValue()));  [CE]  >  expected  [FE]                    AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship().mapMultiply(0  *  constraint.getValue()));  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship().mapMultiply(0  *  constraint.getValue()));	  LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().oppositeRelationship().mapMultiply(-1    *    constraint.getValue()));    	non-compiled	[CE]  >  expected	28	None	replace
3	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship().mapMultiply(1  *  constraint.getValue()));  [CE]  >  expected  [FE]                      AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship().mapMultiply(1  *  constraint.getValue()));  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship().mapMultiply(1  *  constraint.getValue()));	  LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().oppositeRelationship().mapMultiply(-1    *    constraint.getValue()));    	non-compiled	[CE]  >  expected	28	None	replace
4	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1),  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1),  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [BUGGY]      constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1),  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients().mapMultiply(1),    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValue());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
5	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship()  *  constraint.getValue());  [CE]  >  expected  [FE]                  AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship()  *  constraint.getValue());  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship()  *  constraint.getValue());	  LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().oppositeRelationship()    -    -1    *    constraint.getValue());    	non-compiled	[CE]  >  expected	36	None	replace
6	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship()  +  1  *  constraint.getValue());  [CE]  >  expected  [FE]                    AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship()  +  1  *  constraint.getValue());  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship()  +  1  *  constraint.getValue());	  LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().oppositeRelationship()    -    -1    *    constraint.getValue());    	non-compiled	[CE]  >  expected	36	None	replace
7	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship()  -  -1  *  constraint.getValue());  [CE]  >  expected  [FE]                      AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship()  -  -1  *  constraint.getValue());  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship()  -  -1  *  constraint.getValue());	  LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().oppositeRelationship()    -    -1    *    constraint.getValue());    	non-compiled	[CE]  >  expected	36	None	replace
8	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship().mapMultiply(0);  [CE]  >  expected  [FE]                    AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship().mapMultiply(0);  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship().mapMultiply(0);	  LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().oppositeRelationship().mapMultiply(0);    	non-compiled	[CE]  >  expected	23	None	replace
9	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship().mapMultiply(1);  [CE]  >  expected  [FE]                      AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship().mapMultiply(1);  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship().mapMultiply(1);	  LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().oppositeRelationship().mapMultiply(0);    	non-compiled	[CE]  >  expected	23	None	replace
10	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship().mapMultiply(1);  [CE]  >  expected  [FE]                        AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship().mapMultiply(1);  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship().mapMultiply(1);	  LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().oppositeRelationship().mapMultiply(0);    	non-compiled	[CE]  >  expected	23	None	replace
11	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1,  constraint.getRelationship().oppositeRelationship(),  0,  -1  *  constraint.getValue());  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1,  constraint.getRelationship().oppositeRelationship(),  0,  -1  *  constraint.getValue());  [BUGGY]      constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1,  constraint.getRelationship().oppositeRelationship(),  0,  -1  *  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0,    constraint.getRelationship().oppositeRelationship(),    0,    -1    *    constraint.getValue());    	non-compiled	[CE]  ')'  expected	34	None	replace
12	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(2,  constraint.getRelationship().oppositeRelationship(),  0,  -1  *  constraint.getValue());  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(2,  constraint.getRelationship().oppositeRelationship(),  0,  -1  *  constraint.getValue());  [BUGGY]      constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(2,  constraint.getRelationship().oppositeRelationship(),  0,  -1  *  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0,    constraint.getRelationship().oppositeRelationship(),    0,    -1    *    constraint.getValue());    	non-compiled	[CE]  ')'  expected	34	None	replace
13	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship(),  0,  1  *  constraint.getValue());  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship(),  0,  1  *  constraint.getValue());  [BUGGY]      constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship(),  0,  1  *  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0,    constraint.getRelationship().oppositeRelationship(),    0,    -1    *    constraint.getValue());    	non-compiled	[CE]  ')'  expected	34	None	replace
14	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship()  -  1  *  constraint.getValue());  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship()  -  1  *  constraint.getValue());  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship()  -  1  *  constraint.getValue());	  LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().oppositeRelationship()    -    1    *    constraint.getValue());    	non-compiled	[CE]  >  expected	39	None	replace
15	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship());  constraint.getRelationship().oppositeRelationship()  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship());  constraint.getRelationship().oppositeRelationship()  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship());  constraint.getRelationship().oppositeRelationship()	  LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0),    constraint.getRelationship().oppositeRelationship());    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValu    	non-compiled	[CE]  ';'  expected	4	None	replace
16	[BUG]  [BUGGY]  constraint.getRelationship().mapMultiply(false),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  constraint.getRelationship().mapMultiply(false),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	constraint.getRelationship().mapMultiply(false),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());	  constraint.getRelationship().mapMultiply(true),    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValue());    	non-compiled	[CE]  ';'  expected	45	None	replace
17	[BUG]  [BUGGY]  constraint.getRelationship().mapMultiply(true,  -1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  constraint.getRelationship().mapMultiply(true,  -1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	constraint.getRelationship().mapMultiply(true,  -1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());	  constraint.getRelationship().mapMultiply(true),    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValue());    	non-compiled	[CE]  ';'  expected	45	None	replace
18	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1,  constraint.getRelationship().relationship(),  -1  *  constraint.getValue());  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1,  constraint.getRelationship().relationship(),  -1  *  constraint.getValue());  [BUGGY]      constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1,  constraint.getRelationship().relationship(),  -1  *  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0,    constraint.getRelationship().relationship(),    -1    *    constraint.getValue());    	non-compiled	[CE]  ')'  expected	48	None	replace
19	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship(),  -1  *  constraint.getValue());  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship(),  -1  *  constraint.getValue());  [BUGGY]      constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship(),  -1  *  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0,    constraint.getRelationship().relationship(),    -1    *    constraint.getValue());    	non-compiled	[CE]  ')'  expected	48	None	replace
20	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(2,  constraint.getRelationship().relationship(),  -1  *  constraint.getValue());  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(2,  constraint.getRelationship().relationship(),  -1  *  constraint.getValue());  [BUGGY]      constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(2,  constraint.getRelationship().relationship(),  -1  *  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0,    constraint.getRelationship().relationship(),    -1    *    constraint.getValue());    	non-compiled	[CE]  ')'  expected	48	None	replace
21	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getVal  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getVal  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getVal	  LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0),    constraint.getRelationship().oppositeRelationship());    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getVal    	non-compiled	[CE]  ';'  expected	43	None	replace
22	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getVal  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getVal  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getVal	  LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0),    constraint.getRelationship().oppositeRelationship());    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getVal    	non-compiled	[CE]  ')'  expected	43	None	replace
23	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship().mapMultiply(0  *  constraint.getValue()));  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship().mapMultiply(0  *  constraint.getValue()));  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship().mapMultiply(0  *  constraint.getValue()));	  LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    &&    constraint.getRelationship().mapMultiply(-1    *    constraint.getValue()));    	non-compiled	[CE]  >  expected	27	None	replace
24	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [CE]  >  expected  [FE]                  AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());	  LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    &&    constraint.getRelationship().mapMultiply(-1    *    constraint.getValue()));    	non-compiled	[CE]  >  expected	27	None	replace
25	[BUG]  [BUGGY]  LinearConstraint  constraint  =(LinearConstraint)constraint.get(0);  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearConstraint  constraint  =(LinearConstraint)constraint.get(0);  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =(LinearConstraint)constraint.get(0);	  LinearConstraint    constraint    =(LinearConstraint)constraint.get();    	non-compiled	[CE]  '.class'  expected	14	None	replace
26	[BUG]  [BUGGY]  LinearConstraint  constraint  =(LinearConstraint)constraint.remove();  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearConstraint  constraint  =(LinearConstraint)constraint.remove();  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =(LinearConstraint)constraint.remove();	  LinearConstraint    constraint    =(LinearConstraint)constraint.get();    	non-compiled	[CE]  '.class'  expected	14	None	replace
27	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());	  LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0),    constraint.getRelationship().oppositeRelationship(),    0    *    constraint.getValue());    	non-compiled	[CE]  '.class'  expected	26	None	replace
28	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1),  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1),  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1),  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());	  LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0),    constraint.getRelationship().oppositeRelationship(),    0    *    constraint.getValue());    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
29	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(2),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(2),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(2),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());	  LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(-2),    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValue());    	non-compiled	[CE]  '.class'  expected	41	None	replace
30	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());	  LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValue());    	non-compiled	[CE]  >  expected	18	None	replace
31	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [CE]  >  expected  [FE]                  AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());	  LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValue());    	non-compiled	[CE]  >  expected	18	None	replace
32	[BUG]  [BUGGY]  if(constraint.getRelationship()!=  null)  {  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getVal  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  if(constraint.getRelationship()!=  null)  {  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getVal  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	if(constraint.getRelationship()!=  null)  {  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getVal	  if(constraint.getRelationship()!=    null)    {    LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(-1),    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValu    	non-compiled	[CE]  ')'  expected	50	None	replace
33	[BUG]  [BUGGY]  Constraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  Constraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	Constraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());	  if(constraint.getRelationship()!=    null)    {    LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(-1),    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValu    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
34	[BUG]  [BUGGY]  if(constraint.getRelationship()!=  null)  {  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.get  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  if(constraint.getRelationship()!=  null)  {  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.get  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	if(constraint.getRelationship()!=  null)  {  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.get	  if(constraint.getRelationship()!=    null)    {    LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(-1),    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValu    	non-compiled	[CE]  ')'  expected	50	None	replace
35	[BUG]  [BUGGY]  constraint.getRelationship().mapMultiply(-1,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  return  new  LinearConstraint(constraint.getCoefficients().mapMulti  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  constraint.getRelationship().mapMultiply(-1,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  return  new  LinearConstraint(constraint.getCoefficients().mapMulti  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	constraint.getRelationship().mapMultiply(-1,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  return  new  LinearConstraint(constraint.getCoefficients().mapMulti	  constraint.getRelationship().mapMultiply(0,    constraint.getRelationship().oppositeRelationship(),    0    *    constraint.getValue());    return    new    LinearConstraint(constraint.getCoefficients().mapMultiply(    	non-compiled	[CE]  ')'  expected	47	None	replace
36	[BUG]  [BUGGY]  constraint.getRelationship().mapMultiply(1,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  constraint.getRelationship().mapMultiply(1,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	constraint.getRelationship().mapMultiply(1,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());	  constraint.getRelationship().mapMultiply(-1,    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValue());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
37	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().mapMultiply(0);  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().mapMultiply(0);  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().mapMultiply(0);	  LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().mapMultiply(0);    	non-compiled	[CE]  >  expected	51	None	replace
38	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship()  *  constraint.getValue()));  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship()  *  constraint.getValue()));  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship()  *  constraint.getValue()));	  LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().oppositeRelationship()    -    -1    *    constraint.getValue()));    	non-compiled	[CE]  >  expected	35	None	replace
39	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship()  -  1  *  constraint.getValue()));  [CE]  >  expected  [FE]                  AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship()  -  1  *  constraint.getValue()));  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship()  -  1  *  constraint.getValue()));	  LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().oppositeRelationship()    -    -1    *    constraint.getValue()));    	non-compiled	[CE]  >  expected	35	None	replace
40	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship()  -  -1  *  constraint.getValue()));  [CE]  >  expected  [FE]                    AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship()  -  -1  *  constraint.getValue()));  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship()  -  -1  *  constraint.getValue()));	  LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().oppositeRelationship()    -    -1    *    constraint.getValue()));    	non-compiled	[CE]  >  expected	35	None	replace
41	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship()  +  1  *  constraint.getValue()));  [CE]  >  expected  [FE]                      AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship()  +  1  *  constraint.getValue()));  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship()  +  1  *  constraint.getValue()));	  LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().oppositeRelationship()    -    -1    *    constraint.getValue()));    	non-compiled	[CE]  >  expected	35	None	replace
42	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship().mapMultiply(-1  *  constraint.getValue());  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship().mapMultiply(-1  *  constraint.getValue());  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship().mapMultiply(-1  *  constraint.getValue());	  LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    &&    constraint.getRelationship().mapMultiply(-1    *    constraint.getValue());    	non-compiled	[CE]  >  expected	16	None	replace
43	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship().mapMultiply(0  *  constraint.getValue());  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship().mapMultiply(0  *  constraint.getValue());  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship().mapMultiply(0  *  constraint.getValue());	  LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    &&    constraint.getRelationship().mapMultiply(-1    *    constraint.getValue());    	non-compiled	[CE]  >  expected	16	None	replace
44	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().mapMultiply(1);  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().mapMultiply(1);  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().mapMultiply(1);	  LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    &&    constraint.getRelationship().mapMultiply(-1);    	non-compiled	[CE]  >  expected	20	None	replace
45	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship();  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship();  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship();	  LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    &&    constraint.getRelationship().mapMultiply(-1);    	non-compiled	[CE]  >  expected	20	None	replace
46	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship());  [CE]  >  expected  [FE]                  AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship());  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship());	  LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    &&    constraint.getRelationship().mapMultiply(-1);    	non-compiled	[CE]  >  expected	20	None	replace
47	[BUG]  [BUGGY]  constraint.getRelationship().mapMultiply(0),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  constraint.getRelationship().mapMultiply(0),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	constraint.getRelationship().mapMultiply(0),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());	  constraint.getRelationship().mapMultiply(0),    constraint.getRelationship().oppositeRelationship(),    0    *    constraint.getValue());    	non-compiled	[CE]  ';'  expected	40	None	replace
48	[BUG]  [BUGGY]  constraint.getRelationship().mapMultiply(1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  constraint.getRelationship().mapMultiply(1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	constraint.getRelationship().mapMultiply(1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());	  constraint.getRelationship().mapMultiply(0),    constraint.getRelationship().oppositeRelationship(),    0    *    constraint.getValue());    	non-compiled	[CE]  ';'  expected	40	None	replace
49	[BUG]  [BUGGY]  constraint.getRelationship().mapMultiply(-1,  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  constraint.getRelationship().mapMultiply(-1,  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	constraint.getRelationship().mapMultiply(-1,  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());	  constraint.getRelationship().mapMultiply(0),    constraint.getRelationship().oppositeRelationship(),    0    *    constraint.getValue());    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
50	[BUG]  [BUGGY]  Return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  Return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [BUGGY]      constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	Return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients(),    constraint.getRelationship().relationship(),    -1    *    constraint.getValue());    	non-compiled	[CE]  not  a  statement	46	None	replace
51	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1,  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1,  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1,  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());	  LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0,    constraint.getRelationship().oppositeRelationship(),    0    *    constraint.getValue());    	non-compiled	[CE]  ')'  expected	24	None	replace
52	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(2,  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(2,  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(2,  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());	  LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0,    constraint.getRelationship().oppositeRelationship(),    0    *    constraint.getValue());    	non-compiled	[CE]  ')'  expected	24	None	replace
53	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1,  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1,  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1,  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());	  LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0,    constraint.getRelationship().oppositeRelationship(),    0    *    constraint.getValue());    	non-compiled	[CE]  ')'  expected	24	None	replace
54	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1,  constraint.getRelationship().oppositeRelationship()),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getVal  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1,  constraint.getRelationship().oppositeRelationship()),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getVal  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1,  constraint.getRelationship().oppositeRelationship()),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getVal	  LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0,    constraint.getRelationship().oppositeRelationship()),    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getVal    	non-compiled	[CE]  ')'  expected	49	None	replace
55	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship(),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getVal  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship(),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getVal  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship(),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getVal	  LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0,    constraint.getRelationship().oppositeRelationship()),    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getVal    	non-compiled	[CE]  ')'  expected	49	None	replace
56	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1,  constraint.getRelationship().oppositeRelationship()),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getVal  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1,  constraint.getRelationship().oppositeRelationship()),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getVal  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1,  constraint.getRelationship().oppositeRelationship()),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getVal	  LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0,    constraint.getRelationship().oppositeRelationship()),    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getVal    	non-compiled	[CE]  ')'  expected	49	None	replace
57	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1,  constraint.getRelationship().oppositeRelationship(),  1  *  constraint.getValue());  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1,  constraint.getRelationship().oppositeRelationship(),  1  *  constraint.getValue());  [BUGGY]      constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1,  constraint.getRelationship().oppositeRelationship(),  1  *  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients().mapMultiply(1,    constraint.getRelationship().oppositeRelationship(),    0    *    constraint.getValue());    	non-compiled	[CE]  ')'  expected	1	None	replace
58	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(2,  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(2,  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [BUGGY]      constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(2,  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients().mapMultiply(1,    constraint.getRelationship().oppositeRelationship(),    0    *    constraint.getValue());    	non-compiled	[CE]  ')'  expected	1	None	replace
59	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  +  constraint.getRelationship().mapMultiply(1);  [CE]  >  expected  [FE]                  AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  +  constraint.getRelationship().mapMultiply(1);  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  +  constraint.getRelationship().mapMultiply(1);	  LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    &&    constraint.getRelationship().mapMultiply(1);    	non-compiled	[CE]  >  expected	22	None	replace
60	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship(),  0);  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship(),  0);  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship(),  0);	  LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().oppositeRelationship());    	non-compiled	[CE]  >  expected	38	None	replace
61	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship()  +  1);  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship()  +  1);  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship()  +  1);	  LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().oppositeRelationship());    	non-compiled	[CE]  >  expected	38	None	replace
62	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship()  +  1;  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship()  +  1;  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship()  +  1;	  LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().oppositeRelationship();    	non-compiled	[CE]  >  expected	21	None	replace
63	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship(),  -1;  [CE]  >  expected  [FE]                  AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship(),  -1;  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship(),  -1;	  LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().oppositeRelationship();    	non-compiled	[CE]  >  expected	21	None	replace
64	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());	  LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0,    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValue());    	non-compiled	[CE]  ')'  expected	52	None	replace
65	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());	  LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0,    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValue());    	non-compiled	[CE]  ')'  expected	52	None	replace
66	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(2,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(2,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(2,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());	  LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0,    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValue());    	non-compiled	[CE]  ')'  expected	52	None	replace
67	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1,  constraint.getRelationship().oppositeRelationship()),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValu  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1,  constraint.getRelationship().oppositeRelationship()),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValu  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1,  constraint.getRelationship().oppositeRelationship()),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValu	  LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0,    constraint.getRelationship().oppositeRelationship()),    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValu    	non-compiled	[CE]  ')'  expected	5	None	replace
68	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship()),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship()),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship()),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());	  LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0,    constraint.getRelationship().oppositeRelationship()),    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValu    	non-compiled	[CE]  '.class'  expected	5	None	replace
69	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship(),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValu  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship(),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValu  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship(),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValu	  LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0,    constraint.getRelationship().oppositeRelationship()),    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValu    	non-compiled	[CE]  ')'  expected	5	None	replace
70	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(2,  constraint.getRelationship().oppositeRelationship()),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValu  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(2,  constraint.getRelationship().oppositeRelationship()),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValu  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(2,  constraint.getRelationship().oppositeRelationship()),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValu	  LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0,    constraint.getRelationship().oppositeRelationship()),    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValu    	non-compiled	[CE]  ')'  expected	5	None	replace
71	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(2,  constraint.getRelationship().oppositeRelationship(),  1  *  constraint.getValue());  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(2,  constraint.getRelationship().oppositeRelationship(),  1  *  constraint.getValue());  [BUGGY]      constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(2,  constraint.getRelationship().oppositeRelationship(),  1  *  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0,    constraint.getRelationship().oppositeRelationship(),    1    *    constraint.getValue());    	non-compiled	[CE]  ')'  expected	2	None	replace
72	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().oppositeRelationship(),  0,  0  *  constraint.getValue());  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().oppositeRelationship(),  0,  0  *  constraint.getValue());  [BUGGY]      constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().oppositeRelationship(),  0,  0  *  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients(),    constraint.getRelationship().oppositeRelationship(),    0,    -1    *    constraint.getValue());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
73	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().oppositeRelationship(),  0,  1  *  constraint.getValue());  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().oppositeRelationship(),  0,  1  *  constraint.getValue());  [BUGGY]      constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().oppositeRelationship(),  0,  1  *  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients(),    constraint.getRelationship().oppositeRelationship(),    0,    -1    *    constraint.getValue());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
74	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().oppositeRelationship(),  1,  -1  *  constraint.getValue());  [CE]  '.class'  expected  [FE]                          AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().oppositeRelationship(),  1,  -1  *  constraint.getValue());  [BUGGY]      constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().oppositeRelationship(),  1,  -1  *  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients(),    constraint.getRelationship().oppositeRelationship(),    0,    -1    *    constraint.getValue());    	non-compiled	[CE]  '.class'  expected	11	None	replace
75	[BUG]  [BUGGY]  constraint.getRelationship().mapMultiply(0,  constraint.getRelationship().oppositeRelationship(),  1  *  constraint.getValue());  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  constraint.getRelationship().mapMultiply(0,  constraint.getRelationship().oppositeRelationship(),  1  *  constraint.getValue());  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	constraint.getRelationship().mapMultiply(0,  constraint.getRelationship().oppositeRelationship(),  1  *  constraint.getValue());	  constraint.getRelationship().mapMultiply(0,    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValue());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
76	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().mapMultiply(0  *  constraint.getValue()));  [CE]  >  expected  [FE]                    AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().mapMultiply(0  *  constraint.getValue()));  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().mapMultiply(0  *  constraint.getValue()));	  LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().mapMultiply(0    *    constraint.getValue()));    	non-compiled	[CE]  >  expected	29	None	replace
77	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().mapMultiply(0,  constraint.getValue()));  [CE]  >  expected  [FE]                      AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().mapMultiply(0,  constraint.getValue()));  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().mapMultiply(0,  constraint.getValue()));	  LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().mapMultiply(0    *    constraint.getValue()));    	non-compiled	[CE]  >  expected	29	None	replace
78	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().mapMultiply(1  *  constraint.getValue()));  [CE]  >  expected  [FE]                        AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().mapMultiply(1  *  constraint.getValue()));  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().mapMultiply(1  *  constraint.getValue()));	  LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().mapMultiply(0    *    constraint.getValue()));    	non-compiled	[CE]  >  expected	29	None	replace
79	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().oppositeRelationship(),  0,  constraint.getValue());  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().oppositeRelationship(),  0,  constraint.getValue());  [BUGGY]      constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().oppositeRelationship(),  0,  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients(),    constraint.getRelationship().oppositeRelationship(),    0    *    constraint.getValue());    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
80	[BUG]  [BUGGY]  constraint.getRelationship().mapMultiply(1,  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  constraint.getRelationship().mapMultiply(1,  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	constraint.getRelationship().mapMultiply(1,  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());	  constraint.getRelationship().mapMultiply(0,    constraint.getRelationship().oppositeRelationship(),    0    *    constraint.getValue());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
81	[BUG]  [BUGGY]  constraint.getRelationship().mapMultiply(2,  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [CE]  '.class'  expected  [FE]                      AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  constraint.getRelationship().mapMultiply(2,  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	constraint.getRelationship().mapMultiply(2,  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());	  constraint.getRelationship().mapMultiply(0,    constraint.getRelationship().oppositeRelationship(),    0    *    constraint.getValue());    	non-compiled	[CE]  '.class'  expected	8	None	replace
82	[BUG]  [BUGGY]  LinearConstraint  constraint  =(LinearConstraint)constraint.getObject();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearConstraint  constraint  =(LinearConstraint)constraint.getObject();  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =(LinearConstraint)constraint.getObject();	  LinearConstraint    constraint    =(LinearConstraint)constraint.getValue();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
83	[BUG]  [BUGGY]  LinearConstraint  constraint  =(LinearConstraint)constraint.getColumn();  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearConstraint  constraint  =(LinearConstraint)constraint.getColumn();  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =(LinearConstraint)constraint.getColumn();	  LinearConstraint    constraint    =(LinearConstraint)constraint.getValue();    	non-compiled	[CE]  '.class'  expected	15	None	replace
84	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1),  constraint.getRelationship().oppositeRelationship());  constraint.getRelationship().oppositeRelationship()  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1),  constraint.getRelationship().oppositeRelationship());  constraint.getRelationship().oppositeRelationship()  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1),  constraint.getRelationship().oppositeRelationship());  constraint.getRelationship().oppositeRelationship()	  LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0),    constraint.getRelationship().oppositeRelationship());    constraint.getRelationship().oppositeRelationship()    	non-compiled	[CE]  ';'  expected	42	None	replace
85	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship());  constraint.getRelationship().oppositeRelationship()  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship());  constraint.getRelationship().oppositeRelationship()  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship());  constraint.getRelationship().oppositeRelationship()	  LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0),    constraint.getRelationship().oppositeRelationship());    constraint.getRelationship().oppositeRelationship()    	non-compiled	[CE]  ')'  expected	42	None	replace
86	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().oppositeRelationship(),  2  *  constraint.getValue());  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().oppositeRelationship(),  2  *  constraint.getValue());  [BUGGY]      constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().oppositeRelationship(),  2  *  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients(),    constraint.getRelationship().oppositeRelationship(),    1    *    constraint.getValue());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
87	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship().mapMultiply(0  *  constraint.getValue());  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship().mapMultiply(0  *  constraint.getValue());  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship().mapMultiply(0  *  constraint.getValue());	  LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().oppositeRelationship().mapMultiply(-1    *    constraint.getValue());    	non-compiled	[CE]  >  expected	17	None	replace
88	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship().mapMultiply(1  *  constraint.getValue());  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship().mapMultiply(1  *  constraint.getValue());  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship().mapMultiply(1  *  constraint.getValue());	  LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().oppositeRelationship().mapMultiply(-1    *    constraint.getValue());    	non-compiled	[CE]  >  expected	17	None	replace
89	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.get  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.get  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.get	  LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0),    constraint.getRelationship().oppositeRelationship());    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.get    	non-compiled	[CE]  ')'  expected	44	None	replace
90	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.get  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.get  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.get	  LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0),    constraint.getRelationship().oppositeRelationship());    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.get    	non-compiled	[CE]  ';'  expected	44	None	replace
91	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.	  LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0),    constraint.getRelationship().oppositeRelationship());    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.get    	non-compiled	[CE]  ';'  expected	44	None	replace
92	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship().mapMultiply(1  *  constraint.getValue()));  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship().mapMultiply(1  *  constraint.getValue()));  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship().mapMultiply(1  *  constraint.getValue()));	  LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    &&    constraint.getRelationship().mapMultiply(-1    *    constraint.getValue()));    	non-compiled	[CE]  >  expected	27	None	replace
93	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().relationship(),  1  *  constraint.getValue());  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().relationship(),  1  *  constraint.getValue());  [BUGGY]      constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().relationship(),  1  *  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients(),    constraint.getRelationship().relationship(),    -1    *    constraint.getValue());    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
94	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().relationship(),  0  *  constraint.getValue());  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().relationship(),  0  *  constraint.getValue());  [BUGGY]      constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().relationship(),  0  *  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients(),    constraint.getRelationship().relationship(),    -1    *    constraint.getValue());    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
95	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0),  constraint.getRelationship().oppositeRelationship());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0),  constraint.getRelationship().oppositeRelationship());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0),  constraint.getRelationship().oppositeRelationship());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.	  LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0),    constraint.getRelationship().oppositeRelationship());    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.get    	non-compiled	[CE]  ';'  expected	44	None	replace
96	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().relationship(),  0,  -1  *  constraint.getValue());  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().relationship(),  0,  -1  *  constraint.getValue());  [BUGGY]      constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().relationship(),  0,  -1  *  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients(),    constraint.getRelationship().oppositeRelationship(),    0,    -1    *    constraint.getValue());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
97	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship().mapMultiply(1  *  constraint.getValue());  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship().mapMultiply(1  *  constraint.getValue());  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().oppositeRelationship().mapMultiply(1  *  constraint.getValue());	  LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    &&    constraint.getRelationship().mapMultiply(-1    *    constraint.getValue());    	non-compiled	[CE]  >  expected	16	None	replace
98	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().relationship(),  0,  -1  *  constraint.getValue());  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().relationship(),  0,  -1  *  constraint.getValue());  [BUGGY]      constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().relationship(),  0,  -1  *  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0,    constraint.getRelationship().oppositeRelationship(),    0,    -1    *    constraint.getValue());    	non-compiled	[CE]  ')'  expected	34	None	replace
99	[BUG]  [BUGGY]  constraint.getRelationship().mapMultiply(2,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  constraint.getRelationship().mapMultiply(2,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	constraint.getRelationship().mapMultiply(2,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());	  constraint.getRelationship().mapMultiply(0,    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValue());    	non-compiled	[CE]  '.class'  expected	7	None	replace
100	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship(),  -1);  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship(),  -1);  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().oppositeRelationship(),  -1);	  LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().oppositeRelationship());    	non-compiled	[CE]  >  expected	38	None	replace
101	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  +  constraint.getRelationship().mapMultiply(0);  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  +  constraint.getRelationship().mapMultiply(0);  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  +  constraint.getRelationship().mapMultiply(0);	  LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    ||    constraint.getRelationship().mapMultiply(0);    	non-compiled	[CE]  >  expected	51	None	replace
102	[BUG]  [BUGGY]  constraint.getRelationship().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  constraint.getRelationship().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	constraint.getRelationship().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());	  constraint.getRelationship().mapMultiply(0),    constraint.getRelationship().oppositeRelationship(),    0    *    constraint.getValue());    	non-compiled	[CE]  ';'  expected	40	None	replace
103	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship()),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.get  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship()),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.get  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship()),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.get	  LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0,    constraint.getRelationship().oppositeRelationship()),    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValu    	non-compiled	[CE]  ')'  expected	5	None	replace
104	[BUG]  [BUGGY]  LinearConstraint  constraint  =(LinearConstraint)constraint.getObjective();  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearConstraint  constraint  =(LinearConstraint)constraint.getObjective();  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =(LinearConstraint)constraint.getObjective();	  LinearConstraint    constraint    =(LinearConstraint)constraint.getValue();    	non-compiled	[CE]  '.class'  expected	15	None	replace
105	[BUG]  [BUGGY]  LinearConstraint  constraint  =(LinearConstraint)constraint.getRelationship();  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearConstraint  constraint  =(LinearConstraint)constraint.getRelationship();  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =(LinearConstraint)constraint.getRelationship();	  LinearConstraint    constraint    =(LinearConstraint)constraint.getValue();    	non-compiled	[CE]  '.class'  expected	15	None	replace
106	[BUG]  [BUGGY]  if(constraint.getRelationship()!=  null)  {  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  if(constraint.getRelationship()!=  null)  {  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	if(constraint.getRelationship()!=  null)  {  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.	  if(constraint.getRelationship()!=    null)    {    LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(-1),    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValu    	non-compiled	[CE]  ')'  expected	50	None	replace
107	[BUG]  [BUGGY]  if(constraint.getRelationship()!=  null)  {  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship()  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  if(constraint.getRelationship()!=  null)  {  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship()  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	if(constraint.getRelationship()!=  null)  {  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship()	  if(constraint.getRelationship()!=    null)    {    LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(-1),    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValu    	non-compiled	[CE]  ')'  expected	50	None	replace
108	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(10,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(10,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [BUGGY]      constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(10,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients().mapMultiply(4,    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValue());    	non-compiled	[CE]  ')'  expected	19	None	replace
109	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());	  LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0),    constraint.getRelationship().oppositeRelationship(),    0    *    constraint.getValue());    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
110	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1,  constraint.getRelationship().oppositeRelationship());  constraint.getRelationship().oppositeRelationship()  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1,  constraint.getRelationship().oppositeRelationship());  constraint.getRelationship().oppositeRelationship()  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1,  constraint.getRelationship().oppositeRelationship());  constraint.getRelationship().oppositeRelationship()	  LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0),    constraint.getRelationship().oppositeRelationship());    constraint.getRelationship().oppositeRelationship()    	non-compiled	[CE]  ')'  expected	42	None	replace
111	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(2,  constraint.getRelationship().oppositeRelationship()),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getVal  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(2,  constraint.getRelationship().oppositeRelationship()),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getVal  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(2,  constraint.getRelationship().oppositeRelationship()),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getVal	  LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0,    constraint.getRelationship().oppositeRelationship()),    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getVal    	non-compiled	[CE]  ')'  expected	49	None	replace
112	[BUG]  [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().mapMultiply(0  *  constraint.getValue());  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().mapMultiply(0  *  constraint.getValue());  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  &&  constraint.getRelationship().mapMultiply(0  *  constraint.getValue());	  LinearObjectiveFunction    <    NEGATIVE_VAR_COLUMN_LABEL    &&    constraint.getRelationship().mapMultiply(-1    *    constraint.getValue());    	non-compiled	[CE]  >  expected	16	None	replace
113	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship()),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship()),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship()),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.	  LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0),    constraint.getRelationship().oppositeRelationship());    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getVal    	non-compiled	[CE]  <identifier>  expected	43	None	replace
114	[BUG]  [BUGGY]  constraint.getRelationship().mapMultiply(-1,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  constraint.getRelationship().mapMultiply(-1,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	constraint.getRelationship().mapMultiply(-1,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(	  constraint.getRelationship().mapMultiply(0,    constraint.getRelationship().oppositeRelationship(),    0    *    constraint.getValue());    return    new    LinearConstraint(constraint.getCoefficients().mapMultiply(    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
115	[BUG]  [BUGGY]  constraint.getRelationship().mapMultiply(-1,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  constraint.getRelationship().mapMultiply(-1,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	constraint.getRelationship().mapMultiply(-1,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply	  constraint.getRelationship().mapMultiply(0,    constraint.getRelationship().oppositeRelationship(),    0    *    constraint.getValue());    return    new    LinearConstraint(constraint.getCoefficients().mapMultiply(    	non-compiled	[CE]  ')'  expected	47	None	replace
116	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1),  constraint.getRelationship().oppositeRelationship(),  -2  *  constraint.getValue());  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1),  constraint.getRelationship().oppositeRelationship(),  -2  *  constraint.getValue());  [BUGGY]      constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1),  constraint.getRelationship().oppositeRelationship(),  -2  *  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients().mapMultiply(1),    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValue());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
117	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().oppositeRelationship(),  -0  *  constraint.getValue());  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().oppositeRelationship(),  -0  *  constraint.getValue());  [BUGGY]      constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().oppositeRelationship(),  -0  *  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients(),    constraint.getRelationship().relationship(),    -1    *    constraint.getValue());    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
118	[BUG]  [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1,  constraint.getRelationship().oppositeRelationship()),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.get  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1,  constraint.getRelationship().oppositeRelationship()),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.get  [BUGGY]      return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1,  constraint.getRelationship().oppositeRelationship()),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.get	  LinearConstraint    constraint    =    new    LinearConstraint(constraint.getCoefficients().mapMultiply(0),    constraint.getRelationship().oppositeRelationship());    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.get    	non-compiled	[CE]  ')'  expected	44	None	replace
119	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(2),  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {      [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(2),  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [BUGGY]      constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(2),  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());	  return    new    LinearConstraint(constraint.getCoefficients().mapMultiply(2),    constraint.getRelationship().oppositeRelationship(),    -1    *    constraint.getValue());    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
