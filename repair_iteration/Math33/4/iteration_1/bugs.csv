bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    constraint.getRelationship().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [CE]  ';'  expected  [FE]    AssertionError  [CONTEXT]  private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {  [BUGGY]    constraint.getRelationship().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	    constraint.getRelationship().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());		non-compiled	[CE]  ';'  expected	8	None	add
2	[BUG]  [BUGGY]    LinearConstraint  constraint  =(LinearConstraint)constraint.clone();  [CE]  '.class'  expected  [FE]      AssertionError  [CONTEXT]  private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {  [BUGGY]    LinearConstraint  constraint  =(LinearConstraint)constraint.clone();  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	    LinearConstraint  constraint  =(LinearConstraint)constraint.clone();		non-compiled	[CE]  '.class'  expected	8	None	add
3	[BUG]  [BUGGY]    constraint.getRelationship().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  constraints.getRelationship().oppositeRelationship()  [CE]  ';'  expected  [FE]        AssertionError  [CONTEXT]  private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {  [BUGGY]    constraint.getRelationship().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  constraints.getRelationship().oppositeRelationship()  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	    constraint.getRelationship().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  constraints.getRelationship().oppositeRelationship()		non-compiled	[CE]  ';'  expected	8	None	add
4	[BUG]  [BUGGY]    constraint.getRelationship().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(  [CE]  ';'  expected  [FE]          AssertionError  [CONTEXT]  private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {  [BUGGY]    constraint.getRelationship().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	    constraint.getRelationship().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(		non-compiled	[CE]  ';'  expected	8	None	add
5	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [CE]  ')'  expected  [FE]    AssertionError  [CONTEXT]  private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [BUGGY]  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());	return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),      constraint.getRelationship().oppositeRelationship(),          -1  *  constraint.getValue());  	non-compiled	[CE]  ')'  expected	7	None	replace
6	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [CE]  ')'  expected  [FE]      AssertionError  [CONTEXT]  private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [BUGGY]  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());	return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),      constraint.getRelationship().oppositeRelationship(),          -1  *  constraint.getValue());  	non-compiled	[CE]  ')'  expected	7	None	replace
7	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0),  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [CE]  '.class'  expected  [FE]        AssertionError  [CONTEXT]  private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0),  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());  [BUGGY]  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0),  constraint.getRelationship().oppositeRelationship(),  0  *  constraint.getValue());	return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),      constraint.getRelationship().oppositeRelationship(),          -1  *  constraint.getValue());  	non-compiled	[CE]  '.class'  expected	7	None	replace
8	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [CE]  '.class'  expected  [FE]          AssertionError  [CONTEXT]  private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [BUGGY]  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());	return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),      constraint.getRelationship().oppositeRelationship(),          -1  *  constraint.getValue());  	non-compiled	[CE]  '.class'  expected	7	None	replace
9	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [CE]  '.class'  expected  [FE]    AssertionError  [CONTEXT]  private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [BUGGY]  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(0),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());	return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),      constraint.getRelationship().oppositeRelationship(),          -1  *  constraint.getValue());  	non-compiled	[CE]  '.class'  expected	7	None	replace
10	[BUG]  [BUGGY]    LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [CE]  '.class'  expected  [FE]    AssertionError  [CONTEXT]  private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {  [BUGGY]    LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	    LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());		non-compiled	[CE]  '.class'  expected	8	None	add
11	[BUG]  [BUGGY]    LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValu  [CE]  ';'  expected  [FE]      AssertionError  [CONTEXT]  private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {  [BUGGY]    LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValu  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	    LinearConstraint  constraint  =  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),  constraint.getRelationship().oppositeRelationship());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValu		non-compiled	[CE]  ';'  expected	8	None	add
12	[BUG]  [BUGGY]    LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().mapMultiply(-1  *  constraint.getValue());  [CE]  >  expected  [FE]    AssertionError  [CONTEXT]  private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {  [BUGGY]    LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().mapMultiply(-1  *  constraint.getValue());  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	    LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().mapMultiply(-1  *  constraint.getValue());		non-compiled	[CE]  >  expected	8	None	add
13	[BUG]  [BUGGY]    LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().mapMultiply(-1);  [CE]  >  expected  [FE]      AssertionError  [CONTEXT]  private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {  [BUGGY]    LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().mapMultiply(-1);  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	    LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().mapMultiply(-1);		non-compiled	[CE]  >  expected	8	None	add
14	[BUG]  [BUGGY]    LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().mapMultiply(-1  *  constraint.getValue()));  [CE]  >  expected  [FE]        AssertionError  [CONTEXT]  private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {  [BUGGY]    LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().mapMultiply(-1  *  constraint.getValue()));  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),          constraint.getRelationship().oppositeRelationship(),                    -1  *  constraint.getValue());  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	    LinearObjectiveFunction  <  NEGATIVE_VAR_COLUMN_LABEL  ||  constraint.getRelationship().mapMultiply(-1  *  constraint.getValue()));		non-compiled	[CE]  >  expected	8	None	add
15	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(2,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [CE]  ')'  expected  [FE]    AssertionError  [CONTEXT]  private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(2,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  [BUGGY]  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(2,  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());	return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),      constraint.getRelationship().oppositeRelationship(),          -1  *  constraint.getValue());  	non-compiled	[CE]  ')'  expected	7	None	replace
16	[BUG]  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1,  constraint.getRelationship().oppositeRelationship()),  -1  *  constraint.getValue());  [CE]  '.class'  expected  [FE]      AssertionError  [CONTEXT]  private  LinearConstraint  normalize(final  LinearConstraint  constraint)  {  if  (constraint.getValue()  <  0)  {  [BUGGY]  return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1,  constraint.getRelationship().oppositeRelationship()),  -1  *  constraint.getValue());  [BUGGY]  constraint.getRelationship().oppositeRelationship(),  -1  *  constraint.getValue());  }  return  new  LinearConstraint(constraint.getCoefficients(),  constraint.getRelationship(),  constraint.getValue());  }  [CLASS]  SimplexTableau  [METHOD]  normalize  [RETURN_TYPE]  LinearConstraint  LinearConstraint  constraint  [VARIABLES]  boolean  maximize  restrictToNonNegative  RealMatrix  tableau  double  epsilon  LinearObjectiveFunction  f  LinearConstraint  constraint  List  columnLabels  constraints  normalized  String  NEGATIVE_VAR_COLUMN_LABEL  int  DEFAULT_ULPS  artificialVar  height  i  maxUlps  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  width  zIndex  long  serialVersionUID  	projects/Math33/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java	0.4472135954999579	261	263	1	replace	return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(1,  constraint.getRelationship().oppositeRelationship()),  -1  *  constraint.getValue());	return  new  LinearConstraint(constraint.getCoefficients().mapMultiply(-1),      constraint.getRelationship().oppositeRelationship(),          -1  *  constraint.getValue());  	non-compiled	[CE]  '.class'  expected	7	None	replace
