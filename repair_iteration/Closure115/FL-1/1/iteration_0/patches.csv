bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  }  }  Node  fnParam  =  NodeUtil.getFunctionParameters(fnNode).getFirstChild();  while  (cArg  !=  null  ||  fnParam  !=  null)  {  if  (fnParam  !=  null)  {  if  (cArg  !=  null)  {  if  (hasSideEffects  &&  NodeUtil.canBeSideEffected(cArg))  {  [BUGGY]  if(hasSideEffects  &&  NodeUtil.canBeSideEffected(cArg))  {  return  CanInlineResult.NO;  }  [BUGGY]  }    if  (NodeUtil.mayEffectMutableState(cArg,  compiler)  &&  NodeUtil.getNameReferenceCount(  block,  fnParam.getString())  >  1)  {  return  CanInlineResult.NO;  }  }  [CLASS]  FunctionInjector  InliningMode  Reference  1  CallSiteType  1  2  3  4  5  6  CanInlineResult  2  [METHOD]  canInlineReferenceDirectly  [RETURN_TYPE]  FunctionInjector$CanInlineResult  Node  callNode  Node  fnNode  [VARIABLES]  CanInlineResult  AFTER_PREPARATION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  assumeMinimumCapture  assumeStrictThis  containsFunctions  fnContainsVars  forbidTemps  hasArgs  hasSideEffects  isCallInLoop  needsDefaultReturnResult  referencesArguments  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  inlineResult  n  newBlock  newExpression  parent  returnNode  safeReturnNode  srcLocation  stmt  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  	projects/Closure115/src/com/google/javascript/jscomp/FunctionInjector.java	0.7905694150420948	731	731	5	add	if(hasSideEffects  &&  NodeUtil.canBeSideEffected(cArg))  {  return  CanInlineResult.NO;  }	return  CanInlineResult.NO;  	compilable	  [FE]  AssertionFailedError  	1	5	replace
2	[BUG]  [BUGGY]  if(hasSideEffects  &&  NodeUtil.canBeSideEffected(cArg))  {  return  CanInlineResult.NO;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  }  }  Node  fnParam  =  NodeUtil.getFunctionParameters(fnNode).getFirstChild();  while  (cArg  !=  null  ||  fnParam  !=  null)  {  if  (fnParam  !=  null)  {  if  (cArg  !=  null)  {  if  (hasSideEffects  &&  NodeUtil.canBeSideEffected(cArg))  {  [BUGGY]  if(hasSideEffects  &&  NodeUtil.canBeSideEffected(cArg))  {  return  CanInlineResult.NO;  }  [BUGGY]  }    if  (NodeUtil.mayEffectMutableState(cArg,  compiler)  &&  NodeUtil.getNameReferenceCount(  block,  fnParam.getString())  >  1)  {  return  CanInlineResult.NO;  }  }  [CLASS]  FunctionInjector  InliningMode  Reference  1  CallSiteType  1  2  3  4  5  6  CanInlineResult  2  [METHOD]  canInlineReferenceDirectly  [RETURN_TYPE]  FunctionInjector$CanInlineResult  Node  callNode  Node  fnNode  [VARIABLES]  CanInlineResult  AFTER_PREPARATION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  assumeMinimumCapture  assumeStrictThis  containsFunctions  fnContainsVars  forbidTemps  hasArgs  hasSideEffects  isCallInLoop  needsDefaultReturnResult  referencesArguments  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  inlineResult  n  newBlock  newExpression  parent  returnNode  safeReturnNode  srcLocation  stmt  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  	projects/Closure115/src/com/google/javascript/jscomp/FunctionInjector.java	0.7905694150420948	731	731	5	replace	if(hasSideEffects  &&  NodeUtil.canBeSideEffected(cArg))  {  return  CanInlineResult.NO;  }	return  CanInlineResult.NO;  	compilable	  [FE]  AssertionFailedError  	1	5	replace
3	[BUG]  [BUGGY]  return  NodeUtil.getNameReferenceCount(block,  fnParam.getString())>  1;  [CE]  incompatible  types  [FE]        AssertionFailedError  [CONTEXT]  }  }  Node  fnParam  =  NodeUtil.getFunctionParameters(fnNode).getFirstChild();  while  (cArg  !=  null  ||  fnParam  !=  null)  {  if  (fnParam  !=  null)  {  if  (cArg  !=  null)  {  if  (hasSideEffects  &&  NodeUtil.canBeSideEffected(cArg))  {  [BUGGY]  return  NodeUtil.getNameReferenceCount(block,  fnParam.getString())>  1;  [BUGGY]  }    if  (NodeUtil.mayEffectMutableState(cArg,  compiler)  &&  NodeUtil.getNameReferenceCount(  block,  fnParam.getString())  >  1)  {  return  CanInlineResult.NO;  }  }  [CLASS]  FunctionInjector  InliningMode  Reference  1  CallSiteType  1  2  3  4  5  6  CanInlineResult  2  [METHOD]  canInlineReferenceDirectly  [RETURN_TYPE]  FunctionInjector$CanInlineResult  Node  callNode  Node  fnNode  [VARIABLES]  CanInlineResult  AFTER_PREPARATION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  assumeMinimumCapture  assumeStrictThis  containsFunctions  fnContainsVars  forbidTemps  hasArgs  hasSideEffects  isCallInLoop  needsDefaultReturnResult  referencesArguments  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  inlineResult  n  newBlock  newExpression  parent  returnNode  safeReturnNode  srcLocation  stmt  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  	projects/Closure115/src/com/google/javascript/jscomp/FunctionInjector.java	0.7905694150420948	731	731	5	replace	return  NodeUtil.getNameReferenceCount(block,  fnParam.getString())>  1;	return  CanInlineResult.NO;  	non-compiled	[CE]  incompatible  types	1	None	replace
4	[BUG]  [BUGGY]  return  NodeUtil.getNameReferenceCount(block,  fnParam.getString())>  1)  {  return  CanInlineResult.NO;  }  [CE]  ';'  expected  [FE]          AssertionFailedError  [CONTEXT]  }  }  Node  fnParam  =  NodeUtil.getFunctionParameters(fnNode).getFirstChild();  while  (cArg  !=  null  ||  fnParam  !=  null)  {  if  (fnParam  !=  null)  {  if  (cArg  !=  null)  {  if  (hasSideEffects  &&  NodeUtil.canBeSideEffected(cArg))  {  [BUGGY]  return  NodeUtil.getNameReferenceCount(block,  fnParam.getString())>  1)  {  return  CanInlineResult.NO;  }  [BUGGY]  }    if  (NodeUtil.mayEffectMutableState(cArg,  compiler)  &&  NodeUtil.getNameReferenceCount(  block,  fnParam.getString())  >  1)  {  return  CanInlineResult.NO;  }  }  [CLASS]  FunctionInjector  InliningMode  Reference  1  CallSiteType  1  2  3  4  5  6  CanInlineResult  2  [METHOD]  canInlineReferenceDirectly  [RETURN_TYPE]  FunctionInjector$CanInlineResult  Node  callNode  Node  fnNode  [VARIABLES]  CanInlineResult  AFTER_PREPARATION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  assumeMinimumCapture  assumeStrictThis  containsFunctions  fnContainsVars  forbidTemps  hasArgs  hasSideEffects  isCallInLoop  needsDefaultReturnResult  referencesArguments  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  inlineResult  n  newBlock  newExpression  parent  returnNode  safeReturnNode  srcLocation  stmt  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  	projects/Closure115/src/com/google/javascript/jscomp/FunctionInjector.java	0.7905694150420948	731	731	5	replace	return  NodeUtil.getNameReferenceCount(block,  fnParam.getString())>  1)  {  return  CanInlineResult.NO;  }	return  CanInlineResult.NO;  	non-compiled	[CE]  ';'  expected	1	None	replace
5	[BUG]  [BUGGY]  return  CanInlineResult.NO  ||  NodeUtil.mayEffectMutableState(cArg,  fnParam.getString())||  NodeUtil.mayEffectMutableState(block,  fnParam.getString())  [CE]  ';'  expected  [FE]            AssertionFailedError  [CONTEXT]  }  }  Node  fnParam  =  NodeUtil.getFunctionParameters(fnNode).getFirstChild();  while  (cArg  !=  null  ||  fnParam  !=  null)  {  if  (fnParam  !=  null)  {  if  (cArg  !=  null)  {  if  (hasSideEffects  &&  NodeUtil.canBeSideEffected(cArg))  {  [BUGGY]  return  CanInlineResult.NO  ||  NodeUtil.mayEffectMutableState(cArg,  fnParam.getString())||  NodeUtil.mayEffectMutableState(block,  fnParam.getString())  [BUGGY]  }    if  (NodeUtil.mayEffectMutableState(cArg,  compiler)  &&  NodeUtil.getNameReferenceCount(  block,  fnParam.getString())  >  1)  {  return  CanInlineResult.NO;  }  }  [CLASS]  FunctionInjector  InliningMode  Reference  1  CallSiteType  1  2  3  4  5  6  CanInlineResult  2  [METHOD]  canInlineReferenceDirectly  [RETURN_TYPE]  FunctionInjector$CanInlineResult  Node  callNode  Node  fnNode  [VARIABLES]  CanInlineResult  AFTER_PREPARATION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  assumeMinimumCapture  assumeStrictThis  containsFunctions  fnContainsVars  forbidTemps  hasArgs  hasSideEffects  isCallInLoop  needsDefaultReturnResult  referencesArguments  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  inlineResult  n  newBlock  newExpression  parent  returnNode  safeReturnNode  srcLocation  stmt  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  	projects/Closure115/src/com/google/javascript/jscomp/FunctionInjector.java	0.7905694150420948	731	731	5	replace	return  CanInlineResult.NO  ||  NodeUtil.mayEffectMutableState(cArg,  fnParam.getString())||  NodeUtil.mayEffectMutableState(block,  fnParam.getString())	return  CanInlineResult.NO;  	non-compiled	[CE]  ';'  expected	1	None	replace
6	[BUG]  [BUGGY]  return  CanInlineResult.NO  ||  NodeUtil.mayEffectMutableState(cArg,  fnParam.getString())||  NodeUtil.mayEffectMutableState(block,  fnParam.getString()  [CE]  ')'  expected  [FE]              AssertionFailedError  [CONTEXT]  }  }  Node  fnParam  =  NodeUtil.getFunctionParameters(fnNode).getFirstChild();  while  (cArg  !=  null  ||  fnParam  !=  null)  {  if  (fnParam  !=  null)  {  if  (cArg  !=  null)  {  if  (hasSideEffects  &&  NodeUtil.canBeSideEffected(cArg))  {  [BUGGY]  return  CanInlineResult.NO  ||  NodeUtil.mayEffectMutableState(cArg,  fnParam.getString())||  NodeUtil.mayEffectMutableState(block,  fnParam.getString()  [BUGGY]  }    if  (NodeUtil.mayEffectMutableState(cArg,  compiler)  &&  NodeUtil.getNameReferenceCount(  block,  fnParam.getString())  >  1)  {  return  CanInlineResult.NO;  }  }  [CLASS]  FunctionInjector  InliningMode  Reference  1  CallSiteType  1  2  3  4  5  6  CanInlineResult  2  [METHOD]  canInlineReferenceDirectly  [RETURN_TYPE]  FunctionInjector$CanInlineResult  Node  callNode  Node  fnNode  [VARIABLES]  CanInlineResult  AFTER_PREPARATION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  assumeMinimumCapture  assumeStrictThis  containsFunctions  fnContainsVars  forbidTemps  hasArgs  hasSideEffects  isCallInLoop  needsDefaultReturnResult  referencesArguments  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  inlineResult  n  newBlock  newExpression  parent  returnNode  safeReturnNode  srcLocation  stmt  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  	projects/Closure115/src/com/google/javascript/jscomp/FunctionInjector.java	0.7905694150420948	731	731	5	replace	return  CanInlineResult.NO  ||  NodeUtil.mayEffectMutableState(cArg,  fnParam.getString())||  NodeUtil.mayEffectMutableState(block,  fnParam.getString()	return  CanInlineResult.NO;  	non-compiled	[CE]  ')'  expected	1	None	replace
7	[BUG]  [BUGGY]  return  NodeUtil.getNameReferenceCount(block,  fnParam.getString())>  1)  {  return  CanInlineResult.NO;  [CE]  ';'  expected  [FE]                AssertionFailedError  [CONTEXT]  }  }  Node  fnParam  =  NodeUtil.getFunctionParameters(fnNode).getFirstChild();  while  (cArg  !=  null  ||  fnParam  !=  null)  {  if  (fnParam  !=  null)  {  if  (cArg  !=  null)  {  if  (hasSideEffects  &&  NodeUtil.canBeSideEffected(cArg))  {  [BUGGY]  return  NodeUtil.getNameReferenceCount(block,  fnParam.getString())>  1)  {  return  CanInlineResult.NO;  [BUGGY]  }    if  (NodeUtil.mayEffectMutableState(cArg,  compiler)  &&  NodeUtil.getNameReferenceCount(  block,  fnParam.getString())  >  1)  {  return  CanInlineResult.NO;  }  }  [CLASS]  FunctionInjector  InliningMode  Reference  1  CallSiteType  1  2  3  4  5  6  CanInlineResult  2  [METHOD]  canInlineReferenceDirectly  [RETURN_TYPE]  FunctionInjector$CanInlineResult  Node  callNode  Node  fnNode  [VARIABLES]  CanInlineResult  AFTER_PREPARATION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  assumeMinimumCapture  assumeStrictThis  containsFunctions  fnContainsVars  forbidTemps  hasArgs  hasSideEffects  isCallInLoop  needsDefaultReturnResult  referencesArguments  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  inlineResult  n  newBlock  newExpression  parent  returnNode  safeReturnNode  srcLocation  stmt  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  	projects/Closure115/src/com/google/javascript/jscomp/FunctionInjector.java	0.7905694150420948	731	731	5	replace	return  NodeUtil.getNameReferenceCount(block,  fnParam.getString())>  1)  {  return  CanInlineResult.NO;	return  CanInlineResult.NO;  	non-compiled	[CE]  ';'  expected	1	None	replace
8	[BUG]  [BUGGY]  return  NodeUtil.getNameReferenceCount(block,  fnParam.getString())>  0;  [CE]  incompatible  types  [FE]                  AssertionFailedError  [CONTEXT]  }  }  Node  fnParam  =  NodeUtil.getFunctionParameters(fnNode).getFirstChild();  while  (cArg  !=  null  ||  fnParam  !=  null)  {  if  (fnParam  !=  null)  {  if  (cArg  !=  null)  {  if  (hasSideEffects  &&  NodeUtil.canBeSideEffected(cArg))  {  [BUGGY]  return  NodeUtil.getNameReferenceCount(block,  fnParam.getString())>  0;  [BUGGY]  }    if  (NodeUtil.mayEffectMutableState(cArg,  compiler)  &&  NodeUtil.getNameReferenceCount(  block,  fnParam.getString())  >  1)  {  return  CanInlineResult.NO;  }  }  [CLASS]  FunctionInjector  InliningMode  Reference  1  CallSiteType  1  2  3  4  5  6  CanInlineResult  2  [METHOD]  canInlineReferenceDirectly  [RETURN_TYPE]  FunctionInjector$CanInlineResult  Node  callNode  Node  fnNode  [VARIABLES]  CanInlineResult  AFTER_PREPARATION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  assumeMinimumCapture  assumeStrictThis  containsFunctions  fnContainsVars  forbidTemps  hasArgs  hasSideEffects  isCallInLoop  needsDefaultReturnResult  referencesArguments  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  inlineResult  n  newBlock  newExpression  parent  returnNode  safeReturnNode  srcLocation  stmt  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  	projects/Closure115/src/com/google/javascript/jscomp/FunctionInjector.java	0.7905694150420948	731	731	5	replace	return  NodeUtil.getNameReferenceCount(block,  fnParam.getString())>  0;	return  CanInlineResult.NO;  	non-compiled	[CE]  incompatible  types	1	None	replace
9	[BUG]  [BUGGY]  return  CanInlineResult.NO  ||  NodeUtil.mayEffectMutableState(cArg,  fnParam.getString())||  NodeUtil.mayEffectMutableState(cArg,  fnParam.getString())  [CE]  ';'  expected  [FE]                    AssertionFailedError  [CONTEXT]  }  }  Node  fnParam  =  NodeUtil.getFunctionParameters(fnNode).getFirstChild();  while  (cArg  !=  null  ||  fnParam  !=  null)  {  if  (fnParam  !=  null)  {  if  (cArg  !=  null)  {  if  (hasSideEffects  &&  NodeUtil.canBeSideEffected(cArg))  {  [BUGGY]  return  CanInlineResult.NO  ||  NodeUtil.mayEffectMutableState(cArg,  fnParam.getString())||  NodeUtil.mayEffectMutableState(cArg,  fnParam.getString())  [BUGGY]  }    if  (NodeUtil.mayEffectMutableState(cArg,  compiler)  &&  NodeUtil.getNameReferenceCount(  block,  fnParam.getString())  >  1)  {  return  CanInlineResult.NO;  }  }  [CLASS]  FunctionInjector  InliningMode  Reference  1  CallSiteType  1  2  3  4  5  6  CanInlineResult  2  [METHOD]  canInlineReferenceDirectly  [RETURN_TYPE]  FunctionInjector$CanInlineResult  Node  callNode  Node  fnNode  [VARIABLES]  CanInlineResult  AFTER_PREPARATION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  assumeMinimumCapture  assumeStrictThis  containsFunctions  fnContainsVars  forbidTemps  hasArgs  hasSideEffects  isCallInLoop  needsDefaultReturnResult  referencesArguments  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  inlineResult  n  newBlock  newExpression  parent  returnNode  safeReturnNode  srcLocation  stmt  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  	projects/Closure115/src/com/google/javascript/jscomp/FunctionInjector.java	0.7905694150420948	731	731	5	replace	return  CanInlineResult.NO  ||  NodeUtil.mayEffectMutableState(cArg,  fnParam.getString())||  NodeUtil.mayEffectMutableState(cArg,  fnParam.getString())	return  CanInlineResult.NO;  	non-compiled	[CE]  ';'  expected	1	None	replace
10	[BUG]  [BUGGY]  return  CanInlineResult.NO  ||  NodeUtil.mayEffectMutableState(cArg,  fnParam.getString())||  NodeUtil.mayEffectMutableState(cArg,  fnParam.getString()  [CE]  ')'  expected  [FE]                      AssertionFailedError  [CONTEXT]  }  }  Node  fnParam  =  NodeUtil.getFunctionParameters(fnNode).getFirstChild();  while  (cArg  !=  null  ||  fnParam  !=  null)  {  if  (fnParam  !=  null)  {  if  (cArg  !=  null)  {  if  (hasSideEffects  &&  NodeUtil.canBeSideEffected(cArg))  {  [BUGGY]  return  CanInlineResult.NO  ||  NodeUtil.mayEffectMutableState(cArg,  fnParam.getString())||  NodeUtil.mayEffectMutableState(cArg,  fnParam.getString()  [BUGGY]  }    if  (NodeUtil.mayEffectMutableState(cArg,  compiler)  &&  NodeUtil.getNameReferenceCount(  block,  fnParam.getString())  >  1)  {  return  CanInlineResult.NO;  }  }  [CLASS]  FunctionInjector  InliningMode  Reference  1  CallSiteType  1  2  3  4  5  6  CanInlineResult  2  [METHOD]  canInlineReferenceDirectly  [RETURN_TYPE]  FunctionInjector$CanInlineResult  Node  callNode  Node  fnNode  [VARIABLES]  CanInlineResult  AFTER_PREPARATION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  assumeMinimumCapture  assumeStrictThis  containsFunctions  fnContainsVars  forbidTemps  hasArgs  hasSideEffects  isCallInLoop  needsDefaultReturnResult  referencesArguments  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  inlineResult  n  newBlock  newExpression  parent  returnNode  safeReturnNode  srcLocation  stmt  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  	projects/Closure115/src/com/google/javascript/jscomp/FunctionInjector.java	0.7905694150420948	731	731	5	replace	return  CanInlineResult.NO  ||  NodeUtil.mayEffectMutableState(cArg,  fnParam.getString())||  NodeUtil.mayEffectMutableState(cArg,  fnParam.getString()	return  CanInlineResult.NO;  	non-compiled	[CE]  ')'  expected	1	None	replace
11	[BUG]  [BUGGY]  return  CanInlineResult.NO  ||  NodeUtil.mayEffectMutableState(cArg,  fnParam.getString())||  NodeUtil.mayEffectMutableState(block,  fnParam.getString  [CE]  ')'  expected  [FE]                        AssertionFailedError  [CONTEXT]  }  }  Node  fnParam  =  NodeUtil.getFunctionParameters(fnNode).getFirstChild();  while  (cArg  !=  null  ||  fnParam  !=  null)  {  if  (fnParam  !=  null)  {  if  (cArg  !=  null)  {  if  (hasSideEffects  &&  NodeUtil.canBeSideEffected(cArg))  {  [BUGGY]  return  CanInlineResult.NO  ||  NodeUtil.mayEffectMutableState(cArg,  fnParam.getString())||  NodeUtil.mayEffectMutableState(block,  fnParam.getString  [BUGGY]  }    if  (NodeUtil.mayEffectMutableState(cArg,  compiler)  &&  NodeUtil.getNameReferenceCount(  block,  fnParam.getString())  >  1)  {  return  CanInlineResult.NO;  }  }  [CLASS]  FunctionInjector  InliningMode  Reference  1  CallSiteType  1  2  3  4  5  6  CanInlineResult  2  [METHOD]  canInlineReferenceDirectly  [RETURN_TYPE]  FunctionInjector$CanInlineResult  Node  callNode  Node  fnNode  [VARIABLES]  CanInlineResult  AFTER_PREPARATION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  assumeMinimumCapture  assumeStrictThis  containsFunctions  fnContainsVars  forbidTemps  hasArgs  hasSideEffects  isCallInLoop  needsDefaultReturnResult  referencesArguments  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  inlineResult  n  newBlock  newExpression  parent  returnNode  safeReturnNode  srcLocation  stmt  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  	projects/Closure115/src/com/google/javascript/jscomp/FunctionInjector.java	0.7905694150420948	731	731	5	replace	return  CanInlineResult.NO  ||  NodeUtil.mayEffectMutableState(cArg,  fnParam.getString())||  NodeUtil.mayEffectMutableState(block,  fnParam.getString	return  CanInlineResult.NO;  	non-compiled	[CE]  ')'  expected	1	None	replace
12	[BUG]  [BUGGY]  return  NodeUtil.mayEffectMutableState(cArg,  hasSideEffects)?  CanInlineResult.NO  :  CanInlineResult.NO;  [CE]  no  suitable  method  found  for  mayEffectMutableState(Node,boolean)  [FE]                          AssertionFailedError  [CONTEXT]  }  }  Node  fnParam  =  NodeUtil.getFunctionParameters(fnNode).getFirstChild();  while  (cArg  !=  null  ||  fnParam  !=  null)  {  if  (fnParam  !=  null)  {  if  (cArg  !=  null)  {  if  (hasSideEffects  &&  NodeUtil.canBeSideEffected(cArg))  {  [BUGGY]  return  NodeUtil.mayEffectMutableState(cArg,  hasSideEffects)?  CanInlineResult.NO  :  CanInlineResult.NO;  [BUGGY]  }    if  (NodeUtil.mayEffectMutableState(cArg,  compiler)  &&  NodeUtil.getNameReferenceCount(  block,  fnParam.getString())  >  1)  {  return  CanInlineResult.NO;  }  }  [CLASS]  FunctionInjector  InliningMode  Reference  1  CallSiteType  1  2  3  4  5  6  CanInlineResult  2  [METHOD]  canInlineReferenceDirectly  [RETURN_TYPE]  FunctionInjector$CanInlineResult  Node  callNode  Node  fnNode  [VARIABLES]  CanInlineResult  AFTER_PREPARATION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  assumeMinimumCapture  assumeStrictThis  containsFunctions  fnContainsVars  forbidTemps  hasArgs  hasSideEffects  isCallInLoop  needsDefaultReturnResult  referencesArguments  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  inlineResult  n  newBlock  newExpression  parent  returnNode  safeReturnNode  srcLocation  stmt  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST  	projects/Closure115/src/com/google/javascript/jscomp/FunctionInjector.java	0.7905694150420948	731	731	5	replace	return  NodeUtil.mayEffectMutableState(cArg,  hasSideEffects)?  CanInlineResult.NO  :  CanInlineResult.NO;	return  CanInlineResult.NO;  	non-compiled	[CE]  no  suitable  method  found  for  mayEffectMutableState(Node,boolean)	1	None	replace
