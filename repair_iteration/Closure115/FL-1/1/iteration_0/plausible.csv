3	[BUG]  [BUGGY]  return  CanInlineResult.NO;  [FE]  AssertionFailedError  [CONTEXT]  }  }    Node  fnParam  =  NodeUtil.getFunctionParameters(fnNode).getFirstChild();  while  (cArg  !=  null  ||  fnParam  !=  null)  {    if  (fnParam  !=  null)  {  if  (cArg  !=  null)  {  if  (hasSideEffects  &&  NodeUtil.canBeSideEffected(cArg))  {  [BUGGY]  return  CanInlineResult.NO;  [BUGGY]  }        if  (NodeUtil.mayEffectMutableState(cArg,  compiler)  &&  NodeUtil.getNameReferenceCount(  block,  fnParam.getString())  >  1)  {  return  CanInlineResult.NO;  }  }  [CLASS]  FunctionInjector  InliningMode  Reference  1  CallSiteType  1  2  3  4  5  6  CanInlineResult  2  [METHOD]  canInlineReferenceDirectly  [RETURN_TYPE]  FunctionInjector$CanInlineResult    Node  callNode  Node  fnNode  [VARIABLES]  CanInlineResult  AFTER_PREPARATION  NO  YES  AbstractCompiler  compiler  boolean  allowDecomposition  assumeMinimumCapture  assumeStrictThis  containsFunctions  fnContainsVars  forbidTemps  hasArgs  hasSideEffects  isCallInLoop  needsDefaultReturnResult  referencesArguments  referencesThis  Set  allNamesToAlias  knownConstants  namesToAlias  needAliases  InliningMode  BLOCK  DIRECT  mode  CallSiteType  DECOMPOSABLE_EXPRESSION  EXPRESSION  SIMPLE_ASSIGNMENT  SIMPLE_CALL  UNSUPPORTED  VAR_DECL_SIMPLE_ASSIGNMENT  callSiteType  Node  block  cArg  callNode  callParentNode  expressionRoot  fnCaller  fnCallerBody  fnNode  fnParam  grandParent  greatGrandParent  inlineResult  n  newBlock  newExpression  parent  returnNode  safeReturnNode  srcLocation  stmt  thisValue  JSModule  module  Supplier  safeNameIdSupplier  int  COMMA_COST  NAME_COST_ESTIMATE  PAREN_COST    	projects/Closure115/src/com/google/javascript/jscomp/FunctionInjector.java	0.7905694150420948	731	731	5	replace	if(hasSideEffects  &&  NodeUtil.mayHaveSideEffects(cArg))  {  return  CanInlineResult.NO;  }	return  CanInlineResult.NO;  	plausible		1	0
