bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(header.length!=  0  ||  delimiter!=  null  &&  header.length  >  0)  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header.length!=  0  ||  delimiter!=  null  &&  header.length  >  0)  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length!=  0  ||  delimiter!=  null  &&  header.length  >  0)  {	  if(delimiter!=    null    &&    header.length    >    0)    {    	non-compiled	[CE]  	24	None	replace
2	[BUG]  [BUGGY]  Character[]  header  =  quoteChar.getHeader();  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar.getHeader();  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar.getHeader();	  Character[]    header    =    quoteChar.toCharArray();    	non-compiled	[CE]  	7	None	replace
3	[BUG]  [BUGGY]  Character[]  header  =  delimiter.toCharArray();  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  delimiter.toCharArray();  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  delimiter.toCharArray();	  Character[]    header    =    quoteChar.toCharArray();    	non-compiled	[CE]  	7	None	replace
4	[BUG]  [BUGGY]  Character[]  header  =  quoteChar.toString();  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar.toString();  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar.toString();	  Character[]    header    =    quoteChar.toCharArray();    	non-compiled	[CE]  	7	None	replace
5	[BUG]  [BUGGY]  Character[]  header  =  quotePolicy.toCharArray();  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quotePolicy.toCharArray();  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quotePolicy.toCharArray();	  Character[]    header    =    quoteChar.toCharArray();    	non-compiled	[CE]  	7	None	replace
6	[BUG]  [BUGGY]  Character[]  header  =  quoteChar.getHeaderRecord();  [CE]  [FE]                                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar.getHeaderRecord();  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar.getHeaderRecord();	  Character[]    header    =    quoteChar.toCharArray();    	non-compiled	[CE]  	7	None	replace
7	[BUG]  [BUGGY]  Character[]  header  =  quoteChar.toCharArray(delimiter);  [CE]  [FE]                                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar.toCharArray(delimiter);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar.toCharArray(delimiter);	  Character[]    header    =    quoteChar.toCharArray();    	non-compiled	[CE]  	7	None	replace
8	[BUG]  [BUGGY]  if(header.length!=  0  ||  header.length!=  Arrays.asList(delimiter))  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header.length!=  0  ||  header.length!=  Arrays.asList(delimiter))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length!=  0  ||  header.length!=  Arrays.asList(delimiter))  {	  if(header.length!=    0    ||    header.length!=    Arrays.asList(header))    {    	non-compiled	[CE]  	32	None	replace
9	[BUG]  [BUGGY]  if(header.length!=  0  ||  header.length!=  Arrays.asList(commentStart))  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header.length!=  0  ||  header.length!=  Arrays.asList(commentStart))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length!=  0  ||  header.length!=  Arrays.asList(commentStart))  {	  if(header.length!=    0    ||    header.length!=    Arrays.asList(header))    {    	non-compiled	[CE]  	32	None	replace
10	[BUG]  [BUGGY]  if(header.length!=  0  ||  header.length!=  Arrays.asList(c))  {  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header.length!=  0  ||  header.length!=  Arrays.asList(c))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length!=  0  ||  header.length!=  Arrays.asList(c))  {	  if(header.length!=    0    ||    header.length!=    Arrays.asList(header))    {    	non-compiled	[CE]  	32	None	replace
11	[BUG]  [BUGGY]  if(header.length!=  0  ||  header.length!=  Arrays.asList(header.length))  {  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header.length!=  0  ||  header.length!=  Arrays.asList(header.length))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length!=  0  ||  header.length!=  Arrays.asList(header.length))  {	  if(header.length!=    0    ||    header.length!=    Arrays.asList(header))    {    	non-compiled	[CE]  	32	None	replace
12	[BUG]  [BUGGY]  if(header.length  ==  0  ||  header.length!=  Arrays.asList(header))  {  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header.length  ==  0  ||  header.length!=  Arrays.asList(header))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length  ==  0  ||  header.length!=  Arrays.asList(header))  {	  if(header.length!=    0    ||    header.length!=    Arrays.asList(header))    {    	non-compiled	[CE]  	32	None	replace
13	[BUG]  [BUGGY]  if(header.length!=  0  ||  header.length!=  Arrays.asList(body))  {  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header.length!=  0  ||  header.length!=  Arrays.asList(body))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length!=  0  ||  header.length!=  Arrays.asList(body))  {	  if(header.length!=    0    ||    header.length!=    Arrays.asList(header))    {    	non-compiled	[CE]  	32	None	replace
14	[BUG]  [BUGGY]  Character[]  header  =  quoteChar(c,  delimiter);  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar(c,  delimiter);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar(c,  delimiter);	  Character[]    header    =    quoteChar(c);    	non-compiled	[CE]  	38	None	replace
15	[BUG]  [BUGGY]  Character[]  header  =  quoteChar(escape);  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar(escape);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar(escape);	  Character[]    header    =    quoteChar(c);    	non-compiled	[CE]  	38	None	replace
16	[BUG]  [BUGGY]  Character[]  header  =  quoteChar(c,  commentStart);  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar(c,  commentStart);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar(c,  commentStart);	  Character[]    header    =    quoteChar(c);    	non-compiled	[CE]  	38	None	replace
17	[BUG]  [BUGGY]  Character[]  header  =  quoteChar(commentStart,  c);  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar(commentStart,  c);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar(commentStart,  c);	  Character[]    header    =    quoteChar(c);    	non-compiled	[CE]  	38	None	replace
18	[BUG]  [BUGGY]  Character[]  header  =  quoteChar(commentStart);  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar(commentStart);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar(commentStart);	  Character[]    header    =    quoteChar(c);    	non-compiled	[CE]  	38	None	replace
19	[BUG]  [BUGGY]  Character[]  header  =  quoteChar(escape,  c);  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar(escape,  c);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar(escape,  c);	  Character[]    header    =    quoteChar(c);    	non-compiled	[CE]  	38	None	replace
20	[BUG]  [BUGGY]  Character  c  =  getCharacter().charAt(0);  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character  c  =  getCharacter().charAt(0);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character  c  =  getCharacter().charAt(0);	  Character    c    =    getCharacter();    	non-compiled	[CE]  	6	None	replace
21	[BUG]  [BUGGY]  Character  c  =  getDelimiter();  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character  c  =  getDelimiter();  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character  c  =  getDelimiter();	  Character    c    =    getCharacter();    	non-compiled	[CE]  	6	None	replace
22	[BUG]  [BUGGY]  Character  c  =  getSurroundingSpaces();  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character  c  =  getSurroundingSpaces();  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character  c  =  getSurroundingSpaces();	  Character    c    =    getCharacter();    	non-compiled	[CE]  	6	None	replace
23	[BUG]  [BUGGY]  Character  c  =  getCharacter().getCharacterEncoding();  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character  c  =  getCharacter().getCharacterEncoding();  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character  c  =  getCharacter().getCharacterEncoding();	  Character    c    =    getCharacter();    	non-compiled	[CE]  	6	None	replace
24	[BUG]  [BUGGY]  Character  c  =  getCSVFormat();  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character  c  =  getCSVFormat();  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character  c  =  getCSVFormat();	  Character    c    =    getCharacter();    	non-compiled	[CE]  	6	None	replace
25	[BUG]  [BUGGY]  Character  c  =  getCharacter().charAt(i);  [CE]  [FE]                                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character  c  =  getCharacter().charAt(i);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character  c  =  getCharacter().charAt(i);	  Character    c    =    getCharacter();    	non-compiled	[CE]  	6	None	replace
26	[BUG]  [BUGGY]  Character  c  =  escapeChar.charAt(commentStart);  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character  c  =  escapeChar.charAt(commentStart);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character  c  =  escapeChar.charAt(commentStart);	  Character    c    =    quoteChar.charAt(commentStart);    	non-compiled	[CE]  	4	None	replace
27	[BUG]  [BUGGY]  Character  c  =  escape.charAt(commentStart);  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character  c  =  escape.charAt(commentStart);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character  c  =  escape.charAt(commentStart);	  Character    c    =    quoteChar.charAt(commentStart);    	non-compiled	[CE]  	4	None	replace
28	[BUG]  [BUGGY]  Character  c  =  delimiter.charAt(commentStart);  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character  c  =  delimiter.charAt(commentStart);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character  c  =  delimiter.charAt(commentStart);	  Character    c    =    quoteChar.charAt(commentStart);    	non-compiled	[CE]  	4	None	replace
29	[BUG]  [BUGGY]  Character  c  =  escapeCharacter.charAt(commentStart);  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character  c  =  escapeCharacter.charAt(commentStart);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character  c  =  escapeCharacter.charAt(commentStart);	  Character    c    =    quoteChar.charAt(commentStart);    	non-compiled	[CE]  	4	None	replace
30	[BUG]  [BUGGY]  Character  c  =  quoteChar.charAt(0);  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character  c  =  quoteChar.charAt(0);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character  c  =  quoteChar.charAt(0);	  Character    c    =    quoteChar.charAt(commentStart);    	non-compiled	[CE]  	4	None	replace
31	[BUG]  [BUGGY]  Character  c  =  escapeChar.charAt(quoteStart);  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character  c  =  escapeChar.charAt(quoteStart);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character  c  =  escapeChar.charAt(quoteStart);	  Character    c    =    quoteChar.charAt(commentStart);    	non-compiled	[CE]  	4	None	replace
32	[BUG]  [BUGGY]  if(header!=  null  ||  header.length  >  0  ||  header.length  >  Arrays.asList(header))  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  ||  header.length  >  0  ||  header.length  >  Arrays.asList(header))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  ||  header.length  >  0  ||  header.length  >  Arrays.asList(header))  {	  if(header!=    null    &&    header.length    >    0    ||    header.length    >    Arrays.asList(header))    {    	non-compiled	[CE]  	43	None	replace
33	[BUG]  [BUGGY]  if(header  ==  null  ||  header.length  >  0  ||  header.length  >  Arrays.asList(header))  {  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header  ==  null  ||  header.length  >  0  ||  header.length  >  Arrays.asList(header))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header  ==  null  ||  header.length  >  0  ||  header.length  >  Arrays.asList(header))  {	  if(header!=    null    &&    header.length    >    0    ||    header.length    >    Arrays.asList(header))    {    	non-compiled	[CE]  	43	None	replace
34	[BUG]  [BUGGY]  if(header!=  null  &&  header.length  >  0  ||  header.length  >  Arrays.asList(header.length))  {  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  &&  header.length  >  0  ||  header.length  >  Arrays.asList(header.length))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  &&  header.length  >  0  ||  header.length  >  Arrays.asList(header.length))  {	  if(header!=    null    &&    header.length    >    0    ||    header.length    >    Arrays.asList(header))    {    	non-compiled	[CE]  	43	None	replace
35	[BUG]  [BUGGY]  if(header!=  null  &&  header.length  >  0  ||  header.length  <  =  Arrays.asList(header))  {  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  &&  header.length  >  0  ||  header.length  <  =  Arrays.asList(header))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  &&  header.length  >  0  ||  header.length  <  =  Arrays.asList(header))  {	  if(header!=    null    &&    header.length    >    0    ||    header.length    >    Arrays.asList(header))    {    	non-compiled	[CE]  	43	None	replace
36	[BUG]  [BUGGY]  if(header!=  null  &&  header.length  >  0  ||  header.length  >=  Arrays.asList(header))  {  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  &&  header.length  >  0  ||  header.length  >=  Arrays.asList(header))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  &&  header.length  >  0  ||  header.length  >=  Arrays.asList(header))  {	  if(header!=    null    &&    header.length    >    0    ||    header.length    >    Arrays.asList(header))    {    	non-compiled	[CE]  	43	None	replace
37	[BUG]  [BUGGY]  Character  c  =  delimiter.charAt(escape);  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character  c  =  delimiter.charAt(escape);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character  c  =  delimiter.charAt(escape);	  Character    c    =    quoteChar.charAt(escape);    	non-compiled	[CE]  	5	None	replace
38	[BUG]  [BUGGY]  Character  c  =  escapeChar.charAt(0);  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character  c  =  escapeChar.charAt(0);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character  c  =  escapeChar.charAt(0);	  Character    c    =    quoteChar.charAt(escape);    	non-compiled	[CE]  	5	None	replace
39	[BUG]  [BUGGY]  Character  c  =  escape.charAt(quoteChar);  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character  c  =  escape.charAt(quoteChar);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character  c  =  escape.charAt(quoteChar);	  Character    c    =    quoteChar.charAt(escape);    	non-compiled	[CE]  	5	None	replace
40	[BUG]  [BUGGY]  if(delimiter!=  null  &&  header.length!=  0)  {  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(delimiter!=  null  &&  header.length!=  0)  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(delimiter!=  null  &&  header.length!=  0)  {	  if(header!=    null    &&    header.length!=    0)    {    	non-compiled	[CE]  	12	None	replace
41	[BUG]  [BUGGY]  if(header!=  null  ||  header.length  >  0  ||  header.length  >  0)  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  ||  header.length  >  0  ||  header.length  >  0)  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  ||  header.length  >  0  ||  header.length  >  0)  {	  if(header!=    null    &&    header.length    >    0    ||    header.length    >    0)    {    	non-compiled	[CE]  	42	None	replace
42	[BUG]  [BUGGY]  if(header!=  null  &&  header.length  >  0  ||  header.length  <  =  0)  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  &&  header.length  >  0  ||  header.length  <  =  0)  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  &&  header.length  >  0  ||  header.length  <  =  0)  {	  if(header!=    null    &&    header.length    >    0    ||    header.length    >    0)    {    	non-compiled	[CE]  	42	None	replace
43	[BUG]  [BUGGY]  if(header!=  null  &&  header.length  >  0  ||  header.length  <  0)  {  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  &&  header.length  >  0  ||  header.length  <  0)  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  &&  header.length  >  0  ||  header.length  <  0)  {	  if(header!=    null    &&    header.length    >    0    ||    header.length    >    0)    {    	non-compiled	[CE]  	42	None	replace
44	[BUG]  [BUGGY]  if(header  ==  null  ||  header.length  >  0  ||  header.length  >  0)  {  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header  ==  null  ||  header.length  >  0  ||  header.length  >  0)  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header  ==  null  ||  header.length  >  0  ||  header.length  >  0)  {	  if(header!=    null    &&    header.length    >    0    ||    header.length    >    0)    {    	non-compiled	[CE]  	42	None	replace
45	[BUG]  [BUGGY]  if(header!=  null  ||  header.length  <  0  ||  header.length  >  0)  {  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  ||  header.length  <  0  ||  header.length  >  0)  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  ||  header.length  <  0  ||  header.length  >  0)  {	  if(header!=    null    &&    header.length    >    0    ||    header.length    >    0)    {    	non-compiled	[CE]  	42	None	replace
46	[BUG]  [BUGGY]  if(header!=  null  &&  header.length  >  0  ||  header.length  >=  0)  {  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  &&  header.length  >  0  ||  header.length  >=  0)  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  &&  header.length  >  0  ||  header.length  >=  0)  {	  if(header!=    null    &&    header.length    >    0    ||    header.length    >    0)    {    	non-compiled	[CE]  	42	None	replace
47	[BUG]  [BUGGY]  if(header!=  null  &&  header.length!=  Arrays.asList(header))  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  &&  header.length!=  Arrays.asList(header))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  &&  header.length!=  Arrays.asList(header))  {	  if(header    ==    null    ||    header.length!=    Arrays.asList(header))    {    	non-compiled	[CE]  	35	None	replace
48	[BUG]  [BUGGY]  if(header!=  null  ||  header.length!=  Arrays.asList(c))  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  ||  header.length!=  Arrays.asList(c))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  ||  header.length!=  Arrays.asList(c))  {	  if(header    ==    null    ||    header.length!=    Arrays.asList(header))    {    	non-compiled	[CE]  	35	None	replace
49	[BUG]  [BUGGY]  if(header!=  null  ||  header.length!=  Arrays.asList(header.length))  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  ||  header.length!=  Arrays.asList(header.length))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  ||  header.length!=  Arrays.asList(header.length))  {	  if(header    ==    null    ||    header.length!=    Arrays.asList(header))    {    	non-compiled	[CE]  	35	None	replace
50	[BUG]  [BUGGY]  if(header!=  null  ||  header.length!=  Arrays.asList(commentStart))  {  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  ||  header.length!=  Arrays.asList(commentStart))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  ||  header.length!=  Arrays.asList(commentStart))  {	  if(header    ==    null    ||    header.length!=    Arrays.asList(header))    {    	non-compiled	[CE]  	35	None	replace
51	[BUG]  [BUGGY]  if(header!=  null  ||  header.length!=  Arrays.asList(delimiter))  {  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  ||  header.length!=  Arrays.asList(delimiter))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  ||  header.length!=  Arrays.asList(delimiter))  {	  if(header    ==    null    ||    header.length!=    Arrays.asList(header))    {    	non-compiled	[CE]  	35	None	replace
52	[BUG]  [BUGGY]  if(header!=  null  ||  header.length  >  0  ||  header.length  <  Arrays.asList(header))  {  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  ||  header.length  >  0  ||  header.length  <  Arrays.asList(header))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  ||  header.length  >  0  ||  header.length  <  Arrays.asList(header))  {	  if(header!=    null    &&    header.length    >    0    ||    header.length    <    Arrays.asList(header))    {    	non-compiled	[CE]  	44	None	replace
53	[BUG]  [BUGGY]  if(header!=  null  &&  header.length  >  0  ||  header.size()  <  Arrays.asList(header))  {  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  &&  header.length  >  0  ||  header.size()  <  Arrays.asList(header))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  &&  header.length  >  0  ||  header.size()  <  Arrays.asList(header))  {	  if(header!=    null    &&    header.length    >    0    ||    header.length    <    Arrays.asList(header))    {    	non-compiled	[CE]  	44	None	replace
54	[BUG]  [BUGGY]  if(header!=  null  &&  header.length  >  0  ||  header.length  <  Arrays.asList(header.length))  {  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  &&  header.length  >  0  ||  header.length  <  Arrays.asList(header.length))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  &&  header.length  >  0  ||  header.length  <  Arrays.asList(header.length))  {	  if(header!=    null    &&    header.length    >    0    ||    header.length    <    Arrays.asList(header))    {    	non-compiled	[CE]  	44	None	replace
55	[BUG]  [BUGGY]  if(header!=  null  &&  header.length  >  0  ||  header.length  <  Arrays.asList(c))  {  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  &&  header.length  >  0  ||  header.length  <  Arrays.asList(c))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  &&  header.length  >  0  ||  header.length  <  Arrays.asList(c))  {	  if(header!=    null    &&    header.length    >    0    ||    header.length    <    Arrays.asList(header))    {    	non-compiled	[CE]  	44	None	replace
56	[BUG]  [BUGGY]  if(header  ==  null  ||  header.length  >  0  ||  header.length  <  Arrays.asList(header))  {  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header  ==  null  ||  header.length  >  0  ||  header.length  <  Arrays.asList(header))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header  ==  null  ||  header.length  >  0  ||  header.length  <  Arrays.asList(header))  {	  if(header!=    null    &&    header.length    >    0    ||    header.length    <    Arrays.asList(header))    {    	non-compiled	[CE]  	44	None	replace
57	[BUG]  [BUGGY]  if(header.length!=  2)  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header.length!=  2)  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length!=  2)  {	  if(header.length!=    1)    {    	non-compiled	[CE]  	33	None	replace
58	[BUG]  [BUGGY]  if(header.length!=  0  ||  header.length  ==  Arrays.asList(header))  {  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header.length!=  0  ||  header.length  ==  Arrays.asList(header))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length!=  0  ||  header.length  ==  Arrays.asList(header))  {	  if(header.length!=    0    ||    header.length    >=    Arrays.asList(header))    {    	non-compiled	[CE]  	34	None	replace
59	[BUG]  [BUGGY]  if(header.length!=  0  ||  header.length  >  Arrays.asList(header))  {  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header.length!=  0  ||  header.length  >  Arrays.asList(header))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length!=  0  ||  header.length  >  Arrays.asList(header))  {	  if(header.length!=    0    ||    header.length    >=    Arrays.asList(header))    {    	non-compiled	[CE]  	34	None	replace
60	[BUG]  [BUGGY]  if(header  ==  null  ||  header.length  <  =  0)  {  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header  ==  null  ||  header.length  <  =  0)  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header  ==  null  ||  header.length  <  =  0)  {	  if(header!=    null    ||    header.length    <    =    0)    {    	non-compiled	[CE]  	18	None	replace
61	[BUG]  [BUGGY]  if(header!=  null  ||  header.length  <  2)  {  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  ||  header.length  <  2)  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  ||  header.length  <  2)  {	  if(header!=    null    ||    header.length    <    =    0)    {    	non-compiled	[CE]  	18	None	replace
62	[BUG]  [BUGGY]  if(header.length!=  0  ||  header.length  >=  0)  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header.length!=  0  ||  header.length  >=  0)  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length!=  0  ||  header.length  >=  0)  {	  if(header.length!=    0    ||    header.length!=    0)    {    	non-compiled	[CE]  	19	None	replace
63	[BUG]  [BUGGY]  if(header.length  >=  0  ||  header.length!=  0)  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header.length  >=  0  ||  header.length!=  0)  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length  >=  0  ||  header.length!=  0)  {	  if(header.length!=    0    ||    header.length!=    0)    {    	non-compiled	[CE]  	19	None	replace
64	[BUG]  [BUGGY]  if(header!=  null  &&  header.length  <  3)  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  &&  header.length  <  3)  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  &&  header.length  <  3)  {	  if(header!=    null    &&    header.length    <    2)    {    	non-compiled	[CE]  	37	None	replace
65	[BUG]  [BUGGY]  if(header!=  null  &&  header.length  <  1)  {  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  &&  header.length  <  1)  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  &&  header.length  <  1)  {	  if(header!=    null    &&    header.length    <    2)    {    	non-compiled	[CE]  	37	None	replace
66	[BUG]  [BUGGY]  if(header!=  null  &&  header.length  <  4)  {  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  &&  header.length  <  4)  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  &&  header.length  <  4)  {	  if(header!=    null    &&    header.length    <    2)    {    	non-compiled	[CE]  	37	None	replace
67	[BUG]  [BUGGY]  if(header!=  null  &&  header.length  <  =  2)  {  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  &&  header.length  <  =  2)  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  &&  header.length  <  =  2)  {	  if(header!=    null    &&    header.length    <    2)    {    	non-compiled	[CE]  	37	None	replace
68	[BUG]  [BUGGY]  Character[]  header  =  quoteChar.split( "- ");  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar.split( "- ");  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar.split( "- ");	  Character[]    header    =    quoteChar.split(   "n   ");    	non-compiled	[CE]  	10	None	replace
69	[BUG]  [BUGGY]  Character[]  header  =  quoteChar.split( ": ");  [CE]  [FE]                                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar.split( ": ");  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar.split( ": ");	  Character[]    header    =    quoteChar.split(   "n   ");    	non-compiled	[CE]  	10	None	replace
70	[BUG]  [BUGGY]  Character[]  header  =  quoteChar.split( "; ");  [CE]  [FE]                                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar.split( "; ");  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar.split( "; ");	  Character[]    header    =    quoteChar.split(   "n   ");    	non-compiled	[CE]  	10	None	replace
71	[BUG]  [BUGGY]  Character[]  header  =  quotePolicy.split( "none ");  [CE]  [FE]                                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quotePolicy.split( "none ");  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quotePolicy.split( "none ");	  Character[]    header    =    quoteChar.split(   "n   ");    	non-compiled	[CE]  	10	None	replace
72	[BUG]  [BUGGY]  Character[]  header  =  quoteChar.split( ";n ");  [CE]  [FE]                                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar.split( ";n ");  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar.split( ";n ");	  Character[]    header    =    quoteChar.split(   "n   ");    	non-compiled	[CE]  	10	None	replace
73	[BUG]  [BUGGY]  Character[]  header  =  quoteChar.split( "_ ");  [CE]  [FE]                                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar.split( "_ ");  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar.split( "_ ");	  Character[]    header    =    quoteChar.split(   "n   ");    	non-compiled	[CE]  	10	None	replace
74	[BUG]  [BUGGY]  if(header.length!=  0  ||  Arrays.asList(header))  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header.length!=  0  ||  Arrays.asList(header))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length!=  0  ||  Arrays.asList(header))  {	  if(header.length!=    Arrays.asList(header))    {    	non-compiled	[CE]  	1	None	replace
75	[BUG]  [BUGGY]  if(header.length!=  Arrays.asList(header.length))  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header.length!=  Arrays.asList(header.length))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length!=  Arrays.asList(header.length))  {	  if(header.length!=    Arrays.asList(header))    {    	non-compiled	[CE]  	1	None	replace
76	[BUG]  [BUGGY]  if(header.length!=  Arrays.asList(commentStart))  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header.length!=  Arrays.asList(commentStart))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length!=  Arrays.asList(commentStart))  {	  if(header.length!=    Arrays.asList(header))    {    	non-compiled	[CE]  	1	None	replace
77	[BUG]  [BUGGY]  if(header.length  ==  Arrays.asList(header))  {  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header.length  ==  Arrays.asList(header))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length  ==  Arrays.asList(header))  {	  if(header.length!=    Arrays.asList(header))    {    	non-compiled	[CE]  	1	None	replace
78	[BUG]  [BUGGY]  if(header.length!=  Arrays.asList(c))  {  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header.length!=  Arrays.asList(c))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length!=  Arrays.asList(c))  {	  if(header.length!=    Arrays.asList(header))    {    	non-compiled	[CE]  	1	None	replace
79	[BUG]  [BUGGY]  Character[]  header  =  quotePolicy.getHeaders();  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quotePolicy.getHeaders();  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quotePolicy.getHeaders();	  Character[]    header    =    quoteChar.getHeaders();    	non-compiled	[CE]  	9	None	replace
80	[BUG]  [BUGGY]  Character[]  header  =  quoteChar.getHeaderRecords();  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar.getHeaderRecords();  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar.getHeaderRecords();	  Character[]    header    =    quoteChar.getHeaders();    	non-compiled	[CE]  	9	None	replace
81	[BUG]  [BUGGY]  Character[]  header  =  quoteChar.getRecordHeaders();  [CE]  [FE]                                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar.getRecordHeaders();  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar.getRecordHeaders();	  Character[]    header    =    quoteChar.getHeaders();    	non-compiled	[CE]  	9	None	replace
82	[BUG]  [BUGGY]  Character[]  header  =  quoteChar.getSurroundingSpaces();  [CE]  [FE]                                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar.getSurroundingSpaces();  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar.getSurroundingSpaces();	  Character[]    header    =    quoteChar.getHeaders();    	non-compiled	[CE]  	9	None	replace
83	[BUG]  [BUGGY]  Character[]  header  =  quoteChar.getHeaders(c);  [CE]  [FE]                                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar.getHeaders(c);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar.getHeaders(c);	  Character[]    header    =    quoteChar.getHeaders();    	non-compiled	[CE]  	9	None	replace
84	[BUG]  [BUGGY]  Character[]  header  =  quoteChar.getDelimiter();  [CE]  [FE]                                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar.getDelimiter();  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar.getDelimiter();	  Character[]    header    =    quoteChar.getHeaders();    	non-compiled	[CE]  	9	None	replace
85	[BUG]  [BUGGY]  if(header!=  null  ||  header.length  >  0  ||  header.charAt(header.length  -  1)!=  '/')  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  ||  header.length  >  0  ||  header.charAt(header.length  -  1)!=  '/')  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  ||  header.length  >  0  ||  header.charAt(header.length  -  1)!=  '/')  {	  if(header!=    null    &&    header.length    >    0    ||    header.charAt(header.length    -    1)!=    '/')    {    	non-compiled	[CE]  	41	None	replace
86	[BUG]  [BUGGY]  if(header  ==  null  &&  header.length  >  0  ||  header.charAt(header.length  -  1)!=  '/')  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header  ==  null  &&  header.length  >  0  ||  header.charAt(header.length  -  1)!=  '/')  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header  ==  null  &&  header.length  >  0  ||  header.charAt(header.length  -  1)!=  '/')  {	  if(header!=    null    &&    header.length    >    0    ||    header.charAt(header.length    -    1)!=    '/')    {    	non-compiled	[CE]  	41	None	replace
87	[BUG]  [BUGGY]  if(header!=  null  &&  header.length  >  0  ||  header.charAt(header.length  -  1)  ==  '/')  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  &&  header.length  >  0  ||  header.charAt(header.length  -  1)  ==  '/')  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  &&  header.length  >  0  ||  header.charAt(header.length  -  1)  ==  '/')  {	  if(header!=    null    &&    header.length    >    0    ||    header.charAt(header.length    -    1)!=    '/')    {    	non-compiled	[CE]  	41	None	replace
88	[BUG]  [BUGGY]  if(header  ==  null  ||  header.length  >  0  ||  header.charAt(header.length  -  1)!=  '/')  {  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header  ==  null  ||  header.length  >  0  ||  header.charAt(header.length  -  1)!=  '/')  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header  ==  null  ||  header.length  >  0  ||  header.charAt(header.length  -  1)!=  '/')  {	  if(header!=    null    &&    header.length    >    0    ||    header.charAt(header.length    -    1)!=    '/')    {    	non-compiled	[CE]  	41	None	replace
89	[BUG]  [BUGGY]  if(header  >=  null  &&  header.length  >  0  ||  header.charAt(header.length  -  1)!=  '/')  {  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header  >=  null  &&  header.length  >  0  ||  header.charAt(header.length  -  1)!=  '/')  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header  >=  null  &&  header.length  >  0  ||  header.charAt(header.length  -  1)!=  '/')  {	  if(header!=    null    &&    header.length    >    0    ||    header.charAt(header.length    -    1)!=    '/')    {    	non-compiled	[CE]  	41	None	replace
90	[BUG]  [BUGGY]  if(header.length  ==  0  ||  header.length  ==  0)  {  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header.length  ==  0  ||  header.length  ==  0)  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length  ==  0  ||  header.length  ==  0)  {	  if(header.length!=    0    ||    header.length    ==    0)    {    	non-compiled	[CE]  	21	None	replace
91	[BUG]  [BUGGY]  if(header.length  >=  0  ||  header.length  ==  0)  {  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header.length  >=  0  ||  header.length  ==  0)  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length  >=  0  ||  header.length  ==  0)  {	  if(header.length!=    0    ||    header.length    ==    0)    {    	non-compiled	[CE]  	21	None	replace
92	[BUG]  [BUGGY]  if(header!=  null  &&  header.length  <  =  1)  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  &&  header.length  <  =  1)  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  &&  header.length  <  =  1)  {	  if(header!=    null    &&    header.length    <    =    0)    {    	non-compiled	[CE]  	14	None	replace
93	[BUG]  [BUGGY]  Character  c  =  quoteChar.charAt(i  +  1);  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character  c  =  quoteChar.charAt(i  +  1);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character  c  =  quoteChar.charAt(i  +  1);	  Character    c    =    quoteChar.charAt(i);    	non-compiled	[CE]  	8	None	replace
94	[BUG]  [BUGGY]  Character  c  =  delimiter.charAt(i);  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character  c  =  delimiter.charAt(i);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character  c  =  delimiter.charAt(i);	  Character    c    =    quoteChar.charAt(i);    	non-compiled	[CE]  	8	None	replace
95	[BUG]  [BUGGY]  Character  c  =  quoteChar.charAt(offset);  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character  c  =  quoteChar.charAt(offset);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character  c  =  quoteChar.charAt(offset);	  Character    c    =    quoteChar.charAt(i);    	non-compiled	[CE]  	8	None	replace
96	[BUG]  [BUGGY]  Character  c  =  escapeChar.charAt(i);  [CE]  [FE]                                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character  c  =  escapeChar.charAt(i);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character  c  =  escapeChar.charAt(i);	  Character    c    =    quoteChar.charAt(i);    	non-compiled	[CE]  	8	None	replace
97	[BUG]  [BUGGY]  Character  c  =  commentStart.charAt(i);  [CE]  [FE]                                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character  c  =  commentStart.charAt(i);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character  c  =  commentStart.charAt(i);	  Character    c    =    quoteChar.charAt(i);    	non-compiled	[CE]  	8	None	replace
98	[BUG]  [BUGGY]  if(delimiter  ==  null  &&  header.length  >  0)  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(delimiter  ==  null  &&  header.length  >  0)  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(delimiter  ==  null  &&  header.length  >  0)  {	  if(header    ==    null    &&    header.length    >    0)    {    	non-compiled	[CE]  	16	None	replace
99	[BUG]  [BUGGY]  if(header!=  null  &&  header.length  ==  Arrays.asList(header))  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  &&  header.length  ==  Arrays.asList(header))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  &&  header.length  ==  Arrays.asList(header))  {	  if(header!=    null    ||    header.length    ==    Arrays.asList(header))    {    	non-compiled	[CE]  	31	None	replace
100	[BUG]  [BUGGY]  if(header!=  null  ||  header.length  ==  Arrays.asList(c))  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  ||  header.length  ==  Arrays.asList(c))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  ||  header.length  ==  Arrays.asList(c))  {	  if(header!=    null    ||    header.length    ==    Arrays.asList(header))    {    	non-compiled	[CE]  	31	None	replace
101	[BUG]  [BUGGY]  if(header!=  null  ||  header.length  ==  Arrays.asList(commentStart))  {  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  ||  header.length  ==  Arrays.asList(commentStart))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  ||  header.length  ==  Arrays.asList(commentStart))  {	  if(header!=    null    ||    header.length    ==    Arrays.asList(header))    {    	non-compiled	[CE]  	31	None	replace
102	[BUG]  [BUGGY]  if(header!=  null  ||  header.length  ==  Arrays.asList(header.length))  {  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  ||  header.length  ==  Arrays.asList(header.length))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  ||  header.length  ==  Arrays.asList(header.length))  {	  if(header!=    null    ||    header.length    ==    Arrays.asList(header))    {    	non-compiled	[CE]  	31	None	replace
103	[BUG]  [BUGGY]  if(header!=  null  ||  header.length  ==  Arrays.asList(delimiter))  {  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  ||  header.length  ==  Arrays.asList(delimiter))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  ||  header.length  ==  Arrays.asList(delimiter))  {	  if(header!=    null    ||    header.length    ==    Arrays.asList(header))    {    	non-compiled	[CE]  	31	None	replace
104	[BUG]  [BUGGY]  if(header!=  null  ||  header.length  ==  Arrays.asList(escape))  {  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  ||  header.length  ==  Arrays.asList(escape))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  ||  header.length  ==  Arrays.asList(escape))  {	  if(header!=    null    ||    header.length    ==    Arrays.asList(header))    {    	non-compiled	[CE]  	31	None	replace
105	[BUG]  [BUGGY]  Character[]  header  =  quoteCharacters.get(c,  delimiter);  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteCharacters.get(c,  delimiter);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteCharacters.get(c,  delimiter);	  Character[]    header    =    quoteCharacters.get(c);    	non-compiled	[CE]  	40	None	replace
106	[BUG]  [BUGGY]  Character[]  header  =  quoteCharacters.get(c,  commentStart);  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteCharacters.get(c,  commentStart);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteCharacters.get(c,  commentStart);	  Character[]    header    =    quoteCharacters.get(c);    	non-compiled	[CE]  	40	None	replace
107	[BUG]  [BUGGY]  Character[]  header  =  quoteCharacters.get(escape);  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteCharacters.get(escape);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteCharacters.get(escape);	  Character[]    header    =    quoteCharacters.get(c);    	non-compiled	[CE]  	40	None	replace
108	[BUG]  [BUGGY]  Character[]  header  =  set.get(c);  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  set.get(c);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  set.get(c);	  Character[]    header    =    quoteCharacters.get(c);    	non-compiled	[CE]  	40	None	replace
109	[BUG]  [BUGGY]  Character[]  header  =  quoteCharacters.get(commentStart);  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteCharacters.get(commentStart);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteCharacters.get(commentStart);	  Character[]    header    =    quoteCharacters.get(c);    	non-compiled	[CE]  	40	None	replace
110	[BUG]  [BUGGY]  Character[]  header  =  quoteCharacters.get(c,  escape);  [CE]  [FE]                                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteCharacters.get(c,  escape);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteCharacters.get(c,  escape);	  Character[]    header    =    quoteCharacters.get(c);    	non-compiled	[CE]  	40	None	replace
111	[BUG]  [BUGGY]  if(header  ==  null  ||  header.length  <  0)  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header  ==  null  ||  header.length  <  0)  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header  ==  null  ||  header.length  <  0)  {	  if(header!=    null    ||    header.length    <    0)    {    	non-compiled	[CE]  	27	None	replace
112	[BUG]  [BUGGY]  Character[]  header  =  quoteChar(commentStart,  escape);  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar(commentStart,  escape);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar(commentStart,  escape);	  Character[]    header    =    quoteChar(c,    escape);    	non-compiled	[CE]  	39	None	replace
113	[BUG]  [BUGGY]  Character[]  header  =  quoteChar(c,  escape,  commentStart);  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar(c,  escape,  commentStart);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar(c,  escape,  commentStart);	  Character[]    header    =    quoteChar(c,    escape);    	non-compiled	[CE]  	39	None	replace
114	[BUG]  [BUGGY]  Character[]  header  =  quoteChar(c,  commentEnd);  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar(c,  commentEnd);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar(c,  commentEnd);	  Character[]    header    =    quoteChar(c,    escape);    	non-compiled	[CE]  	39	None	replace
115	[BUG]  [BUGGY]  Character[]  header  =  quoteChar(c,  commentStart,  escape);  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar(c,  commentStart,  escape);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar(c,  commentStart,  escape);	  Character[]    header    =    quoteChar(c,    escape);    	non-compiled	[CE]  	39	None	replace
116	[BUG]  [BUGGY]  if(delimiter  ==  null  ||  header.length!=  0)  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(delimiter  ==  null  ||  header.length!=  0)  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(delimiter  ==  null  ||  header.length!=  0)  {	  if(header    ==    null    ||    header.length!=    0)    {    	non-compiled	[CE]  	2	None	replace
117	[BUG]  [BUGGY]  if(header.length  ==  0  ||  header.length  >=  0)  {  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header.length  ==  0  ||  header.length  >=  0)  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length  ==  0  ||  header.length  >=  0)  {	  if(header.length    ==    0    ||    header.length!=    0)    {    	non-compiled	[CE]  	22	None	replace
118	[BUG]  [BUGGY]  Character[]  header  =  quoteChar.split( "commentStart ");  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar.split( "commentStart ");  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar.split( "commentStart ");	  Character[]    header    =    quoteChar.split(   "u   ");    	non-compiled	[CE]  	28	None	replace
119	[BUG]  [BUGGY]  Character[]  header  =  quoteChar.split( "u000 ");  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar.split( "u000 ");  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar.split( "u000 ");	  Character[]    header    =    quoteChar.split(   "u   ");    	non-compiled	[CE]  	28	None	replace
120	[BUG]  [BUGGY]  Character[]  header  =  quoteChar.split( "u00e8 ");  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar.split( "u00e8 ");  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar.split( "u00e8 ");	  Character[]    header    =    quoteChar.split(   "u   ");    	non-compiled	[CE]  	28	None	replace
121	[BUG]  [BUGGY]  if(header.length  >  0)  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header.length  >  0)  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length  >  0)  {	  if(header.length    >=    0)    {    	non-compiled	[CE]  	20	None	replace
122	[BUG]  [BUGGY]  if(header.length  <  =  0)  {  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header.length  <  =  0)  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length  <  =  0)  {	  if(header.length    >=    0)    {    	non-compiled	[CE]  	20	None	replace
123	[BUG]  [BUGGY]  if(header!=  null  ||  header.length  >=  Arrays.asList(header))  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  ||  header.length  >=  Arrays.asList(header))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  ||  header.length  >=  Arrays.asList(header))  {	  if(header    ==    null    ||    header.length!=    Arrays.asList(header))    {    	non-compiled	[CE]  	35	None	replace
124	[BUG]  [BUGGY]  if(header  ==  null  &&  header.length!=  Arrays.asList(header))  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header  ==  null  &&  header.length!=  Arrays.asList(header))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header  ==  null  &&  header.length!=  Arrays.asList(header))  {	  if(header    ==    null    ||    header.length!=    Arrays.asList(header))    {    	non-compiled	[CE]  	35	None	replace
125	[BUG]  [BUGGY]  if(header!=  null  &&  header.length  >  0  ||  header.length  ==  Arrays.asList(header))  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  &&  header.length  >  0  ||  header.length  ==  Arrays.asList(header))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  &&  header.length  >  0  ||  header.length  ==  Arrays.asList(header))  {	  if(header!=    null    &&    header.length    >    0    ||    header.length    >    Arrays.asList(header))    {    	non-compiled	[CE]  	43	None	replace
126	[BUG]  [BUGGY]  if(header!=  null  &&  header.length  >  0  ||  header.size()  >  Arrays.asList(header))  {  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  &&  header.length  >  0  ||  header.size()  >  Arrays.asList(header))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  &&  header.length  >  0  ||  header.size()  >  Arrays.asList(header))  {	  if(header!=    null    &&    header.length    >    0    ||    header.length    >    Arrays.asList(header))    {    	non-compiled	[CE]  	43	None	replace
127	[BUG]  [BUGGY]  if(header  ==  null  &&  header.length  >  0  ||  header.length  >  Arrays.asList(header))  {  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header  ==  null  &&  header.length  >  0  ||  header.length  >  Arrays.asList(header))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header  ==  null  &&  header.length  >  0  ||  header.length  >  Arrays.asList(header))  {	  if(header!=    null    &&    header.length    >    0    ||    header.length    >    Arrays.asList(header))    {    	non-compiled	[CE]  	43	None	replace
128	[BUG]  [BUGGY]  Character[]  header  =  quoteChar(c,  escape,  listener);  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar(c,  escape,  listener);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar(c,  escape,  listener);	  Character[]    header    =    quoteChar(c,    escape);    	non-compiled	[CE]  	39	None	replace
129	[BUG]  [BUGGY]  Character[]  header  =  quoteChar.split( "escape ");  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar.split( "escape ");  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar.split( "escape ");	  Character[]    header    =    quoteChar.split(   "u   ");    	non-compiled	[CE]  	28	None	replace
130	[BUG]  [BUGGY]  if(header  ==  null  ||  header.length  ==  Arrays.asList(header))  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header  ==  null  ||  header.length  ==  Arrays.asList(header))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header  ==  null  ||  header.length  ==  Arrays.asList(header))  {	  if(header!=    null    ||    header.length    ==    Arrays.asList(header))    {    	non-compiled	[CE]  	31	None	replace
131	[BUG]  [BUGGY]  if(header!=  null  ||  header.length  <  Arrays.asList(header))  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  ||  header.length  <  Arrays.asList(header))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  ||  header.length  <  Arrays.asList(header))  {	  if(header!=    null    ||    header.length    ==    Arrays.asList(header))    {    	non-compiled	[CE]  	31	None	replace
132	[BUG]  [BUGGY]  if(header!=  null  &&  header.length!=  0  ||  header.length!=  Arrays.asList(header))  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  &&  header.length!=  0  ||  header.length!=  Arrays.asList(header))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  &&  header.length!=  0  ||  header.length!=  Arrays.asList(header))  {	  if(header.length!=    0    ||    header.length!=    Arrays.asList(header))    {    	non-compiled	[CE]  	32	None	replace
133	[BUG]  [BUGGY]  if(header!=  null  &&  header.length!=  0  &&  header.length!=  Arrays.asList(header))  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  &&  header.length!=  0  &&  header.length!=  Arrays.asList(header))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  &&  header.length!=  0  &&  header.length!=  Arrays.asList(header))  {	  if(header.length!=    0    ||    header.length!=    Arrays.asList(header))    {    	non-compiled	[CE]  	32	None	replace
134	[BUG]  [BUGGY]  if(header!=  null  ||  header.length!=  0  ||  header.length!=  Arrays.asList(header))  {  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  ||  header.length!=  0  ||  header.length!=  Arrays.asList(header))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  ||  header.length!=  0  ||  header.length!=  Arrays.asList(header))  {	  if(header.length!=    0    ||    header.length!=    Arrays.asList(header))    {    	non-compiled	[CE]  	32	None	replace
135	[BUG]  [BUGGY]  if(header.length!=  0  &&  header.length!=  Arrays.asList(header))  {  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header.length!=  0  &&  header.length!=  Arrays.asList(header))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length!=  0  &&  header.length!=  Arrays.asList(header))  {	  if(header.length!=    0    ||    header.length!=    Arrays.asList(header))    {    	non-compiled	[CE]  	32	None	replace
136	[BUG]  [BUGGY]  Character  c  =  delimiter.charAt(quoteChar);  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character  c  =  delimiter.charAt(quoteChar);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character  c  =  delimiter.charAt(quoteChar);	  Character    c    =    quoteChar.charAt(escape);    	non-compiled	[CE]  	5	None	replace
137	[BUG]  [BUGGY]  Character[]  header  =  this.quoteChar.toCharArray();  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  this.quoteChar.toCharArray();  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  this.quoteChar.toCharArray();	  Character[]    header    =    quoteChar.toCharArray();    	non-compiled	[CE]  	7	None	replace
138	[BUG]  [BUGGY]  Character[]  header  =  c.toCharArray();  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  c.toCharArray();  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  c.toCharArray();	  Character[]    header    =    quoteChar.toCharArray();    	non-compiled	[CE]  	7	None	replace
139	[BUG]  [BUGGY]  Character[]  header  =  quoteChar.toCharArray(this.commentStart);  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar.toCharArray(this.commentStart);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar.toCharArray(this.commentStart);	  Character[]    header    =    quoteChar.toCharArray();    	non-compiled	[CE]  	7	None	replace
140	[BUG]  [BUGGY]  Character[]  header  =  quoteChar.toCharArray(escape);  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar.toCharArray(escape);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar.toCharArray(escape);	  Character[]    header    =    quoteChar.toCharArray();    	non-compiled	[CE]  	7	None	replace
141	[BUG]  [BUGGY]  if(header!=  null  &&  header.length  >  0  &&  header.charAt(header.length  -  1)!=  '/')  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  &&  header.length  >  0  &&  header.charAt(header.length  -  1)!=  '/')  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  &&  header.length  >  0  &&  header.charAt(header.length  -  1)!=  '/')  {	  if(header!=    null    &&    header.length    >    0    ||    header.charAt(header.length    -    1)!=    '/')    {    	non-compiled	[CE]  	41	None	replace
142	[BUG]  [BUGGY]  Character  c  =  header.charAt(commentStart);  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character  c  =  header.charAt(commentStart);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character  c  =  header.charAt(commentStart);	  Character    c    =    quoteChar.charAt(commentStart);    	non-compiled	[CE]  	4	None	replace
143	[BUG]  [BUGGY]  Character  c  =  escape.charAt(quoteStart);  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character  c  =  escape.charAt(quoteStart);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character  c  =  escape.charAt(quoteStart);	  Character    c    =    quoteChar.charAt(commentStart);    	non-compiled	[CE]  	4	None	replace
144	[BUG]  [BUGGY]  if(header!=  null  &&  header.length  [Delete]  0)  {  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  &&  header.length  [Delete]  0)  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  &&  header.length  [Delete]  0)  {	  if(header!=    null    &&    header.length!=    0)    {    	non-compiled	[CE]  	12	None	replace
145	[BUG]  [BUGGY]  if(header!=  null  &&  header.length!=  0  ||  header.length  >=  Arrays.asList(header))  {  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  &&  header.length!=  0  ||  header.length  >=  Arrays.asList(header))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  &&  header.length!=  0  ||  header.length  >=  Arrays.asList(header))  {	  if(header.length!=    0    ||    header.length    >=    Arrays.asList(header))    {    	non-compiled	[CE]  	34	None	replace
146	[BUG]  [BUGGY]  if(header!=  null  &&  header.length!=  0  &&  header.length  >=  Arrays.asList(header))  {  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  &&  header.length!=  0  &&  header.length  >=  Arrays.asList(header))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  &&  header.length!=  0  &&  header.length  >=  Arrays.asList(header))  {	  if(header.length!=    0    ||    header.length    >=    Arrays.asList(header))    {    	non-compiled	[CE]  	34	None	replace
147	[BUG]  [BUGGY]  if(header.length  ==  1)  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header.length  ==  1)  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length  ==  1)  {	  if(header.length!=    1)    {    	non-compiled	[CE]  	33	None	replace
148	[BUG]  [BUGGY]  if(header.length!=  1  ||  header.length!=  0)  {  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header.length!=  1  ||  header.length!=  0)  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length!=  1  ||  header.length!=  0)  {	  if(header.length!=    1)    {    	non-compiled	[CE]  	33	None	replace
149	[BUG]  [BUGGY]  if(header.length  >=  1)  {  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header.length  >=  1)  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length  >=  1)  {	  if(header.length!=    1)    {    	non-compiled	[CE]  	33	None	replace
150	[BUG]  [BUGGY]  Character[]  header  =  this.quoteCharacters.get(c);  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  this.quoteCharacters.get(c);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  this.quoteCharacters.get(c);	  Character[]    header    =    quoteCharacters.get(c);    	non-compiled	[CE]  	40	None	replace
151	[BUG]  [BUGGY]  Character[]  header  =  quoteCharacters.get(c  +  1);  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteCharacters.get(c  +  1);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteCharacters.get(c  +  1);	  Character[]    header    =    quoteCharacters.get(c);    	non-compiled	[CE]  	40	None	replace
152	[BUG]  [BUGGY]  Character[]  header  =  quoteChar.split( "# ");  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar.split( "# ");  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar.split( "# ");	  Character[]    header    =    quoteChar.split(   "n   ");    	non-compiled	[CE]  	10	None	replace
153	[BUG]  [BUGGY]  Character[]  header  =  quoteChar.split( "/ ");  [CE]  [FE]                                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar.split( "/ ");  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar.split( "/ ");	  Character[]    header    =    quoteChar.split(   "n   ");    	non-compiled	[CE]  	10	None	replace
154	[BUG]  [BUGGY]  Character  c  =  this.getCharacter();  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character  c  =  this.getCharacter();  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character  c  =  this.getCharacter();	  Character    c    =    getCharacter();    	non-compiled	[CE]  	6	None	replace
155	[BUG]  [BUGGY]  Character  c  =  getCharacter().getChars(0,  header.length);  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character  c  =  getCharacter().getChars(0,  header.length);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character  c  =  getCharacter().getChars(0,  header.length);	  Character    c    =    getCharacter();    	non-compiled	[CE]  	6	None	replace
156	[BUG]  [BUGGY]  Character  c  =  getCSVCharacter();  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character  c  =  getCSVCharacter();  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character  c  =  getCSVCharacter();	  Character    c    =    getCharacter();    	non-compiled	[CE]  	6	None	replace
157	[BUG]  [BUGGY]  Character  c  =  getCharacter().charAt(header.length);  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character  c  =  getCharacter().charAt(header.length);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character  c  =  getCharacter().charAt(header.length);	  Character    c    =    getCharacter();    	non-compiled	[CE]  	6	None	replace
158	[BUG]  [BUGGY]  Character  c  =  getCharacter().toCharArray();  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character  c  =  getCharacter().toCharArray();  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character  c  =  getCharacter().toCharArray();	  Character    c    =    getCharacter();    	non-compiled	[CE]  	6	None	replace
159	[BUG]  [BUGGY]  Character  c  =  header.charAt(i);  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character  c  =  header.charAt(i);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character  c  =  header.charAt(i);	  Character    c    =    quoteChar.charAt(i);    	non-compiled	[CE]  	8	None	replace
160	[BUG]  [BUGGY]  Character  c  =  quoteChar.charAt(i++);  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character  c  =  quoteChar.charAt(i++);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character  c  =  quoteChar.charAt(i++);	  Character    c    =    quoteChar.charAt(i);    	non-compiled	[CE]  	8	None	replace
161	[BUG]  [BUGGY]  Character[]  header  =  quoteChar(delimiter);  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar(delimiter);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar(delimiter);	  Character[]    header    =    quoteChar(c);    	non-compiled	[CE]  	38	None	replace
162	[BUG]  [BUGGY]  Character[]  header  =  quoteChar(header);  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar(header);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar(header);	  Character[]    header    =    quoteChar(c);    	non-compiled	[CE]  	38	None	replace
163	[BUG]  [BUGGY]  Character[]  header  =  this.quoteChar.getHeaders();  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  this.quoteChar.getHeaders();  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  this.quoteChar.getHeaders();	  Character[]    header    =    quoteChar.getHeaders();    	non-compiled	[CE]  	9	None	replace
164	[BUG]  [BUGGY]  Character[]  header  =  quoteChar.getHeaders(recordSeparator);  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar.getHeaders(recordSeparator);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar.getHeaders(recordSeparator);	  Character[]    header    =    quoteChar.getHeaders();    	non-compiled	[CE]  	9	None	replace
165	[BUG]  [BUGGY]  Character[]  header  =  c.getHeaders();  [CE]  [FE]                                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  c.getHeaders();  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  c.getHeaders();	  Character[]    header    =    quoteChar.getHeaders();    	non-compiled	[CE]  	9	None	replace
166	[BUG]  [BUGGY]  Character[]  header  =  quoteChar.getHeaderRecorders();  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar.getHeaderRecorders();  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar.getHeaderRecorders();	  Character[]    header    =    quoteChar.getHeaders();    	non-compiled	[CE]  	9	None	replace
167	[BUG]  [BUGGY]  Character[]  header  =  delimiter.getHeaders();  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  delimiter.getHeaders();  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  delimiter.getHeaders();	  Character[]    header    =    quoteChar.getHeaders();    	non-compiled	[CE]  	9	None	replace
168	[BUG]  [BUGGY]  if(header!=  null  &&  header.length  >  0  ||  header.charAt(0)!=  '/')  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  &&  header.length  >  0  ||  header.charAt(0)!=  '/')  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  &&  header.length  >  0  ||  header.charAt(0)!=  '/')  {	  if(header!=    null    &&    header.length    >    0    ||    header.charAt(header.length    -    1)!=    '/')    {    	non-compiled	[CE]  	41	None	replace
169	[BUG]  [BUGGY]  if(header!=  null  &&  header.length  >  0  ||  header.charAt(0)  ==  '/')  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  &&  header.length  >  0  ||  header.charAt(0)  ==  '/')  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  &&  header.length  >  0  ||  header.charAt(0)  ==  '/')  {	  if(header!=    null    &&    header.length    >    0    ||    header.charAt(header.length    -    1)!=    '/')    {    	non-compiled	[CE]  	41	None	replace
170	[BUG]  [BUGGY]  if(header.length  ==  0  ||  header.length  >=  Arrays.asList(header))  {  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header.length  ==  0  ||  header.length  >=  Arrays.asList(header))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length  ==  0  ||  header.length  >=  Arrays.asList(header))  {	  if(header.length!=    0    ||    header.length    >=    Arrays.asList(header))    {    	non-compiled	[CE]  	34	None	replace
171	[BUG]  [BUGGY]  if(header.length!=  0  &&  header.length  >=  Arrays.asList(header))  {  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header.length!=  0  &&  header.length  >=  Arrays.asList(header))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length!=  0  &&  header.length  >=  Arrays.asList(header))  {	  if(header.length!=    0    ||    header.length    >=    Arrays.asList(header))    {    	non-compiled	[CE]  	34	None	replace
172	[BUG]  [BUGGY]  if(header.length!=  0  ||  header.length  <  Arrays.asList(header))  {  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header.length!=  0  ||  header.length  <  Arrays.asList(header))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length!=  0  ||  header.length  <  Arrays.asList(header))  {	  if(header.length!=    0    ||    header.length    >=    Arrays.asList(header))    {    	non-compiled	[CE]  	34	None	replace
173	[BUG]  [BUGGY]  Character[]  header  =  quoteChar.split( "u00e7c ");  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar.split( "u00e7c ");  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar.split( "u00e7c ");	  Character[]    header    =    quoteChar.split(   "u   ");    	non-compiled	[CE]  	28	None	replace
174	[BUG]  [BUGGY]  if(header.length  >=  0  ||  header.length  >  Arrays.asList(header))  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header.length  >=  0  ||  header.length  >  Arrays.asList(header))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length  >=  0  ||  header.length  >  Arrays.asList(header))  {	  if(header.length    >=    0)    {    	non-compiled	[CE]  	20	None	replace
175	[BUG]  [BUGGY]  if(header.length!=  0  &&  header.length!=  0)  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header.length!=  0  &&  header.length!=  0)  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length!=  0  &&  header.length!=  0)  {	  if(header.length!=    0    ||    header.length!=    0)    {    	non-compiled	[CE]  	19	None	replace
176	[BUG]  [BUGGY]  if(header!=  null  &&  header.length  >=  Arrays.asList(header))  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  &&  header.length  >=  Arrays.asList(header))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  &&  header.length  >=  Arrays.asList(header))  {	  if(header!=    null    ||    header.length    ==    Arrays.asList(header))    {    	non-compiled	[CE]  	31	None	replace
177	[BUG]  [BUGGY]  if(header  >=  null  &&  header.length  ==  Arrays.asList(header))  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header  >=  null  &&  header.length  ==  Arrays.asList(header))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header  >=  null  &&  header.length  ==  Arrays.asList(header))  {	  if(header!=    null    ||    header.length    ==    Arrays.asList(header))    {    	non-compiled	[CE]  	31	None	replace
178	[BUG]  [BUGGY]  if(!skipHeaderRecord  &&  header.length!=  Arrays.asList(header))  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(!skipHeaderRecord  &&  header.length!=  Arrays.asList(header))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(!skipHeaderRecord  &&  header.length!=  Arrays.asList(header))  {	  if(header.length!=    Arrays.asList(header))    {    	non-compiled	[CE]  	1	None	replace
179	[BUG]  [BUGGY]  if(header.length!=  Arrays.asList(escape))  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header.length!=  Arrays.asList(escape))  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length!=  Arrays.asList(escape))  {	  if(header.length!=    Arrays.asList(header))    {    	non-compiled	[CE]  	1	None	replace
180	[BUG]  [BUGGY]  if(header!=  null  &&  header.length!=  3)  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  &&  header.length!=  3)  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  &&  header.length!=  3)  {	  if(header    ==    null    &&    header.length!=    0)    {    	non-compiled	[CE]  	15	None	replace
181	[BUG]  [BUGGY]  if(header!=  null  &&  header.length  <  2  &&  header.length  >  0)  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header!=  null  &&  header.length  <  2  &&  header.length  >  0)  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  &&  header.length  <  2  &&  header.length  >  0)  {	  if(header!=    null    &&    header.length    <    2)    {    	non-compiled	[CE]  	37	None	replace
182	[BUG]  [BUGGY]  Character[]  header  =  quotes.get(c);  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quotes.get(c);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quotes.get(c);	  Character[]    header    =    quoteCharacters.get(c);    	non-compiled	[CE]  	40	None	replace
183	[BUG]  [BUGGY]  Character[]  header  =  quotedCharacters.get(c);  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quotedCharacters.get(c);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quotedCharacters.get(c);	  Character[]    header    =    quoteCharacters.get(c);    	non-compiled	[CE]  	40	None	replace
184	[BUG]  [BUGGY]  if(header.length!=  2  ||  header.length!=  2)  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header.length!=  2  ||  header.length!=  2)  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length!=  2  ||  header.length!=  2)  {	  if(header.length!=    1)    {    	non-compiled	[CE]  	33	None	replace
185	[BUG]  [BUGGY]  Character[]  header  =  quoteChar.split( "n ",  delimiter);  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar.split( "n ",  delimiter);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar.split( "n ",  delimiter);	  Character[]    header    =    quoteChar.split(   "n   ");    	non-compiled	[CE]  	10	None	replace
186	[BUG]  [BUGGY]  Character[]  header  =  quoteChar.split( "n ",  c);  [CE]  [FE]                                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar.split( "n ",  c);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar.split( "n ",  c);	  Character[]    header    =    quoteChar.split(   "n   ");    	non-compiled	[CE]  	10	None	replace
187	[BUG]  [BUGGY]  Character  c  =  header.charAt(escape);  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character  c  =  header.charAt(escape);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character  c  =  header.charAt(escape);	  Character    c    =    quoteChar.charAt(escape);    	non-compiled	[CE]  	5	None	replace
188	[BUG]  [BUGGY]  if(header.length!=  0  &&  header.length  ==  0)  {  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header.length!=  0  &&  header.length  ==  0)  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length!=  0  &&  header.length  ==  0)  {	  if(header.length!=    0    ||    header.length    ==    0)    {    	non-compiled	[CE]  	21	None	replace
189	[BUG]  [BUGGY]  if(header.length!=  0  ||  header.length  >  0)  {  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  if(header.length!=  0  ||  header.length  >  0)  {  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length!=  0  ||  header.length  >  0)  {	  if(header.length!=    0    ||    header.length    ==    0)    {    	non-compiled	[CE]  	21	None	replace
190	[BUG]  [BUGGY]  Character[]  header  =  escapeChar.toCharArray();  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  escapeChar.toCharArray();  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  escapeChar.toCharArray();	  Character[]    header    =    quoteChar.toCharArray();    	non-compiled	[CE]  	7	None	replace
191	[BUG]  [BUGGY]  Character  c  =  getCharacter().escapeChar(c);  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character  c  =  getCharacter().escapeChar(c);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character  c  =  getCharacter().escapeChar(c);	  Character    c    =    getCharacter();    	non-compiled	[CE]  	6	None	replace
192	[BUG]  [BUGGY]  Character  c  =  getCharacter().escapeCharacter(c);  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character  c  =  getCharacter().escapeCharacter(c);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character  c  =  getCharacter().escapeCharacter(c);	  Character    c    =    getCharacter();    	non-compiled	[CE]  	6	None	replace
193	[BUG]  [BUGGY]  Character[]  header  =  c.charAt(c);  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  c.charAt(c);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  c.charAt(c);	  Character[]    header    =    quoteChar(c);    	non-compiled	[CE]  	38	None	replace
194	[BUG]  [BUGGY]  Character[]  header  =  quoteChar(c,  c,  delimiter);  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar(c,  c,  delimiter);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar(c,  c,  delimiter);	  Character[]    header    =    quoteChar(c,    escape);    	non-compiled	[CE]  	39	None	replace
195	[BUG]  [BUGGY]  Character[]  header  =  quoteChar(c,  escape,  delimiter);  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }      [BUGGY]  Character[]  header  =  quoteChar(c,  escape,  delimiter);  [BUGGY]      final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar(c,  escape,  delimiter);	  Character[]    header    =    quoteChar(c,    escape);    	non-compiled	[CE]  	39	None	replace
