bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(header.length!=  Arrays.asList(header))  {  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  if(header.length!=  Arrays.asList(header))  {  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length!=  Arrays.asList(header))  {	  if(header    ==    null)    {    	non-compiled	[CE]  	1	None	replace
2	[BUG]  [BUGGY]  if(header  ==  null  ||  header.length!=  0)  {  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  if(header  ==  null  ||  header.length!=  0)  {  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header  ==  null  ||  header.length!=  0)  {	  if(header    ==    null)    {    	non-compiled	[CE]  	1	None	replace
3	[BUG]  [BUGGY]  if(header.length  ==  0)  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  if(header.length  ==  0)  {  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length  ==  0)  {	  if(header    ==    null)    {    	non-compiled	[CE]  	1	None	replace
4	[BUG]  [BUGGY]  Character  c  =  quoteChar.charAt(commentStart);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  Character  c  =  quoteChar.charAt(commentStart);  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character  c  =  quoteChar.charAt(commentStart);	      	non-compiled	[CE]  	5	None	replace
5	[BUG]  [BUGGY]  Character  c  =  quoteChar.charAt(escape);  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  Character  c  =  quoteChar.charAt(escape);  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character  c  =  quoteChar.charAt(escape);	      	non-compiled	[CE]  	5	None	replace
6	[BUG]  [BUGGY]  Character  c  =  getCharacter();  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  Character  c  =  getCharacter();  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character  c  =  getCharacter();	      	non-compiled	[CE]  	5	None	replace
7	[BUG]  [BUGGY]  Character[]  header  =  quoteChar.toCharArray();  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  Character[]  header  =  quoteChar.toCharArray();  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar.toCharArray();	      	non-compiled	[CE]  	5	None	replace
8	[BUG]  [BUGGY]  Character  c  =  quoteChar.charAt(i);  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  Character  c  =  quoteChar.charAt(i);  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character  c  =  quoteChar.charAt(i);	      	non-compiled	[CE]  	5	None	replace
9	[BUG]  [BUGGY]  Character[]  header  =  quoteChar.getHeaders();  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  Character[]  header  =  quoteChar.getHeaders();  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar.getHeaders();	      	non-compiled	[CE]  	5	None	replace
10	[BUG]  [BUGGY]  Character[]  header  =  quoteChar.split( "n ");  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  Character[]  header  =  quoteChar.split( "n ");  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar.split( "n ");	      	non-compiled	[CE]  	5	None	replace
11	[BUG]  [BUGGY]  if(header!=  null  ||  header.length  >=  0)  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  if(header!=  null  ||  header.length  >=  0)  {  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  ||  header.length  >=  0)  {	  if(header!=    null    ||    header.length!=    0)    {    	non-compiled	[CE]  	4	None	replace
12	[BUG]  [BUGGY]  if(header!=  null  &&  header.length!=  0)  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  if(header!=  null  &&  header.length!=  0)  {  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  &&  header.length!=  0)  {	  if(header!=    null    ||    header.length!=    0)    {    	non-compiled	[CE]  	4	None	replace
13	[BUG]  [BUGGY]  if(header  >=  null  ||  header.length!=  0)  {  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  if(header  >=  null  ||  header.length!=  0)  {  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header  >=  null  ||  header.length!=  0)  {	  if(header!=    null    ||    header.length!=    0)    {    	non-compiled	[CE]  	4	None	replace
14	[BUG]  [BUGGY]  if(header!=  null  &&  header.length  <  =  0)  {  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  if(header!=  null  &&  header.length  <  =  0)  {  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  &&  header.length  <  =  0)  {	  if(header!=    null    &&    header.length    ==    0)    {    	non-compiled	[CE]  	7	None	replace
15	[BUG]  [BUGGY]  if(header  ==  null  &&  header.length!=  0)  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  if(header  ==  null  &&  header.length!=  0)  {  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header  ==  null  &&  header.length!=  0)  {	  if(header!=    null    &&    header.length    ==    0)    {    	non-compiled	[CE]  	7	None	replace
16	[BUG]  [BUGGY]  if(header  ==  null  &&  header.length  >  0)  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  if(header  ==  null  &&  header.length  >  0)  {  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header  ==  null  &&  header.length  >  0)  {	  if(header!=    null    &&    header.length    >=    0)    {    	non-compiled	[CE]  	8	None	replace
17	[BUG]  [BUGGY]  if(header  ==  null  ||  header.length  ==  0)  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  if(header  ==  null  ||  header.length  ==  0)  {  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header  ==  null  ||  header.length  ==  0)  {	  if(header!=    null    ||    header.length    ==    0)    {    	non-compiled	[CE]  	3	None	replace
18	[BUG]  [BUGGY]  if(header!=  null  ||  header.length  <  =  0)  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  if(header!=  null  ||  header.length  <  =  0)  {  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  ||  header.length  <  =  0)  {	  if(header!=    null    ||    header.length    ==    0)    {    	non-compiled	[CE]  	3	None	replace
19	[BUG]  [BUGGY]  if(header.length!=  0  ||  header.length!=  0)  {  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  if(header.length!=  0  ||  header.length!=  0)  {  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length!=  0  ||  header.length!=  0)  {	  if(header.length!=    0)    {    	non-compiled	[CE]  	2	None	replace
20	[BUG]  [BUGGY]  if(header.length  >=  0)  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  if(header.length  >=  0)  {  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length  >=  0)  {	  if(header.length!=    0)    {    	non-compiled	[CE]  	2	None	replace
21	[BUG]  [BUGGY]  if(header.length!=  0  ||  header.length  ==  0)  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  if(header.length!=  0  ||  header.length  ==  0)  {  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length!=  0  ||  header.length  ==  0)  {	  if(header.length!=    0)    {    	non-compiled	[CE]  	2	None	replace
22	[BUG]  [BUGGY]  if(header.length  ==  0  ||  header.length!=  0)  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  if(header.length  ==  0  ||  header.length!=  0)  {  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length  ==  0  ||  header.length!=  0)  {	  if(header.length!=    0)    {    	non-compiled	[CE]  	2	None	replace
23	[BUG]  [BUGGY]  if(header!=  null  ||  header.length  >  0)  {  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  if(header!=  null  ||  header.length  >  0)  {  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  ||  header.length  >  0)  {	  if(header!=    null    &&    header.length    >    0)    {    	non-compiled	[CE]  	6	None	replace
24	[BUG]  [BUGGY]  if(delimiter!=  null  &&  header.length  >  0)  {  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  if(delimiter!=  null  &&  header.length  >  0)  {  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(delimiter!=  null  &&  header.length  >  0)  {	  if(header!=    null    &&    header.length    >    0)    {    	non-compiled	[CE]  	6	None	replace
25	[BUG]  [BUGGY]  if(header  >=  null  &&  header.length  >  0)  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  if(header  >=  null  &&  header.length  >  0)  {  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header  >=  null  &&  header.length  >  0)  {	  if(header!=    null    &&    header.length    >    0)    {    	non-compiled	[CE]  	6	None	replace
26	[BUG]  [BUGGY]  if(header  ==  null  ||  header.length  >  0)  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  if(header  ==  null  ||  header.length  >  0)  {  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header  ==  null  ||  header.length  >  0)  {	  if(header!=    null    &&    header.length    >    0)    {    	non-compiled	[CE]  	6	None	replace
27	[BUG]  [BUGGY]  if(header!=  null  ||  header.length  <  0)  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  if(header!=  null  ||  header.length  <  0)  {  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  ||  header.length  <  0)  {	  if(header!=    null    ||    header.length    ==    0)    {    	non-compiled	[CE]  	3	None	replace
28	[BUG]  [BUGGY]  Character[]  header  =  quoteChar.split( "u ");  [CE]  [FE]                java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  Character[]  header  =  quoteChar.split( "u ");  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar.split( "u ");	      	non-compiled	[CE]  	5	None	replace
29	[BUG]  [BUGGY]  if(header!=  null  &&  header.length  <  0)  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  if(header!=  null  &&  header.length  <  0)  {  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  &&  header.length  <  0)  {	  if(header!=    null    &&    header.length    >=    0)    {    	non-compiled	[CE]  	8	None	replace
30	[BUG]  [BUGGY]  if(header!=  null  ||  header.length!=  Arrays.asList(header))  {  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  if(header!=  null  ||  header.length!=  Arrays.asList(header))  {  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  ||  header.length!=  Arrays.asList(header))  {	  if(header    ==    null)    {    	non-compiled	[CE]  	1	None	replace
31	[BUG]  [BUGGY]  if(header!=  null  ||  header.length  ==  Arrays.asList(header))  {  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  if(header!=  null  ||  header.length  ==  Arrays.asList(header))  {  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  ||  header.length  ==  Arrays.asList(header))  {	  if(header    ==    null)    {    	non-compiled	[CE]  	1	None	replace
32	[BUG]  [BUGGY]  if(header.length!=  0  ||  header.length!=  Arrays.asList(header))  {  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  if(header.length!=  0  ||  header.length!=  Arrays.asList(header))  {  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length!=  0  ||  header.length!=  Arrays.asList(header))  {	  if(header.length!=    0)    {    	non-compiled	[CE]  	2	None	replace
33	[BUG]  [BUGGY]  if(header.length!=  1)  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  if(header.length!=  1)  {  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length!=  1)  {	  if(header.length!=    0)    {    	non-compiled	[CE]  	2	None	replace
34	[BUG]  [BUGGY]  if(header.length!=  0  ||  header.length  >=  Arrays.asList(header))  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  if(header.length!=  0  ||  header.length  >=  Arrays.asList(header))  {  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header.length!=  0  ||  header.length  >=  Arrays.asList(header))  {	  if(header.length!=    0)    {    	non-compiled	[CE]  	2	None	replace
35	[BUG]  [BUGGY]  if(header  ==  null  ||  header.length!=  Arrays.asList(header))  {  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  if(header  ==  null  ||  header.length!=  Arrays.asList(header))  {  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header  ==  null  ||  header.length!=  Arrays.asList(header))  {	  if(header    ==    null)    {    	non-compiled	[CE]  	1	None	replace
36	[BUG]  [BUGGY]  if(header  ==  null  ||  header.length  >=  0)  {  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  if(header  ==  null  ||  header.length  >=  0)  {  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header  ==  null  ||  header.length  >=  0)  {	  if(header    ==    null)    {    	non-compiled	[CE]  	1	None	replace
37	[BUG]  [BUGGY]  if(header!=  null  &&  header.length  <  2)  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  if(header!=  null  &&  header.length  <  2)  {  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  &&  header.length  <  2)  {	  if(header!=    null    &&    header.length    >=    0)    {    	non-compiled	[CE]  	8	None	replace
38	[BUG]  [BUGGY]  Character[]  header  =  quoteChar(c);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  Character[]  header  =  quoteChar(c);  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar(c);	      	non-compiled	[CE]  	5	None	replace
39	[BUG]  [BUGGY]  Character[]  header  =  quoteChar(c,  escape);  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  Character[]  header  =  quoteChar(c,  escape);  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteChar(c,  escape);	      	non-compiled	[CE]  	5	None	replace
40	[BUG]  [BUGGY]  Character[]  header  =  quoteCharacters.get(c);  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  Character[]  header  =  quoteCharacters.get(c);  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	Character[]  header  =  quoteCharacters.get(c);	      	non-compiled	[CE]  	5	None	replace
41	[BUG]  [BUGGY]  if(header!=  null  &&  header.length  >  0  ||  header.charAt(header.length  -  1)!=  '/')  {  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  if(header!=  null  &&  header.length  >  0  ||  header.charAt(header.length  -  1)!=  '/')  {  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  &&  header.length  >  0  ||  header.charAt(header.length  -  1)!=  '/')  {	  if(header!=    null    &&    header.length    >    0)    {    	non-compiled	[CE]  	6	None	replace
42	[BUG]  [BUGGY]  if(header!=  null  &&  header.length  >  0  ||  header.length  >  0)  {  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  if(header!=  null  &&  header.length  >  0  ||  header.length  >  0)  {  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  &&  header.length  >  0  ||  header.length  >  0)  {	  if(header!=    null    &&    header.length    >    0)    {    	non-compiled	[CE]  	6	None	replace
43	[BUG]  [BUGGY]  if(header!=  null  &&  header.length  >  0  ||  header.length  >  Arrays.asList(header))  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  if(header!=  null  &&  header.length  >  0  ||  header.length  >  Arrays.asList(header))  {  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  &&  header.length  >  0  ||  header.length  >  Arrays.asList(header))  {	  if(header!=    null    &&    header.length    >    0)    {    	non-compiled	[CE]  	6	None	replace
44	[BUG]  [BUGGY]  if(header!=  null  &&  header.length  >  0  ||  header.length  <  Arrays.asList(header))  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }    [BUGGY]  if(header!=  null  &&  header.length  >  0  ||  header.length  <  Arrays.asList(header))  {  [BUGGY]    final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	if(header!=  null  &&  header.length  >  0  ||  header.length  <  Arrays.asList(header))  {	  if(header!=    null    &&    header.length    >    0)    {    	non-compiled	[CE]  	6	None	replace
