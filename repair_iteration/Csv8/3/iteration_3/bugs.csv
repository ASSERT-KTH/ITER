bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  set.add(Arrays.asList(header.length  +  1));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(header.length  +  1));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(header.length  +  1));	  set.addAll(Arrays.asList(header.length    +    1));    	non-compiled	[CE]  	47	None	replace
2	[BUG]  [BUGGY]  set.addAll(Arrays.asList(header.length  +  2));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(header.length  +  2));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(header.length  +  2));	  set.addAll(Arrays.asList(header.length    +    1));    	non-compiled	[CE]  	47	None	replace
3	[BUG]  [BUGGY]  set.addAll(Arrays.asList(header.length,  header.length  +  1));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(header.length,  header.length  +  1));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(header.length,  header.length  +  1));	  set.addAll(Arrays.asList(header.length    +    1));    	non-compiled	[CE]  	47	None	replace
4	[BUG]  [BUGGY]  set.addAll(Arrays.asList(header.length  *  1));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(header.length  *  1));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(header.length  *  1));	  set.addAll(Arrays.asList(header.length    +    1));    	non-compiled	[CE]  	47	None	replace
5	[BUG]  [BUGGY]  final  List  <  String>  set.addAll(Arrays.asList(escapeChar));  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  List  <  String>  set.addAll(Arrays.asList(escapeChar));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  List  <  String>  set.addAll(Arrays.asList(escapeChar));	  final    Set    <    String>    set.addAll(Arrays.asList(escapeChar));    	non-compiled	[CE]  	19	None	replace
6	[BUG]  [BUGGY]  final  ArrayList  <  String>  set.addAll(Arrays.asList(escapeChar));  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  ArrayList  <  String>  set.addAll(Arrays.asList(escapeChar));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  ArrayList  <  String>  set.addAll(Arrays.asList(escapeChar));	  final    Set    <    String>    set.addAll(Arrays.asList(escapeChar));    	non-compiled	[CE]  	19	None	replace
7	[BUG]  [BUGGY]  final  Set  <  String>  set.addAll(Arrays.asList(c));  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set.addAll(Arrays.asList(c));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set.addAll(Arrays.asList(c));	  final    Set    <    String>    set.addAll(Arrays.asList(escapeChar));    	non-compiled	[CE]  	19	None	replace
8	[BUG]  [BUGGY]  final  Set  <  String>  set.addAll(Arrays.asList(quoteChar));  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set.addAll(Arrays.asList(quoteChar));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set.addAll(Arrays.asList(quoteChar));	  final    Set    <    String>    set.addAll(Arrays.asList(escapeChar));    	non-compiled	[CE]  	19	None	replace
9	[BUG]  [BUGGY]  set.addAll(Arrays.asList(commentStart,  escape));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(commentStart,  escape));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(commentStart,  escape));	  set.addAll(Arrays.asList(delimiter,    commentStart));    	non-compiled	[CE]  	96	None	replace
10	[BUG]  [BUGGY]  set.addAll(Arrays.asList(commentStart,  escapeChar));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(commentStart,  escapeChar));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(commentStart,  escapeChar));	  set.addAll(Arrays.asList(delimiter,    commentStart));    	non-compiled	[CE]  	96	None	replace
11	[BUG]  [BUGGY]  set.add(Arrays.asList(commentStart,  escape));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(commentStart,  escape));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(commentStart,  escape));	  set.addAll(Arrays.asList(delimiter,    commentStart));    	non-compiled	[CE]  	96	None	replace
12	[BUG]  [BUGGY]  set.addAll(Arrays.asList(quoteChar,  delimiter));  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(quoteChar,  delimiter));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(quoteChar,  delimiter));	  set.addAll(Arrays.asList(delimiter,    commentStart));    	non-compiled	[CE]  	96	None	replace
13	[BUG]  [BUGGY]  set.addAll(Arrays.asList(header,  escapeChar  +   "));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(header,  escapeChar  +   "));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(header,  escapeChar  +   "));	  set.addAll(Arrays.asList(header,    commentStart    +       "));    	non-compiled	[CE]  	74	None	replace
14	[BUG]  [BUGGY]  set.addAll(Arrays.asList(header,  quoteChar  +   "));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(header,  quoteChar  +   "));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(header,  quoteChar  +   "));	  set.addAll(Arrays.asList(header,    commentStart    +       "));    	non-compiled	[CE]  	74	None	replace
15	[BUG]  [BUGGY]  set.addAll(Arrays.asList(commentStart,  header.length  +   "));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(commentStart,  header.length  +   "));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(commentStart,  header.length  +   "));	  set.addAll(Arrays.asList(header,    commentStart    +       "));    	non-compiled	[CE]  	74	None	replace
16	[BUG]  [BUGGY]  set.addAll(Arrays.asList(escapeChar,  commentStart  +   "));  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(escapeChar,  commentStart  +   "));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(escapeChar,  commentStart  +   "));	  set.addAll(Arrays.asList(header,    commentStart    +       "));    	non-compiled	[CE]  	74	None	replace
17	[BUG]  [BUGGY]  set.add(Arrays.asList(labelSurroundingSpaces,  skipHeaderRecord));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(labelSurroundingSpaces,  skipHeaderRecord));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(labelSurroundingSpaces,  skipHeaderRecord));	  set.add(Arrays.asList(labelSurroundingSpaces));    	non-compiled	[CE]  	60	None	replace
18	[BUG]  [BUGGY]  set.add(Arrays.asList(labelSurroundingSpaces,  ignoreEmptyLines));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(labelSurroundingSpaces,  ignoreEmptyLines));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(labelSurroundingSpaces,  ignoreEmptyLines));	  set.add(Arrays.asList(labelSurroundingSpaces));    	non-compiled	[CE]  	60	None	replace
19	[BUG]  [BUGGY]  set.add(Arrays.asList(labelSurroundingSpaces),  quoteChar);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(labelSurroundingSpaces),  quoteChar);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(labelSurroundingSpaces),  quoteChar);	  set.add(Arrays.asList(labelSurroundingSpaces));    	non-compiled	[CE]  	60	None	replace
20	[BUG]  [BUGGY]  set.add(Arrays.asList(escapeSurroundingSpaces));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(escapeSurroundingSpaces));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(escapeSurroundingSpaces));	  set.add(Arrays.asList(labelSurroundingSpaces));    	non-compiled	[CE]  	60	None	replace
21	[BUG]  [BUGGY]  set.add(Arrays.asList(labelSurroundingSpaces,  quoteChar));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(labelSurroundingSpaces,  quoteChar));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(labelSurroundingSpaces,  quoteChar));	  set.add(Arrays.asList(labelSurroundingSpaces));    	non-compiled	[CE]  	60	None	replace
22	[BUG]  [BUGGY]  set.addAll(Arrays.asList(labelSurroundingSpaces));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(labelSurroundingSpaces));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(labelSurroundingSpaces));	  set.add(Arrays.asList(labelSurroundingSpaces));    	non-compiled	[CE]  	60	None	replace
23	[BUG]  [BUGGY]  final  Set  <  String>  set.add(Arrays.asList(quote));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set.add(Arrays.asList(quote));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set.add(Arrays.asList(quote));	  set.add(Arrays.asList(quote));    	non-compiled	[CE]  	6	None	replace
24	[BUG]  [BUGGY]  final  List  <  String>  header  =  set.iterator().next();  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  List  <  String>  header  =  set.iterator().next();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  List  <  String>  header  =  set.iterator().next();	  final    Set    <    String>    header    =    set.iterator().next();    	non-compiled	[CE]  	87	None	replace
25	[BUG]  [BUGGY]  final  ArrayList  <  String>  header  =  set.iterator().next();  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  ArrayList  <  String>  header  =  set.iterator().next();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  ArrayList  <  String>  header  =  set.iterator().next();	  final    Set    <    String>    header    =    set.iterator().next();    	non-compiled	[CE]  	87	None	replace
26	[BUG]  [BUGGY]  final  Set  <  String>  header  =  set.keySet().iterator().next();  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  header  =  set.keySet().iterator().next();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  header  =  set.keySet().iterator().next();	  final    Set    <    String>    header    =    set.iterator().next();    	non-compiled	[CE]  	87	None	replace
27	[BUG]  [BUGGY]  final  Set  <  String>  header  =  set.values().next();  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  header  =  set.values().next();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  header  =  set.values().next();	  final    Set    <    String>    header    =    set.iterator().next();    	non-compiled	[CE]  	87	None	replace
28	[BUG]  [BUGGY]  final  Set  <  String>  header  =  set.iterator(),  quoteChar.next();  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  header  =  set.iterator(),  quoteChar.next();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  header  =  set.iterator(),  quoteChar.next();	  final    Set    <    String>    header    =    set.iterator().next();    	non-compiled	[CE]  	87	None	replace
29	[BUG]  [BUGGY]  final  Set  <  String>  header  =  set.iterator();  [CE]  [FE]                                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  header  =  set.iterator();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  header  =  set.iterator();	  final    Set    <    String>    header    =    set.iterator().next();    	non-compiled	[CE]  	87	None	replace
30	[BUG]  [BUGGY]  set.addAll(Arrays.asList(ignoredEmptyLines));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(ignoredEmptyLines));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(ignoredEmptyLines));	  set.addAll(Arrays.asList(escapeSurroundingSpaces));    	non-compiled	[CE]  	1	None	replace
31	[BUG]  [BUGGY]  set.addAll(Arrays.asList(missingEmptyLines));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(missingEmptyLines));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(missingEmptyLines));	  set.addAll(Arrays.asList(escapeSurroundingSpaces));    	non-compiled	[CE]  	1	None	replace
32	[BUG]  [BUGGY]  set.addAll(Arrays.asList(ignoreEmptyLines));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(ignoreEmptyLines));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(ignoreEmptyLines));	  set.addAll(Arrays.asList(escapeSurroundingSpaces));    	non-compiled	[CE]  	1	None	replace
33	[BUG]  [BUGGY]  set.addAll(Arrays.asList(commentStart,  escape.length));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(commentStart,  escape.length));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(commentStart,  escape.length));	  set.addAll(Arrays.asList(escape.length));    	non-compiled	[CE]  	98	None	replace
34	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  c,  header  }  ));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  c,  header  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  c,  header  }  ));	  set.add(Arrays.asList(new    String[]    {    header,    c    }    ));    	non-compiled	[CE]  	57	None	replace
35	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  c,  delimiter  }  ));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  c,  delimiter  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  c,  delimiter  }  ));	  set.add(Arrays.asList(new    String[]    {    header,    c    }    ));    	non-compiled	[CE]  	57	None	replace
36	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  line,  c  }  ));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  line,  c  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  line,  c  }  ));	  set.add(Arrays.asList(new    String[]    {    header,    c    }    ));    	non-compiled	[CE]  	57	None	replace
37	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  c,  commentStart  }  ));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  c,  commentStart  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  c,  commentStart  }  ));	  set.add(Arrays.asList(new    String[]    {    header,    c    }    ));    	non-compiled	[CE]  	57	None	replace
38	[BUG]  [BUGGY]  set.add(Arrays.asList(offset));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(offset));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(offset));	  set.addAll(Arrays.asList(offset));    	non-compiled	[CE]  	12	None	replace
39	[BUG]  [BUGGY]  set.addAll(Arrays.asList(set.size()));  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(set.size()));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(set.size()));	  set.addAll(Arrays.asList(offset));    	non-compiled	[CE]  	12	None	replace
40	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.toString()  +   ") ");  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.toString()  +   ") ");  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header.toString()  +   ") ");	  set.addAll(Arrays.asList(new    String[]    {    header.toString()    }    ));    	non-compiled	[CE]  	52	None	replace
41	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.toString()  +   ") "  }  ));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.toString()  +   ") "  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header.toString()  +   ") "  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header.toString()    }    ));    	non-compiled	[CE]  	52	None	replace
42	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.getName()  }  ));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.getName()  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header.getName()  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header.toString()    }    ));    	non-compiled	[CE]  	52	None	replace
43	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.toString()  + "   "));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.toString()  + "   "));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header.toString()  + "   "));	  set.addAll(Arrays.asList(new    String[]    {    header.toString()    }    ));    	non-compiled	[CE]  	52	None	replace
44	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.getKey()  }  ));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.getKey()  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header.getKey()  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header.toString()    }    ));    	non-compiled	[CE]  	52	None	replace
45	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.length()  }  ));  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.length()  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header.length()  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header.toString()    }    ));    	non-compiled	[CE]  	52	None	replace
46	[BUG]  [BUGGY]  set.addAll(Arrays.asList(header,  escapeChar  +  1));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(header,  escapeChar  +  1));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(header,  escapeChar  +  1));	  set.addAll(Arrays.asList(header,    commentStart    +    1));    	non-compiled	[CE]  	72	None	replace
47	[BUG]  [BUGGY]  set.addAll(Arrays.asList(header,  quoteChar  +  1));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(header,  quoteChar  +  1));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(header,  quoteChar  +  1));	  set.addAll(Arrays.asList(header,    commentStart    +    1));    	non-compiled	[CE]  	72	None	replace
48	[BUG]  [BUGGY]  set.addAll(Arrays.asList(commentStart,  header.length  +  1));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(commentStart,  header.length  +  1));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(commentStart,  header.length  +  1));	  set.addAll(Arrays.asList(header,    commentStart    +    1));    	non-compiled	[CE]  	72	None	replace
49	[BUG]  [BUGGY]  set.addAll(Arrays.asList(header,  c  +  1));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(header,  c  +  1));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(header,  c  +  1));	  set.addAll(Arrays.asList(header,    commentStart    +    1));    	non-compiled	[CE]  	72	None	replace
50	[BUG]  [BUGGY]  set.addAll(Arrays.asList(escapeChar,  commentStart  +  1));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(escapeChar,  commentStart  +  1));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(escapeChar,  commentStart  +  1));	  set.addAll(Arrays.asList(header,    commentStart    +    1));    	non-compiled	[CE]  	72	None	replace
51	[BUG]  [BUGGY]  Set  <  String>  set  =  Sets.newHashSet(header);  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Set  <  String>  set  =  Sets.newHashSet(header);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Set  <  String>  set  =  Sets.newHashSet(header);	  Set    <    String>    set    =    Sets.newHashSet(set);    	non-compiled	[CE]  	34	None	replace
52	[BUG]  [BUGGY]  Set  <  String>  set  =  Sets.newHashSet(set.length);  [CE]  [FE]                                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Set  <  String>  set  =  Sets.newHashSet(set.length);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Set  <  String>  set  =  Sets.newHashSet(set.length);	  Set    <    String>    set    =    Sets.newHashSet(set);    	non-compiled	[CE]  	34	None	replace
53	[BUG]  [BUGGY]  Set  <  String>  set  =  Sets.newHashSet(escape);  [CE]  [FE]                                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Set  <  String>  set  =  Sets.newHashSet(escape);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Set  <  String>  set  =  Sets.newHashSet(escape);	  Set    <    String>    set    =    Sets.newHashSet(set);    	non-compiled	[CE]  	34	None	replace
54	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.toString()  +   ") ");  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.toString()  +   ") ");  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header.toString()  +   ") ");	  set.add(Arrays.asList(new    String[]    {    header.toString()    }    ));    	non-compiled	[CE]  	42	None	replace
55	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.getName()  }  ));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.getName()  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header.getName()  }  ));	  set.add(Arrays.asList(new    String[]    {    header.toString()    }    ));    	non-compiled	[CE]  	42	None	replace
56	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.toString()  +   "));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.toString()  +   "));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header.toString()  +   "));	  set.add(Arrays.asList(new    String[]    {    header.toString()    }    ));    	non-compiled	[CE]  	42	None	replace
57	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.getKey()  }  ));  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.getKey()  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header.getKey()  }  ));	  set.add(Arrays.asList(new    String[]    {    header.toString()    }    ));    	non-compiled	[CE]  	42	None	replace
58	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.length()  }  ));  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.length()  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header.length()  }  ));	  set.add(Arrays.asList(new    String[]    {    header.toString()    }    ));    	non-compiled	[CE]  	42	None	replace
59	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.toString()  + "   "));  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.toString()  + "   "));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header.toString()  + "   "));	  set.add(Arrays.asList(new    String[]    {    header.toString()    }    ));    	non-compiled	[CE]  	42	None	replace
60	[BUG]  [BUGGY]  set.addAll(Arrays.asList(header,  recordSeparator));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(header,  recordSeparator));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(header,  recordSeparator));	  set.addAll(Arrays.asList(recordSeparator,    header));    	non-compiled	[CE]  	59	None	replace
61	[BUG]  [BUGGY]  set.addAll(Arrays.asList(commentStart,  header));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(commentStart,  header));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(commentStart,  header));	  set.addAll(Arrays.asList(recordSeparator,    header));    	non-compiled	[CE]  	59	None	replace
62	[BUG]  [BUGGY]  set.add(Arrays.asList(recordSeparator,  header));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(recordSeparator,  header));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(recordSeparator,  header));	  set.addAll(Arrays.asList(recordSeparator,    header));    	non-compiled	[CE]  	59	None	replace
63	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.length,  commentStart  }  ));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.length,  commentStart  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header.length,  commentStart  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header.length    }    ));    	non-compiled	[CE]  	51	None	replace
64	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.length,  quoteChar  }  ));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.length,  quoteChar  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header.length,  quoteChar  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header.length    }    ));    	non-compiled	[CE]  	51	None	replace
65	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.length,  descriptionStart  }  ));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.length,  descriptionStart  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header.length,  descriptionStart  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header.length    }    ));    	non-compiled	[CE]  	51	None	replace
66	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.length  +  3)  }  ));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.length  +  3)  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header.length  +  3)  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header.length    }    ));    	non-compiled	[CE]  	51	None	replace
67	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.length  +  4)  }  ));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.length  +  4)  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header.length  +  4)  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header.length    }    ));    	non-compiled	[CE]  	51	None	replace
68	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.length,  c  }  ));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.length,  c  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header.length,  c  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header.length    }    ));    	non-compiled	[CE]  	51	None	replace
69	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  null,  quoteChar  }  ));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  null,  quoteChar  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  null,  quoteChar  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header,    null    }    ));    	non-compiled	[CE]  	63	None	replace
70	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  null,  false));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  null,  false));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  null,  false));	  set.addAll(Arrays.asList(new    String[]    {    header,    null    }    ));    	non-compiled	[CE]  	63	None	replace
71	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  c  }  ));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  c  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  c  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header,    null    }    ));    	non-compiled	[CE]  	63	None	replace
72	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  null,  c  }  ));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  null,  c  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  null,  c  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header,    null    }    ));    	non-compiled	[CE]  	63	None	replace
73	[BUG]  [BUGGY]  Character[]  header  =(Character[])set.toArray(new  Character[set.size()  -  1]);  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Character[]  header  =(Character[])set.toArray(new  Character[set.size()  -  1]);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Character[]  header  =(Character[])set.toArray(new  Character[set.size()  -  1]);	  Character[]    header    =(Character[])set.toArray(new    Character[set.size()    ]);    	non-compiled	[CE]  	66	None	replace
74	[BUG]  [BUGGY]  Character[]  header  =(Character[])set.toArray(new  Character[set.size()  +  1]);  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Character[]  header  =(Character[])set.toArray(new  Character[set.size()  +  1]);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Character[]  header  =(Character[])set.toArray(new  Character[set.size()  +  1]);	  Character[]    header    =(Character[])set.toArray(new    Character[set.size()    ]);    	non-compiled	[CE]  	66	None	replace
75	[BUG]  [BUGGY]  Character[]  header  =(Character[])set.toArray(new  Character[set.size()  -  2]);  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Character[]  header  =(Character[])set.toArray(new  Character[set.size()  -  2]);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Character[]  header  =(Character[])set.toArray(new  Character[set.size()  -  2]);	  Character[]    header    =(Character[])set.toArray(new    Character[set.size()    ]);    	non-compiled	[CE]  	66	None	replace
76	[BUG]  [BUGGY]  Character[]  header  =(Character[])set.toArray(new  Character[set.size()  +  2]);  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Character[]  header  =(Character[])set.toArray(new  Character[set.size()  +  2]);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Character[]  header  =(Character[])set.toArray(new  Character[set.size()  +  2]);	  Character[]    header    =(Character[])set.toArray(new    Character[set.size()    ]);    	non-compiled	[CE]  	66	None	replace
77	[BUG]  [BUGGY]  Character[]  header  =(Character[])set.toArray(new  Character[set.size()  -  3]);  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Character[]  header  =(Character[])set.toArray(new  Character[set.size()  -  3]);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Character[]  header  =(Character[])set.toArray(new  Character[set.size()  -  3]);	  Character[]    header    =(Character[])set.toArray(new    Character[set.size()    ]);    	non-compiled	[CE]  	66	None	replace
78	[BUG]  [BUGGY]  set.addAll(Arrays.asList(escape,  quoteChar));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(escape,  quoteChar));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(escape,  quoteChar));	  set.addAll(Arrays.asList(escape,    commentStart));    	non-compiled	[CE]  	24	None	replace
79	[BUG]  [BUGGY]  set.addAll(Arrays.asList(quoteChar,  escape));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(quoteChar,  escape));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(quoteChar,  escape));	  set.addAll(Arrays.asList(escape,    commentStart));    	non-compiled	[CE]  	24	None	replace
80	[BUG]  [BUGGY]  final  List  <  String>  set.addAll(Arrays.asList(commentStart));  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  List  <  String>  set.addAll(Arrays.asList(commentStart));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  List  <  String>  set.addAll(Arrays.asList(commentStart));	  final    Set    <    String>    set.addAll(Arrays.asList(commentStart));    	non-compiled	[CE]  	18	None	replace
81	[BUG]  [BUGGY]  final  ArrayList  <  String>  set.addAll(Arrays.asList(commentStart));  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  ArrayList  <  String>  set.addAll(Arrays.asList(commentStart));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  ArrayList  <  String>  set.addAll(Arrays.asList(commentStart));	  final    Set    <    String>    set.addAll(Arrays.asList(commentStart));    	non-compiled	[CE]  	18	None	replace
82	[BUG]  [BUGGY]  final  List  <  String>  set.addAll(Arrays.asList(escape));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  List  <  String>  set.addAll(Arrays.asList(escape));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  List  <  String>  set.addAll(Arrays.asList(escape));	  final    Set    <    String>    set.addAll(Arrays.asList(escape));    	non-compiled	[CE]  	17	None	replace
83	[BUG]  [BUGGY]  final  ArrayList  <  String>  set.addAll(Arrays.asList(escape));  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  ArrayList  <  String>  set.addAll(Arrays.asList(escape));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  ArrayList  <  String>  set.addAll(Arrays.asList(escape));	  final    Set    <    String>    set.addAll(Arrays.asList(escape));    	non-compiled	[CE]  	17	None	replace
84	[BUG]  [BUGGY]  final  Set  <  String>  set.addAll(Arrays.asList(recordSeparator));  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set.addAll(Arrays.asList(recordSeparator));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set.addAll(Arrays.asList(recordSeparator));	  final    Set    <    String>    set.addAll(Arrays.asList(escape));    	non-compiled	[CE]  	17	None	replace
85	[BUG]  [BUGGY]  final  Set  <  String>  set.addAll(Arrays.asList(compilerStart));  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set.addAll(Arrays.asList(compilerStart));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set.addAll(Arrays.asList(compilerStart));	  final    Set    <    String>    set.addAll(Arrays.asList(escape));    	non-compiled	[CE]  	17	None	replace
86	[BUG]  [BUGGY]  set.addAll(Arrays.asList(choiceChar));  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(choiceChar));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(choiceChar));	  set.addAll(Arrays.asList(escapeChar));    	non-compiled	[CE]  	13	None	replace
87	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  c  }  ));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  c  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  c  }  ));	  set.addAll(Arrays.asList(new    String[]    {    commentStart    }    ));    	non-compiled	[CE]  	77	None	replace
88	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  commentStart,  escape  }  ));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  commentStart,  escape  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  commentStart,  escape  }  ));	  set.addAll(Arrays.asList(new    String[]    {    commentStart    }    ));    	non-compiled	[CE]  	77	None	replace
89	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  commentStart,  header  }  ));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  commentStart,  header  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  commentStart,  header  }  ));	  set.addAll(Arrays.asList(new    String[]    {    commentStart    }    ));    	non-compiled	[CE]  	77	None	replace
90	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  commentStart,  c  }  ));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  commentStart,  c  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  commentStart,  c  }  ));	  set.addAll(Arrays.asList(new    String[]    {    commentStart    }    ));    	non-compiled	[CE]  	77	None	replace
91	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  commentStart,  quoteChar  }  ));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  commentStart,  quoteChar  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  commentStart,  quoteChar  }  ));	  set.addAll(Arrays.asList(new    String[]    {    commentStart    }    ));    	non-compiled	[CE]  	77	None	replace
92	[BUG]  [BUGGY]  set.addAll(Arrays.asList(quoted),  set);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(quoted),  set);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(quoted),  set);	  set.addAll(Arrays.asList(quoted));    	non-compiled	[CE]  	22	None	replace
93	[BUG]  [BUGGY]  final  List  <  String>  header  =  set.iterator().next().getValue();  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  List  <  String>  header  =  set.iterator().next().getValue();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  List  <  String>  header  =  set.iterator().next().getValue();	  final    Set    <    String>    header    =    set.iterator().next().getValue();    	non-compiled	[CE]  	89	None	replace
94	[BUG]  [BUGGY]  final  ArrayList  <  String>  header  =  set.iterator().next().getValue();  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  ArrayList  <  String>  header  =  set.iterator().next().getValue();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  ArrayList  <  String>  header  =  set.iterator().next().getValue();	  final    Set    <    String>    header    =    set.iterator().next().getValue();    	non-compiled	[CE]  	89	None	replace
95	[BUG]  [BUGGY]  final  Set  <  String>  header  =  set.iterator().next().getName();  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  header  =  set.iterator().next().getName();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  header  =  set.iterator().next().getName();	  final    Set    <    String>    header    =    set.iterator().next().getValue();    	non-compiled	[CE]  	89	None	replace
96	[BUG]  [BUGGY]  final  Set  <  String>  header  =  set.iterator().next().getHeader();  [CE]  [FE]                                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  header  =  set.iterator().next().getHeader();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  header  =  set.iterator().next().getHeader();	  final    Set    <    String>    header    =    set.iterator().next().getValue();    	non-compiled	[CE]  	89	None	replace
97	[BUG]  [BUGGY]  final  Set  <  String>  header  =  set.iterator().next().getHeader().getValue();  [CE]  [FE]                                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  header  =  set.iterator().next().getHeader().getValue();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  header  =  set.iterator().next().getHeader().getValue();	  final    Set    <    String>    header    =    set.iterator().next().getValue();    	non-compiled	[CE]  	89	None	replace
98	[BUG]  [BUGGY]  final  ArrayList  <  String>  set  =  Sets.newHashSet(header.length);  [CE]  [FE]                                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  ArrayList  <  String>  set  =  Sets.newHashSet(header.length);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  ArrayList  <  String>  set  =  Sets.newHashSet(header.length);	  final    Set    <    String>    set    =    Sets.newHashSet(header.length);    	non-compiled	[CE]  	36	None	replace
99	[BUG]  [BUGGY]  final  List  <  String>  set  =  Sets.newHashSet(header.length);  [CE]  [FE]                                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  List  <  String>  set  =  Sets.newHashSet(header.length);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  List  <  String>  set  =  Sets.newHashSet(header.length);	  final    Set    <    String>    set    =    Sets.newHashSet(header.length);    	non-compiled	[CE]  	36	None	replace
100	[BUG]  [BUGGY]  final  Set  <  String>  set  =  Sets.newHashSet(header.length  +  1);  [CE]  [FE]                                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set  =  Sets.newHashSet(header.length  +  1);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  Sets.newHashSet(header.length  +  1);	  final    Set    <    String>    set    =    Sets.newHashSet(header.length);    	non-compiled	[CE]  	36	None	replace
101	[BUG]  [BUGGY]  final  Set  <  String>  set  =  Sets.newHashSet(header.length,  header.length);  [CE]  [FE]                                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set  =  Sets.newHashSet(header.length,  header.length);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  Sets.newHashSet(header.length,  header.length);	  final    Set    <    String>    set    =    Sets.newHashSet(header.length);    	non-compiled	[CE]  	36	None	replace
102	[BUG]  [BUGGY]  final  Set  <  String>  set  =  Sets.newHashSet(header.length  -  1);  [CE]  [FE]                                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set  =  Sets.newHashSet(header.length  -  1);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  Sets.newHashSet(header.length  -  1);	  final    Set    <    String>    set    =    Sets.newHashSet(header.length);    	non-compiled	[CE]  	36	None	replace
103	[BUG]  [BUGGY]  final  Set  <  String>  set  =  Sets.newHashSet(header.length,  delimiter);  [CE]  [FE]                                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set  =  Sets.newHashSet(header.length,  delimiter);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  Sets.newHashSet(header.length,  delimiter);	  final    Set    <    String>    set    =    Sets.newHashSet(header.length);    	non-compiled	[CE]  	36	None	replace
104	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  quoteChar,  header  }  ));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  quoteChar,  header  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  quoteChar,  header  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header,    quoteChar    }    ));    	non-compiled	[CE]  	54	None	replace
105	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  quoteChar,  delimiter  }  ));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  quoteChar,  delimiter  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  quoteChar,  delimiter  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header,    quoteChar    }    ));    	non-compiled	[CE]  	54	None	replace
106	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  quoteChar,  c  }  ));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  quoteChar,  c  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  quoteChar,  c  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header,    quoteChar    }    ));    	non-compiled	[CE]  	54	None	replace
107	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  c,  quoteChar  }  ));  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  c,  quoteChar  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  c,  quoteChar  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header,    quoteChar    }    ));    	non-compiled	[CE]  	54	None	replace
108	[BUG]  [BUGGY]  final  Set  <  String>  set  =  set.values();  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set  =  set.values();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  set.values();	  final    Set    <    String>    set    =    set.keySet();    	non-compiled	[CE]  	68	None	replace
109	[BUG]  [BUGGY]  final  List  <  String>  set  =  set.keySet();  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  List  <  String>  set  =  set.keySet();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  List  <  String>  set  =  set.keySet();	  final    Set    <    String>    set    =    set.keySet();    	non-compiled	[CE]  	68	None	replace
110	[BUG]  [BUGGY]  final  ArrayList  <  String>  set  =  set.keySet();  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  ArrayList  <  String>  set  =  set.keySet();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  ArrayList  <  String>  set  =  set.keySet();	  final    Set    <    String>    set    =    set.keySet();    	non-compiled	[CE]  	68	None	replace
111	[BUG]  [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(set.keySet());  [CE]  [FE]                                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(set.keySet());  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  new  HashSet  <  String>(set.keySet());	  final    Set    <    String>    set    =    set.keySet();    	non-compiled	[CE]  	68	None	replace
112	[BUG]  [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length);  [CE]  [FE]                                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  new  HashSet  <  String>(header.length);	  final    Set    <    String>    set    =    set.keySet();    	non-compiled	[CE]  	68	None	replace
113	[BUG]  [BUGGY]  set.add(Arrays.asList(length));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(length));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(length));	  set.addAll(Arrays.asList(length));    	non-compiled	[CE]  	75	None	replace
114	[BUG]  [BUGGY]  set.addAll(Arrays.asList(size));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(size));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(size));	  set.addAll(Arrays.asList(length));    	non-compiled	[CE]  	75	None	replace
115	[BUG]  [BUGGY]  set.add(Arrays.asList(header.length  -  1));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(header.length  -  1));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(header.length  -  1));	  set.add(Arrays.asList(header.length));    	non-compiled	[CE]  	37	None	replace
116	[BUG]  [BUGGY]  set.add(Arrays.asList(set.length));  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(set.length));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(set.length));	  set.add(Arrays.asList(header.length));    	non-compiled	[CE]  	37	None	replace
117	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  quoteChar,  header  }  ));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  quoteChar,  header  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  quoteChar,  header  }  ));	  set.add(Arrays.asList(new    String[]    {    header,    quoteChar    }    ));    	non-compiled	[CE]  	43	None	replace
118	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  quoteChar,  delimiter  }  ));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  quoteChar,  delimiter  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  quoteChar,  delimiter  }  ));	  set.add(Arrays.asList(new    String[]    {    header,    quoteChar    }    ));    	non-compiled	[CE]  	43	None	replace
119	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  quoteChar,  c  }  ));  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  quoteChar,  c  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  quoteChar,  c  }  ));	  set.add(Arrays.asList(new    String[]    {    header,    quoteChar    }    ));    	non-compiled	[CE]  	43	None	replace
120	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  c,  quoteChar  }  ));  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  c,  quoteChar  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  c,  quoteChar  }  ));	  set.add(Arrays.asList(new    String[]    {    header,    quoteChar    }    ));    	non-compiled	[CE]  	43	None	replace
121	[BUG]  [BUGGY]  final  List  <  String>  set  =  set.iterator().next();  [CE]  [FE]                                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  List  <  String>  set  =  set.iterator().next();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  List  <  String>  set  =  set.iterator().next();	  final    Set    <    String>    set    =    set.iterator().next();    	non-compiled	[CE]  	35	None	replace
122	[BUG]  [BUGGY]  final  ArrayList  <  String>  set  =  set.iterator().next();  [CE]  [FE]                                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  ArrayList  <  String>  set  =  set.iterator().next();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  ArrayList  <  String>  set  =  set.iterator().next();	  final    Set    <    String>    set    =    set.iterator().next();    	non-compiled	[CE]  	35	None	replace
123	[BUG]  [BUGGY]  final  Set  <  String>  set  =  set.keySet().iterator().next();  [CE]  [FE]                                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set  =  set.keySet().iterator().next();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  set.keySet().iterator().next();	  final    Set    <    String>    set    =    set.iterator().next();    	non-compiled	[CE]  	35	None	replace
124	[BUG]  [BUGGY]  final  Set  <  String>  set  =  this.set.iterator().next();  [CE]  [FE]                                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set  =  this.set.iterator().next();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  this.set.iterator().next();	  final    Set    <    String>    set    =    set.iterator().next();    	non-compiled	[CE]  	35	None	replace
125	[BUG]  [BUGGY]  final  Set  <  String>  set  =  set.iterator();  [CE]  [FE]                                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set  =  set.iterator();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  set.iterator();	  final    Set    <    String>    set    =    set.iterator().next();    	non-compiled	[CE]  	35	None	replace
126	[BUG]  [BUGGY]  final  Set  <  String>  set  =  set.iterator(),  quoteChar.next();  [CE]  [FE]                                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set  =  set.iterator(),  quoteChar.next();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  set.iterator(),  quoteChar.next();	  final    Set    <    String>    set    =    set.iterator().next();    	non-compiled	[CE]  	35	None	replace
127	[BUG]  [BUGGY]  Character[]  header  =(Character[])this.labels.toArray(new  Character[set.size()  -  1]);  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Character[]  header  =(Character[])this.labels.toArray(new  Character[set.size()  -  1]);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Character[]  header  =(Character[])this.labels.toArray(new  Character[set.size()  -  1]);	  Character[]    header    =(Character[])this.labels.toArray(new    Character[set.size()    ]);    	non-compiled	[CE]  	67	None	replace
128	[BUG]  [BUGGY]  Character[]  header  =(Character[])this.labels.toArray(new  Character[set.size()  +  1]);  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Character[]  header  =(Character[])this.labels.toArray(new  Character[set.size()  +  1]);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Character[]  header  =(Character[])this.labels.toArray(new  Character[set.size()  +  1]);	  Character[]    header    =(Character[])this.labels.toArray(new    Character[set.size()    ]);    	non-compiled	[CE]  	67	None	replace
129	[BUG]  [BUGGY]  Character[]  header  =(Character[])this.labels.toArray(new  Character[set.size()  -  2]);  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Character[]  header  =(Character[])this.labels.toArray(new  Character[set.size()  -  2]);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Character[]  header  =(Character[])this.labels.toArray(new  Character[set.size()  -  2]);	  Character[]    header    =(Character[])this.labels.toArray(new    Character[set.size()    ]);    	non-compiled	[CE]  	67	None	replace
130	[BUG]  [BUGGY]  Character[]  header  =(Character[])this.labels.toArray(new  Character[set.size()  +  2]);  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Character[]  header  =(Character[])this.labels.toArray(new  Character[set.size()  +  2]);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Character[]  header  =(Character[])this.labels.toArray(new  Character[set.size()  +  2]);	  Character[]    header    =(Character[])this.labels.toArray(new    Character[set.size()    ]);    	non-compiled	[CE]  	67	None	replace
131	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  description,  header  }  ));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  description,  header  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  description,  header  }  ));	  set.add(Arrays.asList(new    String[]    {    header,    description    }    ));    	non-compiled	[CE]  	44	None	replace
132	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  title,  description  }  ));  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  title,  description  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  title,  description  }  ));	  set.add(Arrays.asList(new    String[]    {    header,    description    }    ));    	non-compiled	[CE]  	44	None	replace
133	[BUG]  [BUGGY]  final  ArrayList  <  String>  set.addAll(Arrays.asList(header.length));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  ArrayList  <  String>  set.addAll(Arrays.asList(header.length));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  ArrayList  <  String>  set.addAll(Arrays.asList(header.length));	  final    Set    <    String>    set.addAll(Arrays.asList(header.length));    	non-compiled	[CE]  	14	None	replace
134	[BUG]  [BUGGY]  final  List  <  String>  set.addAll(Arrays.asList(header.length));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  List  <  String>  set.addAll(Arrays.asList(header.length));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  List  <  String>  set.addAll(Arrays.asList(header.length));	  final    Set    <    String>    set.addAll(Arrays.asList(header.length));    	non-compiled	[CE]  	14	None	replace
135	[BUG]  [BUGGY]  final  Set  <  String>  set.addAll(Arrays.asList(header.length  +  1));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set.addAll(Arrays.asList(header.length  +  1));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set.addAll(Arrays.asList(header.length  +  1));	  final    Set    <    String>    set.addAll(Arrays.asList(header.length));    	non-compiled	[CE]  	14	None	replace
136	[BUG]  [BUGGY]  final  Set  <  String>  set.addAll(Arrays.asList(header.length  -  1));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set.addAll(Arrays.asList(header.length  -  1));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set.addAll(Arrays.asList(header.length  -  1));	  final    Set    <    String>    set.addAll(Arrays.asList(header.length));    	non-compiled	[CE]  	14	None	replace
137	[BUG]  [BUGGY]  final  LinkedHashSet  <  String>  set.addAll(Arrays.asList(header.length));  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  LinkedHashSet  <  String>  set.addAll(Arrays.asList(header.length));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  LinkedHashSet  <  String>  set.addAll(Arrays.asList(header.length));	  final    Set    <    String>    set.addAll(Arrays.asList(header.length));    	non-compiled	[CE]  	14	None	replace
138	[BUG]  [BUGGY]  final  int  headerLength  =  Arrays.asList(header.length);  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  int  headerLength  =  Arrays.asList(header.length);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  int  headerLength  =  Arrays.asList(header.length);	  final    Set    <    String>    set.addAll(Arrays.asList(header.length));    	non-compiled	[CE]  	14	None	replace
139	[BUG]  [BUGGY]  set.add(Arrays.asList(commentStart,  header));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(commentStart,  header));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(commentStart,  header));	  set.addAll(Arrays.asList(escape,    header));    	non-compiled	[CE]  	94	None	replace
140	[BUG]  [BUGGY]  set.addAll(Arrays.asList(escape,  header.length));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(escape,  header.length));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(escape,  header.length));	  set.addAll(Arrays.asList(escape,    header));    	non-compiled	[CE]  	94	None	replace
141	[BUG]  [BUGGY]  set.addAll(Arrays.asList(quoteChar,  header));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(quoteChar,  header));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(quoteChar,  header));	  set.addAll(Arrays.asList(escape,    header));    	non-compiled	[CE]  	94	None	replace
142	[BUG]  [BUGGY]  set.addAll(Arrays.asList(set,  header));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(set,  header));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(set,  header));	  set.addAll(Arrays.asList(escape,    header));    	non-compiled	[CE]  	94	None	replace
143	[BUG]  [BUGGY]  set.addAll(Arrays.asList(relativeSpaces),  true);  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(relativeSpaces),  true);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(relativeSpaces),  true);	  set.addAll(Arrays.asList(relativeSpaces),    false);    	non-compiled	[CE]  	3	None	replace
144	[BUG]  [BUGGY]  set.addAll(Arrays.asList(commentStart),  false);  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(commentStart),  false);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(commentStart),  false);	  set.addAll(Arrays.asList(relativeSpaces),    false);    	non-compiled	[CE]  	3	None	replace
145	[BUG]  [BUGGY]  set.addAll(Arrays.asList(header),  false);  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(header),  false);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(header),  false);	  set.addAll(Arrays.asList(relativeSpaces),    false);    	non-compiled	[CE]  	3	None	replace
146	[BUG]  [BUGGY]  set.addAll(Arrays.asList(escape),  false);  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(escape),  false);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(escape),  false);	  set.addAll(Arrays.asList(relativeSpaces),    false);    	non-compiled	[CE]  	3	None	replace
147	[BUG]  [BUGGY]  set.addAll(Arrays.asList(escapeSurroundingSpaces),  false);  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(escapeSurroundingSpaces),  false);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(escapeSurroundingSpaces),  false);	  set.addAll(Arrays.asList(relativeSpaces),    false);    	non-compiled	[CE]  	3	None	replace
148	[BUG]  [BUGGY]  set.addAll(Arrays.asList(escape,  false);  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(escape,  false);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(escape,  false);	  set.addAll(Arrays.asList(relativeSpaces),    false);    	non-compiled	[CE]  	3	None	replace
149	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.length,  commentStart  }  ));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.length,  commentStart  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header.length,  commentStart  }  ));	  set.add(Arrays.asList(new    String[]    {    header.length    }    ));    	non-compiled	[CE]  	40	None	replace
150	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.length,  quoteChar  }  ));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.length,  quoteChar  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header.length,  quoteChar  }  ));	  set.add(Arrays.asList(new    String[]    {    header.length    }    ));    	non-compiled	[CE]  	40	None	replace
151	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.length,  descriptionStart  }  ));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.length,  descriptionStart  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header.length,  descriptionStart  }  ));	  set.add(Arrays.asList(new    String[]    {    header.length    }    ));    	non-compiled	[CE]  	40	None	replace
152	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.length  +  3)  }  ));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.length  +  3)  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header.length  +  3)  }  ));	  set.add(Arrays.asList(new    String[]    {    header.length    }    ));    	non-compiled	[CE]  	40	None	replace
153	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.length,  commentEnd  }  ));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.length,  commentEnd  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header.length,  commentEnd  }  ));	  set.add(Arrays.asList(new    String[]    {    header.length    }    ));    	non-compiled	[CE]  	40	None	replace
154	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.length  +  4)  }  ));  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.length  +  4)  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header.length  +  4)  }  ));	  set.add(Arrays.asList(new    String[]    {    header.length    }    ));    	non-compiled	[CE]  	40	None	replace
155	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.length,  referenceChar  }  ));  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.length,  referenceChar  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header.length,  referenceChar  }  ));	  set.add(Arrays.asList(new    String[]    {    header.length    }    ));    	non-compiled	[CE]  	40	None	replace
156	[BUG]  [BUGGY]  set.add(Arrays.asList(relativeSpaces),  null);  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(relativeSpaces),  null);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(relativeSpaces),  null);	  set.add(Arrays.asList(relativeSpaces));    	non-compiled	[CE]  	2	None	replace
157	[BUG]  [BUGGY]  set.add(Arrays.asList(relativeSpaces),  false);  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(relativeSpaces),  false);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(relativeSpaces),  false);	  set.add(Arrays.asList(relativeSpaces));    	non-compiled	[CE]  	2	None	replace
158	[BUG]  [BUGGY]  set.add(Arrays.asList(recordSeparator,  commentStart));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(recordSeparator,  commentStart));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(recordSeparator,  commentStart));	  set.add(Arrays.asList(recordSeparator));    	non-compiled	[CE]  	7	None	replace
159	[BUG]  [BUGGY]  set.add(Arrays.asList(recordSeparator,  header.length));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(recordSeparator,  header.length));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(recordSeparator,  header.length));	  set.add(Arrays.asList(recordSeparator));    	non-compiled	[CE]  	7	None	replace
160	[BUG]  [BUGGY]  set.add(Arrays.asList(recordSeparator  +  commentStart));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(recordSeparator  +  commentStart));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(recordSeparator  +  commentStart));	  set.add(Arrays.asList(recordSeparator));    	non-compiled	[CE]  	7	None	replace
161	[BUG]  [BUGGY]  set.addAll(Arrays.asList(escapeChar,  quoteChar));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(escapeChar,  quoteChar));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(escapeChar,  quoteChar));	  set.addAll(Arrays.asList(escapeChar,    commentStart));    	non-compiled	[CE]  	27	None	replace
162	[BUG]  [BUGGY]  set.add(Arrays.asList(commentStart,  escapeChar));  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(commentStart,  escapeChar));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(commentStart,  escapeChar));	  set.addAll(Arrays.asList(escapeChar,    commentStart));    	non-compiled	[CE]  	27	None	replace
163	[BUG]  [BUGGY]  final  List  <  String>  header  =  set.iterator().next().getKey();  [CE]  [FE]                                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  List  <  String>  header  =  set.iterator().next().getKey();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  List  <  String>  header  =  set.iterator().next().getKey();	  final    Set    <    String>    header    =    set.iterator().next().getKey();    	non-compiled	[CE]  	93	None	replace
164	[BUG]  [BUGGY]  final  ArrayList  <  String>  header  =  set.iterator().next().getKey();  [CE]  [FE]                                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  ArrayList  <  String>  header  =  set.iterator().next().getKey();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  ArrayList  <  String>  header  =  set.iterator().next().getKey();	  final    Set    <    String>    header    =    set.iterator().next().getKey();    	non-compiled	[CE]  	93	None	replace
165	[BUG]  [BUGGY]  final  Set  <  String>  header  =  set.iterator().next().getSeparator();  [CE]  [FE]                                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  header  =  set.iterator().next().getSeparator();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  header  =  set.iterator().next().getSeparator();	  final    Set    <    String>    header    =    set.iterator().next().getKey();    	non-compiled	[CE]  	93	None	replace
166	[BUG]  [BUGGY]  set.addAll(Arrays.asList(escapeChar,  header.length));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(escapeChar,  header.length));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(escapeChar,  header.length));	  set.addAll(Arrays.asList(commentStart,    header.length));    	non-compiled	[CE]  	26	None	replace
167	[BUG]  [BUGGY]  set.add(Arrays.asList(commentStart,  header.length));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(commentStart,  header.length));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(commentStart,  header.length));	  set.addAll(Arrays.asList(commentStart,    header.length));    	non-compiled	[CE]  	26	None	replace
168	[BUG]  [BUGGY]  set.addAll(Arrays.asList(categoryStart,  header.length));  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(categoryStart,  header.length));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(categoryStart,  header.length));	  set.addAll(Arrays.asList(commentStart,    header.length));    	non-compiled	[CE]  	26	None	replace
169	[BUG]  [BUGGY]  set.addAll(Arrays.asList(commentStart,  header.length  -  1));  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(commentStart,  header.length  -  1));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(commentStart,  header.length  -  1));	  set.addAll(Arrays.asList(commentStart,    header.length));    	non-compiled	[CE]  	26	None	replace
170	[BUG]  [BUGGY]  set.add(Arrays.asList(set));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(set));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(set));	  set.add(Arrays.asList(c));    	non-compiled	[CE]  	10	None	replace
171	[BUG]  [BUGGY]  set.add(Arrays.asList(c),  delimiter);  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(c),  delimiter);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(c),  delimiter);	  set.add(Arrays.asList(c));    	non-compiled	[CE]  	10	None	replace
172	[BUG]  [BUGGY]  set.add(Arrays.asList(c),  quoteChar);  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(c),  quoteChar);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(c),  quoteChar);	  set.add(Arrays.asList(c));    	non-compiled	[CE]  	10	None	replace
173	[BUG]  [BUGGY]  Character[]  header  =  quoteChar(c,  set);  [CE]  [FE]                                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Character[]  header  =  quoteChar(c,  set);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Character[]  header  =  quoteChar(c,  set);	  Character[]    header    =    quoteChar(c,    delimiter);    	non-compiled	[CE]  	92	None	replace
174	[BUG]  [BUGGY]  Character[]  header  =  quoteChar(set,  delimiter);  [CE]  [FE]                                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Character[]  header  =  quoteChar(set,  delimiter);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Character[]  header  =  quoteChar(set,  delimiter);	  Character[]    header    =    quoteChar(c,    delimiter);    	non-compiled	[CE]  	92	None	replace
175	[BUG]  [BUGGY]  Character[]  header  =  quoteChar(escape,  c,  delimiter);  [CE]  [FE]                                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Character[]  header  =  quoteChar(escape,  c,  delimiter);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Character[]  header  =  quoteChar(escape,  c,  delimiter);	  Character[]    header    =    quoteChar(c,    delimiter);    	non-compiled	[CE]  	92	None	replace
176	[BUG]  [BUGGY]  Character[]  header  =  quoteChar(escape,  c);  [CE]  [FE]                                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Character[]  header  =  quoteChar(escape,  c);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Character[]  header  =  quoteChar(escape,  c);	  Character[]    header    =    quoteChar(c,    delimiter);    	non-compiled	[CE]  	92	None	replace
177	[BUG]  [BUGGY]  Character[]  header  =  quoteChar(c,  delimiter,  set);  [CE]  [FE]                                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Character[]  header  =  quoteChar(c,  delimiter,  set);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Character[]  header  =  quoteChar(c,  delimiter,  set);	  Character[]    header    =    quoteChar(c,    delimiter);    	non-compiled	[CE]  	92	None	replace
178	[BUG]  [BUGGY]  Character[]  header  =  quoteChar(set,  c,  delimiter);  [CE]  [FE]                                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Character[]  header  =  quoteChar(set,  c,  delimiter);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Character[]  header  =  quoteChar(set,  c,  delimiter);	  Character[]    header    =    quoteChar(c,    delimiter);    	non-compiled	[CE]  	92	None	replace
179	[BUG]  [BUGGY]  Character[]  header  =  quoteChar(header,  c);  [CE]  [FE]                                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Character[]  header  =  quoteChar(header,  c);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Character[]  header  =  quoteChar(header,  c);	  Character[]    header    =    quoteChar(c,    delimiter);    	non-compiled	[CE]  	92	None	replace
180	[BUG]  [BUGGY]  final  Set  <  String>  set.add(Arrays.asList(header.length));  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set.add(Arrays.asList(header.length));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set.add(Arrays.asList(header.length));	  final    Set    <    String>    set.add(Arrays.asList(header));    	non-compiled	[CE]  	38	None	replace
181	[BUG]  [BUGGY]  final  List  <  String>  set.add(Arrays.asList(header));  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  List  <  String>  set.add(Arrays.asList(header));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  List  <  String>  set.add(Arrays.asList(header));	  final    Set    <    String>    set.add(Arrays.asList(header));    	non-compiled	[CE]  	38	None	replace
182	[BUG]  [BUGGY]  final  ArrayList  <  String>  set.add(Arrays.asList(header));  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  ArrayList  <  String>  set.add(Arrays.asList(header));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  ArrayList  <  String>  set.add(Arrays.asList(header));	  final    Set    <    String>    set.add(Arrays.asList(header));    	non-compiled	[CE]  	38	None	replace
183	[BUG]  [BUGGY]  final  Set  <  String>  set.add(Arrays.asList(escape));  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set.add(Arrays.asList(escape));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set.add(Arrays.asList(escape));	  final    Set    <    String>    set.add(Arrays.asList(header));    	non-compiled	[CE]  	38	None	replace
184	[BUG]  [BUGGY]  final  Set  <  String>  set.add(Arrays.asList(commentStart));  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set.add(Arrays.asList(commentStart));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set.add(Arrays.asList(commentStart));	  final    Set    <    String>    set.add(Arrays.asList(header));    	non-compiled	[CE]  	38	None	replace
185	[BUG]  [BUGGY]  set.addAll(Arrays.asList(header,  1));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(header,  1));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(header,  1));	  set.addAll(Arrays.asList(header,    0));    	non-compiled	[CE]  	73	None	replace
186	[BUG]  [BUGGY]  set.addAll(Arrays.asList(header,  false));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(header,  false));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(header,  false));	  set.addAll(Arrays.asList(header,    0));    	non-compiled	[CE]  	73	None	replace
187	[BUG]  [BUGGY]  set.addAll(Arrays.asList(escape,  0));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(escape,  0));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(escape,  0));	  set.addAll(Arrays.asList(header,    0));    	non-compiled	[CE]  	73	None	replace
188	[BUG]  [BUGGY]  set.add(Arrays.asList(header,  0));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(header,  0));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(header,  0));	  set.addAll(Arrays.asList(header,    0));    	non-compiled	[CE]  	73	None	replace
189	[BUG]  [BUGGY]  set.addAll(Arrays.asList(c,  escapeChar));  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(c,  escapeChar));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(c,  escapeChar));	  set.addAll(Arrays.asList(header,    escapeChar));    	non-compiled	[CE]  	29	None	replace
190	[BUG]  [BUGGY]  set.add(Arrays.asList(escapeChar,  header));  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(escapeChar,  header));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(escapeChar,  header));	  set.addAll(Arrays.asList(header,    escapeChar));    	non-compiled	[CE]  	29	None	replace
191	[BUG]  [BUGGY]  set.addAll(Arrays.asList(delimiter,  header));  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(delimiter,  header));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(delimiter,  header));	  set.addAll(Arrays.asList(header,    escapeChar));    	non-compiled	[CE]  	29	None	replace
192	[BUG]  [BUGGY]  Set  <  String>  header  =  set.keySet().iterator().next();  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Set  <  String>  header  =  set.keySet().iterator().next();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Set  <  String>  header  =  set.keySet().iterator().next();	  Set    <    String>    header    =    set.iterator().next();    	non-compiled	[CE]  	88	None	replace
193	[BUG]  [BUGGY]  List  <  String>  header  =  set.iterator().next();  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  List  <  String>  header  =  set.iterator().next();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	List  <  String>  header  =  set.iterator().next();	  Set    <    String>    header    =    set.iterator().next();    	non-compiled	[CE]  	88	None	replace
194	[BUG]  [BUGGY]  Set  <  String>  header  =  set.iterator(),  quoteChar.next();  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Set  <  String>  header  =  set.iterator(),  quoteChar.next();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Set  <  String>  header  =  set.iterator(),  quoteChar.next();	  Set    <    String>    header    =    set.iterator().next();    	non-compiled	[CE]  	88	None	replace
195	[BUG]  [BUGGY]  Set  <  String>  header  =  set.iterator();  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Set  <  String>  header  =  set.iterator();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Set  <  String>  header  =  set.iterator();	  Set    <    String>    header    =    set.iterator().next();    	non-compiled	[CE]  	88	None	replace
196	[BUG]  [BUGGY]  final  Set  <  String>  set  =  Arrays.asList(header.length);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set  =  Arrays.asList(header.length);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  Arrays.asList(header.length);	  final    Set    <    String>    set    =    Arrays.asList(header);    	non-compiled	[CE]  	71	None	replace
197	[BUG]  [BUGGY]  final  ArrayList  <  String>  set  =  Arrays.asList(header);  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  ArrayList  <  String>  set  =  Arrays.asList(header);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  ArrayList  <  String>  set  =  Arrays.asList(header);	  final    Set    <    String>    set    =    Arrays.asList(header);    	non-compiled	[CE]  	71	None	replace
198	[BUG]  [BUGGY]  final  List  <  String>  set  =  Arrays.asList(header);  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  List  <  String>  set  =  Arrays.asList(header);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  List  <  String>  set  =  Arrays.asList(header);	  final    Set    <    String>    set    =    Arrays.asList(header);    	non-compiled	[CE]  	71	None	replace
199	[BUG]  [BUGGY]  final  Set  <  String>  set  =  Arrays.asList(recordSeparator);  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set  =  Arrays.asList(recordSeparator);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  Arrays.asList(recordSeparator);	  final    Set    <    String>    set    =    Arrays.asList(header);    	non-compiled	[CE]  	71	None	replace
200	[BUG]  [BUGGY]  final  Set  <  String>  set  =  new  LinkedHashSet  <  String>(header.length);  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set  =  new  LinkedHashSet  <  String>(header.length);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  new  LinkedHashSet  <  String>(header.length);	  final    Set    <    String>    set    =    Arrays.asList(header);    	non-compiled	[CE]  	71	None	replace
201	[BUG]  [BUGGY]  final  Set  <  String>  set  =  Arrays.asList(escape);  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set  =  Arrays.asList(escape);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  Arrays.asList(escape);	  final    Set    <    String>    set    =    Arrays.asList(header);    	non-compiled	[CE]  	71	None	replace
202	[BUG]  [BUGGY]  set.addAll(Arrays.asList(header.length  -  2));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(header.length  -  2));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(header.length  -  2));	  set.addAll(Arrays.asList(header.length    -    1));    	non-compiled	[CE]  	76	None	replace
203	[BUG]  [BUGGY]  set.addAll(Arrays.asList(delimiter.length  -  1));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(delimiter.length  -  1));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(delimiter.length  -  1));	  set.addAll(Arrays.asList(header.length    -    1));    	non-compiled	[CE]  	76	None	replace
204	[BUG]  [BUGGY]  final  Set  <  String>  set  =  Arrays.asList(set);  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set  =  Arrays.asList(set);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  Arrays.asList(set);	  set.addAll(Arrays.asList(set));    	non-compiled	[CE]  	4	None	replace
205	[BUG]  [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(set.size());  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(set.size());  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  new  HashSet  <  String>(set.size());	  set.addAll(Arrays.asList(set));    	non-compiled	[CE]  	4	None	replace
206	[BUG]  [BUGGY]  Set  <  String>  set  =  Sets.newHashSet(quoteChar);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Set  <  String>  set  =  Sets.newHashSet(quoteChar);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Set  <  String>  set  =  Sets.newHashSet(quoteChar);	  set.addAll(Arrays.asList(quoteChar));    	non-compiled	[CE]  	20	None	replace
207	[BUG]  [BUGGY]  set.add(Arrays.asList(relativeEmptySpaces));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(relativeEmptySpaces));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(relativeEmptySpaces));	  set.add(Arrays.asList(relativeEmptyLines));    	non-compiled	[CE]  	61	None	replace
208	[BUG]  [BUGGY]  set.addAll(Arrays.asList(relativeEmptyLines));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(relativeEmptyLines));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(relativeEmptyLines));	  set.add(Arrays.asList(relativeEmptyLines));    	non-compiled	[CE]  	61	None	replace
209	[BUG]  [BUGGY]  set.add(Arrays.asList(qualifySurroundingSpaces));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(qualifySurroundingSpaces));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(qualifySurroundingSpaces));	  set.add(Arrays.asList(relativeEmptyLines));    	non-compiled	[CE]  	61	None	replace
210	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  nullString,  header  }  ));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  nullString,  header  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  nullString,  header  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header,    recordSeparator    }    ));    	non-compiled	[CE]  	62	None	replace
211	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  escapeChar  }  ));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  escapeChar  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  escapeChar  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header,    recordSeparator    }    ));    	non-compiled	[CE]  	62	None	replace
212	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  escape  character  }  ));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  escape  character  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  escape  character  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header,    commentStart    }    ));    	non-compiled	[CE]  	64	None	replace
213	[BUG]  [BUGGY]  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  if(  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  if(  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  if(	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    if(    	non-compiled	[CE]  	69	None	replace
214	[BUG]  [BUGGY]  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    if(    	non-compiled	[CE]  	69	None	replace
215	[BUG]  [BUGGY]  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  if(  }  [CE]  [FE]                                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  if(  }  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  if(  }	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    if(    	non-compiled	[CE]  	69	None	replace
216	[BUG]  [BUGGY]  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(0);  if(  [CE]  [FE]                                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(0);  if(  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(0);  if(	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    if(    	non-compiled	[CE]  	69	None	replace
217	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  [CE]  [FE]                                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    if(    	non-compiled	[CE]  	69	None	replace
218	[BUG]  [BUGGY]  final  Set  <  String>  set  =  set.get(i);  [CE]  [FE]                                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set  =  set.get(i);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  set.get(i);	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    if(    	non-compiled	[CE]  	69	None	replace
219	[BUG]  [BUGGY]  set.addAll(Arrays.asList(c),  delimiter);  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(c),  delimiter);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(c),  delimiter);	  set.addAll(Arrays.asList(c));    	non-compiled	[CE]  	11	None	replace
220	[BUG]  [BUGGY]  final  Set  <  String>  set  =  Sets.newHashSet(header);  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set  =  Sets.newHashSet(header);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  Sets.newHashSet(header);	  final    Set    <    String>    set    =    Sets.newHashSet(set);    	non-compiled	[CE]  	33	None	replace
221	[BUG]  [BUGGY]  final  List  <  String>  set  =  Sets.newHashSet(set);  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  List  <  String>  set  =  Sets.newHashSet(set);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  List  <  String>  set  =  Sets.newHashSet(set);	  final    Set    <    String>    set    =    Sets.newHashSet(set);    	non-compiled	[CE]  	33	None	replace
222	[BUG]  [BUGGY]  final  ArrayList  <  String>  set  =  Sets.newHashSet(set);  [CE]  [FE]                                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  ArrayList  <  String>  set  =  Sets.newHashSet(set);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  ArrayList  <  String>  set  =  Sets.newHashSet(set);	  final    Set    <    String>    set    =    Sets.newHashSet(set);    	non-compiled	[CE]  	33	None	replace
223	[BUG]  [BUGGY]  final  Set  <  String>  set  =  Sets.newHashSet(escape);  [CE]  [FE]                                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set  =  Sets.newHashSet(escape);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  Sets.newHashSet(escape);	  final    Set    <    String>    set    =    Sets.newHashSet(set);    	non-compiled	[CE]  	33	None	replace
224	[BUG]  [BUGGY]  final  Set  <  String>  set  =  Sets.newHashSet(set.length);  [CE]  [FE]                                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set  =  Sets.newHashSet(set.length);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  Sets.newHashSet(set.length);	  final    Set    <    String>    set    =    Sets.newHashSet(set);    	non-compiled	[CE]  	33	None	replace
225	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  escapeChar  }  ));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  escapeChar  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  escapeChar  }  ));	  set.add(Arrays.asList(new    String[]    {    header,    commentStart    }    ));    	non-compiled	[CE]  	41	None	replace
226	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  commentStart,  header  }  ));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  commentStart,  header  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  commentStart,  header  }  ));	  set.add(Arrays.asList(new    String[]    {    header,    commentStart    }    ));    	non-compiled	[CE]  	41	None	replace
227	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  commentStart,  quoteChar  }  ));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  commentStart,  quoteChar  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  commentStart,  quoteChar  }  ));	  set.add(Arrays.asList(new    String[]    {    header,    commentStart    }    ));    	non-compiled	[CE]  	41	None	replace
228	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  c  }  ));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  c  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  c  }  ));	  set.add(Arrays.asList(new    String[]    {    commentStart    }    ));    	non-compiled	[CE]  	84	None	replace
229	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  commentStart,  escape  }  ));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  commentStart,  escape  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  commentStart,  escape  }  ));	  set.add(Arrays.asList(new    String[]    {    commentStart    }    ));    	non-compiled	[CE]  	84	None	replace
230	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  commentStart,  c  }  ));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  commentStart,  c  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  commentStart,  c  }  ));	  set.add(Arrays.asList(new    String[]    {    commentStart    }    ));    	non-compiled	[CE]  	84	None	replace
231	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  commentStart,  quoteChar  }  ));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  commentStart,  quoteChar  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  commentStart,  quoteChar  }  ));	  set.add(Arrays.asList(new    String[]    {    commentStart    }    ));    	non-compiled	[CE]  	84	None	replace
232	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  commentStart,  escapeChar  }  ));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  commentStart,  escapeChar  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  commentStart,  escapeChar  }  ));	  set.add(Arrays.asList(new    String[]    {    commentStart    }    ));    	non-compiled	[CE]  	84	None	replace
233	[BUG]  [BUGGY]  set.addAll(Arrays.asList(set.size()  -  1));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(set.size()  -  1));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(set.size()  -  1));	  set.addAll(Arrays.asList(set.length));    	non-compiled	[CE]  	46	None	replace
234	[BUG]  [BUGGY]  set.addAll(Arrays.asList(set.length  +  1));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(set.length  +  1));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(set.length  +  1));	  set.addAll(Arrays.asList(set.length));    	non-compiled	[CE]  	46	None	replace
235	[BUG]  [BUGGY]  final  List  <  String>  set.addAll(Arrays.asList(recordSeparator));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  List  <  String>  set.addAll(Arrays.asList(recordSeparator));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  List  <  String>  set.addAll(Arrays.asList(recordSeparator));	  final    List    <    String>    set.addAll(Arrays.asList(header));    	non-compiled	[CE]  	15	None	replace
236	[BUG]  [BUGGY]  set.add(Arrays.asList(ceilingChar));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(ceilingChar));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(ceilingChar));	  set.addAll(Arrays.asList(ceilingChar));    	non-compiled	[CE]  	80	None	replace
237	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  recordSeparator));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  recordSeparator));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  recordSeparator));	  set.addAll(Arrays.asList(new    String[]    {    header,    null));    	non-compiled	[CE]  	56	None	replace
238	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  list));  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  list));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  list));	  set.addAll(Arrays.asList(new    String[]    {    header,    null));    	non-compiled	[CE]  	56	None	replace
239	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  c));  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  c));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  c));	  set.addAll(Arrays.asList(new    String[]    {    header,    null));    	non-compiled	[CE]  	56	None	replace
240	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  new  HashSet  <  String>()));  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  new  HashSet  <  String>()));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  new  HashSet  <  String>()));	  set.addAll(Arrays.asList(new    String[]    {    header,    null));    	non-compiled	[CE]  	56	None	replace
241	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  null),  set);  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  null),  set);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  null),  set);	  set.addAll(Arrays.asList(new    String[]    {    header,    null));    	non-compiled	[CE]  	56	None	replace
242	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  description));  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  description));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  description));	  set.addAll(Arrays.asList(new    String[]    {    header,    null));    	non-compiled	[CE]  	56	None	replace
243	[BUG]  [BUGGY]  ArrayList  <  String>  set  =  Sets.newHashSet();  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  ArrayList  <  String>  set  =  Sets.newHashSet();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	ArrayList  <  String>  set  =  Sets.newHashSet();	  Set    <    String>    set    =    Sets.newHashSet();    	non-compiled	[CE]  	32	None	replace
244	[BUG]  [BUGGY]  List  <  String>  set  =  Sets.newHashSet();  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  List  <  String>  set  =  Sets.newHashSet();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	List  <  String>  set  =  Sets.newHashSet();	  Set    <    String>    set    =    Sets.newHashSet();    	non-compiled	[CE]  	32	None	replace
245	[BUG]  [BUGGY]  Collection  <  String>  set  =  Sets.newHashSet();  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Collection  <  String>  set  =  Sets.newHashSet();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Collection  <  String>  set  =  Sets.newHashSet();	  Set    <    String>    set    =    Sets.newHashSet();    	non-compiled	[CE]  	32	None	replace
246	[BUG]  [BUGGY]  Set  <  String>  set  =  Sets.newHashSet(header.length);  [CE]  [FE]                                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Set  <  String>  set  =  Sets.newHashSet(header.length);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Set  <  String>  set  =  Sets.newHashSet(header.length);	  Set    <    String>    set    =    Sets.newHashSet();    	non-compiled	[CE]  	32	None	replace
247	[BUG]  [BUGGY]  set.add(Arrays.asList(compiler));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(compiler));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(compiler));	  set.add(Arrays.asList(copyHeaderRecord));    	non-compiled	[CE]  	81	None	replace
248	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  -  1]);  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  -  1]);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	String[]  header  =  set.toArray(new  String[set.size()  -  1]);	  String[]    header    =    set.toArray(new    String[set.size()    ]);    	non-compiled	[CE]  	30	None	replace
249	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  +  1]);  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  +  1]);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	String[]  header  =  set.toArray(new  String[set.size()  +  1]);	  String[]    header    =    set.toArray(new    String[set.size()    ]);    	non-compiled	[CE]  	30	None	replace
250	[BUG]  [BUGGY]  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  String[]  header  =  set.toArray(new  String[set.size()  ]);	  String[]    header    =    set.toArray(new    String[set.size()    ]);    	non-compiled	[CE]  	30	None	replace
251	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]  +  1);  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]  +  1);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	String[]  header  =  set.toArray(new  String[set.size()  ]  +  1);	  String[]    header    =    set.toArray(new    String[set.size()    ]);    	non-compiled	[CE]  	30	None	replace
252	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]));  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	String[]  header  =  set.toArray(new  String[set.size()  ]));	  String[]    header    =    set.toArray(new    String[set.size()    ]);    	non-compiled	[CE]  	30	None	replace
253	[BUG]  [BUGGY]  Set  <  String>  set.add(Arrays.asList(commentStart));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Set  <  String>  set.add(Arrays.asList(commentStart));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Set  <  String>  set.add(Arrays.asList(commentStart));	  set.add(Arrays.asList(commentStart));    	non-compiled	[CE]  	5	None	replace
254	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  nullString,  quoteChar  }  ));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  nullString,  quoteChar  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  nullString,  quoteChar  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header,    nullString    }    ));    	non-compiled	[CE]  	55	None	replace
255	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  nullString,  c  }  ));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  nullString,  c  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  nullString,  c  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header,    nullString    }    ));    	non-compiled	[CE]  	55	None	replace
256	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  offsetChar,  nullString  }  ));  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  offsetChar,  nullString  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  offsetChar,  nullString  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header,    nullString    }    ));    	non-compiled	[CE]  	55	None	replace
257	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  nullString,  delimiter  }  ));  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  nullString,  delimiter  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  nullString,  delimiter  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header,    nullString    }    ));    	non-compiled	[CE]  	55	None	replace
258	[BUG]  [BUGGY]  set.add(Arrays.asList(quoted),  quoteChar);  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(quoted),  quoteChar);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(quoted),  quoteChar);	  set.add(Arrays.asList(quoted));    	non-compiled	[CE]  	9	None	replace
259	[BUG]  [BUGGY]  final  List  <  String>  set  =  Sets.newHashSet();  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  List  <  String>  set  =  Sets.newHashSet();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  List  <  String>  set  =  Sets.newHashSet();	  final    Set    <    String>    set    =    Sets.newHashSet();    	non-compiled	[CE]  	31	None	replace
260	[BUG]  [BUGGY]  final  ArrayList  <  String>  set  =  Sets.newHashSet();  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  ArrayList  <  String>  set  =  Sets.newHashSet();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  ArrayList  <  String>  set  =  Sets.newHashSet();	  final    Set    <    String>    set    =    Sets.newHashSet();    	non-compiled	[CE]  	31	None	replace
261	[BUG]  [BUGGY]  final  HashSet  <  String>  set  =  Sets.newHashSet();  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  HashSet  <  String>  set  =  Sets.newHashSet();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  HashSet  <  String>  set  =  Sets.newHashSet();	  final    Set    <    String>    set    =    Sets.newHashSet();    	non-compiled	[CE]  	31	None	replace
262	[BUG]  [BUGGY]  final  TreeSet  <  String>  set  =  Sets.newHashSet();  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  TreeSet  <  String>  set  =  Sets.newHashSet();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  TreeSet  <  String>  set  =  Sets.newHashSet();	  final    Set    <    String>    set    =    Sets.newHashSet();    	non-compiled	[CE]  	31	None	replace
263	[BUG]  [BUGGY]  final  Collection  <  String>  set  =  Sets.newHashSet();  [CE]  [FE]                                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Collection  <  String>  set  =  Sets.newHashSet();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Collection  <  String>  set  =  Sets.newHashSet();	  final    Set    <    String>    set    =    Sets.newHashSet();    	non-compiled	[CE]  	31	None	replace
264	[BUG]  [BUGGY]  set.addAll(Arrays.asList(c,  escape));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(c,  escape));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(c,  escape));	  set.addAll(Arrays.asList(header,    escape));    	non-compiled	[CE]  	23	None	replace
265	[BUG]  [BUGGY]  set.addAll(Arrays.asList(recordSeparator,  escape));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(recordSeparator,  escape));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(recordSeparator,  escape));	  set.addAll(Arrays.asList(header,    escape));    	non-compiled	[CE]  	23	None	replace
266	[BUG]  [BUGGY]  set.addAll(Arrays.asList(set,  escape));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(set,  escape));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(set,  escape));	  set.addAll(Arrays.asList(header,    escape));    	non-compiled	[CE]  	23	None	replace
267	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length);  }  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length);  }  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length);  }	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    Set    <    String>    set    =    new    HashSet    <    String>(header.length);    	non-compiled	[CE]  	70	None	replace
268	[BUG]  [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(set.length);  [CE]  [FE]                                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(set.length);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  new  HashSet  <  String>(set.length);	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    Set    <    String>    set    =    new    HashSet    <    String>(header.length);    	non-compiled	[CE]  	70	None	replace
269	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  1;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length);  }  [CE]  [FE]                                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  1;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length);  }  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  1;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length);  }	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    Set    <    String>    set    =    new    HashSet    <    String>(header.length);    	non-compiled	[CE]  	70	None	replace
270	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length  +  1);  }  [CE]  [FE]                                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length  +  1);  }  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length  +  1);  }	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    Set    <    String>    set    =    new    HashSet    <    String>(header.length);    	non-compiled	[CE]  	70	None	replace
271	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  c,  delimiter  }  ));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  c,  delimiter  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  c,  delimiter  }  ));	  set.add(Arrays.asList(new    String[]    {    header,    delimiter    }    ));    	non-compiled	[CE]  	86	None	replace
272	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  null,  delimiter  }  ));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  null,  delimiter  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  null,  delimiter  }  ));	  set.add(Arrays.asList(new    String[]    {    header,    delimiter    }    ));    	non-compiled	[CE]  	86	None	replace
273	[BUG]  [BUGGY]  set.add(Arrays.asList(labelSeparator,  commentStart));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(labelSeparator,  commentStart));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(labelSeparator,  commentStart));	  set.add(Arrays.asList(labelSeparator));    	non-compiled	[CE]  	82	None	replace
274	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  description,  header  }  ));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  description,  header  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  description,  header  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header,    description    }    ));    	non-compiled	[CE]  	53	None	replace
275	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  title,  description  }  ));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  title,  description  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  title,  description  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header,    description    }    ));    	non-compiled	[CE]  	53	None	replace
276	[BUG]  [BUGGY]  set.add(new  String[]  {  nullString  }  ));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(new  String[]  {  nullString  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(new  String[]  {  nullString  }  ));	  set.add(new    String[]    {    header    }    ));    	non-compiled	[CE]  	58	None	replace
277	[BUG]  [BUGGY]  set.add(new  String[]  {  c  }  ));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(new  String[]  {  c  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(new  String[]  {  c  }  ));	  set.add(new    String[]    {    header    }    ));    	non-compiled	[CE]  	58	None	replace
278	[BUG]  [BUGGY]  set.add(new  String[]  {  null,  header  }  ));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(new  String[]  {  null,  header  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(new  String[]  {  null,  header  }  ));	  set.add(new    String[]    {    header    }    ));    	non-compiled	[CE]  	58	None	replace
279	[BUG]  [BUGGY]  set.add(new  String[]  {  header,  quoteChar  }  ));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(new  String[]  {  header,  quoteChar  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(new  String[]  {  header,  quoteChar  }  ));	  set.add(new    String[]    {    header    }    ));    	non-compiled	[CE]  	58	None	replace
280	[BUG]  [BUGGY]  set.add(new  String[]  {  header.length  }  ));  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(new  String[]  {  header.length  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(new  String[]  {  header.length  }  ));	  set.add(new    String[]    {    header    }    ));    	non-compiled	[CE]  	58	None	replace
281	[BUG]  [BUGGY]  set.add(new  String[]  {  delimiter  }  ));  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(new  String[]  {  delimiter  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(new  String[]  {  delimiter  }  ));	  set.add(new    String[]    {    header    }    ));    	non-compiled	[CE]  	58	None	replace
282	[BUG]  [BUGGY]  final  Set  <  String>  set.add(Arrays.asList(quoteChar));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set.add(Arrays.asList(quoteChar));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set.add(Arrays.asList(quoteChar));	  set.add(Arrays.asList(quoteChar));    	non-compiled	[CE]  	8	None	replace
283	[BUG]  [BUGGY]  set.add(Arrays.asList(escapeChar));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(escapeChar));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(escapeChar));	  set.add(Arrays.asList(quoteChar));    	non-compiled	[CE]  	8	None	replace
284	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  nullString,  quoteChar  }  ));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  nullString,  quoteChar  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  nullString,  quoteChar  }  ));	  set.add(Arrays.asList(new    String[]    {    header,    nullString    }    ));    	non-compiled	[CE]  	85	None	replace
285	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  recordSeparator  }  ));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  recordSeparator  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  recordSeparator  }  ));	  set.add(Arrays.asList(new    String[]    {    header,    nullString    }    ));    	non-compiled	[CE]  	85	None	replace
286	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  nullString,  c  }  ));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  nullString,  c  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  nullString,  c  }  ));	  set.add(Arrays.asList(new    String[]    {    header,    nullString    }    ));    	non-compiled	[CE]  	85	None	replace
287	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  nullString,  commentStart  }  ));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  nullString,  commentStart  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  nullString,  commentStart  }  ));	  set.add(Arrays.asList(new    String[]    {    header,    nullString    }    ));    	non-compiled	[CE]  	85	None	replace
288	[BUG]  [BUGGY]  final  Set  <  String>  set.add(Arrays.asList(backer));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set.add(Arrays.asList(backer));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set.add(Arrays.asList(backer));	  set.add(Arrays.asList(backer));    	non-compiled	[CE]  	83	None	replace
289	[BUG]  [BUGGY]  final  Set  <  String>  header  =  set.size()  -  1;  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  header  =  set.size()  -  1;  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  header  =  set.size()  -  1;	  final    Set    <    String>    header    =    set.size();    	non-compiled	[CE]  	91	None	replace
290	[BUG]  [BUGGY]  final  Set  <  String>  header  =  set.size()  +  1;  [CE]  [FE]                                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  header  =  set.size()  +  1;  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  header  =  set.size()  +  1;	  final    Set    <    String>    header    =    set.size();    	non-compiled	[CE]  	91	None	replace
291	[BUG]  [BUGGY]  final  ArrayList  <  String>  header  =  set.size();  [CE]  [FE]                                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  ArrayList  <  String>  header  =  set.size();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  ArrayList  <  String>  header  =  set.size();	  final    Set    <    String>    header    =    set.size();    	non-compiled	[CE]  	91	None	replace
292	[BUG]  [BUGGY]  final  Set  <  String>  header  =  set.values();  [CE]  [FE]                                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  header  =  set.values();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  header  =  set.values();	  final    Set    <    String>    header    =    set.size();    	non-compiled	[CE]  	91	None	replace
293	[BUG]  [BUGGY]  set.addAll(Arrays.asList(commentStart,  quoteChar));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(commentStart,  quoteChar));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(commentStart,  quoteChar));	  set.addAll(Arrays.asList(header,    quoteChar));    	non-compiled	[CE]  	25	None	replace
294	[BUG]  [BUGGY]  set.addAll(Arrays.asList(c,  quoteChar));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(c,  quoteChar));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(c,  quoteChar));	  set.addAll(Arrays.asList(header,    quoteChar));    	non-compiled	[CE]  	25	None	replace
295	[BUG]  [BUGGY]  set.addAll(Arrays.asList(recordSeparator,  quoteChar));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(recordSeparator,  quoteChar));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(recordSeparator,  quoteChar));	  set.addAll(Arrays.asList(header,    quoteChar));    	non-compiled	[CE]  	25	None	replace
296	[BUG]  [BUGGY]  set.addAll(Arrays.asList(set,  commentStart));  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(set,  commentStart));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(set,  commentStart));	  set.addAll(Arrays.asList(c,    commentStart));    	non-compiled	[CE]  	28	None	replace
297	[BUG]  [BUGGY]  set.addAll(Arrays.asList(c,  header));  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(c,  header));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(c,  header));	  set.addAll(Arrays.asList(c,    commentStart));    	non-compiled	[CE]  	28	None	replace
298	[BUG]  [BUGGY]  set.addAll(Arrays.asList(escapeChar,  c));  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(escapeChar,  c));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(escapeChar,  c));	  set.addAll(Arrays.asList(c,    commentStart));    	non-compiled	[CE]  	28	None	replace
299	[BUG]  [BUGGY]  set.addAll(Arrays.asList(c,  delimiter));  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(c,  delimiter));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(c,  delimiter));	  set.addAll(Arrays.asList(c,    commentStart));    	non-compiled	[CE]  	28	None	replace
300	[BUG]  [BUGGY]  final  List  <  String>  header  =  set.keySet();  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  List  <  String>  header  =  set.keySet();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  List  <  String>  header  =  set.keySet();	  final    Set    <    String>    header    =    set.keySet();    	non-compiled	[CE]  	90	None	replace
301	[BUG]  [BUGGY]  final  ArrayList  <  String>  header  =  set.keySet();  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  ArrayList  <  String>  header  =  set.keySet();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  ArrayList  <  String>  header  =  set.keySet();	  final    Set    <    String>    header    =    set.keySet();    	non-compiled	[CE]  	90	None	replace
302	[BUG]  [BUGGY]  final  Set  <  String>  header  =  set.entrySet();  [CE]  [FE]                                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  header  =  set.entrySet();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  header  =  set.entrySet();	  final    Set    <    String>    header    =    set.keySet();    	non-compiled	[CE]  	90	None	replace
303	[BUG]  [BUGGY]  set.add(Arrays.asList(labels));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(labels));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(labels));	  set.addAll(Arrays.asList(labels));    	non-compiled	[CE]  	65	None	replace
304	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  c));  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  c));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  c));	  set.add(Arrays.asList(new    String[]    {    header,    null));    	non-compiled	[CE]  	45	None	replace
305	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  new  HashSet  <  String>()));  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  new  HashSet  <  String>()));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  new  HashSet  <  String>()));	  set.add(Arrays.asList(new    String[]    {    header,    null));    	non-compiled	[CE]  	45	None	replace
306	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  description));  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  description));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  description));	  set.add(Arrays.asList(new    String[]    {    header,    null));    	non-compiled	[CE]  	45	None	replace
307	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  recordSeparator));  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  recordSeparator));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  recordSeparator));	  set.add(Arrays.asList(new    String[]    {    header,    null));    	non-compiled	[CE]  	45	None	replace
308	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  null,  quoteChar));  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  null,  quoteChar));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  null,  quoteChar));	  set.add(Arrays.asList(new    String[]    {    header,    null));    	non-compiled	[CE]  	45	None	replace
309	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  null,  false));  [CE]  [FE]                                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  null,  false));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  null,  false));	  set.add(Arrays.asList(new    String[]    {    header,    null));    	non-compiled	[CE]  	45	None	replace
310	[BUG]  [BUGGY]  set.addAll(Arrays.asList(recordSeparator),  set,  quoteChar);  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(recordSeparator),  set,  quoteChar);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(recordSeparator),  set,  quoteChar);	  set.addAll(Arrays.asList(recordSeparator),    set);    	non-compiled	[CE]  	50	None	replace
311	[BUG]  [BUGGY]  set.addAll(Arrays.asList(escapeSurroundingSpaces),  set);  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(escapeSurroundingSpaces),  set);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(escapeSurroundingSpaces),  set);	  set.addAll(Arrays.asList(recordSeparator),    set);    	non-compiled	[CE]  	50	None	replace
312	[BUG]  [BUGGY]  set.addAll(Arrays.asList(recordSeparator),  delimiter);  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(recordSeparator),  delimiter);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(recordSeparator),  delimiter);	  set.addAll(Arrays.asList(recordSeparator),    set);    	non-compiled	[CE]  	50	None	replace
313	[BUG]  [BUGGY]  set.addAll(Arrays.asList(recordSeparator),  header);  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(recordSeparator),  header);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(recordSeparator),  header);	  set.addAll(Arrays.asList(recordSeparator),    set);    	non-compiled	[CE]  	50	None	replace
314	[BUG]  [BUGGY]  set.addAll(Arrays.asList(commentStart),  set);  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(commentStart),  set);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(commentStart),  set);	  set.addAll(Arrays.asList(recordSeparator),    set);    	non-compiled	[CE]  	50	None	replace
315	[BUG]  [BUGGY]  set.addAll(Arrays.asList(recordSeparator,  header.length  -  1));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(recordSeparator,  header.length  -  1));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(recordSeparator,  header.length  -  1));	  set.addAll(Arrays.asList(recordSeparator,    header.length));    	non-compiled	[CE]  	48	None	replace
316	[BUG]  [BUGGY]  set.addAll(Arrays.asList(recordSeparator,  header.length  +  1));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(recordSeparator,  header.length  +  1));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(recordSeparator,  header.length  +  1));	  set.addAll(Arrays.asList(recordSeparator,    header.length));    	non-compiled	[CE]  	48	None	replace
317	[BUG]  [BUGGY]  set.addAll(Arrays.asList(recordSeparator,  header.length),  quoteChar);  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(recordSeparator,  header.length),  quoteChar);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(recordSeparator,  header.length),  quoteChar);	  set.addAll(Arrays.asList(recordSeparator,    header.length));    	non-compiled	[CE]  	48	None	replace
318	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  c,  delimiter  }  ));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  c,  delimiter  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  c,  delimiter  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header,    delimiter    }    ));    	non-compiled	[CE]  	78	None	replace
319	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  null,  delimiter  }  ));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  null,  delimiter  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  null,  delimiter  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header,    delimiter    }    ));    	non-compiled	[CE]  	78	None	replace
320	[BUG]  [BUGGY]  set.addAll(Arrays.asList(recordSeparator,  escapeChar));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(recordSeparator,  escapeChar));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(recordSeparator,  escapeChar));	  set.addAll(Arrays.asList(recordSeparator,    commentStart));    	non-compiled	[CE]  	49	None	replace
321	[BUG]  [BUGGY]  final  ArrayList  <  String>  set.addAll(Arrays.asList(header),  set);  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  ArrayList  <  String>  set.addAll(Arrays.asList(header),  set);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  ArrayList  <  String>  set.addAll(Arrays.asList(header),  set);	  final    ArrayList    <    String>    set.addAll(Arrays.asList(header));    	non-compiled	[CE]  	16	None	replace
322	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  +  1]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  if(  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  +  1]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  if(  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	String[]  header  =  set.toArray(new  String[set.size()  +  1]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  if(	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    if(    	non-compiled	[CE]  	69	None	replace
323	[BUG]  [BUGGY]  set.add(new  String[]  {  header.toString()  }  ));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(new  String[]  {  header.toString()  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(new  String[]  {  header.toString()  }  ));	  set.add(Arrays.asList(new    String[]    {    header.toString()    }    ));    	non-compiled	[CE]  	42	None	replace
324	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.toString()));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.toString()));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header.toString()));	  set.add(Arrays.asList(new    String[]    {    header.toString()    }    ));    	non-compiled	[CE]  	42	None	replace
325	[BUG]  [BUGGY]  Character[]  header  =(Character[])set.toArray(new  Character[set.length()  -  1]);  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Character[]  header  =(Character[])set.toArray(new  Character[set.length()  -  1]);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Character[]  header  =(Character[])set.toArray(new  Character[set.length()  -  1]);	  Character[]    header    =(Character[])set.toArray(new    Character[set.size()    ]);    	non-compiled	[CE]  	66	None	replace
326	[BUG]  [BUGGY]  Character[]  header  =(Character[])set.toArray(new  Character[set.length()  ]);  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Character[]  header  =(Character[])set.toArray(new  Character[set.length()  ]);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Character[]  header  =(Character[])set.toArray(new  Character[set.length()  ]);	  Character[]    header    =(Character[])set.toArray(new    Character[set.size()    ]);    	non-compiled	[CE]  	66	None	replace
327	[BUG]  [BUGGY]  set.addAll(Arrays.asList(header,  header.length  +  1));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(header,  header.length  +  1));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(header,  header.length  +  1));	  set.addAll(Arrays.asList(header,    commentStart    +    1));    	non-compiled	[CE]  	72	None	replace
328	[BUG]  [BUGGY]  set.add(Arrays.asList(header,  commentStart  +  1));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(header,  commentStart  +  1));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(header,  commentStart  +  1));	  set.addAll(Arrays.asList(header,    commentStart    +    1));    	non-compiled	[CE]  	72	None	replace
329	[BUG]  [BUGGY]  set.addAll(Arrays.asList(header,  commentStart  -  1));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(header,  commentStart  -  1));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(header,  commentStart  -  1));	  set.addAll(Arrays.asList(header,    commentStart    +    1));    	non-compiled	[CE]  	72	None	replace
330	[BUG]  [BUGGY]  set.add(Arrays.asList(ignoreEmptyLines));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(ignoreEmptyLines));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(ignoreEmptyLines));	  set.add(Arrays.asList(labelSurroundingSpaces));    	non-compiled	[CE]  	60	None	replace
331	[BUG]  [BUGGY]  set.add(Arrays.asList(ignoredEmptyLines));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(ignoredEmptyLines));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(ignoredEmptyLines));	  set.add(Arrays.asList(labelSurroundingSpaces));    	non-compiled	[CE]  	60	None	replace
332	[BUG]  [BUGGY]  set.add(Arrays.asList(labelHeaderRecord));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(labelHeaderRecord));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(labelHeaderRecord));	  set.add(Arrays.asList(labelSurroundingSpaces));    	non-compiled	[CE]  	60	None	replace
333	[BUG]  [BUGGY]  set.add(Arrays.asList(labelEmptyLines));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(labelEmptyLines));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(labelEmptyLines));	  set.add(Arrays.asList(labelSurroundingSpaces));    	non-compiled	[CE]  	60	None	replace
334	[BUG]  [BUGGY]  set.add(Arrays.asList(relativeSurroundingSpaces));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(relativeSurroundingSpaces));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(relativeSurroundingSpaces));	  set.add(Arrays.asList(quoted));    	non-compiled	[CE]  	9	None	replace
335	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  nullString,  commentStart  }  ));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  nullString,  commentStart  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  nullString,  commentStart  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header,    nullString    }    ));    	non-compiled	[CE]  	55	None	replace
336	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  nullString,  0  }  ));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  nullString,  0  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  nullString,  0  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header,    nullString    }    ));    	non-compiled	[CE]  	55	None	replace
337	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  null),  recordSeparator));  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  null),  recordSeparator));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  null),  recordSeparator));	  set.add(Arrays.asList(new    String[]    {    header,    null));    	non-compiled	[CE]  	45	None	replace
338	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  Arrays.asList(header)));  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  Arrays.asList(header)));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  Arrays.asList(header)));	  set.add(Arrays.asList(new    String[]    {    header,    null));    	non-compiled	[CE]  	45	None	replace
339	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  null),  false);  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  null),  false);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  null),  false);	  set.add(Arrays.asList(new    String[]    {    header,    null));    	non-compiled	[CE]  	45	None	replace
340	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  null),  set);  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  null),  set);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  null),  set);	  set.add(Arrays.asList(new    String[]    {    header,    null));    	non-compiled	[CE]  	45	None	replace
341	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  escape  }  ));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  escape  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  escape  }  ));	  set.add(Arrays.asList(new    String[]    {    header,    delimiter    }    ));    	non-compiled	[CE]  	86	None	replace
342	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  null,  delimiter  }  ));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  null,  delimiter  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  null,  delimiter  }  ));	  set.add(Arrays.asList(new    String[]    {    header,    delimiter    }    ));    	non-compiled	[CE]  	86	None	replace
343	[BUG]  [BUGGY]  final  Set  <  String>  header  =  new  HashSet  <  String>(header.length);  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  header  =  new  HashSet  <  String>(header.length);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  header  =  new  HashSet  <  String>(header.length);	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    Set    <    String>    set    =    new    HashSet    <    String>(header.length);    	non-compiled	[CE]  	70	None	replace
344	[BUG]  [BUGGY]  set.add(Arrays.asList(header,  recordSeparator));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(header,  recordSeparator));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(header,  recordSeparator));	  set.addAll(Arrays.asList(recordSeparator,    header));    	non-compiled	[CE]  	59	None	replace
345	[BUG]  [BUGGY]  set.addAll(Arrays.asList(header.length,  header.length  -  1));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(header.length,  header.length  -  1));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(header.length,  header.length  -  1));	  set.addAll(Arrays.asList(header.length    -    1));    	non-compiled	[CE]  	76	None	replace
346	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  nullString,  recordSeparator  }  ));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  nullString,  recordSeparator  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  nullString,  recordSeparator  }  ));	  set.add(Arrays.asList(new    String[]    {    header,    nullString    }    ));    	non-compiled	[CE]  	85	None	replace
347	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  nullString,  0  }  ));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  nullString,  0  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  nullString,  0  }  ));	  set.add(Arrays.asList(new    String[]    {    header,    nullString    }    ));    	non-compiled	[CE]  	85	None	replace
348	[BUG]  [BUGGY]  set.addAll(Arrays.asList(header)),  false);  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(header)),  false);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(header)),  false);	  set.addAll(Arrays.asList(relativeSpaces),    false);    	non-compiled	[CE]  	3	None	replace
349	[BUG]  [BUGGY]  set.addAll(Arrays.asList(escape,  false));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(escape,  false));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(escape,  false));	  set.addAll(Arrays.asList(relativeSpaces),    false);    	non-compiled	[CE]  	3	None	replace
350	[BUG]  [BUGGY]  Set  <  String>  set  =  Sets.newHashSet(set,  header.length);  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Set  <  String>  set  =  Sets.newHashSet(set,  header.length);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Set  <  String>  set  =  Sets.newHashSet(set,  header.length);	  Set    <    String>    set    =    Sets.newHashSet(set);    	non-compiled	[CE]  	34	None	replace
351	[BUG]  [BUGGY]  Set  <  String>  set  =  Sets.newHashSet(set,  header);  [CE]  [FE]                                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Set  <  String>  set  =  Sets.newHashSet(set,  header);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Set  <  String>  set  =  Sets.newHashSet(set,  header);	  Set    <    String>    set    =    Sets.newHashSet(set);    	non-compiled	[CE]  	34	None	replace
352	[BUG]  [BUGGY]  set.addAll(Arrays.asList(header,  commentEnd));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(header,  commentEnd));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(header,  commentEnd));	  set.addAll(Arrays.asList(header,    escape));    	non-compiled	[CE]  	23	None	replace
353	[BUG]  [BUGGY]  set.add(Arrays.asList(header,  commentStart));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(header,  commentStart));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(header,  commentStart));	  set.addAll(Arrays.asList(header,    escape));    	non-compiled	[CE]  	23	None	replace
354	[BUG]  [BUGGY]  set.addAll(Arrays.asList(header,  description));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(header,  description));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(header,  description));	  set.addAll(Arrays.asList(header,    escape));    	non-compiled	[CE]  	23	None	replace
355	[BUG]  [BUGGY]  set.addAll(Arrays.asList(ceilingSpaces));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(ceilingSpaces));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(ceilingSpaces));	  set.addAll(Arrays.asList(ceilingChar));    	non-compiled	[CE]  	80	None	replace
356	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  recordSeparator  }  ));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  recordSeparator  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  recordSeparator  }  ));	  set.add(Arrays.asList(recordSeparator));    	non-compiled	[CE]  	7	None	replace
357	[BUG]  [BUGGY]  set.add(Arrays.asList(recordSeparator),  header);  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(recordSeparator),  header);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(recordSeparator),  header);	  set.add(Arrays.asList(recordSeparator));    	non-compiled	[CE]  	7	None	replace
358	[BUG]  [BUGGY]  Set  <  String>  header  =  set.iterator()?  set.next()  :  null;  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Set  <  String>  header  =  set.iterator()?  set.next()  :  null;  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Set  <  String>  header  =  set.iterator()?  set.next()  :  null;	  Set    <    String>    header    =    set.iterator().next();    	non-compiled	[CE]  	88	None	replace
359	[BUG]  [BUGGY]  Set  <  String>  header  =  set.iterator(),  quotePolicy.next();  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Set  <  String>  header  =  set.iterator(),  quotePolicy.next();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Set  <  String>  header  =  set.iterator(),  quotePolicy.next();	  Set    <    String>    header    =    set.iterator().next();    	non-compiled	[CE]  	88	None	replace
360	[BUG]  [BUGGY]  set.addAll(Arrays.asList(header),  set);  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(header),  set);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(header),  set);	  set.addAll(Arrays.asList(recordSeparator),    set);    	non-compiled	[CE]  	50	None	replace
361	[BUG]  [BUGGY]  set.add(Arrays.asList(header,  escape));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(header,  escape));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(header,  escape));	  set.addAll(Arrays.asList(escape,    header));    	non-compiled	[CE]  	94	None	replace
362	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.toString()));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.toString()));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header.toString()));	  set.addAll(Arrays.asList(new    String[]    {    header.toString()    }    ));    	non-compiled	[CE]  	52	None	replace
363	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  commentStart  +   "));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  commentStart  +   "));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  commentStart  +   "));	  set.add(Arrays.asList(new    String[]    {    header,    commentStart    }    ));    	non-compiled	[CE]  	41	None	replace
364	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  commentStart,  commentChar  }  ));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  commentStart,  commentChar  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  commentStart,  commentChar  }  ));	  set.add(Arrays.asList(new    String[]    {    header,    commentStart    }    ));    	non-compiled	[CE]  	41	None	replace
365	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  commentStart,  commentStart  }  ));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  commentStart,  commentStart  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  commentStart,  commentStart  }  ));	  set.add(Arrays.asList(new    String[]    {    header,    commentStart    }    ));    	non-compiled	[CE]  	41	None	replace
366	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  commentStart,  commentEnd  }  ));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  commentStart,  commentEnd  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  commentStart,  commentEnd  }  ));	  set.add(Arrays.asList(new    String[]    {    header,    commentStart    }    ));    	non-compiled	[CE]  	41	None	replace
367	[BUG]  [BUGGY]  final  ArrayList  <  String>  set  =  Sets.newHashArray(set);  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  ArrayList  <  String>  set  =  Sets.newHashArray(set);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  ArrayList  <  String>  set  =  Sets.newHashArray(set);	  final    Set    <    String>    set    =    Sets.newHashSet(set);    	non-compiled	[CE]  	33	None	replace
368	[BUG]  [BUGGY]  final  List  <  String>  set  =  Sets.newHashList(set);  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  List  <  String>  set  =  Sets.newHashList(set);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  List  <  String>  set  =  Sets.newHashList(set);	  final    Set    <    String>    set    =    Sets.newHashSet(set);    	non-compiled	[CE]  	33	None	replace
369	[BUG]  [BUGGY]  final  Set  <  String>  header  =  set.iterator().keySet();  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  header  =  set.iterator().keySet();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  header  =  set.iterator().keySet();	  final    Set    <    String>    header    =    set.keySet();    	non-compiled	[CE]  	90	None	replace
370	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  description  }  ));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  description  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  description  }  ));	  set.add(Arrays.asList(new    String[]    {    header,    description    }    ));    	non-compiled	[CE]  	44	None	replace
371	[BUG]  [BUGGY]  final  Set  <  String>  header  =  set.entrySet().iterator().next();  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  header  =  set.entrySet().iterator().next();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  header  =  set.entrySet().iterator().next();	  final    Set    <    String>    header    =    set.iterator().next();    	non-compiled	[CE]  	87	None	replace
372	[BUG]  [BUGGY]  set.addAll(Arrays.asList(escape,  c));  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(escape,  c));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(escape,  c));	  set.addAll(Arrays.asList(c,    commentStart));    	non-compiled	[CE]  	28	None	replace
373	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  Arrays.asList(header)));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  Arrays.asList(header)));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  Arrays.asList(header)));	  set.addAll(Arrays.asList(new    String[]    {    header,    null));    	non-compiled	[CE]  	56	None	replace
374	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  Arrays.asList(header));  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  Arrays.asList(header));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  Arrays.asList(header));	  set.addAll(Arrays.asList(new    String[]    {    header,    null));    	non-compiled	[CE]  	56	None	replace
375	[BUG]  [BUGGY]  set.addAll(Arrays.asList(header,  commentStart  +  2));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(header,  commentStart  +  2));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(header,  commentStart  +  2));	  set.addAll(Arrays.asList(header,    commentStart    +       "));    	non-compiled	[CE]  	74	None	replace
376	[BUG]  [BUGGY]  set.addAll(Arrays.asList(header,  2));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(header,  2));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(header,  2));	  set.addAll(Arrays.asList(header,    0));    	non-compiled	[CE]  	73	None	replace
377	[BUG]  [BUGGY]  final  Set  <  String>  set  =  header.iterator().next();  [CE]  [FE]                                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set  =  header.iterator().next();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  header.iterator().next();	  final    Set    <    String>    set    =    set.iterator().next();    	non-compiled	[CE]  	35	None	replace
378	[BUG]  [BUGGY]  set.add(Arrays.asList(header,  escapeChar));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(header,  escapeChar));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(header,  escapeChar));	  set.addAll(Arrays.asList(escapeChar,    header));    	non-compiled	[CE]  	95	None	replace
379	[BUG]  [BUGGY]  set.addAll(Arrays.asList(relativeEmptyLines,  header));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(relativeEmptyLines,  header));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(relativeEmptyLines,  header));	  set.addAll(Arrays.asList(escapeChar,    header));    	non-compiled	[CE]  	95	None	replace
380	[BUG]  [BUGGY]  final  Set  <  String>  set  =  Arrays.asList(commentStart);  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set  =  Arrays.asList(commentStart);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  Arrays.asList(commentStart);	  final    Set    <    String>    set.addAll(Arrays.asList(commentStart));    	non-compiled	[CE]  	18	None	replace
381	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  null);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  null);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  null);	  set.addAll(Arrays.asList(new    String[]    {    header,    null    }    ));    	non-compiled	[CE]  	63	None	replace
382	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  null,  0  }  ));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  null,  0  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  null,  0  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header,    null    }    ));    	non-compiled	[CE]  	63	None	replace
383	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  null),  false);  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  null),  false);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  null),  false);	  set.addAll(Arrays.asList(new    String[]    {    header,    null    }    ));    	non-compiled	[CE]  	63	None	replace
384	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  null  }  ));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  null  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  null  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header,    null    }    ));    	non-compiled	[CE]  	63	None	replace
385	[BUG]  [BUGGY]  set.addAll(Arrays.asList(ignoredHeaderRecords));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(ignoredHeaderRecords));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(ignoredHeaderRecords));	  set.addAll(Arrays.asList(escapeSurroundingSpaces));    	non-compiled	[CE]  	1	None	replace
386	[BUG]  [BUGGY]  set.addAll(Arrays.asList(ignoringEmptyLines));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(ignoringEmptyLines));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(ignoringEmptyLines));	  set.addAll(Arrays.asList(escapeSurroundingSpaces));    	non-compiled	[CE]  	1	None	replace
387	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  delimiter  }  ));  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  delimiter  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  delimiter  }  ));	  set.add(Arrays.asList(delimiter));    	non-compiled	[CE]  	39	None	replace
388	[BUG]  [BUGGY]  set.add(Arrays.asList(ceilingSpaces));  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(ceilingSpaces));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(ceilingSpaces));	  set.add(Arrays.asList(delimiter));    	non-compiled	[CE]  	39	None	replace
389	[BUG]  [BUGGY]  set.addAll(Arrays.asList(list));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(list));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(list));	  set.addAll(Arrays.asList(labels));    	non-compiled	[CE]  	65	None	replace
390	[BUG]  [BUGGY]  set.addAll(Arrays.asList(length,  commentStart));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(length,  commentStart));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(length,  commentStart));	  set.addAll(Arrays.asList(commentStart,    header.length));    	non-compiled	[CE]  	26	None	replace
391	[BUG]  [BUGGY]  Set  <  String>  set  =  new  HashSet  <  String>(header.length);  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Set  <  String>  set  =  new  HashSet  <  String>(header.length);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Set  <  String>  set  =  new  HashSet  <  String>(header.length);	  set.addAll(Arrays.asList(commentStart,    header.length));    	non-compiled	[CE]  	26	None	replace
392	[BUG]  [BUGGY]  set.add(Arrays.asList(escape,  header.length));  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(escape,  header.length));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(escape,  header.length));	  set.addAll(Arrays.asList(commentStart,    header.length));    	non-compiled	[CE]  	26	None	replace
393	[BUG]  [BUGGY]  final  List  <  String>  set  =  Sets.newHashList();  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  List  <  String>  set  =  Sets.newHashList();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  List  <  String>  set  =  Sets.newHashList();	  final    Set    <    String>    set    =    Sets.newHashSet();    	non-compiled	[CE]  	31	None	replace
394	[BUG]  [BUGGY]  set.addAll(Arrays.asList(header,  c));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(header,  c));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(header,  c));	  set.addAll(Arrays.asList(header,    quoteChar));    	non-compiled	[CE]  	25	None	replace
395	[BUG]  [BUGGY]  set.addAll(Arrays.asList(header,  delimiter));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(header,  delimiter));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(header,  delimiter));	  set.addAll(Arrays.asList(header,    quoteChar));    	non-compiled	[CE]  	25	None	replace
396	[BUG]  [BUGGY]  set.addAll(Arrays.asList(list,  commentStart));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(list,  commentStart));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(list,  commentStart));	  set.addAll(Arrays.asList(escape,    commentStart));    	non-compiled	[CE]  	24	None	replace
397	[BUG]  [BUGGY]  final  Set  <  String>  set  =  Arrays.asList(escapeChar));  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set  =  Arrays.asList(escapeChar));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  Arrays.asList(escapeChar));	  final    Set    <    String>    set.addAll(Arrays.asList(escapeChar));    	non-compiled	[CE]  	19	None	replace
398	[BUG]  [BUGGY]  final  Set  <  String>  set.add(Arrays.asList(escapeChar));  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set.add(Arrays.asList(escapeChar));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set.add(Arrays.asList(escapeChar));	  final    Set    <    String>    set.addAll(Arrays.asList(escapeChar));    	non-compiled	[CE]  	19	None	replace
399	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  commentStart,  commentStart  }  ));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  commentStart,  commentStart  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  commentStart,  commentStart  }  ));	  set.add(Arrays.asList(commentStart));    	non-compiled	[CE]  	5	None	replace
400	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.length()  ]);  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  String[]  header  =  set.toArray(new  String[set.length()  ]);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	String[]  header  =  set.toArray(new  String[set.length()  ]);	  String[]    header    =    set.toArray(new    String[set.size()    ]);    	non-compiled	[CE]  	30	None	replace
401	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  +  2]);  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  +  2]);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	String[]  header  =  set.toArray(new  String[set.size()  +  2]);	  String[]    header    =    set.toArray(new    String[set.size()    ]);    	non-compiled	[CE]  	30	None	replace
402	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  recordSeparator,  delimiter  }  ));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  recordSeparator,  delimiter  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  recordSeparator,  delimiter  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header,    recordSeparator    }    ));    	non-compiled	[CE]  	62	None	replace
403	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  nullString,  recordSeparator  }  ));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  nullString,  recordSeparator  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  nullString,  recordSeparator  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header,    recordSeparator    }    ));    	non-compiled	[CE]  	62	None	replace
404	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  recordSeparator,  commentStart  }  ));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  recordSeparator,  commentStart  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  recordSeparator,  commentStart  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header,    recordSeparator    }    ));    	non-compiled	[CE]  	62	None	replace
405	[BUG]  [BUGGY]  set.addAll(Arrays.asList(relativeSeparator,  commentStart));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(relativeSeparator,  commentStart));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(relativeSeparator,  commentStart));	  set.addAll(Arrays.asList(delimiter,    commentStart));    	non-compiled	[CE]  	96	None	replace
406	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.length,  header.length  }  ));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.length,  header.length  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header.length,  header.length  }  ));	  set.add(Arrays.asList(new    String[]    {    header.length    }    ));    	non-compiled	[CE]  	40	None	replace
407	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.length,  0  }  ));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.length,  0  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header.length,  0  }  ));	  set.add(Arrays.asList(new    String[]    {    header.length    }    ));    	non-compiled	[CE]  	40	None	replace
408	[BUG]  [BUGGY]  set.add(new  String[]  {  Arrays.toString(header)  }  ));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(new  String[]  {  Arrays.toString(header)  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(new  String[]  {  Arrays.toString(header)  }  ));	  set.add(new    String[]    {    header    }    ));    	non-compiled	[CE]  	58	None	replace
409	[BUG]  [BUGGY]  set.add(new  String[]  {  header,  null  }  ));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(new  String[]  {  header,  null  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(new  String[]  {  header,  null  }  ));	  set.add(new    String[]    {    header    }    ));    	non-compiled	[CE]  	58	None	replace
410	[BUG]  [BUGGY]  set.add(new  String[]  {  header  },  nullString));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(new  String[]  {  header  },  nullString));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(new  String[]  {  header  },  nullString));	  set.add(new    String[]    {    header    }    ));    	non-compiled	[CE]  	58	None	replace
411	[BUG]  [BUGGY]  set.add(new  String[]  {  name  }  ));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(new  String[]  {  name  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(new  String[]  {  name  }  ));	  set.add(new    String[]    {    header    }    ));    	non-compiled	[CE]  	58	None	replace
412	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  commentStart  +   "));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  commentStart  +   "));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  commentStart  +   "));	  set.addAll(Arrays.asList(new    String[]    {    header,    commentStart    }    ));    	non-compiled	[CE]  	64	None	replace
413	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  commentStart,  commentStart  }  ));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  commentStart,  commentStart  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  commentStart,  commentStart  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header,    commentStart    }    ));    	non-compiled	[CE]  	64	None	replace
414	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  commentStart,  commentChar  }  ));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  commentStart,  commentChar  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  commentStart,  commentChar  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header,    commentStart    }    ));    	non-compiled	[CE]  	64	None	replace
415	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  commentStart,  commentStart  }  ));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  commentStart,  commentStart  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  commentStart,  commentStart  }  ));	  set.addAll(Arrays.asList(new    String[]    {    commentStart    }    ));    	non-compiled	[CE]  	77	None	replace
416	[BUG]  [BUGGY]  Character[]  header  =  quoteChar(header,  delimiter);  [CE]  [FE]                                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Character[]  header  =  quoteChar(header,  delimiter);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Character[]  header  =  quoteChar(header,  delimiter);	  Character[]    header    =    quoteChar(c,    delimiter);    	non-compiled	[CE]  	92	None	replace
417	[BUG]  [BUGGY]  Character[]  header  =  quoteChar(c,  escapeChar);  [CE]  [FE]                                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Character[]  header  =  quoteChar(c,  escapeChar);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Character[]  header  =  quoteChar(c,  escapeChar);	  Character[]    header    =    quoteChar(c,    delimiter);    	non-compiled	[CE]  	92	None	replace
418	[BUG]  [BUGGY]  final  Set  <  String>  set  =  Arrays.asList(header,  header.length);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set  =  Arrays.asList(header,  header.length);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  Arrays.asList(header,  header.length);	  final    Set    <    String>    set    =    Arrays.asList(header);    	non-compiled	[CE]  	71	None	replace
419	[BUG]  [BUGGY]  set.addAll(Arrays.asList(relativeSurroundingSpaces));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(relativeSurroundingSpaces));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(relativeSurroundingSpaces));	  set.addAll(Arrays.asList(quote));    	non-compiled	[CE]  	21	None	replace
420	[BUG]  [BUGGY]  final  Set  <  String>  set  =  set.iterator().keySet();  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set  =  set.iterator().keySet();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  set.iterator().keySet();	  final    Set    <    String>    set    =    set.keySet();    	non-compiled	[CE]  	68	None	replace
421	[BUG]  [BUGGY]  final  Set  <  String>  set  =  header.keySet();  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set  =  header.keySet();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  header.keySet();	  final    Set    <    String>    set    =    set.keySet();    	non-compiled	[CE]  	68	None	replace
422	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  description  }  ));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  description  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  description  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header,    description    }    ));    	non-compiled	[CE]  	53	None	replace
423	[BUG]  [BUGGY]  final  Set  <  String>  header  =  set.iterator().next().getHeader(header);  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  header  =  set.iterator().next().getHeader(header);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  header  =  set.iterator().next().getHeader(header);	  final    Set    <    String>    header    =    set.iterator().next().getValue();    	non-compiled	[CE]  	89	None	replace
424	[BUG]  [BUGGY]  final  Set  <  String>  header  =  set.iterator().next().getHeaders();  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  header  =  set.iterator().next().getHeaders();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  header  =  set.iterator().next().getHeaders();	  final    Set    <    String>    header    =    set.iterator().next().getValue();    	non-compiled	[CE]  	89	None	replace
425	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  escape  }  ));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  escape  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  escape  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header,    delimiter    }    ));    	non-compiled	[CE]  	78	None	replace
426	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  quoteChar  }  ));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  quoteChar  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  quoteChar  }  ));	  set.add(Arrays.asList(quote));    	non-compiled	[CE]  	6	None	replace
427	[BUG]  [BUGGY]  final  ArrayList  <  String>  set  =  Sets.newHashArray(header.length);  [CE]  [FE]                                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  ArrayList  <  String>  set  =  Sets.newHashArray(header.length);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  ArrayList  <  String>  set  =  Sets.newHashArray(header.length);	  final    Set    <    String>    set    =    Sets.newHashSet(header.length);    	non-compiled	[CE]  	36	None	replace
428	[BUG]  [BUGGY]  set.add(Arrays.asList(headerRecord));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(headerRecord));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(headerRecord));	  set.add(Arrays.asList(copyHeaderRecord));    	non-compiled	[CE]  	81	None	replace
429	[BUG]  [BUGGY]  set.add(Arrays.asList(record));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(record));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(record));	  set.add(Arrays.asList(copyHeaderRecord));    	non-compiled	[CE]  	81	None	replace
430	[BUG]  [BUGGY]  Set  <  String>  set  =  Arrays.asList(quoted);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Set  <  String>  set  =  Arrays.asList(quoted);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Set  <  String>  set  =  Arrays.asList(quoted);	  set.addAll(Arrays.asList(quoted));    	non-compiled	[CE]  	22	None	replace
431	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.length,  header.length  }  ));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.length,  header.length  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header.length,  header.length  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header.length    }    ));    	non-compiled	[CE]  	51	None	replace
432	[BUG]  [BUGGY]  set.add(Arrays.asList(widthEmptyLines));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(widthEmptyLines));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(widthEmptyLines));	  set.add(Arrays.asList(relativeEmptyLines));    	non-compiled	[CE]  	61	None	replace
433	[BUG]  [BUGGY]  set.addAll(Arrays.asList(escapeSurroundingSpaces,  header.length));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(escapeSurroundingSpaces,  header.length));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(escapeSurroundingSpaces,  header.length));	  set.addAll(Arrays.asList(recordSeparator,    header.length));    	non-compiled	[CE]  	48	None	replace
434	[BUG]  [BUGGY]  set.add(new  String[]  {  c,  header  }  ));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(new  String[]  {  c,  header  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(new  String[]  {  c,  header  }  ));	  set.add(Arrays.asList(new    String[]    {    header,    c    }    ));    	non-compiled	[CE]  	57	None	replace
435	[BUG]  [BUGGY]  final  HashSet  <  String>  set.addAll(Arrays.asList(header));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  HashSet  <  String>  set.addAll(Arrays.asList(header));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  HashSet  <  String>  set.addAll(Arrays.asList(header));	  final    Set    <    String>    set.addAll(Arrays.asList(escape));    	non-compiled	[CE]  	17	None	replace
436	[BUG]  [BUGGY]  final  Collection  <  String>  set.addAll(Arrays.asList(header));  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Collection  <  String>  set.addAll(Arrays.asList(header));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Collection  <  String>  set.addAll(Arrays.asList(header));	  final    Set    <    String>    set.addAll(Arrays.asList(escape));    	non-compiled	[CE]  	17	None	replace
437	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  labelSeparator  }  ));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  labelSeparator  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  labelSeparator  }  ));	  set.add(Arrays.asList(labelSeparator));    	non-compiled	[CE]  	82	None	replace
438	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  commentStart,  delimiter  }  ));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  commentStart,  delimiter  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  commentStart,  delimiter  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header,    delimiter    }    ));    	non-compiled	[CE]  	78	None	replace
439	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  delimiter,  c  }  ));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  delimiter,  c  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  delimiter,  c  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header,    delimiter    }    ));    	non-compiled	[CE]  	78	None	replace
440	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  delimiter,  header  }  ));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  delimiter,  header  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  delimiter,  header  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header,    delimiter    }    ));    	non-compiled	[CE]  	78	None	replace
441	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  delimiter,  quoteChar  }  ));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  delimiter,  quoteChar  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  delimiter,  quoteChar  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header,    delimiter    }    ));    	non-compiled	[CE]  	78	None	replace
442	[BUG]  [BUGGY]  set.addAll(Arrays.asList(backer));  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(backer));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(backer));	  set.addAll(Arrays.asList(escapeChar));    	non-compiled	[CE]  	13	None	replace
443	[BUG]  [BUGGY]  final  Set  <  String>  set  =  set.list().iterator().next();  [CE]  [FE]                                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set  =  set.list().iterator().next();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  set.list().iterator().next();	  final    Set    <    String>    set    =    set.iterator().next();    	non-compiled	[CE]  	35	None	replace
444	[BUG]  [BUGGY]  final  Set  <  String>  set  =  set.values().next();  [CE]  [FE]                                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set  =  set.values().next();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  set.values().next();	  final    Set    <    String>    set    =    set.iterator().next();    	non-compiled	[CE]  	35	None	replace
445	[BUG]  [BUGGY]  set.addAll(Arrays.asList(escape),  set);  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(escape),  set);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(escape),  set);	  set.addAll(Arrays.asList(recordSeparator),    set);    	non-compiled	[CE]  	50	None	replace
446	[BUG]  [BUGGY]  set.add(Arrays.asList(escape.length));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(escape.length));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(escape.length));	  set.addAll(Arrays.asList(escape.length));    	non-compiled	[CE]  	98	None	replace
447	[BUG]  [BUGGY]  set.addAll(Arrays.asList(backer.length));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(backer.length));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(backer.length));	  set.addAll(Arrays.asList(escape.length));    	non-compiled	[CE]  	98	None	replace
448	[BUG]  [BUGGY]  set.addAll(Arrays.asList(delimiter,  quoteChar));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(delimiter,  quoteChar));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(delimiter,  quoteChar));	  set.addAll(Arrays.asList(header,    quoteChar));    	non-compiled	[CE]  	25	None	replace
449	[BUG]  [BUGGY]  set.add(Arrays.asList(c),  escape);  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(c),  escape);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(c),  escape);	  set.add(Arrays.asList(c));    	non-compiled	[CE]  	10	None	replace
450	[BUG]  [BUGGY]  set.add(Arrays.asList(c),  escapeChar);  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(c),  escapeChar);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(c),  escapeChar);	  set.add(Arrays.asList(c));    	non-compiled	[CE]  	10	None	replace
451	[BUG]  [BUGGY]  ArrayList  <  String>  set.addAll(Arrays.asList(header));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  ArrayList  <  String>  set.addAll(Arrays.asList(header));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	ArrayList  <  String>  set.addAll(Arrays.asList(header));	  final    ArrayList    <    String>    set.addAll(Arrays.asList(header));    	non-compiled	[CE]  	16	None	replace
452	[BUG]  [BUGGY]  set.add(Arrays.asList(ceiler));  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(ceiler));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(ceiler));	  set.add(Arrays.asList(delimiter));    	non-compiled	[CE]  	39	None	replace
453	[BUG]  [BUGGY]  set.addAll(Arrays.asList(latticeSurroundingSpaces));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(latticeSurroundingSpaces));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(latticeSurroundingSpaces));	  set.addAll(Arrays.asList(escapeSurroundingSpaces));    	non-compiled	[CE]  	1	None	replace
454	[BUG]  [BUGGY]  set.addAll(Arrays.asList(scapeSurroundingSpaces));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(scapeSurroundingSpaces));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(scapeSurroundingSpaces));	  set.addAll(Arrays.asList(escapeSurroundingSpaces));    	non-compiled	[CE]  	1	None	replace
455	[BUG]  [BUGGY]  set.addAll(Arrays.asList(escapeSurroundingSpaces),  ignoreEmptyLines);  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(escapeSurroundingSpaces),  ignoreEmptyLines);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(escapeSurroundingSpaces),  ignoreEmptyLines);	  set.addAll(Arrays.asList(escapeSurroundingSpaces));    	non-compiled	[CE]  	1	None	replace
456	[BUG]  [BUGGY]  set.addAll(Arrays.asList(header,  escapeCharacter  +  1));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(header,  escapeCharacter  +  1));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(header,  escapeCharacter  +  1));	  set.addAll(Arrays.asList(header,    commentStart    +    1));    	non-compiled	[CE]  	72	None	replace
457	[BUG]  [BUGGY]  set.addAll(Arrays.asList(escape,  commentStart  +  1));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(escape,  commentStart  +  1));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(escape,  commentStart  +  1));	  set.addAll(Arrays.asList(header,    commentStart    +    1));    	non-compiled	[CE]  	72	None	replace
458	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ],  escapeChar);  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ],  escapeChar);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	String[]  header  =  set.toArray(new  String[set.size()  ],  escapeChar);	  String[]    header    =    set.toArray(new    String[set.size()    ]);    	non-compiled	[CE]  	30	None	replace
459	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  nullString,  delimiter  }  ));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  nullString,  delimiter  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  nullString,  delimiter  }  ));	  set.add(Arrays.asList(new    String[]    {    header,    nullString    }    ));    	non-compiled	[CE]  	85	None	replace
460	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  commentStart,  description  }  ));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  commentStart,  description  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  commentStart,  description  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header,    description    }    ));    	non-compiled	[CE]  	53	None	replace
461	[BUG]  [BUGGY]  final  Set  <  String>  header  =  set.toArray(new  HashSet  <  String>());  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  header  =  set.toArray(new  HashSet  <  String>());  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  header  =  set.toArray(new  HashSet  <  String>());	  final    Set    <    String>    header    =    set.keySet();    	non-compiled	[CE]  	90	None	replace
462	[BUG]  [BUGGY]  final  Set  <  String>  header  =  set.toArray(new  HashSet  <  String>(header.length));  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  header  =  set.toArray(new  HashSet  <  String>(header.length));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  header  =  set.toArray(new  HashSet  <  String>(header.length));	  final    Set    <    String>    header    =    set.keySet();    	non-compiled	[CE]  	90	None	replace
463	[BUG]  [BUGGY]  set.addAll(Arrays.asList(delimiter,  0));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(delimiter,  0));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(delimiter,  0));	  set.addAll(Arrays.asList(header,    0));    	non-compiled	[CE]  	73	None	replace
464	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  commentStart,  delimiter  }  ));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  commentStart,  delimiter  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  commentStart,  delimiter  }  ));	  set.add(Arrays.asList(new    String[]    {    commentStart    }    ));    	non-compiled	[CE]  	84	None	replace
465	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  commentStart,  escapeChar)  }  );  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  commentStart,  escapeChar)  }  );  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  commentStart,  escapeChar)  }  );	  set.add(Arrays.asList(new    String[]    {    commentStart    }    ));    	non-compiled	[CE]  	84	None	replace
466	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  commentStart,  escapeChar)  }  ));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  commentStart,  escapeChar)  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  commentStart,  escapeChar)  }  ));	  set.add(Arrays.asList(new    String[]    {    commentStart    }    ));    	non-compiled	[CE]  	84	None	replace
467	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  commentStart,  escapeChar));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  commentStart,  escapeChar));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  commentStart,  escapeChar));	  set.add(Arrays.asList(new    String[]    {    commentStart    }    ));    	non-compiled	[CE]  	84	None	replace
468	[BUG]  [BUGGY]  final  Set  <  String>  set  =  Arrays.asList(delimiter);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set  =  Arrays.asList(delimiter);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  Arrays.asList(delimiter);	  final    Set    <    String>    set    =    Arrays.asList(header);    	non-compiled	[CE]  	71	None	replace
469	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  delimiter));  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  delimiter));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  delimiter));	  set.add(Arrays.asList(new    String[]    {    header,    null));    	non-compiled	[CE]  	45	None	replace
470	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  null),  escapeChar);  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  null),  escapeChar);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  null),  escapeChar);	  set.add(Arrays.asList(new    String[]    {    header,    null));    	non-compiled	[CE]  	45	None	replace
471	[BUG]  [BUGGY]  final  Set  <  String>  set.addAll(Arrays.asList(delimiter));  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set.addAll(Arrays.asList(delimiter));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set.addAll(Arrays.asList(delimiter));	  final    Set    <    String>    set.addAll(Arrays.asList(escapeChar));    	non-compiled	[CE]  	19	None	replace
472	[BUG]  [BUGGY]  final  Set  <  String>  set  =  Arrays.asList(escapeChar);  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set  =  Arrays.asList(escapeChar);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  Arrays.asList(escapeChar);	  final    Set    <    String>    set.addAll(Arrays.asList(escapeChar));    	non-compiled	[CE]  	19	None	replace
473	[BUG]  [BUGGY]  final  Set  <  String>  header  =  set.iterator().next().escape(escape);  [CE]  [FE]                                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  header  =  set.iterator().next().escape(escape);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  header  =  set.iterator().next().escape(escape);	  final    Set    <    String>    header    =    set.iterator().next().getKey();    	non-compiled	[CE]  	93	None	replace
474	[BUG]  [BUGGY]  final  Set  <  String>  header  =  set.iterator().next().getHost();  [CE]  [FE]                                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  header  =  set.iterator().next().getHost();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  header  =  set.iterator().next().getHost();	  final    Set    <    String>    header    =    set.iterator().next().getKey();    	non-compiled	[CE]  	93	None	replace
475	[BUG]  [BUGGY]  final  Set  <  String>  header  =  set.iterator().next().getEscapeChar();  [CE]  [FE]                                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  header  =  set.iterator().next().getEscapeChar();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  header  =  set.iterator().next().getEscapeChar();	  final    Set    <    String>    header    =    set.iterator().next().getKey();    	non-compiled	[CE]  	93	None	replace
476	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  commentStart,  description  }  ));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  commentStart,  description  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  commentStart,  description  }  ));	  set.add(Arrays.asList(new    String[]    {    header,    description    }    ));    	non-compiled	[CE]  	44	None	replace
477	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  c,  description  }  ));  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  c,  description  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  c,  description  }  ));	  set.add(Arrays.asList(new    String[]    {    header,    description    }    ));    	non-compiled	[CE]  	44	None	replace
478	[BUG]  [BUGGY]  set.addAll(Arrays.asList(escapeChar,  delimiter));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(escapeChar,  delimiter));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(escapeChar,  delimiter));	  set.addAll(Arrays.asList(escapeChar,    commentStart));    	non-compiled	[CE]  	27	None	replace
479	[BUG]  [BUGGY]  set.add(Arrays.asList(escape,  header));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(escape,  header));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(escape,  header));	  set.addAll(Arrays.asList(header,    escape));    	non-compiled	[CE]  	23	None	replace
480	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  escapeCharacter  }  ));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  escapeCharacter  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  escapeCharacter  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header,    recordSeparator    }    ));    	non-compiled	[CE]  	62	None	replace
481	[BUG]  [BUGGY]  set.add(new  String[]  {  commentStart  }  ));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(new  String[]  {  commentStart  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(new  String[]  {  commentStart  }  ));	  set.add(new    String[]    {    header    }    ));    	non-compiled	[CE]  	58	None	replace
482	[BUG]  [BUGGY]  set.add(new  String[]  {  commentStart,  header  }  ));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(new  String[]  {  commentStart,  header  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(new  String[]  {  commentStart,  header  }  ));	  set.add(new    String[]    {    header    }    ));    	non-compiled	[CE]  	58	None	replace
483	[BUG]  [BUGGY]  set.add(new  String[]  {  header,  nullString  }  ));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(new  String[]  {  header,  nullString  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(new  String[]  {  header,  nullString  }  ));	  set.add(new    String[]    {    header    }    ));    	non-compiled	[CE]  	58	None	replace
484	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  commentStart,  commentStart)  }  );  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  commentStart,  commentStart)  }  );  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  commentStart,  commentStart)  }  );	  set.add(Arrays.asList(commentStart));    	non-compiled	[CE]  	5	None	replace
485	[BUG]  [BUGGY]  set.add(Arrays.asList(escapeChar,  commentStart));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(escapeChar,  commentStart));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(escapeChar,  commentStart));	  set.addAll(Arrays.asList(escapeChar,    header));    	non-compiled	[CE]  	95	None	replace
486	[BUG]  [BUGGY]  set.addAll(Arrays.asList(labelSeparator,  header));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(labelSeparator,  header));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(labelSeparator,  header));	  set.addAll(Arrays.asList(escapeChar,    header));    	non-compiled	[CE]  	95	None	replace
487	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  quoteChar,  commentStart  }  ));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  quoteChar,  commentStart  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  quoteChar,  commentStart  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header,    commentStart    }    ));    	non-compiled	[CE]  	64	None	replace
488	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  c,  commentStart  }  ));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  c,  commentStart  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  c,  commentStart  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header,    commentStart    }    ));    	non-compiled	[CE]  	64	None	replace
489	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  commentStart,  escapeChar  }  ));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  commentStart,  escapeChar  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  commentStart,  escapeChar  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header,    commentStart    }    ));    	non-compiled	[CE]  	64	None	replace
490	[BUG]  [BUGGY]  set.addAll(Arrays.asList(header.length  /  1));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(header.length  /  1));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(header.length  /  1));	  set.addAll(Arrays.asList(header.length    +    1));    	non-compiled	[CE]  	47	None	replace
491	[BUG]  [BUGGY]  final  Set  <  String>  set  =  Sets.newHashSet(templateChar);  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set  =  Sets.newHashSet(templateChar);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  Sets.newHashSet(templateChar);	  final    Set    <    String>    set    =    Sets.newHashSet(set);    	non-compiled	[CE]  	33	None	replace
492	[BUG]  [BUGGY]  final  Set  <  String>  set  =  Sets.newHashSet(offset);  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set  =  Sets.newHashSet(offset);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  Sets.newHashSet(offset);	  final    Set    <    String>    set    =    Sets.newHashSet(set);    	non-compiled	[CE]  	33	None	replace
493	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  delimiter));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  delimiter));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  delimiter));	  set.addAll(Arrays.asList(new    String[]    {    header,    null));    	non-compiled	[CE]  	56	None	replace
494	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  Arrays.asList(recordSeparator)));  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  Arrays.asList(recordSeparator)));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  Arrays.asList(recordSeparator)));	  set.addAll(Arrays.asList(new    String[]    {    header,    null));    	non-compiled	[CE]  	56	None	replace
495	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.toString()  +  ')');  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.toString()  +  ')');  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header.toString()  +  ')');	  set.add(Arrays.asList(new    String[]    {    header.toString()    }    ));    	non-compiled	[CE]  	42	None	replace
496	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.toString()  +  1  }  ));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.toString()  +  1  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header.toString()  +  1  }  ));	  set.add(Arrays.asList(new    String[]    {    header.toString()    }    ));    	non-compiled	[CE]  	42	None	replace
497	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  commentStart,  null  }  ));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  commentStart,  null  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  commentStart,  null  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header,    null    }    ));    	non-compiled	[CE]  	63	None	replace
498	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  null),  null);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  null),  null);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  null),  null);	  set.addAll(Arrays.asList(new    String[]    {    header,    null    }    ));    	non-compiled	[CE]  	63	None	replace
499	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Collection  <  String>  set  =  new  HashSet  <  String>(header.length);  }  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Collection  <  String>  set  =  new  HashSet  <  String>(header.length);  }  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Collection  <  String>  set  =  new  HashSet  <  String>(header.length);  }	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    Set    <    String>    set    =    new    HashSet    <    String>(header.length);    	non-compiled	[CE]  	70	None	replace
500	[BUG]  [BUGGY]  set.add(Arrays.asList(labelSurroundingSpaces),  escapeChar);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(labelSurroundingSpaces),  escapeChar);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(labelSurroundingSpaces),  escapeChar);	  set.add(Arrays.asList(labelSurroundingSpaces));    	non-compiled	[CE]  	60	None	replace
501	[BUG]  [BUGGY]  final  Set  <  String>  header  =  set.size()  -  2;  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  header  =  set.size()  -  2;  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  header  =  set.size()  -  2;	  final    Set    <    String>    header    =    set.size();    	non-compiled	[CE]  	91	None	replace
502	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  HashSet  <  String>(header)));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  HashSet  <  String>(header)));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  HashSet  <  String>(header)));	  set.addAll(Arrays.asList(escape,    header));    	non-compiled	[CE]  	94	None	replace
503	[BUG]  [BUGGY]  set.addAll(Arrays.asList(backer,  escape));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(backer,  escape));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(backer,  escape));	  set.addAll(Arrays.asList(escape,    header));    	non-compiled	[CE]  	94	None	replace
504	[BUG]  [BUGGY]  set.addAll(Arrays.asList(lineno,  header));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(lineno,  header));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(lineno,  header));	  set.addAll(Arrays.asList(escape,    header));    	non-compiled	[CE]  	94	None	replace
505	[BUG]  [BUGGY]  set.add(Arrays.asList(set.size()));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(set.size()));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(set.size()));	  set.addAll(Arrays.asList(set.length));    	non-compiled	[CE]  	46	None	replace
506	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  commentStart,  commentStart)  }  );  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  commentStart,  commentStart)  }  );  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  commentStart,  commentStart)  }  );	  set.addAll(Arrays.asList(escape,    commentStart));    	non-compiled	[CE]  	24	None	replace
507	[BUG]  [BUGGY]  set.addAll(Arrays.asList(escape.length  -  1));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(escape.length  -  1));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(escape.length  -  1));	  set.addAll(Arrays.asList(header.length    -    1));    	non-compiled	[CE]  	76	None	replace
508	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.toString()  +  ')');  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.toString()  +  ')');  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header.toString()  +  ')');	  set.addAll(Arrays.asList(new    String[]    {    header.toString()    }    ));    	non-compiled	[CE]  	52	None	replace
509	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.toString()  +   "));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.toString()  +   "));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header.toString()  +   "));	  set.addAll(Arrays.asList(new    String[]    {    header.toString()    }    ));    	non-compiled	[CE]  	52	None	replace
510	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.toString()  +  1  }  ));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.toString()  +  1  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header.toString()  +  1  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header.toString()    }    ));    	non-compiled	[CE]  	52	None	replace
511	[BUG]  [BUGGY]  final  Set  <  String>  set  =  Sets.newLinkedHashSet();  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set  =  Sets.newLinkedHashSet();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  Sets.newLinkedHashSet();	  final    Set    <    String>    set    =    Sets.newHashSet();    	non-compiled	[CE]  	31	None	replace
512	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  delimiter,  header  }  ));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  delimiter,  header  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  delimiter,  header  }  ));	  set.add(Arrays.asList(new    String[]    {    header,    delimiter    }    ));    	non-compiled	[CE]  	86	None	replace
513	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  delimiter,  c  }  ));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  delimiter,  c  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  delimiter,  c  }  ));	  set.add(Arrays.asList(new    String[]    {    header,    delimiter    }    ));    	non-compiled	[CE]  	86	None	replace
514	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  delimiter,  quoteChar  }  ));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  delimiter,  quoteChar  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  delimiter,  quoteChar  }  ));	  set.add(Arrays.asList(new    String[]    {    header,    delimiter    }    ));    	non-compiled	[CE]  	86	None	replace
515	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.length,  header.length));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.length,  header.length));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header.length,  header.length));	  set.add(Arrays.asList(new    String[]    {    header.length    }    ));    	non-compiled	[CE]  	40	None	replace
516	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.length,  header.length));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.length,  header.length));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header.length,  header.length));	  set.addAll(Arrays.asList(new    String[]    {    header.length    }    ));    	non-compiled	[CE]  	51	None	replace
517	[BUG]  [BUGGY]  set.addAll(Arrays.asList(header,  commentStart.length));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(header,  commentStart.length));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(header,  commentStart.length));	  set.addAll(Arrays.asList(commentStart,    header.length));    	non-compiled	[CE]  	26	None	replace
518	[BUG]  [BUGGY]  set.addAll(Arrays.asList(delimiter,  header.length));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(delimiter,  header.length));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(delimiter,  header.length));	  set.addAll(Arrays.asList(commentStart,    header.length));    	non-compiled	[CE]  	26	None	replace
519	[BUG]  [BUGGY]  Character[]  header  =  quoteChar(c,  delimiter,  set.size());  [CE]  [FE]                                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Character[]  header  =  quoteChar(c,  delimiter,  set.size());  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Character[]  header  =  quoteChar(c,  delimiter,  set.size());	  Character[]    header    =    quoteChar(c,    delimiter);    	non-compiled	[CE]  	92	None	replace
520	[BUG]  [BUGGY]  Character[]  header  =  quoteChar(c,  escape);  [CE]  [FE]                                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Character[]  header  =  quoteChar(c,  escape);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Character[]  header  =  quoteChar(c,  escape);	  Character[]    header    =    quoteChar(c,    delimiter);    	non-compiled	[CE]  	92	None	replace
521	[BUG]  [BUGGY]  Character[]  header  =  quoteChar(escape,  delimiter);  [CE]  [FE]                                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Character[]  header  =  quoteChar(escape,  delimiter);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Character[]  header  =  quoteChar(escape,  delimiter);	  Character[]    header    =    quoteChar(c,    delimiter);    	non-compiled	[CE]  	92	None	replace
522	[BUG]  [BUGGY]  Set  <  String>  set  =  Sets.newHashSet(templateChar);  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Set  <  String>  set  =  Sets.newHashSet(templateChar);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Set  <  String>  set  =  Sets.newHashSet(templateChar);	  Set    <    String>    set    =    Sets.newHashSet(set);    	non-compiled	[CE]  	34	None	replace
523	[BUG]  [BUGGY]  set.add(Arrays.asList(escape,  commentStart));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(escape,  commentStart));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(escape,  commentStart));	  set.addAll(Arrays.asList(delimiter,    commentStart));    	non-compiled	[CE]  	96	None	replace
524	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  if(  }  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  if(  }  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  if(  }	  String[]    header    =    set.toArray(new    String[set.size()    ]);    for(int    i    =    0;    i    <    header.length;    ++i)    {    final    Set    <    String>    set    =    set.get(i);    if(    	non-compiled	[CE]  	69	None	replace
525	[BUG]  [BUGGY]  set.addAll(Arrays.asList(ceiler));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(ceiler));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(ceiler));	  set.addAll(Arrays.asList(delimiter));    	non-compiled	[CE]  	79	None	replace
526	[BUG]  [BUGGY]  set.addAll(Arrays.asList(header,  escapeCharacter  + "));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(header,  escapeCharacter  + "));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(header,  escapeCharacter  + "));	  set.addAll(Arrays.asList(header,    commentStart    +       "));    	non-compiled	[CE]  	74	None	replace
527	[BUG]  [BUGGY]  set.addAll(Arrays.asList(escape,  commentStart  +   "));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(escape,  commentStart  +   "));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(escape,  commentStart  +   "));	  set.addAll(Arrays.asList(header,    commentStart    +       "));    	non-compiled	[CE]  	74	None	replace
528	[BUG]  [BUGGY]  final  Set  <  String>  set  =  set.toArray(new  HashSet  <  String>(header.length));  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set  =  set.toArray(new  HashSet  <  String>(header.length));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  set.toArray(new  HashSet  <  String>(header.length));	  final    Set    <    String>    set    =    set.keySet();    	non-compiled	[CE]  	68	None	replace
529	[BUG]  [BUGGY]  final  Set  <  String>  set  =  set.toArray(new  HashSet  <  String>());  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set  =  set.toArray(new  HashSet  <  String>());  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  set.toArray(new  HashSet  <  String>());	  final    Set    <    String>    set    =    set.keySet();    	non-compiled	[CE]  	68	None	replace
530	[BUG]  [BUGGY]  final  Set  <  String>  set  =  set.toArray(new  HashSet  <  String>(escape));  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  set  =  set.toArray(new  HashSet  <  String>(escape));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  set.toArray(new  HashSet  <  String>(escape));	  final    Set    <    String>    set    =    set.keySet();    	non-compiled	[CE]  	68	None	replace
531	[BUG]  [BUGGY]  final  Set  <  String>  header  =  set.iterator().next().escape();  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  header  =  set.iterator().next().escape();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  header  =  set.iterator().next().escape();	  final    Set    <    String>    header    =    set.iterator().next().getValue();    	non-compiled	[CE]  	89	None	replace
532	[BUG]  [BUGGY]  final  Set  <  String>  header  =  set.iterator().next().escapeChar();  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  final  Set  <  String>  header  =  set.iterator().next().escapeChar();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  header  =  set.iterator().next().escapeChar();	  final    Set    <    String>    header    =    set.iterator().next().getValue();    	non-compiled	[CE]  	89	None	replace
533	[BUG]  [BUGGY]  set.addAll(Arrays.asList(c),  escape);  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(c),  escape);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(c),  escape);	  set.addAll(Arrays.asList(c));    	non-compiled	[CE]  	11	None	replace
534	[BUG]  [BUGGY]  set.addAll(Arrays.asList(c),  escapeChar);  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(c),  escapeChar);  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(c),  escapeChar);	  set.addAll(Arrays.asList(c));    	non-compiled	[CE]  	11	None	replace
535	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  quoteChar)  }  );  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  quoteChar)  }  );  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  quoteChar)  }  );	  set.add(Arrays.asList(quoteChar));    	non-compiled	[CE]  	8	None	replace
536	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  commentStart,  escapeChar));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  commentStart,  escapeChar));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  commentStart,  escapeChar));	  set.addAll(Arrays.asList(new    String[]    {    commentStart    }    ));    	non-compiled	[CE]  	77	None	replace
537	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  commentStart,  null));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  commentStart,  null));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  commentStart,  null));	  set.addAll(Arrays.asList(new    String[]    {    commentStart    }    ));    	non-compiled	[CE]  	77	None	replace
538	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  commentStart,  escapeChar)  }  ));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  commentStart,  escapeChar)  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  commentStart,  escapeChar)  }  ));	  set.addAll(Arrays.asList(new    String[]    {    commentStart    }    ));    	non-compiled	[CE]  	77	None	replace
539	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  escapeCharacter  }  ));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  escapeCharacter  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  escapeCharacter  }  ));	  set.add(Arrays.asList(new    String[]    {    header,    commentStart    }    ));    	non-compiled	[CE]  	41	None	replace
540	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  quoteChar,  commentStart  }  ));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  quoteChar,  commentStart  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  quoteChar,  commentStart  }  ));	  set.add(Arrays.asList(new    String[]    {    header,    commentStart    }    ));    	non-compiled	[CE]  	41	None	replace
541	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  delimiter,  c  }  ));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  delimiter,  c  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  delimiter,  c  }  ));	  set.add(Arrays.asList(new    String[]    {    header,    c    }    ));    	non-compiled	[CE]  	57	None	replace
542	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  c,  escapeChar  }  ));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  set.add(Arrays.asList(new  String[]  {  c,  escapeChar  }  ));  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  c,  escapeChar  }  ));	  set.add(Arrays.asList(new    String[]    {    header,    c    }    ));    	non-compiled	[CE]  	57	None	replace
543	[BUG]  [BUGGY]  Set  <  String>  header  =  set.entrySet().iterator().next();  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Set  <  String>  header  =  set.entrySet().iterator().next();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Set  <  String>  header  =  set.entrySet().iterator().next();	  Set    <    String>    header    =    set.iterator().next();    	non-compiled	[CE]  	88	None	replace
544	[BUG]  [BUGGY]  Set  <  String>  header  =  set.values().next();  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Set  <  String>  header  =  set.values().next();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Set  <  String>  header  =  set.values().next();	  Set    <    String>    header    =    set.iterator().next();    	non-compiled	[CE]  	88	None	replace
545	[BUG]  [BUGGY]  Set  <  String>  header  =  set.values().iterator().next();  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception      [CONTEXT]      throw  new  IllegalStateException(       "The  comment  start  and  the  escape  character  cannot  be  the  same  ('     "  +  commentStart  +       "')     ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(     "No  quotes  mode  set  but  no  escape  character  is  set     ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);      [BUGGY]  Set  <  String>  header  =  set.values().iterator().next();  [BUGGY]      if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(     "The  header  contains  duplicate  names:       "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Set  <  String>  header  =  set.values().iterator().next();	  Set    <    String>    header    =    set.iterator().next();    	non-compiled	[CE]  	88	None	replace
