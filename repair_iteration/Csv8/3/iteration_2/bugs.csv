bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  set.addAll(Arrays.asList(escapeSurroundingSpaces));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(escapeSurroundingSpaces));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(escapeSurroundingSpaces));	  set.addAll(Arrays.asList(relativeSpaces));    	non-compiled	[CE]  	10	None	replace
2	[BUG]  [BUGGY]  set.add(Arrays.asList(relativeSpaces));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.add(Arrays.asList(relativeSpaces));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(relativeSpaces));	  set.addAll(Arrays.asList(relativeSpaces));    	non-compiled	[CE]  	10	None	replace
3	[BUG]  [BUGGY]  set.addAll(Arrays.asList(relativeSpaces),  false);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(relativeSpaces),  false);  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(relativeSpaces),  false);	  set.addAll(Arrays.asList(relativeSpaces));    	non-compiled	[CE]  	10	None	replace
4	[BUG]  [BUGGY]  set.addAll(Arrays.asList(set));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(set));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(set));	  set.addAll(Arrays.asList(relativeSpaces));    	non-compiled	[CE]  	10	None	replace
5	[BUG]  [BUGGY]  set.add(Arrays.asList(commentStart));  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.add(Arrays.asList(commentStart));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(commentStart));	  set.add(Arrays.asList(escape));    	non-compiled	[CE]  	11	None	replace
6	[BUG]  [BUGGY]  set.add(Arrays.asList(quote));  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.add(Arrays.asList(quote));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(quote));	  set.add(Arrays.asList(escape));    	non-compiled	[CE]  	11	None	replace
7	[BUG]  [BUGGY]  set.add(Arrays.asList(recordSeparator));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.add(Arrays.asList(recordSeparator));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(recordSeparator));	  set.add(Arrays.asList(escape));    	non-compiled	[CE]  	11	None	replace
8	[BUG]  [BUGGY]  set.add(Arrays.asList(quoteChar));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.add(Arrays.asList(quoteChar));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(quoteChar));	  set.add(Arrays.asList(escape));    	non-compiled	[CE]  	11	None	replace
9	[BUG]  [BUGGY]  set.add(Arrays.asList(quoted));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.add(Arrays.asList(quoted));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(quoted));	  set.add(Arrays.asList(escape));    	non-compiled	[CE]  	11	None	replace
10	[BUG]  [BUGGY]  set.add(Arrays.asList(c));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.add(Arrays.asList(c));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(c));	  set.add(Arrays.asList(escape));    	non-compiled	[CE]  	11	None	replace
11	[BUG]  [BUGGY]  set.addAll(Arrays.asList(c));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(c));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(c));	  set.addAll(Arrays.asList(commentStart));    	non-compiled	[CE]  	5	None	replace
12	[BUG]  [BUGGY]  set.addAll(Arrays.asList(offset));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(offset));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(offset));	  set.addAll(Arrays.asList(commentStart));    	non-compiled	[CE]  	5	None	replace
13	[BUG]  [BUGGY]  set.addAll(Arrays.asList(escapeChar));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(escapeChar));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(escapeChar));	  set.addAll(Arrays.asList(commentStart));    	non-compiled	[CE]  	5	None	replace
14	[BUG]  [BUGGY]  final  Set  <  String>  set.addAll(Arrays.asList(header.length));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  final  Set  <  String>  set.addAll(Arrays.asList(header.length));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set.addAll(Arrays.asList(header.length));	  final    Set    <    String>    set.addAll(Arrays.asList(header));    	non-compiled	[CE]  	3	None	replace
15	[BUG]  [BUGGY]  final  List  <  String>  set.addAll(Arrays.asList(header));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  final  List  <  String>  set.addAll(Arrays.asList(header));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  List  <  String>  set.addAll(Arrays.asList(header));	  final    Set    <    String>    set.addAll(Arrays.asList(header));    	non-compiled	[CE]  	3	None	replace
16	[BUG]  [BUGGY]  final  ArrayList  <  String>  set.addAll(Arrays.asList(header));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  final  ArrayList  <  String>  set.addAll(Arrays.asList(header));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  ArrayList  <  String>  set.addAll(Arrays.asList(header));	  final    Set    <    String>    set.addAll(Arrays.asList(header));    	non-compiled	[CE]  	3	None	replace
17	[BUG]  [BUGGY]  final  Set  <  String>  set.addAll(Arrays.asList(escape));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  final  Set  <  String>  set.addAll(Arrays.asList(escape));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set.addAll(Arrays.asList(escape));	  final    Set    <    String>    set.addAll(Arrays.asList(header));    	non-compiled	[CE]  	3	None	replace
18	[BUG]  [BUGGY]  final  Set  <  String>  set.addAll(Arrays.asList(commentStart));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  final  Set  <  String>  set.addAll(Arrays.asList(commentStart));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set.addAll(Arrays.asList(commentStart));	  final    Set    <    String>    set.addAll(Arrays.asList(header));    	non-compiled	[CE]  	3	None	replace
19	[BUG]  [BUGGY]  final  Set  <  String>  set.addAll(Arrays.asList(escapeChar));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  final  Set  <  String>  set.addAll(Arrays.asList(escapeChar));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set.addAll(Arrays.asList(escapeChar));	  final    Set    <    String>    set.addAll(Arrays.asList(header));    	non-compiled	[CE]  	3	None	replace
20	[BUG]  [BUGGY]  set.addAll(Arrays.asList(quoteChar));  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(quoteChar));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(quoteChar));	  set.addAll(Arrays.asList(escape));    	non-compiled	[CE]  	1	None	replace
21	[BUG]  [BUGGY]  set.addAll(Arrays.asList(quote));  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(quote));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(quote));	  set.addAll(Arrays.asList(escape));    	non-compiled	[CE]  	1	None	replace
22	[BUG]  [BUGGY]  set.addAll(Arrays.asList(quoted));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(quoted));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(quoted));	  set.addAll(Arrays.asList(escape));    	non-compiled	[CE]  	1	None	replace
23	[BUG]  [BUGGY]  set.addAll(Arrays.asList(header,  escape));  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(header,  escape));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(header,  escape));	  set.addAll(Arrays.asList(header,    commentStart));    	non-compiled	[CE]  	9	None	replace
24	[BUG]  [BUGGY]  set.addAll(Arrays.asList(escape,  commentStart));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(escape,  commentStart));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(escape,  commentStart));	  set.addAll(Arrays.asList(header,    commentStart));    	non-compiled	[CE]  	9	None	replace
25	[BUG]  [BUGGY]  set.addAll(Arrays.asList(header,  quoteChar));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(header,  quoteChar));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(header,  quoteChar));	  set.addAll(Arrays.asList(header,    commentStart));    	non-compiled	[CE]  	9	None	replace
26	[BUG]  [BUGGY]  set.addAll(Arrays.asList(commentStart,  header.length));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(commentStart,  header.length));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(commentStart,  header.length));	  set.addAll(Arrays.asList(header,    commentStart));    	non-compiled	[CE]  	9	None	replace
27	[BUG]  [BUGGY]  set.addAll(Arrays.asList(escapeChar,  commentStart));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(escapeChar,  commentStart));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(escapeChar,  commentStart));	  set.addAll(Arrays.asList(header,    commentStart));    	non-compiled	[CE]  	9	None	replace
28	[BUG]  [BUGGY]  set.addAll(Arrays.asList(c,  commentStart));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(c,  commentStart));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(c,  commentStart));	  set.addAll(Arrays.asList(header,    commentStart));    	non-compiled	[CE]  	9	None	replace
29	[BUG]  [BUGGY]  set.addAll(Arrays.asList(header,  escapeChar));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(header,  escapeChar));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(header,  escapeChar));	  set.addAll(Arrays.asList(header,    commentStart));    	non-compiled	[CE]  	9	None	replace
30	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	String[]  header  =  set.toArray(new  String[set.size()  ]);	      	non-compiled	[CE]  	7	None	replace
31	[BUG]  [BUGGY]  final  Set  <  String>  set  =  Sets.newHashSet();  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  final  Set  <  String>  set  =  Sets.newHashSet();  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  Sets.newHashSet();	      	non-compiled	[CE]  	7	None	replace
32	[BUG]  [BUGGY]  Set  <  String>  set  =  Sets.newHashSet();  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  Set  <  String>  set  =  Sets.newHashSet();  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Set  <  String>  set  =  Sets.newHashSet();	      	non-compiled	[CE]  	7	None	replace
33	[BUG]  [BUGGY]  final  Set  <  String>  set  =  Sets.newHashSet(set);  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  final  Set  <  String>  set  =  Sets.newHashSet(set);  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  Sets.newHashSet(set);	      	non-compiled	[CE]  	7	None	replace
34	[BUG]  [BUGGY]  Set  <  String>  set  =  Sets.newHashSet(set);  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  Set  <  String>  set  =  Sets.newHashSet(set);  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Set  <  String>  set  =  Sets.newHashSet(set);	      	non-compiled	[CE]  	7	None	replace
35	[BUG]  [BUGGY]  final  Set  <  String>  set  =  set.iterator().next();  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  final  Set  <  String>  set  =  set.iterator().next();  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  set.iterator().next();	      	non-compiled	[CE]  	7	None	replace
36	[BUG]  [BUGGY]  final  Set  <  String>  set  =  Sets.newHashSet(header.length);  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  final  Set  <  String>  set  =  Sets.newHashSet(header.length);  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  Sets.newHashSet(header.length);	      	non-compiled	[CE]  	7	None	replace
37	[BUG]  [BUGGY]  set.add(Arrays.asList(header.length));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.add(Arrays.asList(header.length));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(header.length));	  set.add(Arrays.asList(header));    	non-compiled	[CE]  	6	None	replace
38	[BUG]  [BUGGY]  final  Set  <  String>  set.add(Arrays.asList(header));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  final  Set  <  String>  set.add(Arrays.asList(header));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set.add(Arrays.asList(header));	  set.add(Arrays.asList(header));    	non-compiled	[CE]  	6	None	replace
39	[BUG]  [BUGGY]  set.add(Arrays.asList(delimiter));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.add(Arrays.asList(delimiter));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(delimiter));	  set.add(Arrays.asList(header));    	non-compiled	[CE]  	6	None	replace
40	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.length  }  ));  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.length  }  ));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header.length  }  ));	  set.add(Arrays.asList(new    String[]    {    header    }    ));    	non-compiled	[CE]  	12	None	replace
41	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  commentStart  }  ));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  commentStart  }  ));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  commentStart  }  ));	  set.add(Arrays.asList(new    String[]    {    header    }    ));    	non-compiled	[CE]  	12	None	replace
42	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.toString()  }  ));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.add(Arrays.asList(new  String[]  {  header.toString()  }  ));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header.toString()  }  ));	  set.add(Arrays.asList(new    String[]    {    header    }    ));    	non-compiled	[CE]  	12	None	replace
43	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  quoteChar  }  ));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  quoteChar  }  ));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  quoteChar  }  ));	  set.add(Arrays.asList(new    String[]    {    header    }    ));    	non-compiled	[CE]  	12	None	replace
44	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  description  }  ));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  description  }  ));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  description  }  ));	  set.add(Arrays.asList(new    String[]    {    header    }    ));    	non-compiled	[CE]  	12	None	replace
45	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  null));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  null));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  null));	  set.add(Arrays.asList(new    String[]    {    header    }    ));    	non-compiled	[CE]  	12	None	replace
46	[BUG]  [BUGGY]  set.addAll(Arrays.asList(set.length));  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(set.length));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(set.length));	  set.addAll(Arrays.asList(header.length));    	non-compiled	[CE]  	2	None	replace
47	[BUG]  [BUGGY]  set.addAll(Arrays.asList(header.length  +  1));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(header.length  +  1));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(header.length  +  1));	  set.addAll(Arrays.asList(header.length));    	non-compiled	[CE]  	2	None	replace
48	[BUG]  [BUGGY]  set.addAll(Arrays.asList(recordSeparator,  header.length));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(recordSeparator,  header.length));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(recordSeparator,  header.length));	  set.addAll(Arrays.asList(recordSeparator));    	non-compiled	[CE]  	4	None	replace
49	[BUG]  [BUGGY]  set.addAll(Arrays.asList(recordSeparator,  commentStart));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(recordSeparator,  commentStart));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(recordSeparator,  commentStart));	  set.addAll(Arrays.asList(recordSeparator));    	non-compiled	[CE]  	4	None	replace
50	[BUG]  [BUGGY]  set.addAll(Arrays.asList(recordSeparator),  set);  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(recordSeparator),  set);  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(recordSeparator),  set);	  set.addAll(Arrays.asList(recordSeparator));    	non-compiled	[CE]  	4	None	replace
51	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.length  }  ));  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.length  }  ));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header.length  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header    }    ));    	non-compiled	[CE]  	8	None	replace
52	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.toString()  }  ));  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header.toString()  }  ));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header.toString()  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header    }    ));    	non-compiled	[CE]  	8	None	replace
53	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  description  }  ));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  description  }  ));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  description  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header    }    ));    	non-compiled	[CE]  	8	None	replace
54	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  quoteChar  }  ));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  quoteChar  }  ));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  quoteChar  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header    }    ));    	non-compiled	[CE]  	8	None	replace
55	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  nullString  }  ));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  nullString  }  ));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  nullString  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header    }    ));    	non-compiled	[CE]  	8	None	replace
56	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  null));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  null));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  null));	  set.addAll(Arrays.asList(new    String[]    {    header    }    ));    	non-compiled	[CE]  	8	None	replace
57	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  c  }  ));  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  c  }  ));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  c  }  ));	  set.add(Arrays.asList(new    String[]    {    header    }    ));    	non-compiled	[CE]  	12	None	replace
58	[BUG]  [BUGGY]  set.add(new  String[]  {  header  }  ));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.add(new  String[]  {  header  }  ));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(new  String[]  {  header  }  ));	  set.add(Arrays.asList(new    String[]    {    header    }    ));    	non-compiled	[CE]  	12	None	replace
59	[BUG]  [BUGGY]  set.addAll(Arrays.asList(recordSeparator,  header));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(recordSeparator,  header));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(recordSeparator,  header));	  set.addAll(Arrays.asList(recordSeparator));    	non-compiled	[CE]  	4	None	replace
60	[BUG]  [BUGGY]  set.add(Arrays.asList(labelSurroundingSpaces));  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.add(Arrays.asList(labelSurroundingSpaces));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(labelSurroundingSpaces));	  set.add(Arrays.asList(escape));    	non-compiled	[CE]  	11	None	replace
61	[BUG]  [BUGGY]  set.add(Arrays.asList(relativeEmptyLines));  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.add(Arrays.asList(relativeEmptyLines));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(relativeEmptyLines));	  set.add(Arrays.asList(escape));    	non-compiled	[CE]  	11	None	replace
62	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  recordSeparator  }  ));  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  recordSeparator  }  ));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  recordSeparator  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header    }    ));    	non-compiled	[CE]  	8	None	replace
63	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  null  }  ));  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  null  }  ));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  null  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header    }    ));    	non-compiled	[CE]  	8	None	replace
64	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  commentStart  }  ));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  commentStart  }  ));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  commentStart  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header    }    ));    	non-compiled	[CE]  	8	None	replace
65	[BUG]  [BUGGY]  set.addAll(Arrays.asList(labels));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(labels));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(labels));	  set.addAll(Arrays.asList(relativeSpaces));    	non-compiled	[CE]  	10	None	replace
66	[BUG]  [BUGGY]  Character[]  header  =(Character[])set.toArray(new  Character[set.size()  ]);  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  Character[]  header  =(Character[])set.toArray(new  Character[set.size()  ]);  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Character[]  header  =(Character[])set.toArray(new  Character[set.size()  ]);	      	non-compiled	[CE]  	7	None	replace
67	[BUG]  [BUGGY]  Character[]  header  =(Character[])this.labels.toArray(new  Character[set.size()  ]);  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  Character[]  header  =(Character[])this.labels.toArray(new  Character[set.size()  ]);  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Character[]  header  =(Character[])this.labels.toArray(new  Character[set.size()  ]);	      	non-compiled	[CE]  	7	None	replace
68	[BUG]  [BUGGY]  final  Set  <  String>  set  =  set.keySet();  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  final  Set  <  String>  set  =  set.keySet();  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  set.keySet();	      	non-compiled	[CE]  	7	None	replace
69	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  if(  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  if(  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  if(	      	non-compiled	[CE]  	7	None	replace
70	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length);  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length);  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length);	      	non-compiled	[CE]  	7	None	replace
71	[BUG]  [BUGGY]  final  Set  <  String>  set  =  Arrays.asList(header);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  final  Set  <  String>  set  =  Arrays.asList(header);  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  set  =  Arrays.asList(header);	  final    Set    <    String>    set.addAll(Arrays.asList(header));    	non-compiled	[CE]  	3	None	replace
72	[BUG]  [BUGGY]  set.addAll(Arrays.asList(header,  commentStart  +  1));  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(header,  commentStart  +  1));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(header,  commentStart  +  1));	  set.addAll(Arrays.asList(header,    commentStart));    	non-compiled	[CE]  	9	None	replace
73	[BUG]  [BUGGY]  set.addAll(Arrays.asList(header,  0));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(header,  0));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(header,  0));	  set.addAll(Arrays.asList(header,    commentStart));    	non-compiled	[CE]  	9	None	replace
74	[BUG]  [BUGGY]  set.addAll(Arrays.asList(header,  commentStart  +   "));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(header,  commentStart  +   "));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(header,  commentStart  +   "));	  set.addAll(Arrays.asList(header,    commentStart));    	non-compiled	[CE]  	9	None	replace
75	[BUG]  [BUGGY]  set.addAll(Arrays.asList(length));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(length));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(length));	  set.addAll(Arrays.asList(commentStart));    	non-compiled	[CE]  	5	None	replace
76	[BUG]  [BUGGY]  set.addAll(Arrays.asList(header.length  -  1));  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(header.length  -  1));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(header.length  -  1));	  set.addAll(Arrays.asList(header.length));    	non-compiled	[CE]  	2	None	replace
77	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  commentStart  }  ));  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  commentStart  }  ));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  commentStart  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header    }    ));    	non-compiled	[CE]  	8	None	replace
78	[BUG]  [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  delimiter  }  ));  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(new  String[]  {  header,  delimiter  }  ));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(new  String[]  {  header,  delimiter  }  ));	  set.addAll(Arrays.asList(new    String[]    {    header    }    ));    	non-compiled	[CE]  	8	None	replace
79	[BUG]  [BUGGY]  set.addAll(Arrays.asList(delimiter));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(delimiter));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(delimiter));	  set.addAll(Arrays.asList(recordSeparator));    	non-compiled	[CE]  	4	None	replace
80	[BUG]  [BUGGY]  set.addAll(Arrays.asList(ceilingChar));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(ceilingChar));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(ceilingChar));	  set.addAll(Arrays.asList(commentStart));    	non-compiled	[CE]  	5	None	replace
81	[BUG]  [BUGGY]  set.add(Arrays.asList(copyHeaderRecord));  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.add(Arrays.asList(copyHeaderRecord));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(copyHeaderRecord));	  set.add(Arrays.asList(escape));    	non-compiled	[CE]  	11	None	replace
82	[BUG]  [BUGGY]  set.add(Arrays.asList(labelSeparator));  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.add(Arrays.asList(labelSeparator));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(labelSeparator));	  set.add(Arrays.asList(escape));    	non-compiled	[CE]  	11	None	replace
83	[BUG]  [BUGGY]  set.add(Arrays.asList(backer));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.add(Arrays.asList(backer));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(backer));	  set.add(Arrays.asList(escape));    	non-compiled	[CE]  	11	None	replace
84	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  commentStart  }  ));  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.add(Arrays.asList(new  String[]  {  commentStart  }  ));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  commentStart  }  ));	  set.add(Arrays.asList(new    String[]    {    header    }    ));    	non-compiled	[CE]  	12	None	replace
85	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  nullString  }  ));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  nullString  }  ));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  nullString  }  ));	  set.add(Arrays.asList(new    String[]    {    header    }    ));    	non-compiled	[CE]  	12	None	replace
86	[BUG]  [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  delimiter  }  ));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.add(Arrays.asList(new  String[]  {  header,  delimiter  }  ));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.add(Arrays.asList(new  String[]  {  header,  delimiter  }  ));	  set.add(Arrays.asList(new    String[]    {    header    }    ));    	non-compiled	[CE]  	12	None	replace
87	[BUG]  [BUGGY]  final  Set  <  String>  header  =  set.iterator().next();  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  final  Set  <  String>  header  =  set.iterator().next();  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  header  =  set.iterator().next();	      	non-compiled	[CE]  	7	None	replace
88	[BUG]  [BUGGY]  Set  <  String>  header  =  set.iterator().next();  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  Set  <  String>  header  =  set.iterator().next();  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Set  <  String>  header  =  set.iterator().next();	      	non-compiled	[CE]  	7	None	replace
89	[BUG]  [BUGGY]  final  Set  <  String>  header  =  set.iterator().next().getValue();  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  final  Set  <  String>  header  =  set.iterator().next().getValue();  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  header  =  set.iterator().next().getValue();	      	non-compiled	[CE]  	7	None	replace
90	[BUG]  [BUGGY]  final  Set  <  String>  header  =  set.keySet();  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  final  Set  <  String>  header  =  set.keySet();  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  header  =  set.keySet();	      	non-compiled	[CE]  	7	None	replace
91	[BUG]  [BUGGY]  final  Set  <  String>  header  =  set.size();  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  final  Set  <  String>  header  =  set.size();  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  header  =  set.size();	      	non-compiled	[CE]  	7	None	replace
92	[BUG]  [BUGGY]  Character[]  header  =  quoteChar(c,  delimiter);  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  Character[]  header  =  quoteChar(c,  delimiter);  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	Character[]  header  =  quoteChar(c,  delimiter);	      	non-compiled	[CE]  	7	None	replace
93	[BUG]  [BUGGY]  final  Set  <  String>  header  =  set.iterator().next().getKey();  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  final  Set  <  String>  header  =  set.iterator().next().getKey();  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	final  Set  <  String>  header  =  set.iterator().next().getKey();	      	non-compiled	[CE]  	7	None	replace
94	[BUG]  [BUGGY]  set.addAll(Arrays.asList(escape,  header));  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(escape,  header));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(escape,  header));	  set.addAll(Arrays.asList(header,    commentStart));    	non-compiled	[CE]  	9	None	replace
95	[BUG]  [BUGGY]  set.addAll(Arrays.asList(escapeChar,  header));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(escapeChar,  header));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(escapeChar,  header));	  set.addAll(Arrays.asList(header,    commentStart));    	non-compiled	[CE]  	9	None	replace
96	[BUG]  [BUGGY]  set.addAll(Arrays.asList(delimiter,  commentStart));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(delimiter,  commentStart));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(delimiter,  commentStart));	  set.addAll(Arrays.asList(header,    commentStart));    	non-compiled	[CE]  	9	None	replace
97	[BUG]  [BUGGY]  set.addAll(Arrays.asList(labelSeparator));  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(labelSeparator));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(labelSeparator));	  set.addAll(Arrays.asList(escape));    	non-compiled	[CE]  	1	None	replace
98	[BUG]  [BUGGY]  set.addAll(Arrays.asList(escape.length));  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);    [BUGGY]  set.addAll(Arrays.asList(escape.length));  [BUGGY]    if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	set.addAll(Arrays.asList(escape.length));	  set.addAll(Arrays.asList(header.length));    	non-compiled	[CE]  	2	None	replace
