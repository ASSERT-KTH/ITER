bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] throw new IllegalStateException("The header contains duplicate names: " + Arrays.toString(header)); [FE] java.lang.Exception: Unexpected exception [CONTEXT] } if (escape == null && quotePolicy == Quote.NONE) { throw new IllegalStateException("No quotes mode set but no escape character is set"); } if (header != null) { final Set<String> set = new HashSet<String>(header.length); set.addAll(Arrays.asList(header)); if (set.size() != header.length) { [BUGGY] throw new IllegalStateException("The header contains duplicate names: " + Arrays.toString(header)); [BUGGY] } } } [CLASS] CSVFormat [METHOD] validate [RETURN_TYPE] void  [VARIABLES] Quote quotePolicy boolean ignoreEmptyLines ignoreSurroundingSpaces skipHeaderRecord Set set Character c commentStart escape quoteChar char c delimiter CSVFormat DEFAULT EXCEL MYSQL RFC4180 TDF other String nullString recordSeparator String[] header long serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	1.0	669	669	1	replace	
2	[BUG] [BUGGY] [FE] java.lang.Exception: Unexpected exception [CONTEXT] } if (escape == null && quotePolicy == Quote.NONE) { throw new IllegalStateException("No quotes mode set but no escape character is set"); } if (header != null) { final Set<String> set = new HashSet<String>(header.length); set.addAll(Arrays.asList(header)); if (set.size() != header.length) { [BUGGY] [BUGGY] throw new IllegalStateException("The header contains duplicate names: " + Arrays.toString(header)); } } } [CLASS] CSVFormat [METHOD] validate [RETURN_TYPE] void  [VARIABLES] Quote quotePolicy boolean ignoreEmptyLines ignoreSurroundingSpaces skipHeaderRecord Set set Character c commentStart escape quoteChar char c delimiter CSVFormat DEFAULT EXCEL MYSQL RFC4180 TDF other String nullString recordSeparator String[] header long serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	1.0	669	669	1	add	
3	[BUG] [BUGGY] final Set<String> set = new HashSet<String>(header.length); [FE] java.lang.Exception: Unexpected exception [CONTEXT] if (escape != null && escape.equals(commentStart)) { throw new IllegalStateException( "The comment start and the escape character cannot be the same ('" + commentStart + "')"); } if (escape == null && quotePolicy == Quote.NONE) { throw new IllegalStateException("No quotes mode set but no escape character is set"); } if (header != null) { [BUGGY] final Set<String> set = new HashSet<String>(header.length); [BUGGY] set.addAll(Arrays.asList(header)); if (set.size() != header.length) { throw new IllegalStateException("The header contains duplicate names: " + Arrays.toString(header)); } } } [CLASS] CSVFormat [METHOD] validate [RETURN_TYPE] void  [VARIABLES] Quote quotePolicy boolean ignoreEmptyLines ignoreSurroundingSpaces skipHeaderRecord Set set Character c commentStart escape quoteChar char c delimiter CSVFormat DEFAULT EXCEL MYSQL RFC4180 TDF other String nullString recordSeparator String[] header long serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	
4	[BUG] [BUGGY] [FE] java.lang.Exception: Unexpected exception [CONTEXT] if (escape != null && escape.equals(commentStart)) { throw new IllegalStateException( "The comment start and the escape character cannot be the same ('" + commentStart + "')"); } if (escape == null && quotePolicy == Quote.NONE) { throw new IllegalStateException("No quotes mode set but no escape character is set"); } if (header != null) { [BUGGY] [BUGGY] final Set<String> set = new HashSet<String>(header.length); set.addAll(Arrays.asList(header)); if (set.size() != header.length) { throw new IllegalStateException("The header contains duplicate names: " + Arrays.toString(header)); } } } [CLASS] CSVFormat [METHOD] validate [RETURN_TYPE] void  [VARIABLES] Quote quotePolicy boolean ignoreEmptyLines ignoreSurroundingSpaces skipHeaderRecord Set set Character c commentStart escape quoteChar char c delimiter CSVFormat DEFAULT EXCEL MYSQL RFC4180 TDF other String nullString recordSeparator String[] header long serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	add	
5	[BUG] [BUGGY] set.addAll(Arrays.asList(header)); [FE] java.lang.Exception: Unexpected exception [CONTEXT] throw new IllegalStateException( "The comment start and the escape character cannot be the same ('" + commentStart + "')"); } if (escape == null && quotePolicy == Quote.NONE) { throw new IllegalStateException("No quotes mode set but no escape character is set"); } if (header != null) { final Set<String> set = new HashSet<String>(header.length); [BUGGY] set.addAll(Arrays.asList(header)); [BUGGY] if (set.size() != header.length) { throw new IllegalStateException("The header contains duplicate names: " + Arrays.toString(header)); } } } [CLASS] CSVFormat [METHOD] validate [RETURN_TYPE] void  [VARIABLES] Quote quotePolicy boolean ignoreEmptyLines ignoreSurroundingSpaces skipHeaderRecord Set set Character c commentStart escape quoteChar char c delimiter CSVFormat DEFAULT EXCEL MYSQL RFC4180 TDF other String nullString recordSeparator String[] header long serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	replace	
6	[BUG] [BUGGY] [FE] java.lang.Exception: Unexpected exception [CONTEXT] throw new IllegalStateException( "The comment start and the escape character cannot be the same ('" + commentStart + "')"); } if (escape == null && quotePolicy == Quote.NONE) { throw new IllegalStateException("No quotes mode set but no escape character is set"); } if (header != null) { final Set<String> set = new HashSet<String>(header.length); [BUGGY] [BUGGY] set.addAll(Arrays.asList(header)); if (set.size() != header.length) { throw new IllegalStateException("The header contains duplicate names: " + Arrays.toString(header)); } } } [CLASS] CSVFormat [METHOD] validate [RETURN_TYPE] void  [VARIABLES] Quote quotePolicy boolean ignoreEmptyLines ignoreSurroundingSpaces skipHeaderRecord Set set Character c commentStart escape quoteChar char c delimiter CSVFormat DEFAULT EXCEL MYSQL RFC4180 TDF other String nullString recordSeparator String[] header long serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	667	667	1	add	
7	[BUG] [BUGGY] if (set.size() != header.length) { [FE] java.lang.Exception: Unexpected exception [CONTEXT] "The comment start and the escape character cannot be the same ('" + commentStart + "')"); } if (escape == null && quotePolicy == Quote.NONE) { throw new IllegalStateException("No quotes mode set but no escape character is set"); } if (header != null) { final Set<String> set = new HashSet<String>(header.length); set.addAll(Arrays.asList(header)); [BUGGY] if (set.size() != header.length) { [BUGGY] throw new IllegalStateException("The header contains duplicate names: " + Arrays.toString(header)); } } } [CLASS] CSVFormat [METHOD] validate [RETURN_TYPE] void  [VARIABLES] Quote quotePolicy boolean ignoreEmptyLines ignoreSurroundingSpaces skipHeaderRecord Set set Character c commentStart escape quoteChar char c delimiter CSVFormat DEFAULT EXCEL MYSQL RFC4180 TDF other String nullString recordSeparator String[] header long serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	
8	[BUG] [BUGGY] [FE] java.lang.Exception: Unexpected exception [CONTEXT] "The comment start and the escape character cannot be the same ('" + commentStart + "')"); } if (escape == null && quotePolicy == Quote.NONE) { throw new IllegalStateException("No quotes mode set but no escape character is set"); } if (header != null) { final Set<String> set = new HashSet<String>(header.length); set.addAll(Arrays.asList(header)); [BUGGY] [BUGGY] if (set.size() != header.length) { throw new IllegalStateException("The header contains duplicate names: " + Arrays.toString(header)); } } } [CLASS] CSVFormat [METHOD] validate [RETURN_TYPE] void  [VARIABLES] Quote quotePolicy boolean ignoreEmptyLines ignoreSurroundingSpaces skipHeaderRecord Set set Character c commentStart escape quoteChar char c delimiter CSVFormat DEFAULT EXCEL MYSQL RFC4180 TDF other String nullString recordSeparator String[] header long serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	add	
9	[BUG] [BUGGY] if (header != null) { [FE] java.lang.Exception: Unexpected exception [CONTEXT] if (escape != null && escape.equals(commentStart)) { throw new IllegalStateException( "The comment start and the escape character cannot be the same ('" + commentStart + "')"); } if (escape == null && quotePolicy == Quote.NONE) { throw new IllegalStateException("No quotes mode set but no escape character is set"); } [BUGGY] if (header != null) { [BUGGY] final Set<String> set = new HashSet<String>(header.length); set.addAll(Arrays.asList(header)); if (set.size() != header.length) { throw new IllegalStateException("The header contains duplicate names: " + Arrays.toString(header)); } } } [CLASS] CSVFormat [METHOD] validate [RETURN_TYPE] void  [VARIABLES] Quote quotePolicy boolean ignoreEmptyLines ignoreSurroundingSpaces skipHeaderRecord Set set Character c commentStart escape quoteChar char c delimiter CSVFormat DEFAULT EXCEL MYSQL RFC4180 TDF other String nullString recordSeparator String[] header long serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	replace	
10	[BUG] [BUGGY] [FE] java.lang.Exception: Unexpected exception [CONTEXT] if (escape != null && escape.equals(commentStart)) { throw new IllegalStateException( "The comment start and the escape character cannot be the same ('" + commentStart + "')"); } if (escape == null && quotePolicy == Quote.NONE) { throw new IllegalStateException("No quotes mode set but no escape character is set"); } [BUGGY] [BUGGY] if (header != null) { final Set<String> set = new HashSet<String>(header.length); set.addAll(Arrays.asList(header)); if (set.size() != header.length) { throw new IllegalStateException("The header contains duplicate names: " + Arrays.toString(header)); } } } [CLASS] CSVFormat [METHOD] validate [RETURN_TYPE] void  [VARIABLES] Quote quotePolicy boolean ignoreEmptyLines ignoreSurroundingSpaces skipHeaderRecord Set set Character c commentStart escape quoteChar char c delimiter CSVFormat DEFAULT EXCEL MYSQL RFC4180 TDF other String nullString recordSeparator String[] header long serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5773502691896258	665	665	1	add	
11	[BUG] [BUGGY] if (escape == null && quotePolicy == Quote.NONE) { [FE] java.lang.Exception: Unexpected exception [CONTEXT] if (quoteChar != null && quoteChar.equals(commentStart)) { throw new IllegalStateException( "The comment start character and the quoteChar cannot be the same ('" + commentStart + "')"); } if (escape != null && escape.equals(commentStart)) { throw new IllegalStateException( "The comment start and the escape character cannot be the same ('" + commentStart + "')"); } [BUGGY] if (escape == null && quotePolicy == Quote.NONE) { [BUGGY] throw new IllegalStateException("No quotes mode set but no escape character is set"); } if (header != null) { final Set<String> set = new HashSet<String>(header.length); set.addAll(Arrays.asList(header)); if (set.size() != header.length) { throw new IllegalStateException("The header contains duplicate names: " + Arrays.toString(header)); } } [CLASS] CSVFormat [METHOD] validate [RETURN_TYPE] void  [VARIABLES] Quote quotePolicy boolean ignoreEmptyLines ignoreSurroundingSpaces skipHeaderRecord Set set Character c commentStart escape quoteChar char c delimiter CSVFormat DEFAULT EXCEL MYSQL RFC4180 TDF other String nullString recordSeparator String[] header long serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5	661	661	1	replace	
12	[BUG] [BUGGY] [FE] java.lang.Exception: Unexpected exception [CONTEXT] if (quoteChar != null && quoteChar.equals(commentStart)) { throw new IllegalStateException( "The comment start character and the quoteChar cannot be the same ('" + commentStart + "')"); } if (escape != null && escape.equals(commentStart)) { throw new IllegalStateException( "The comment start and the escape character cannot be the same ('" + commentStart + "')"); } [BUGGY] [BUGGY] if (escape == null && quotePolicy == Quote.NONE) { throw new IllegalStateException("No quotes mode set but no escape character is set"); } if (header != null) { final Set<String> set = new HashSet<String>(header.length); set.addAll(Arrays.asList(header)); if (set.size() != header.length) { throw new IllegalStateException("The header contains duplicate names: " + Arrays.toString(header)); } } [CLASS] CSVFormat [METHOD] validate [RETURN_TYPE] void  [VARIABLES] Quote quotePolicy boolean ignoreEmptyLines ignoreSurroundingSpaces skipHeaderRecord Set set Character c commentStart escape quoteChar char c delimiter CSVFormat DEFAULT EXCEL MYSQL RFC4180 TDF other String nullString recordSeparator String[] header long serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.5	661	661	1	add	
13	[BUG] [BUGGY] this.header = header.clone(); [FE] java.lang.Exception: Unexpected exception [CONTEXT] this.quotePolicy = quotePolicy; this.commentStart = commentStart; this.escape = escape; this.ignoreSurroundingSpaces = ignoreSurroundingSpaces; this.ignoreEmptyLines = ignoreEmptyLines; this.recordSeparator = recordSeparator; this.nullString = nullString; if (header == null) { this.header = null; } else { [BUGGY] this.header = header.clone(); [BUGGY] } this.skipHeaderRecord = skipHeaderRecord; } [CLASS] CSVFormat [METHOD] <init> [RETURN_TYPE] String[],boolean)  final char delimiter Character quoteChar Quote quotePolicy Character commentStart Character escape final boolean ignoreSurroundingSpaces final boolean ignoreEmptyLines String recordSeparator String nullString String[] header final boolean skipHeaderRecord [VARIABLES] Quote quotePolicy boolean ignoreEmptyLines ignoreSurroundingSpaces skipHeaderRecord Character commentStart escape quoteChar char delimiter CSVFormat DEFAULT EXCEL MYSQL RFC4180 TDF String nullString recordSeparator String[] header long serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4472135954999579	316	316	1	replace	
14	[BUG] [BUGGY] [FE] java.lang.Exception: Unexpected exception [CONTEXT] this.quotePolicy = quotePolicy; this.commentStart = commentStart; this.escape = escape; this.ignoreSurroundingSpaces = ignoreSurroundingSpaces; this.ignoreEmptyLines = ignoreEmptyLines; this.recordSeparator = recordSeparator; this.nullString = nullString; if (header == null) { this.header = null; } else { [BUGGY] [BUGGY] this.header = header.clone(); } this.skipHeaderRecord = skipHeaderRecord; } [CLASS] CSVFormat [METHOD] <init> [RETURN_TYPE] String[],boolean)  final char delimiter Character quoteChar Quote quotePolicy Character commentStart Character escape final boolean ignoreSurroundingSpaces final boolean ignoreEmptyLines String recordSeparator String nullString String[] header final boolean skipHeaderRecord [VARIABLES] Quote quotePolicy boolean ignoreEmptyLines ignoreSurroundingSpaces skipHeaderRecord Character commentStart escape quoteChar char delimiter CSVFormat DEFAULT EXCEL MYSQL RFC4180 TDF String nullString recordSeparator String[] header long serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4472135954999579	316	316	1	add	
15	[BUG] [BUGGY] return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord); [FE] java.lang.Exception: Unexpected exception [CONTEXT] public CSVFormat withHeader(final String... header) { [BUGGY] return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,    ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord); [BUGGY] ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord); } [CLASS] CSVFormat [METHOD] withHeader [RETURN_TYPE] CSVFormat  header [VARIABLES] Quote quotePolicy boolean ignoreEmptyLines ignoreSurroundingSpaces skipHeaderRecord Character c commentStart escape quoteChar char c commentStart delimiter escape CSVFormat DEFAULT EXCEL MYSQL RFC4180 TDF other String nullString recordSeparator String[] header long serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4472135954999579	773	774	1	replace	
16	[BUG] [BUGGY] [FE] java.lang.Exception: Unexpected exception [CONTEXT] public CSVFormat withHeader(final String... header) { [BUGGY] [BUGGY] return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,    ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord); ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord); } [CLASS] CSVFormat [METHOD] withHeader [RETURN_TYPE] CSVFormat  header [VARIABLES] Quote quotePolicy boolean ignoreEmptyLines ignoreSurroundingSpaces skipHeaderRecord Character c commentStart escape quoteChar char c commentStart delimiter escape CSVFormat DEFAULT EXCEL MYSQL RFC4180 TDF other String nullString recordSeparator String[] header long serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4472135954999579	773	774	1	add	
17	[BUG] [BUGGY] if (escape != null && escape.equals(commentStart)) { [FE] java.lang.Exception: Unexpected exception [CONTEXT] if (commentStart != null && delimiter == commentStart.charValue()) { throw new IllegalStateException( "The comment start character and the delimiter cannot be the same ('" + commentStart + "')"); } if (quoteChar != null && quoteChar.equals(commentStart)) { throw new IllegalStateException( "The comment start character and the quoteChar cannot be the same ('" + commentStart + "')"); } [BUGGY] if (escape != null && escape.equals(commentStart)) { [BUGGY] throw new IllegalStateException( "The comment start and the escape character cannot be the same ('" + commentStart + "')"); } if (escape == null && quotePolicy == Quote.NONE) { throw new IllegalStateException("No quotes mode set but no escape character is set"); } if (header != null) { final Set<String> set = new HashSet<String>(header.length); [CLASS] CSVFormat [METHOD] validate [RETURN_TYPE] void  [VARIABLES] Quote quotePolicy boolean ignoreEmptyLines ignoreSurroundingSpaces skipHeaderRecord Set set Character c commentStart escape quoteChar char c delimiter CSVFormat DEFAULT EXCEL MYSQL RFC4180 TDF other String nullString recordSeparator String[] header long serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4082482904638631	656	656	1	replace	
18	[BUG] [BUGGY] [FE] java.lang.Exception: Unexpected exception [CONTEXT] if (commentStart != null && delimiter == commentStart.charValue()) { throw new IllegalStateException( "The comment start character and the delimiter cannot be the same ('" + commentStart + "')"); } if (quoteChar != null && quoteChar.equals(commentStart)) { throw new IllegalStateException( "The comment start character and the quoteChar cannot be the same ('" + commentStart + "')"); } [BUGGY] [BUGGY] if (escape != null && escape.equals(commentStart)) { throw new IllegalStateException( "The comment start and the escape character cannot be the same ('" + commentStart + "')"); } if (escape == null && quotePolicy == Quote.NONE) { throw new IllegalStateException("No quotes mode set but no escape character is set"); } if (header != null) { final Set<String> set = new HashSet<String>(header.length); [CLASS] CSVFormat [METHOD] validate [RETURN_TYPE] void  [VARIABLES] Quote quotePolicy boolean ignoreEmptyLines ignoreSurroundingSpaces skipHeaderRecord Set set Character c commentStart escape quoteChar char c delimiter CSVFormat DEFAULT EXCEL MYSQL RFC4180 TDF other String nullString recordSeparator String[] header long serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4082482904638631	656	656	1	add	
19	[BUG] [BUGGY] if (quoteChar != null && quoteChar.equals(commentStart)) { [FE] java.lang.Exception: Unexpected exception [CONTEXT] if (escape != null && delimiter == escape.charValue()) { throw new IllegalStateException( "The escape character and the delimiter cannot be the same ('" + escape + "')"); } if (commentStart != null && delimiter == commentStart.charValue()) { throw new IllegalStateException( "The comment start character and the delimiter cannot be the same ('" + commentStart + "')"); } [BUGGY] if (quoteChar != null && quoteChar.equals(commentStart)) { [BUGGY] throw new IllegalStateException( "The comment start character and the quoteChar cannot be the same ('" + commentStart + "')"); } if (escape != null && escape.equals(commentStart)) { throw new IllegalStateException( "The comment start and the escape character cannot be the same ('" + commentStart + "')"); } if (escape == null && quotePolicy == Quote.NONE) { [CLASS] CSVFormat [METHOD] validate [RETURN_TYPE] void  [VARIABLES] Quote quotePolicy boolean ignoreEmptyLines ignoreSurroundingSpaces skipHeaderRecord Set set Character c commentStart escape quoteChar char c delimiter CSVFormat DEFAULT EXCEL MYSQL RFC4180 TDF other String nullString recordSeparator String[] header long serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.35355339059327373	651	651	1	replace	
20	[BUG] [BUGGY] [FE] java.lang.Exception: Unexpected exception [CONTEXT] if (escape != null && delimiter == escape.charValue()) { throw new IllegalStateException( "The escape character and the delimiter cannot be the same ('" + escape + "')"); } if (commentStart != null && delimiter == commentStart.charValue()) { throw new IllegalStateException( "The comment start character and the delimiter cannot be the same ('" + commentStart + "')"); } [BUGGY] [BUGGY] if (quoteChar != null && quoteChar.equals(commentStart)) { throw new IllegalStateException( "The comment start character and the quoteChar cannot be the same ('" + commentStart + "')"); } if (escape != null && escape.equals(commentStart)) { throw new IllegalStateException( "The comment start and the escape character cannot be the same ('" + commentStart + "')"); } if (escape == null && quotePolicy == Quote.NONE) { [CLASS] CSVFormat [METHOD] validate [RETURN_TYPE] void  [VARIABLES] Quote quotePolicy boolean ignoreEmptyLines ignoreSurroundingSpaces skipHeaderRecord Set set Character c commentStart escape quoteChar char c delimiter CSVFormat DEFAULT EXCEL MYSQL RFC4180 TDF other String nullString recordSeparator String[] header long serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.35355339059327373	651	651	1	add	
21	[BUG] [BUGGY] if (commentStart != null && delimiter == commentStart.charValue()) { [FE] java.lang.Exception: Unexpected exception [CONTEXT] if (quoteChar != null && delimiter == quoteChar.charValue()) { throw new IllegalStateException( "The quoteChar character and the delimiter cannot be the same ('" + quoteChar + "')"); } if (escape != null && delimiter == escape.charValue()) { throw new IllegalStateException( "The escape character and the delimiter cannot be the same ('" + escape + "')"); } [BUGGY] if (commentStart != null && delimiter == commentStart.charValue()) { [BUGGY] throw new IllegalStateException( "The comment start character and the delimiter cannot be the same ('" + commentStart + "')"); } if (quoteChar != null && quoteChar.equals(commentStart)) { throw new IllegalStateException( "The comment start character and the quoteChar cannot be the same ('" + commentStart + "')"); } if (escape != null && escape.equals(commentStart)) { [CLASS] CSVFormat [METHOD] validate [RETURN_TYPE] void  [VARIABLES] Quote quotePolicy boolean ignoreEmptyLines ignoreSurroundingSpaces skipHeaderRecord Set set Character c commentStart escape quoteChar char c delimiter CSVFormat DEFAULT EXCEL MYSQL RFC4180 TDF other String nullString recordSeparator String[] header long serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.3333333333333333	646	646	1	replace	
22	[BUG] [BUGGY] [FE] java.lang.Exception: Unexpected exception [CONTEXT] if (quoteChar != null && delimiter == quoteChar.charValue()) { throw new IllegalStateException( "The quoteChar character and the delimiter cannot be the same ('" + quoteChar + "')"); } if (escape != null && delimiter == escape.charValue()) { throw new IllegalStateException( "The escape character and the delimiter cannot be the same ('" + escape + "')"); } [BUGGY] [BUGGY] if (commentStart != null && delimiter == commentStart.charValue()) { throw new IllegalStateException( "The comment start character and the delimiter cannot be the same ('" + commentStart + "')"); } if (quoteChar != null && quoteChar.equals(commentStart)) { throw new IllegalStateException( "The comment start character and the quoteChar cannot be the same ('" + commentStart + "')"); } if (escape != null && escape.equals(commentStart)) { [CLASS] CSVFormat [METHOD] validate [RETURN_TYPE] void  [VARIABLES] Quote quotePolicy boolean ignoreEmptyLines ignoreSurroundingSpaces skipHeaderRecord Set set Character c commentStart escape quoteChar char c delimiter CSVFormat DEFAULT EXCEL MYSQL RFC4180 TDF other String nullString recordSeparator String[] header long serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.3333333333333333	646	646	1	add	
23	[BUG] [BUGGY] if (escape != null && delimiter == escape.charValue()) { [FE] java.lang.Exception: Unexpected exception [CONTEXT] void validate() throws IllegalStateException { if (quoteChar != null && delimiter == quoteChar.charValue()) { throw new IllegalStateException( "The quoteChar character and the delimiter cannot be the same ('" + quoteChar + "')"); } [BUGGY] if (escape != null && delimiter == escape.charValue()) { [BUGGY] throw new IllegalStateException( "The escape character and the delimiter cannot be the same ('" + escape + "')"); } if (commentStart != null && delimiter == commentStart.charValue()) { throw new IllegalStateException( "The comment start character and the delimiter cannot be the same ('" + commentStart + "')"); } if (quoteChar != null && quoteChar.equals(commentStart)) { [CLASS] CSVFormat [METHOD] validate [RETURN_TYPE] void  [VARIABLES] Quote quotePolicy boolean ignoreEmptyLines ignoreSurroundingSpaces skipHeaderRecord Set set Character c commentStart escape quoteChar char c delimiter CSVFormat DEFAULT EXCEL MYSQL RFC4180 TDF other String nullString recordSeparator String[] header long serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.31622776601683794	641	641	1	replace	
24	[BUG] [BUGGY] [FE] java.lang.Exception: Unexpected exception [CONTEXT] void validate() throws IllegalStateException { if (quoteChar != null && delimiter == quoteChar.charValue()) { throw new IllegalStateException( "The quoteChar character and the delimiter cannot be the same ('" + quoteChar + "')"); } [BUGGY] [BUGGY] if (escape != null && delimiter == escape.charValue()) { throw new IllegalStateException( "The escape character and the delimiter cannot be the same ('" + escape + "')"); } if (commentStart != null && delimiter == commentStart.charValue()) { throw new IllegalStateException( "The comment start character and the delimiter cannot be the same ('" + commentStart + "')"); } if (quoteChar != null && quoteChar.equals(commentStart)) { [CLASS] CSVFormat [METHOD] validate [RETURN_TYPE] void  [VARIABLES] Quote quotePolicy boolean ignoreEmptyLines ignoreSurroundingSpaces skipHeaderRecord Set set Character c commentStart escape quoteChar char c delimiter CSVFormat DEFAULT EXCEL MYSQL RFC4180 TDF other String nullString recordSeparator String[] header long serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.31622776601683794	641	641	1	add	
25	[BUG] [BUGGY] if (quoteChar != null && delimiter == quoteChar.charValue()) { [FE] java.lang.Exception: Unexpected exception [CONTEXT] void validate() throws IllegalStateException { [BUGGY] if (quoteChar != null && delimiter == quoteChar.charValue()) { [BUGGY] throw new IllegalStateException( "The quoteChar character and the delimiter cannot be the same ('" + quoteChar + "')"); } if (escape != null && delimiter == escape.charValue()) { throw new IllegalStateException( "The escape character and the delimiter cannot be the same ('" + escape + "')"); } if (commentStart != null && delimiter == commentStart.charValue()) { [CLASS] CSVFormat [METHOD] validate [RETURN_TYPE] void  [VARIABLES] Quote quotePolicy boolean ignoreEmptyLines ignoreSurroundingSpaces skipHeaderRecord Set set Character c commentStart escape quoteChar char c delimiter CSVFormat DEFAULT EXCEL MYSQL RFC4180 TDF other String nullString recordSeparator String[] header long serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.30151134457776363	636	636	1	replace	
26	[BUG] [BUGGY] [FE] java.lang.Exception: Unexpected exception [CONTEXT] void validate() throws IllegalStateException { [BUGGY] [BUGGY] if (quoteChar != null && delimiter == quoteChar.charValue()) { throw new IllegalStateException( "The quoteChar character and the delimiter cannot be the same ('" + quoteChar + "')"); } if (escape != null && delimiter == escape.charValue()) { throw new IllegalStateException( "The escape character and the delimiter cannot be the same ('" + escape + "')"); } if (commentStart != null && delimiter == commentStart.charValue()) { [CLASS] CSVFormat [METHOD] validate [RETURN_TYPE] void  [VARIABLES] Quote quotePolicy boolean ignoreEmptyLines ignoreSurroundingSpaces skipHeaderRecord Set set Character c commentStart escape quoteChar char c delimiter CSVFormat DEFAULT EXCEL MYSQL RFC4180 TDF other String nullString recordSeparator String[] header long serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.30151134457776363	636	636	1	add	
