bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  ArrayList  <  String>  set  =  new  ArrayList  <  String>(header.length,  header.length);  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  ArrayList  <  String>  set  =  new  ArrayList  <  String>(header.length,  header.length);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  ArrayList  <  String>  set  =  new  ArrayList  <  String>(header.length,  header.length);	  final    Set    <    String>    set    =    new    HashSet    <    String>(header.length,    header.length);    	non-compiled	[CE]  	8	None	replace
2	[BUG]  [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length,  header.length  +  1);  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length,  header.length  +  1);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  Set  <  String>  set  =  new  HashSet  <  String>(header.length,  header.length  +  1);	  final    Set    <    String>    set    =    new    HashSet    <    String>(header.length,    header.length);    	non-compiled	[CE]  	8	None	replace
3	[BUG]  [BUGGY]  final  List  <  String>  set  =  new  ArrayList  <  String>(header.length,  header.length);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  List  <  String>  set  =  new  ArrayList  <  String>(header.length,  header.length);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  List  <  String>  set  =  new  ArrayList  <  String>(header.length,  header.length);	  final    Set    <    String>    set    =    new    HashSet    <    String>(header.length,    header.length);    	non-compiled	[CE]  	8	None	replace
4	[BUG]  [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length,  commentStart.length);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length,  commentStart.length);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  Set  <  String>  set  =  new  HashSet  <  String>(header.length,  commentStart.length);	  final    Set    <    String>    set    =    new    HashSet    <    String>(header.length,    header.length);    	non-compiled	[CE]  	8	None	replace
5	[BUG]  [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length,  header.length  -  1);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length,  header.length  -  1);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  Set  <  String>  set  =  new  HashSet  <  String>(header.length,  header.length  -  1);	  final    Set    <    String>    set    =    new    HashSet    <    String>(header.length,    header.length);    	non-compiled	[CE]  	8	None	replace
6	[BUG]  [BUGGY]  final  Set  <  String>  set  =  new  LinkedHashSet  <  String>(header.length,  header.length);  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  Set  <  String>  set  =  new  LinkedHashSet  <  String>(header.length,  header.length);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  Set  <  String>  set  =  new  LinkedHashSet  <  String>(header.length,  header.length);	  final    Set    <    String>    set    =    new    HashSet    <    String>(header.length,    header.length);    	non-compiled	[CE]  	8	None	replace
7	[BUG]  [BUGGY]  final  ArrayList  <  String>  set  =  new  ArrayList  <  String>(header.length  +  1);  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  ArrayList  <  String>  set  =  new  ArrayList  <  String>(header.length  +  1);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  ArrayList  <  String>  set  =  new  ArrayList  <  String>(header.length  +  1);	  final    ArrayList    <    String>    set    =    new    ArrayList    <    String>(header.length);    	non-compiled	[CE]  	1	None	replace
8	[BUG]  [BUGGY]  final  ArrayList  <  String>  set  =  new  ArrayList  <  String>(header.size());  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  ArrayList  <  String>  set  =  new  ArrayList  <  String>(header.size());  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  ArrayList  <  String>  set  =  new  ArrayList  <  String>(header.size());	  final    ArrayList    <    String>    set    =    new    ArrayList    <    String>(header.length);    	non-compiled	[CE]  	1	None	replace
9	[BUG]  [BUGGY]  final  java.util.ArrayList  <  String>  set  =  new  java.util.ArrayList  <  String>(header.length);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  java.util.ArrayList  <  String>  set  =  new  java.util.ArrayList  <  String>(header.length);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  java.util.ArrayList  <  String>  set  =  new  java.util.ArrayList  <  String>(header.length);	  final    ArrayList    <    String>    set    =    new    ArrayList    <    String>(header.length);    	non-compiled	[CE]  	1	None	replace
10	[BUG]  [BUGGY]  final  ArrayList  <  String>  set  =  new  ArrayList  <  String>(header.length,  quoteChar);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  ArrayList  <  String>  set  =  new  ArrayList  <  String>(header.length,  quoteChar);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  ArrayList  <  String>  set  =  new  ArrayList  <  String>(header.length,  quoteChar);	  final    ArrayList    <    String>    set    =    new    ArrayList    <    String>(header.length);    	non-compiled	[CE]  	1	None	replace
11	[BUG]  [BUGGY]  final  ArrayList  <  String>  set  =  new  ArrayList  <  String>(header.length  +  2);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  ArrayList  <  String>  set  =  new  ArrayList  <  String>(header.length  +  2);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  ArrayList  <  String>  set  =  new  ArrayList  <  String>(header.length  +  2);	  final    ArrayList    <    String>    set    =    new    ArrayList    <    String>(header.length);    	non-compiled	[CE]  	1	None	replace
12	[BUG]  [BUGGY]  final  LinkedList  <  String>  set  =  new  LinkedList  <  String>(header.length);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  LinkedList  <  String>  set  =  new  LinkedList  <  String>(header.length);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  LinkedList  <  String>  set  =  new  LinkedList  <  String>(header.length);	  final    List    <    String>    set    =    new    ArrayList    <    String>(header.length);    	non-compiled	[CE]  	3	None	replace
13	[BUG]  [BUGGY]  final  Set  <  String>  set  =  new  LinkedHashSet  <  String>(header.length  +  1);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  Set  <  String>  set  =  new  LinkedHashSet  <  String>(header.length  +  1);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  Set  <  String>  set  =  new  LinkedHashSet  <  String>(header.length  +  1);	  final    Set    <    String>    set    =    new    LinkedHashSet    <    String>(header.length);    	non-compiled	[CE]  	4	None	replace
14	[BUG]  [BUGGY]  final  Set  <  String>  set  =  new  ArrayList  <  String>(header.length);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  Set  <  String>  set  =  new  ArrayList  <  String>(header.length);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  Set  <  String>  set  =  new  ArrayList  <  String>(header.length);	  final    Set    <    String>    set    =    new    LinkedHashSet    <    String>(header.length);    	non-compiled	[CE]  	4	None	replace
15	[BUG]  [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length,  commentStart);  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length,  commentStart);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  Set  <  String>  set  =  new  HashSet  <  String>(header.length,  commentStart);	  final    Set    <    String>    set    =    new    HashSet    <    String>(header.length,    quoteChar);    	non-compiled	[CE]  	6	None	replace
16	[BUG]  [BUGGY]  final  List  <  String>  set  =  new  ArrayList  <  String>(header.length,  quoteChar);  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  List  <  String>  set  =  new  ArrayList  <  String>(header.length,  quoteChar);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  List  <  String>  set  =  new  ArrayList  <  String>(header.length,  quoteChar);	  final    Set    <    String>    set    =    new    HashSet    <    String>(header.length,    quoteChar);    	non-compiled	[CE]  	6	None	replace
17	[BUG]  [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length,  quoteChar,  delimiter);  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length,  quoteChar,  delimiter);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  Set  <  String>  set  =  new  HashSet  <  String>(header.length,  quoteChar,  delimiter);	  final    Set    <    String>    set    =    new    HashSet    <    String>(header.length,    quoteChar);    	non-compiled	[CE]  	6	None	replace
18	[BUG]  [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length,  quoteChar  +  1);  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length,  quoteChar  +  1);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  Set  <  String>  set  =  new  HashSet  <  String>(header.length,  quoteChar  +  1);	  final    Set    <    String>    set    =    new    HashSet    <    String>(header.length,    quoteChar);    	non-compiled	[CE]  	6	None	replace
19	[BUG]  [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(c.length,  quoteChar);  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(c.length,  quoteChar);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  Set  <  String>  set  =  new  HashSet  <  String>(c.length,  quoteChar);	  final    Set    <    String>    set    =    new    HashSet    <    String>(header.length,    quoteChar);    	non-compiled	[CE]  	6	None	replace
20	[BUG]  [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length  -  2);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length  -  2);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  Set  <  String>  set  =  new  HashSet  <  String>(header.length  -  2);	  final    Set    <    String>    set    =    new    HashSet    <    String>(header.length    -    1);    	non-compiled	[CE]  	5	None	replace
21	[BUG]  [BUGGY]  final  ArrayList  <  String>  set  =  new  ArrayList  <  String>(header.length  -  1);  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  ArrayList  <  String>  set  =  new  ArrayList  <  String>(header.length  -  1);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  ArrayList  <  String>  set  =  new  ArrayList  <  String>(header.length  -  1);	  final    Set    <    String>    set    =    new    HashSet    <    String>(header.length    -    1);    	non-compiled	[CE]  	5	None	replace
22	[BUG]  [BUGGY]  final  List  <  String>  set  =  new  ArrayList  <  String>(header.length  -  1);  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  List  <  String>  set  =  new  ArrayList  <  String>(header.length  -  1);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  List  <  String>  set  =  new  ArrayList  <  String>(header.length  -  1);	  final    Set    <    String>    set    =    new    HashSet    <    String>(header.length    -    1);    	non-compiled	[CE]  	5	None	replace
23	[BUG]  [BUGGY]  final  Set  <  String>  set  =  new  LinkedHashSet  <  String>(header.length  -  1);  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  Set  <  String>  set  =  new  LinkedHashSet  <  String>(header.length  -  1);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  Set  <  String>  set  =  new  LinkedHashSet  <  String>(header.length  -  1);	  final    Set    <    String>    set    =    new    HashSet    <    String>(header.length    -    1);    	non-compiled	[CE]  	5	None	replace
24	[BUG]  [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length  -  3);  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length  -  3);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  Set  <  String>  set  =  new  HashSet  <  String>(header.length  -  3);	  final    Set    <    String>    set    =    new    HashSet    <    String>(header.length    -    1);    	non-compiled	[CE]  	5	None	replace
25	[BUG]  [BUGGY]  final  Set  <  String>  set  =  new  TreeSet  <  String>(header.length  -  1);  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  Set  <  String>  set  =  new  TreeSet  <  String>(header.length  -  1);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  Set  <  String>  set  =  new  TreeSet  <  String>(header.length  -  1);	  final    Set    <    String>    set    =    new    HashSet    <    String>(header.length    -    1);    	non-compiled	[CE]  	5	None	replace
26	[BUG]  [BUGGY]  Character  header  =  getCharacter();  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  Character  header  =  getCharacter();  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	Character  header  =  getCharacter();	      	non-compiled	[CE]  	7	None	replace
27	[BUG]  [BUGGY]  Character  c  =  getCharacter();  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  Character  c  =  getCharacter();  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	Character  c  =  getCharacter();	      	non-compiled	[CE]  	7	None	replace
28	[BUG]  [BUGGY]  Character[]  header  =  quoteChar.getHeaders();  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  Character[]  header  =  quoteChar.getHeaders();  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	Character[]  header  =  quoteChar.getHeaders();	      	non-compiled	[CE]  	7	None	replace
29	[BUG]  [BUGGY]  Character[]  header  =  getHeader(c);  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  Character[]  header  =  getHeader(c);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	Character[]  header  =  getHeader(c);	      	non-compiled	[CE]  	7	None	replace
30	[BUG]  [BUGGY]  Character[]  header  =  quoteChar(c);  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  Character[]  header  =  quoteChar(c);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	Character[]  header  =  quoteChar(c);	      	non-compiled	[CE]  	7	None	replace
31	[BUG]  [BUGGY]  Character[]  header  =  quoteChar.getHeader();  [CE]  [FE]                              java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  Character[]  header  =  quoteChar.getHeader();  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	Character[]  header  =  quoteChar.getHeader();	      	non-compiled	[CE]  	7	None	replace
32	[BUG]  [BUGGY]  Character[]  header  =  getCharacters();  [CE]  [FE]                                java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  Character[]  header  =  getCharacters();  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	Character[]  header  =  getCharacters();	      	non-compiled	[CE]  	7	None	replace
33	[BUG]  [BUGGY]  final  Set  <  String>  set  =  new  TreeSet  <  String>(header.length  +  1);  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  Set  <  String>  set  =  new  TreeSet  <  String>(header.length  +  1);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  Set  <  String>  set  =  new  TreeSet  <  String>(header.length  +  1);	  final    Set    <    String>    set    =    new    TreeSet    <    String>(header.length);    	non-compiled	[CE]  	9	None	replace
34	[BUG]  [BUGGY]  final  ArrayList  <  String>  set  =  new  TreeSet  <  String>(header.length);  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  ArrayList  <  String>  set  =  new  TreeSet  <  String>(header.length);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  ArrayList  <  String>  set  =  new  TreeSet  <  String>(header.length);	  final    Set    <    String>    set    =    new    TreeSet    <    String>(header.length);    	non-compiled	[CE]  	9	None	replace
35	[BUG]  [BUGGY]  final  Set  <  String>  set  =  new  TreeSet  <  String>(header.length,  quoteChar);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  Set  <  String>  set  =  new  TreeSet  <  String>(header.length,  quoteChar);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  Set  <  String>  set  =  new  TreeSet  <  String>(header.length,  quoteChar);	  final    Set    <    String>    set    =    new    TreeSet    <    String>(header.length);    	non-compiled	[CE]  	9	None	replace
36	[BUG]  [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length  +  2);  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length  +  2);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  Set  <  String>  set  =  new  HashSet  <  String>(header.length  +  2);	  final    Set    <    String>    set    =    new    HashSet    <    String>(header.length    +    1);    	non-compiled	[CE]  	2	None	replace
37	[BUG]  [BUGGY]  final  List  <  String>  set  =  new  ArrayList  <  String>(header.length  +  1);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  List  <  String>  set  =  new  ArrayList  <  String>(header.length  +  1);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  List  <  String>  set  =  new  ArrayList  <  String>(header.length  +  1);	  final    Set    <    String>    set    =    new    HashSet    <    String>(header.length    +    1);    	non-compiled	[CE]  	2	None	replace
38	[BUG]  [BUGGY]  final  Set  <  String>  set  =  new  LinkedList  <  String>(header.length);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  Set  <  String>  set  =  new  LinkedList  <  String>(header.length);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  Set  <  String>  set  =  new  LinkedList  <  String>(header.length);	  final    List    <    String>    set    =    new    ArrayList    <    String>(header.length);    	non-compiled	[CE]  	3	None	replace
39	[BUG]  [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length  -  4);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length  -  4);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  Set  <  String>  set  =  new  HashSet  <  String>(header.length  -  4);	  final    Set    <    String>    set    =    new    HashSet    <    String>(header.length    -    1);    	non-compiled	[CE]  	5	None	replace
40	[BUG]  [BUGGY]  Character[]  header  =  quoteChar.split( "n ");  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  Character[]  header  =  quoteChar.split( "n ");  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	Character[]  header  =  quoteChar.split( "n ");	      	non-compiled	[CE]  	7	None	replace
41	[BUG]  [BUGGY]  Character  header  =  getCharacter(c);  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  Character  header  =  getCharacter(c);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	Character  header  =  getCharacter(c);	      	non-compiled	[CE]  	7	None	replace
42	[BUG]  [BUGGY]  Character  header  =(Character)getCSVFormat();  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  Character  header  =(Character)getCSVFormat();  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	Character  header  =(Character)getCSVFormat();	      	non-compiled	[CE]  	7	None	replace
43	[BUG]  [BUGGY]  Character[]  header  =  quoteChar.split( "u ");  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  Character[]  header  =  quoteChar.split( "u ");  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	Character[]  header  =  quoteChar.split( "u ");	      	non-compiled	[CE]  	7	None	replace
44	[BUG]  [BUGGY]  final  List  <  String>  set  =  new  TreeSet  <  String>(header.length);  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  List  <  String>  set  =  new  TreeSet  <  String>(header.length);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  List  <  String>  set  =  new  TreeSet  <  String>(header.length);	  final    Set    <    String>    set    =    new    TreeSet    <    String>(header.length);    	non-compiled	[CE]  	9	None	replace
45	[BUG]  [BUGGY]  final  Set  <  String>  set  =  new  TreeSet  <  String>(header.length,  header.length);  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  Set  <  String>  set  =  new  TreeSet  <  String>(header.length,  header.length);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  Set  <  String>  set  =  new  TreeSet  <  String>(header.length,  header.length);	  final    Set    <    String>    set    =    new    TreeSet    <    String>(header.length);    	non-compiled	[CE]  	9	None	replace
46	[BUG]  [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length  /  1);  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length  /  1);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  Set  <  String>  set  =  new  HashSet  <  String>(header.length  /  1);	  final    Set    <    String>    set    =    new    HashSet    <    String>(header.length    +    1);    	non-compiled	[CE]  	2	None	replace
47	[BUG]  [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(header,  quoteChar);  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(header,  quoteChar);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  Set  <  String>  set  =  new  HashSet  <  String>(header,  quoteChar);	  final    Set    <    String>    set    =    new    HashSet    <    String>(header.length,    quoteChar);    	non-compiled	[CE]  	6	None	replace
48	[BUG]  [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length,  escapeChar);  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length,  escapeChar);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  Set  <  String>  set  =  new  HashSet  <  String>(header.length,  escapeChar);	  final    Set    <    String>    set    =    new    HashSet    <    String>(header.length,    quoteChar);    	non-compiled	[CE]  	6	None	replace
49	[BUG]  [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length,  quoteChar.length);  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length,  quoteChar.length);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  Set  <  String>  set  =  new  HashSet  <  String>(header.length,  quoteChar.length);	  final    Set    <    String>    set    =    new    HashSet    <    String>(header.length,    quoteChar);    	non-compiled	[CE]  	6	None	replace
50	[BUG]  [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(header,  header.length);  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(header,  header.length);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  Set  <  String>  set  =  new  HashSet  <  String>(header,  header.length);	  final    Set    <    String>    set    =    new    HashSet    <    String>(header.length,    header.length);    	non-compiled	[CE]  	8	None	replace
51	[BUG]  [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length  *  1);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length  *  1);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  Set  <  String>  set  =  new  HashSet  <  String>(header.length  *  1);	  final    Set    <    String>    set    =    new    HashSet    <    String>(header.length    -    1);    	non-compiled	[CE]  	5	None	replace
52	[BUG]  [BUGGY]  ArrayList  <  String>  set  =  new  ArrayList  <  String>(header.length);  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  ArrayList  <  String>  set  =  new  ArrayList  <  String>(header.length);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	ArrayList  <  String>  set  =  new  ArrayList  <  String>(header.length);	  final    ArrayList    <    String>    set    =    new    ArrayList    <    String>(header.length);    	non-compiled	[CE]  	1	None	replace
53	[BUG]  [BUGGY]  Character  header  =  getHeader(c);  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  Character  header  =  getHeader(c);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	Character  header  =  getHeader(c);	      	non-compiled	[CE]  	7	None	replace
54	[BUG]  [BUGGY]  String  header  =  quoteCharacter.charAt(quoteStart);  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  String  header  =  quoteCharacter.charAt(quoteStart);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	String  header  =  quoteCharacter.charAt(quoteStart);	      	non-compiled	[CE]  	7	None	replace
55	[BUG]  [BUGGY]  Character  header  =  quoteCharacter.charAt(quoteStart);  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  Character  header  =  quoteCharacter.charAt(quoteStart);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	Character  header  =  quoteCharacter.charAt(quoteStart);	      	non-compiled	[CE]  	7	None	replace
56	[BUG]  [BUGGY]  Character[]  header  =  quoteCharacters.get(c);  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  Character[]  header  =  quoteCharacters.get(c);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	Character[]  header  =  quoteCharacters.get(c);	      	non-compiled	[CE]  	7	None	replace
57	[BUG]  [BUGGY]  Character[]  header  =  quoteChar(c,  escape);  [CE]  [FE]                            java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  Character[]  header  =  quoteChar(c,  escape);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	Character[]  header  =  quoteChar(c,  escape);	      	non-compiled	[CE]  	7	None	replace
58	[BUG]  [BUGGY]  final  Set  <  String>  set  =  new  TreeSet  <  String>(header.length,  commentStart);  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  Set  <  String>  set  =  new  TreeSet  <  String>(header.length,  commentStart);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  Set  <  String>  set  =  new  TreeSet  <  String>(header.length,  commentStart);	  final    Set    <    String>    set    =    new    TreeSet    <    String>(header.length);    	non-compiled	[CE]  	9	None	replace
59	[BUG]  [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length,  c);  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (escape  !=  null  &&  escape.equals(commentStart))  {  throw  new  IllegalStateException(     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {    [BUGGY]  final  Set  <  String>  set  =  new  HashSet  <  String>(header.length,  c);  [BUGGY]    set.addAll(Arrays.asList(header));  if  (set.size()  !=  header.length)  {  throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	666	666	1	replace	final  Set  <  String>  set  =  new  HashSet  <  String>(header.length,  c);	  final    Set    <    String>    set    =    new    HashSet    <    String>(header.length,    quoteChar);    	non-compiled	[CE]  	6	None	replace
