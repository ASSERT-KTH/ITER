bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (set.size()  >  header.length)  {  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  if  (set.size()  >  header.length)  {  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if  (set.size()  >  header.length)  {	  if    (set.size()    >=    header.length)    {    	non-compiled	[CE]  	2	None	replace
2	[BUG]  [BUGGY]  if(set.size()  ==  header.length  ||  set.size()!=  header.length)  {  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  if(set.size()  ==  header.length  ||  set.size()!=  header.length)  {  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  ==  header.length  ||  set.size()!=  header.length)  {	  if(set.size()!=    header.length    ||    set.size()!=    header.length)    {    	non-compiled	[CE]  	6	None	replace
3	[BUG]  [BUGGY]  if(set.size()  ==  header.length  ||  set.size()  ==  header.length)  {  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  if(set.size()  ==  header.length  ||  set.size()  ==  header.length)  {  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  ==  header.length  ||  set.size()  ==  header.length)  {	  if(set.size()!=    header.length    ||    set.size()!=    header.length)    {    	non-compiled	[CE]  	6	None	replace
4	[BUG]  [BUGGY]  if(set.size()!=  header.length  &&  set.size()!=  header.length)  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  if(set.size()!=  header.length  &&  set.size()!=  header.length)  {  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()!=  header.length  &&  set.size()!=  header.length)  {	  if(set.size()!=    header.length    ||    set.size()!=    header.length)    {    	non-compiled	[CE]  	6	None	replace
5	[BUG]  [BUGGY]  if(header.size()!=  set.length  ||  set.size()!=  header.length)  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  if(header.size()!=  set.length  ||  set.size()!=  header.length)  {  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(header.size()!=  set.length  ||  set.size()!=  header.length)  {	  if(set.size()!=    header.length    ||    set.size()!=    header.length)    {    	non-compiled	[CE]  	6	None	replace
6	[BUG]  [BUGGY]  if(set.size()!=  header.length  ||  set.size()  >=  header.length)  {  [CE]  [FE]                java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  if(set.size()!=  header.length  ||  set.size()  >=  header.length)  {  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()!=  header.length  ||  set.size()  >=  header.length)  {	  if(set.size()!=    header.length    ||    set.size()!=    header.length)    {    	non-compiled	[CE]  	6	None	replace
7	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	String[]  header  =  set.toArray(new  String[set.size()  ]);	      	non-compiled	[CE]  	4	None	replace
8	[BUG]  [BUGGY]  set.addAll(Arrays.asList(header));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  set.addAll(Arrays.asList(header));  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	set.addAll(Arrays.asList(header));	      	non-compiled	[CE]  	4	None	replace
9	[BUG]  [BUGGY]  Set  <  String>  set  =  Sets.newHashSet();  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  Set  <  String>  set  =  Sets.newHashSet();  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	Set  <  String>  set  =  Sets.newHashSet();	      	non-compiled	[CE]  	4	None	replace
10	[BUG]  [BUGGY]  set.addAll(Arrays.asList(set));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  set.addAll(Arrays.asList(set));  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	set.addAll(Arrays.asList(set));	      	non-compiled	[CE]  	4	None	replace
11	[BUG]  [BUGGY]  set.addAll(Arrays.asList(offset));  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  set.addAll(Arrays.asList(offset));  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	set.addAll(Arrays.asList(offset));	      	non-compiled	[CE]  	4	None	replace
12	[BUG]  [BUGGY]  set.addAll(Arrays.asList(c));  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  set.addAll(Arrays.asList(c));  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	set.addAll(Arrays.asList(c));	      	non-compiled	[CE]  	4	None	replace
13	[BUG]  [BUGGY]  final  Set  <  String>  set  =  Sets.newHashSet();  [CE]  [FE]                          java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  final  Set  <  String>  set  =  Sets.newHashSet();  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	final  Set  <  String>  set  =  Sets.newHashSet();	      	non-compiled	[CE]  	4	None	replace
14	[BUG]  [BUGGY]  if  (header.size()!=  set.length  ||  set.size()  ==  header.length)  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  if  (header.size()!=  set.length  ||  set.size()  ==  header.length)  {  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if  (header.size()!=  set.length  ||  set.size()  ==  header.length)  {	  if    (set.size()!=    header.length    ||    set.size()    ==    header.length)    {    	non-compiled	[CE]  	3	None	replace
15	[BUG]  [BUGGY]  if(set.size()  ==  commentStart.length)  {  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  if(set.size()  ==  commentStart.length)  {  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  ==  commentStart.length)  {	  if    (set.size()    ==    header.length)    {    	non-compiled	[CE]  	1	None	replace
16	[BUG]  [BUGGY]  if(set.size()  ==  header.length  -  1)  {  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  if(set.size()  ==  header.length  -  1)  {  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  ==  header.length  -  1)  {	  if    (set.size()    ==    header.length)    {    	non-compiled	[CE]  	1	None	replace
17	[BUG]  [BUGGY]  if  (header.size()  ==  set.length)  {  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  if  (header.size()  ==  set.length)  {  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if  (header.size()  ==  set.length)  {	  if    (header.size()!=    set.length)    {    	non-compiled	[CE]  	5	None	replace
18	[BUG]  [BUGGY]  if  (list.size()!=  set.length)  {  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  if  (list.size()!=  set.length)  {  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if  (list.size()!=  set.length)  {	  if    (header.size()!=    set.length)    {    	non-compiled	[CE]  	5	None	replace
19	[BUG]  [BUGGY]  if  (!set.size()!=  header.length)  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  if  (!set.size()!=  header.length)  {  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if  (!set.size()!=  header.length)  {	  if    (header.size()!=    set.length)    {    	non-compiled	[CE]  	5	None	replace
20	[BUG]  [BUGGY]  if(header.size()!=  header.length  ||  set.size()!=  header.length)  {  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  if(header.size()!=  header.length  ||  set.size()!=  header.length)  {  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(header.size()!=  header.length  ||  set.size()!=  header.length)  {	  if(set.size()!=    header.length    ||    set.size()!=    header.length)    {    	non-compiled	[CE]  	6	None	replace
21	[BUG]  [BUGGY]  if(header.size()  >=  set.length)  {  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  if(header.size()  >=  set.length)  {  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(header.size()  >=  set.length)  {	  if    (header.size()!=    set.length)    {    	non-compiled	[CE]  	5	None	replace
22	[BUG]  [BUGGY]  if  (header.size()!=  header.length  ||  set.size()  ==  header.length)  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  if  (header.size()!=  header.length  ||  set.size()  ==  header.length)  {  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if  (header.size()!=  header.length  ||  set.size()  ==  header.length)  {	  if    (set.size()!=    header.length    ||    set.size()    ==    header.length)    {    	non-compiled	[CE]  	3	None	replace
23	[BUG]  [BUGGY]  if(set.size()  ==  header.length  ||  set.size()  >  header.length)  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  if(set.size()  ==  header.length  ||  set.size()  >  header.length)  {  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  ==  header.length  ||  set.size()  >  header.length)  {	  if    (set.size()!=    header.length    ||    set.size()    ==    header.length)    {    	non-compiled	[CE]  	3	None	replace
24	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  Set  <  String>  set  =  new  HashSet  <  String>(header.length);  set.addAll(Arrays.asList(header));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  Set  <  String>  set  =  new  HashSet  <  String>(header.length);  set.addAll(Arrays.asList(header));  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	String[]  header  =  set.toArray(new  String[set.size()  ]);  Set  <  String>  set  =  new  HashSet  <  String>(header.length);  set.addAll(Arrays.asList(header));	      	non-compiled	[CE]  	4	None	replace
25	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  len  =  header.length;  i  <  len;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(  [CE]  [FE]                java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  len  =  header.length;  i  <  len;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  len  =  header.length;  i  <  len;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(	      	non-compiled	[CE]  	4	None	replace
26	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(	      	non-compiled	[CE]  	4	None	replace
27	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(header));  }  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(header));  }  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(header));  }	      	non-compiled	[CE]  	4	None	replace
28	[BUG]  [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  length  =  header.length;  i  <  length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  length  =  header.length;  i  <  length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	String[]  header  =  set.toArray(new  String[set.size()  ]);  for(int  i  =  0,  length  =  header.length;  i  <  length;  ++i)  {  final  Set  <  String>  set  =  set.get(i);  set.addAll(Arrays.asList(	      	non-compiled	[CE]  	4	None	replace
29	[BUG]  [BUGGY]  if(set.size()  ==  header.length  ||  set.contains(header.length))  {  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  if(set.size()  ==  header.length  ||  set.contains(header.length))  {  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  ==  header.length  ||  set.contains(header.length))  {	  if    (set.size()    ==    header.length)    {    	non-compiled	[CE]  	1	None	replace
30	[BUG]  [BUGGY]  if(set.size()  >=  header.length  ||  set.size()!=  header.length)  {  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  if(set.size()  >=  header.length  ||  set.size()!=  header.length)  {  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  >=  header.length  ||  set.size()!=  header.length)  {	  if(set.size()!=    header.length    ||    set.size()!=    header.length)    {    	non-compiled	[CE]  	6	None	replace
31	[BUG]  [BUGGY]  if(s.size()!=  header.length  ||  set.size()!=  header.length)  {  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  if(s.size()!=  header.length  ||  set.size()!=  header.length)  {  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(s.size()!=  header.length  ||  set.size()!=  header.length)  {	  if(set.size()!=    header.length    ||    set.size()!=    header.length)    {    	non-compiled	[CE]  	6	None	replace
32	[BUG]  [BUGGY]  if(quoteChar!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }  [CE]  [FE]              java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  if(quoteChar!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(quoteChar!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }	      	non-compiled	[CE]  	4	None	replace
33	[BUG]  [BUGGY]  if(quoteChar!=  null)  {  final  String[]  header  =  quoteChar.toLowerCase();  set.addAll(Arrays.asList(header));  }  [CE]  [FE]                java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  if(quoteChar!=  null)  {  final  String[]  header  =  quoteChar.toLowerCase();  set.addAll(Arrays.asList(header));  }  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(quoteChar!=  null)  {  final  String[]  header  =  quoteChar.toLowerCase();  set.addAll(Arrays.asList(header));  }	      	non-compiled	[CE]  	4	None	replace
34	[BUG]  [BUGGY]  if(quoteChar!=  null)  {  final  String[]  header  =  quoteChar.toLowerCase();  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(header));  }  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  if(quoteChar!=  null)  {  final  String[]  header  =  quoteChar.toLowerCase();  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(header));  }  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(quoteChar!=  null)  {  final  String[]  header  =  quoteChar.toLowerCase();  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(header));  }	      	non-compiled	[CE]  	4	None	replace
35	[BUG]  [BUGGY]  if(quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  set.addAll(Arrays.asList(header));  }  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  if(quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  set.addAll(Arrays.asList(header));  }  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  set.addAll(Arrays.asList(header));  }	      	non-compiled	[CE]  	4	None	replace
36	[BUG]  [BUGGY]  if(quoteChar!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(header));  }  [CE]  [FE]                      java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  if(quoteChar!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(header));  }  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(quoteChar!=  null)  {  final  String[]  header  =  set.toArray(new  String[set.size()  ]);  set.addAll(Arrays.asList(header));  }  else  {  set.addAll(Arrays.asList(header));  }	      	non-compiled	[CE]  	4	None	replace
37	[BUG]  [BUGGY]  if(quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  set.addAll(Arrays.asList(  [CE]  [FE]                        java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  if(quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  set.addAll(Arrays.asList(  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(quoteChar!=  null)  {  final  String[]  header  =  new  String[set.size()  ];  for(int  i  =  0;  i  <  header.length;  ++i)  {  final  String[]  header  =  header.toString();  set.addAll(Arrays.asList(	      	non-compiled	[CE]  	4	None	replace
38	[BUG]  [BUGGY]  if(set.size()  <  header.length)  {  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  if(set.size()  <  header.length)  {  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  <  header.length)  {	  if    (set.size()    ==    header.length)    {    	non-compiled	[CE]  	1	None	replace
39	[BUG]  [BUGGY]  if(set.size()!=  header.length  ||  set.size()  <  header.length)  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  if(set.size()!=  header.length  ||  set.size()  <  header.length)  {  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()!=  header.length  ||  set.size()  <  header.length)  {	  if    (set.size()!=    header.length    ||    set.size()    ==    header.length)    {    	non-compiled	[CE]  	3	None	replace
40	[BUG]  [BUGGY]  if(set.size()  >=  header.length  ||  set.size()  ==  header.length)  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception    [CONTEXT]     "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentStart  +     "')   ");  }  if  (escape  ==  null  &&  quotePolicy  ==  Quote.NONE)  {  throw  new  IllegalStateException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }  if  (header  !=  null)  {  final  Set<String>  set  =  new  HashSet<String>(header.length);  set.addAll(Arrays.asList(header));    [BUGGY]  if(set.size()  >=  header.length  ||  set.size()  ==  header.length)  {  [BUGGY]    throw  new  IllegalStateException(   "The  header  contains  duplicate  names:     "  +  Arrays.toString(header));  }  }  }  [CLASS]  CSVFormat  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  Quote  quotePolicy  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  skipHeaderRecord  Set  set  Character  c  commentStart  escape  quoteChar  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  other  String  nullString  recordSeparator  String[]  header  long  serialVersionUID  	projects/Csv8/src/main/java/org/apache/commons/csv/CSVFormat.java	0.7071067811865475	668	668	1	replace	if(set.size()  >=  header.length  ||  set.size()  ==  header.length)  {	  if    (set.size()!=    header.length    ||    set.size()    ==    header.length)    {    	non-compiled	[CE]  	3	None	replace
